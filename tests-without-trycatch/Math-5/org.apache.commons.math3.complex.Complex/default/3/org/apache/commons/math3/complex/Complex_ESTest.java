/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:43:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3274.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.conjugate();
      complex2.nthRoot(2669);
      Complex complex3 = complex1.createComplex(2669, Double.POSITIVE_INFINITY);
      complex3.abs();
      complex2.NaN.log();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.INF;
      complex2.multiply(complex0);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.INF;
      complex7.divide(complex6);
      complex7.multiply(complex1);
      complex4.pow((double) 2669);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 20.0);
      complex0.nthRoot(7);
      complex1.readResolve();
      Complex complex2 = complex0.sqrt1z();
      complex2.multiply(7);
      Complex.valueOf(1.25999984124E-7);
      complex0.atan();
      complex1.I.cosh();
      Complex complex3 = new Complex(6.921408902957676E-100, 4954.389);
      complex1.tan();
      Complex complex4 = complex1.exp();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 5054.0677765);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-20.0), 5054.0677765);
      Complex complex3 = complex1.NaN.createComplex((-20.0), 5054.0677765);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.ZERO.cosh();
      complex4.I.divide(complex1);
      Complex complex6 = complex1.ONE.negate();
      complex5.INF.getArgument();
      complex1.ONE.sin();
      Complex complex7 = complex5.ZERO.multiply((-1));
      complex7.INF.atan();
      complex0.toString();
      Complex complex8 = complex1.cosh();
      complex8.ZERO.conjugate();
      complex0.reciprocal();
      complex6.log();
      Complex complex9 = complex5.cos();
      complex9.pow((double) (-1));
      Complex complex10 = complex3.multiply((-1821.432026039137));
      complex10.NaN.sin();
      complex10.atan();
      complex3.abs();
      complex10.add((-1821.432026039137));
      Complex complex11 = Complex.valueOf((-1821.432026039137));
      complex11.I.sqrt1z();
      Complex complex12 = complex5.multiply(complex1);
      Complex complex13 = complex4.add(complex12);
      Complex complex14 = complex0.tanh();
      complex14.toString();
      complex13.multiply(complex2);
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(17.20949091652762);
      Complex complex2 = complex0.subtract(complex1);
      complex2.readResolve();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.subtract(complex1);
      complex4.acos();
      complex0.hashCode();
      complex2.multiply((-1280));
      Complex.valueOf(Double.NaN, 9.453598391231829E-8);
      Complex.valueOf(Double.NaN);
      Complex complex5 = complex3.cosh();
      complex5.tanh();
      Complex complex6 = new Complex(Double.NaN, 3993.486850998732);
      complex0.abs();
      complex4.pow((-878.8036580200552));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.conjugate();
      complex2.ZERO.tanh();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex1.NaN.reciprocal();
      complex5.I.toString();
      Complex complex6 = complex0.I.createComplex((-3423.1), (-3423.1));
      complex0.exp();
      Complex complex7 = complex6.NaN.divide(770.4586031828948);
      Complex complex8 = complex7.I.sinh();
      complex8.NaN.pow(complex1);
      complex1.reciprocal();
      Complex complex9 = Complex.NaN;
      complex6.I.add((-2.2677272333821516E-7));
      Complex complex10 = Complex.I;
      complex1.INF.multiply(complex10);
      complex6.divide(complex9);
      Complex complex11 = complex3.negate();
      complex4.divide((-3423.1));
      complex7.nthRoot(1619);
      complex11.asin();
      complex6.multiply(17.209493831766878);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
      complex0.readResolve();
      complex0.reciprocal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2430.225865407782);
      complex0.hashCode();
      complex0.sqrt1z();
      complex0.multiply(1855);
      Complex.valueOf(4146.453913783678, (-4218.9550054));
      Complex.valueOf(1539.39074562);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.tanh();
      Complex complex4 = new Complex(0.41421356237309515, Double.POSITIVE_INFINITY);
      complex3.getImaginary();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.multiply(0.0);
      complex0.pow(complex2);
      Complex complex3 = Complex.valueOf(20.0, (-4021.649103));
      Complex complex4 = complex2.sqrt1z();
      complex2.ONE.multiply(complex0);
      complex4.hashCode();
      complex0.tanh();
      Complex complex5 = complex3.tanh();
      complex5.add(20.0);
      complex4.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.cos();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.subtract(Double.NaN);
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.nthRoot(2977);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2843.00910649407);
      Complex complex2 = complex0.pow(complex1);
      Complex.valueOf(1792.84566429763, (-328.4457));
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.sqrt1z();
      complex2.hashCode();
      complex1.tanh();
      Complex complex5 = complex1.tanh();
      complex3.exp();
      Complex complex6 = complex2.add(complex4);
      Complex complex7 = Complex.ZERO;
      complex7.readResolve();
      Complex complex8 = Complex.valueOf((-1.4015110811648513E195), (-3.5901655945224663E-10));
      Complex complex9 = complex5.tan();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex7.reciprocal();
      Object object0 = new Object();
      Object object1 = new Object();
      complex2.equals(object1);
      complex3.readResolve();
      complex10.NaN.abs();
      complex9.abs();
      complex6.divide(1792.84566429763);
      complex8.sqrt1z();
      complex10.readResolve();
      complex11.divide((-328.4457));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.8813735870195429));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.subtract((-0.8813735870195429));
      complex2.INF.cosh();
      complex2.abs();
      complex2.ONE.cosh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.I.conjugate();
      complex0.INF.readResolve();
      Complex complex6 = complex5.I.tanh();
      complex6.I.nthRoot(2405);
      complex0.ONE.add(2843.00910649407);
      Complex complex7 = complex3.createComplex(2843.00910649407, Double.POSITIVE_INFINITY);
      complex7.readResolve();
      complex4.getField();
      complex3.NaN.pow(Double.POSITIVE_INFINITY);
      complex0.ZERO.hashCode();
      Complex complex8 = complex5.pow(Double.POSITIVE_INFINITY);
      complex3.acos();
      Complex complex9 = complex3.log();
      complex9.ONE.divide(6.283185307179586);
      Complex complex10 = complex8.atan();
      complex8.toString();
      Complex complex11 = complex10.createComplex((-1730.9353274427178), 2607.0);
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-253.508497461), (-2697.48868963));
      complex0.ONE.sinh();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.sqrt1z();
      complex0.ONE.getArgument();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex1.add((-17.20949091652762));
      Complex complex6 = complex3.conjugate();
      complex6.ONE.multiply(1229399539);
      complex6.ZERO.conjugate();
      complex6.ONE.multiply(complex2);
      Complex complex7 = complex2.atan();
      Complex complex8 = complex5.negate();
      complex3.abs();
      complex2.getField();
      Complex complex9 = complex5.NaN.multiply(complex4);
      complex9.ONE.hashCode();
      complex8.NaN.divide(complex0);
      complex8.pow((-964.7302));
      complex4.NaN.nthRoot(17);
      complex0.ZERO.divide((-964.7302));
      complex8.tanh();
      complex4.getField();
      Complex complex10 = complex7.sin();
      complex7.pow(complex10);
      complex3.reciprocal();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 271.72044895908);
      Complex complex1 = complex0.multiply(0.0);
      complex1.pow(complex0);
      Complex complex2 = Complex.valueOf(271.72044895908, 271.72044895908);
      Complex complex3 = complex0.asin();
      complex1.sqrt1z();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.subtract((-921.57));
      Complex complex6 = complex2.sqrt1z();
      complex6.getField();
      complex5.ZERO.atan();
      Complex.valueOf(Double.NaN, 271.72044895908);
      complex0.cosh();
      Complex complex7 = complex4.tanh();
//      try { 
        complex7.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN, 399.0);
      complex1.cosh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.I.divide(complex1);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2843.00910649407, (-328.4457));
      complex0.getImaginary();
      Complex complex1 = complex0.asin();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1024.32, 1.0612750619050357);
      Complex complex1 = complex0.subtract((-20.0));
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf(1024.32, (-20.0));
      complex3.getReal();
      complex3.tan();
      Complex complex4 = complex0.sin();
      complex4.INF.add((-119.991000731417));
      Complex complex5 = Complex.I;
      complex2.divide(Double.NaN);
      Complex.valueOf((-20.0));
      Complex complex6 = Complex.ZERO;
      complex1.pow(complex2);
      Complex complex7 = complex6.pow(complex1);
      complex7.subtract((-1.0));
      Complex complex8 = new Complex((-2225.14589), Double.NaN);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2843.00910649407, 2843.00910649407);
      complex0.isInfinite();
      complex0.abs();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.exp();
      complex2.tan();
      complex3.nthRoot(4973);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = Complex.ZERO;
      complex3.INF.exp();
      complex3.nthRoot(96);
      Complex complex5 = complex4.INF.atan();
      complex5.NaN.exp();
      Complex complex6 = (Complex)complex2.ZERO.readResolve();
      Complex complex7 = complex1.tan();
      complex0.asin();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.I;
      complex8.equals(complex9);
      Complex complex10 = complex2.ONE.add(complex7);
      Complex complex11 = Complex.valueOf(5.3393125705958075E87, 2.4747880175747574E-234);
      complex11.readResolve();
      Complex complex12 = Complex.ONE;
      complex12.abs();
      complex12.divide((-536.0925671));
      complex6.sqrt1z();
      complex10.multiply(96);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.sinh();
      complex3.readResolve();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      complex3.add(915.782376629);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = (Complex)complex0.readResolve();
      complex3.subtract(complex2);
      complex0.hashCode();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex4.tanh();
      complex8.add(complex7);
      complex9.readResolve();
      Complex complex10 = Complex.valueOf(717.7782185866, 717.7782185866);
      Complex complex11 = Complex.valueOf(717.7782185866);
      Complex complex12 = complex11.tan();
      complex10.asin();
      complex1.reciprocal();
      complex10.equals("");
      complex6.readResolve();
      Complex complex13 = Complex.NaN;
      complex13.abs();
      complex12.divide(Double.POSITIVE_INFINITY);
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 271.72044895908);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0, 271.72044895908);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex4.acos();
      complex0.hashCode();
      Complex complex7 = complex6.subtract((-921.57));
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = Complex.valueOf(271.72044895908, (-921.57));
      complex9.cosh();
      complex6.tanh();
      complex9.add(complex2);
      complex0.pow(complex7);
      complex2.add((-968.285540136));
      Complex complex10 = complex5.multiply(complex0);
      complex10.hashCode();
      complex7.getReal();
      complex6.abs();
      complex8.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2843.00910649407, (-328.4457));
      complex0.nthRoot(1);
      complex0.isInfinite();
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex2.add((double) 1);
      complex3.multiply(complex2);
      complex4.hashCode();
      complex0.getReal();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.963429563637273E139, (-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.sinh();
      complex2.readResolve();
      complex0.readResolve();
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf((-1.0));
      Complex complex7 = complex6.subtract(complex3);
      complex0.readResolve();
      Complex complex8 = complex1.subtract(complex3);
      Complex complex9 = complex0.acos();
      complex5.hashCode();
      Complex complex10 = complex8.subtract(1.1752011936438014);
      complex7.sqrt1z();
      Complex complex11 = Complex.valueOf((-1.0), 0.0);
      Complex complex12 = Complex.valueOf(1.1752011936438014);
      complex12.cosh();
      complex1.tanh();
      Complex complex13 = complex2.add(complex10);
      complex9.pow(complex3);
      complex4.add(0.0);
      Complex complex14 = Complex.valueOf(0.0);
      complex14.multiply(complex11);
      complex11.hashCode();
      complex13.getReal();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.sinh();
      Complex complex4 = (Complex)complex3.readResolve();
      complex3.readResolve();
      Complex complex5 = complex2.tanh();
      complex3.subtract(complex5);
      complex3.readResolve();
      complex4.subtract(complex3);
      Complex complex6 = complex0.acos();
      complex6.hashCode();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.cosh();
      complex8.tanh();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.I.getField();
      complex9.add(complex7);
      complex9.add(0.0);
      complex2.multiply(complex1);
      Complex complex10 = Complex.INF;
      complex10.hashCode();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(1.777477741241455, 1.777477741241455);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.valueOf(1.777477741241455, 1424.162787039595);
      Complex complex4 = complex3.exp();
      complex4.nthRoot(96);
      Complex complex5 = complex1.atan();
      complex2.exp();
      complex2.readResolve();
      Complex complex6 = Complex.ONE;
      complex6.tan();
      complex4.exp();
      complex5.reciprocal();
      Complex.valueOf((-36.0516465), (double) 96);
      complex0.readResolve();
      Complex complex7 = new Complex((-36.0516465));
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-662.35743861), (-517.0));
      Complex complex1 = complex0.cosh();
      complex0.ZERO.hashCode();
      Complex complex2 = complex1.I.log();
      complex0.reciprocal();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
//        try {
          Complex complex0 = Complex.ZERO;
          int int0 = 1431655765;
          // Undeclared exception!
          complex0.nthRoot(int0);
//        } catch(Throwable t) {
//            // Need to catch declared exceptions
//        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(1244);
      complex1.readResolve();
      complex2.subtract(complex0);
      Complex complex3 = complex2.acos();
      complex0.hashCode();
      Complex complex4 = complex3.subtract((-1.0));
      complex3.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex2.cosh();
      Complex complex7 = Complex.valueOf((-2225.14589), (-1.0));
      complex7.tanh();
      complex4.INF.atan();
      complex4.add(complex0);
      Complex complex8 = complex3.pow(complex7);
      complex4.add((-392.36319911384095));
      Complex complex9 = complex2.multiply(complex8);
      complex9.log();
      complex6.hashCode();
      complex8.getReal();
      complex7.abs();
      complex5.createComplex((-1.0), (-200.25887939276));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.INF.exp();
      complex5.ONE.pow((double) (-399));
      complex3.nthRoot(96);
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex1.tan();
      complex0.asin();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex8.reciprocal();
      complex7.equals(complex10);
      complex9.readResolve();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.reciprocal();
      Object object0 = new Object();
      Complex complex3 = Complex.valueOf((-1.4015110811648513E195));
      complex3.equals(complex1);
      complex2.abs();
      complex2.divide((-1.4015110811648513E195));
      Complex complex4 = Complex.NaN;
      complex4.sqrt1z();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 271.72044895908);
      complex0.asin();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.pow(271.72044895908);
//      try { 
        complex4.nthRoot((-28));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -28
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1175.06);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.pow((-328.4457));
      complex4.nthRoot(239);
      complex4.atan();
      complex0.readResolve();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.asin();
      complex3.exp();
      Complex complex7 = complex5.reciprocal();
      complex7.equals("{0}x{1} and {2}x{3} matrices are not subtraction compatible");
      complex6.readResolve();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.sinh();
      complex3.readResolve();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = (Complex)complex0.readResolve();
      Complex complex8 = complex2.subtract(complex6);
      Complex complex9 = complex7.acos();
      complex2.hashCode();
      complex8.subtract(0.26820653676986694);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.sqrt1z();
      Complex.valueOf(1256.18288, 0.0);
      Complex complex12 = complex6.cosh();
      complex4.tanh();
      Complex complex13 = complex11.add(complex2);
      Complex complex14 = complex13.pow(complex2);
      complex14.I.add(complex1);
      Complex complex15 = complex9.add(3.507754341050756E-176);
      complex15.ONE.pow(complex1);
      complex3.multiply(complex1);
      complex8.hashCode();
      complex1.getReal();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = Complex.ZERO;
      complex0.divide(complex2);
      Complex complex5 = complex1.conjugate();
      complex0.sinh();
      complex0.tan();
      complex3.multiply(1641);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = (-2602.439500788473);
      double double1 = (-1.2645600379949252E-7);
      Complex complex0 = new Complex((-2602.439500788473), (-1.2645600379949252E-7));
      Complex complex1 = complex0.sqrt();
      complex1.log();
      Complex complex2 = Complex.valueOf((-1.2645600379949252E-7));
      complex2.NaN.abs();
      int int0 = 0;
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.105749999899302E-7));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.reciprocal();
      complex2.I.abs();
      Complex complex3 = complex2.sinh();
      complex1.hashCode();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.add(complex4);
      complex3.readResolve();
      Complex complex7 = Complex.valueOf(1.0, 1.716531820904728E50);
      Complex complex8 = complex7.tan();
      complex7.asin();
      complex8.exp();
      complex3.reciprocal();
      complex1.equals(complex6);
      complex2.readResolve();
      complex7.abs();
      complex4.divide(0.0);
      Complex complex9 = Complex.INF;
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.258551497833573E-79));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(1465);
      Complex complex3 = new Complex(1465);
      complex3.multiply((-754));
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1);
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      complex1.abs();
      Complex complex2 = complex1.multiply(1262112803);
      Complex complex3 = complex1.subtract(0.23697291631767256);
      complex3.asin();
      complex3.NaN.atan();
      complex2.getReal();
      Complex complex4 = complex0.tan();
      complex2.sin();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.divide((-0.9715162566482856));
      Complex.valueOf(0.0);
      Complex complex7 = complex6.pow(complex0);
      complex7.INF.toString();
      complex0.pow(complex4);
      complex3.subtract((-2.105749999899302E-7));
      Complex complex8 = Complex.ONE;
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex.valueOf(2843.00910649407, (-328.4457));
      Complex complex0 = Complex.valueOf(0.0014399961378151586, (-328.4457));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.reciprocal();
      complex0.abs();
      Complex complex3 = new Complex(2843.00910649407, 0.7853981633974483);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.divide(7.258551497833573E-79);
      Complex complex6 = complex1.multiply(complex3);
      complex1.isNaN();
      complex5.hashCode();
      complex2.multiply(115);
      complex1.readResolve();
      complex2.hashCode();
      complex4.readResolve();
      complex0.isNaN();
      Complex complex7 = complex0.pow((-328.4457));
      complex7.negate();
      complex7.add(complex6);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex0.multiply((-399));
      Complex complex6 = complex4.INF.exp();
      complex6.ONE.pow((double) (-399));
      complex5.abs();
      complex4.nthRoot(96);
      complex5.isInfinite();
      Complex complex7 = complex6.sqrt1z();
      complex4.toString();
      Complex complex8 = complex0.subtract(complex3);
      Complex complex9 = complex5.log();
      complex3.pow(0.0);
      complex4.sqrt();
      complex7.abs();
      Complex complex10 = complex9.tan();
      complex1.cos();
      complex9.createComplex(3371.4229165, 3.8520227881415595E166);
      complex10.multiply(1025);
      complex8.getReal();
      complex8.tan();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2430.128213906633));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.I.log();
      complex2.sqrt1z();
      Complex complex3 = Complex.INF;
      complex2.NaN.subtract(complex3);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = Complex.valueOf((-2430.128213906633), 1.0);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.tan();
      complex5.INF.subtract((-1104.1162));
      complex7.NaN.conjugate();
      Complex complex8 = complex4.INF.cos();
      complex5.sinh();
      complex2.atan();
      complex0.exp();
      complex1.readResolve();
      complex5.subtract(2011.1206860939);
      complex0.exp();
      Complex complex9 = Complex.ZERO;
      complex9.subtract((-1000.3970882));
      Complex complex10 = Complex.valueOf(2521.7319621788);
      complex10.readResolve();
      Complex complex11 = new Complex((-1104.1162), 2011.1206860939);
      complex11.getArgument();
      complex8.exp();
      Complex complex12 = new Complex(2.072875640407761);
      complex12.sinh();
      Complex complex13 = Complex.ONE;
      Complex complex14 = Complex.valueOf((-1.0953484767704112E226), (-1104.1162));
      complex8.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.subtract((-1104.1162));
      complex4.conjugate();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex4.sinh();
      complex4.isInfinite();
      complex5.I.atan();
      complex4.sqrt1z();
      complex0.toString();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex4.log();
      complex6.pow(1.1752011936438014);
      Complex complex9 = complex6.sqrt();
      complex5.abs();
      Complex complex10 = complex8.tan();
      Complex complex11 = Complex.ONE;
      complex11.cos();
      Complex complex12 = Complex.I;
      complex12.createComplex(2584.9998047811455, (-4.690417668647599E88));
      complex7.multiply((-536));
      complex9.getReal();
      complex10.tan();
      Complex complex13 = new Complex(3.8520227881415595E166);
      complex13.pow((-1104.1162));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2843.00910649407, (-328.4457));
      complex0.nthRoot(1);
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      complex1.abs();
      complex0.divide(complex1);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.tan();
      complex3.multiply(1641);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2843.00910649407, (-328.4457));
      complex0.nthRoot(1);
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      complex1.abs();
      complex1.ZERO.multiply(1);
      complex0.subtract(0.0);
      Complex complex2 = complex0.INF.asin();
      complex1.getReal();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.INF.asin();
      complex3.divide((-2302.8));
      Complex complex6 = Complex.valueOf((-2302.8));
      complex1.multiply(3010);
      complex6.isNaN();
      complex1.cos();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.552517201762272E-128));
      complex0.getReal();
      Complex complex1 = complex0.INF.add(6.28287989314225E-92);
      complex1.ONE.readResolve();
      Complex complex2 = Complex.valueOf(0.0, (-1501.9830514143734));
      Complex complex3 = complex0.INF.multiply(complex2);
      complex3.ZERO.subtract(complex1);
      Complex complex4 = complex0.divide(100.0984158);
      complex4.negate();
      Complex complex5 = Complex.valueOf(1.78482304E8, 6.283185307179586);
      complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1726.4656436, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1292.5, (-1280.558753));
      complex0.asin();
      Complex complex1 = Complex.valueOf((-1280.558753));
      complex1.INF.tanh();
      complex0.multiply(17);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.log();
      complex1.INF.readResolve();
      complex1.toString();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.log();
      complex0.getField();
      complex0.INF.tanh();
      complex2.divide(0.0);
      complex2.log();
      complex0.divide(0.0);
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1122.1812948745687));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.multiply(complex1);
      complex3.pow(complex1);
      complex1.cos();
      Complex complex4 = Complex.I;
      complex0.equals(complex4);
      complex2.tan();
      Complex complex5 = new Complex((-6.243126731995636E-8));
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add(1.4033570289611816);
      Complex complex2 = Complex.valueOf(1.4033570289611816, 1.4033570289611816);
      complex0.reciprocal();
      Object object0 = new Object();
      Complex complex3 = new Complex(0.0);
      Object object1 = complex2.readResolve();
      complex1.equals(object1);
      complex2.readResolve();
      Complex complex4 = Complex.INF;
      complex4.abs();
      Complex complex5 = Complex.ZERO;
      complex5.INF.getField();
      complex4.divide(1803.27552634);
      Complex complex6 = Complex.NaN;
      complex6.sqrt1z();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2582.4245);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2843.00910649407, 2843.00910649407);
      complex0.tan();
      complex0.nthRoot(753);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 5.022108460298934E-9);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ONE.sin();
      complex3.INF.toString();
      Complex complex4 = complex0.subtract(0.0);
      complex4.ONE.abs();
      complex2.sqrt1z();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.reciprocal();
      complex6.NaN.log();
      Complex complex7 = complex6.reciprocal();
      Object object0 = complex5.readResolve();
      complex3.equals(object0);
      complex5.divide(0.0);
      Complex complex8 = complex5.negate();
      complex7.pow((-620.971545));
      complex8.add(2.5217716516462005E-184);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1183.9652), (-1183.9652));
      complex0.tan();
      Complex complex1 = complex0.pow((-1183.9652));
      complex1.multiply((-447));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.acos();
      complex2.NaN.multiply((-130.681));
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.INF.subtract(0.0);
      complex3.I.multiply(1355);
      complex5.ONE.atan();
      complex5.ONE.subtract(complex3);
      complex0.NaN.sin();
      complex3.ZERO.tanh();
      Complex complex6 = complex4.add((-1739.0387378793434));
      complex6.ONE.cos();
      Complex complex7 = complex3.sqrt1z();
      complex7.ZERO.tan();
      Complex complex8 = complex6.divide(complex1);
      complex1.readResolve();
      Complex complex9 = complex4.sqrt();
      complex8.multiply(complex9);
      complex5.abs();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-79.03313));
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-79.03313));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex3.I.cosh();
      complex0.I.tanh();
      Complex complex6 = complex4.NaN.pow((-508.7));
      Complex complex7 = complex0.NaN.subtract((-79.03313));
      Complex complex8 = complex3.ZERO.reciprocal();
      complex8.I.subtract(complex4);
      complex3.pow((-79.03313));
      Complex complex9 = complex1.I.pow(complex2);
      complex1.INF.sinh();
      complex1.ONE.hashCode();
      Complex complex10 = Complex.valueOf((-567.709), (-1160.846));
      complex10.NaN.abs();
      complex2.equals(complex10);
      Complex complex11 = complex6.multiply(complex7);
      Complex complex12 = complex9.sinh();
      complex12.hashCode();
      complex12.ZERO.subtract((-567.709));
      complex9.cosh();
      complex2.multiply(complex6);
      Complex complex13 = complex2.multiply(0);
      Complex complex14 = complex11.tan();
      Complex complex15 = Complex.valueOf((-508.7));
      complex14.getReal();
      complex13.toString();
      Complex complex16 = Complex.valueOf((double) 0);
      complex5.pow(2.3454138776381036E11);
      complex15.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.105749999899302E-7));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.reciprocal();
      complex2.I.abs();
      Complex complex3 = complex2.sinh();
      complex1.hashCode();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = Complex.valueOf(1.0, 1.716531820904728E50);
      complex7.tan();
      complex7.asin();
      complex3.reciprocal();
      complex1.equals(complex6);
      complex2.readResolve();
      complex7.abs();
      complex4.divide(0.0);
      Complex complex8 = Complex.INF;
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-1085.7962068141));
      complex0.INF.negate();
      complex0.getField();
      complex0.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex1.ZERO.tanh();
      Complex complex3 = Complex.valueOf((-1085.7962068141), 0.0);
      complex1.ZERO.acos();
      Complex complex4 = complex0.INF.sqrt();
      complex4.INF.tan();
      complex4.sinh();
      Complex complex5 = complex2.INF.divide(0.0);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex7.I.sqrt();
      complex2.equals(complex1);
      Object object0 = new Object();
      complex8.equals(object0);
      complex3.asin();
      complex3.tan();
      complex6.nthRoot(1250);
      Complex complex9 = Complex.valueOf(2239.776724114, 477.90674115);
      complex2.acos();
      complex8.add(complex3);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.8409546441412518E-8));
      complex0.ZERO.log();
//      try { 
        complex0.nthRoot((-667));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -667
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex.valueOf((-2.6448316331572387E-297), (-2.6448316331572387E-297));
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.NaN.subtract(complex1);
      complex3.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.ZERO.add((-1117.7985681597));
      complex1.INF.pow(2508.542895905904);
      Complex complex5 = complex0.cosh();
      complex5.ONE.readResolve();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex2.conjugate();
      complex4.hashCode();
      Complex complex8 = complex2.sqrt1z();
      complex6.abs();
      complex7.getImaginary();
      Complex complex9 = complex1.multiply(1);
      Complex complex10 = complex1.subtract(complex2);
      complex10.divide(complex6);
      complex6.divide(complex8);
      complex1.getArgument();
      complex6.negate();
      Complex complex11 = complex1.subtract((-20.0));
      complex11.getImaginary();
      complex4.abs();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-3079.3991), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.abs();
      complex0.I.sinh();
      Complex complex1 = Complex.valueOf((-1.1302647617762544E-8), (-1.1302647617762544E-8));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.NaN.pow(complex2);
      Complex complex4 = complex0.pow(complex1);
      complex2.INF.exp();
      Complex complex5 = complex4.ONE.pow((-1.1302647617762544E-8));
      Complex complex6 = Complex.valueOf((-1.1302647617762544E-8), Double.POSITIVE_INFINITY);
      complex4.I.pow((-2581.384788733));
      Complex complex7 = complex1.tanh();
      complex7.ZERO.abs();
      complex7.I.reciprocal();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.INF.conjugate();
      Complex complex9 = complex7.subtract(complex3);
      complex9.NaN.pow(complex3);
      complex6.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.log();
      complex1.pow(complex4);
      Complex complex11 = complex5.add(Double.POSITIVE_INFINITY);
      complex2.add(Double.POSITIVE_INFINITY);
      complex11.I.hashCode();
      Complex.valueOf((-2581.384788733));
      Complex complex12 = complex10.multiply((-1.1302647617762544E-8));
      complex12.ONE.multiply(2374);
      complex11.isNaN();
      complex10.subtract(9.78476998200719E-186);
      complex3.isInfinite();
      complex10.readResolve();
      complex8.sin();
      complex9.toString();
      complex10.tan();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.I.negate();
      complex4.INF.abs();
      complex3.ZERO.cosh();
      complex1.getArgument();
      complex0.ONE.abs();
      complex0.getReal();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex0.divide((-1871.768144807));
      complex6.getArgument();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex2.pow((-1871.768144807));
      complex8.ONE.sin();
      complex8.NaN.conjugate();
      complex6.sin();
      Complex.valueOf((-1871.768144807));
      Complex complex9 = complex1.reciprocal();
      complex3.readResolve();
      complex9.divide(complex2);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2425.428458196);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.I.hashCode();
      Complex complex3 = complex1.I.sin();
      complex3.ONE.exp();
      Complex.valueOf(2425.428458196);
      Complex complex4 = complex0.tan();
      complex0.I.hashCode();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.INF.divide((-743.9755657436));
      complex6.I.exp();
      Complex complex7 = complex0.add(2611.5654);
      Complex complex8 = Complex.INF;
      complex7.NaN.pow(complex8);
      Complex complex9 = complex7.ZERO.sqrt1z();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex1.sqrt();
      complex9.pow(complex11);
      Complex complex12 = complex10.subtract((-743.9755657436));
      complex0.NaN.tanh();
      complex12.createComplex(0.0, 0.0);
      complex2.negate();
      complex11.negate();
      complex10.readResolve();
      complex0.nthRoot(17);
      complex6.pow((-3938.11));
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = Complex.ZERO;
      complex0.nthRoot(1);
      complex0.isInfinite();
      complex2.abs();
      complex0.divide(complex3);
//      try { 
        complex3.nthRoot((-5969));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -5,969
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.tanh();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(2189.733019608731);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(670);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.createComplex((-2201.227342382378), (-2201.227342382378));
      complex3.NaN.multiply(0);
      complex3.ONE.multiply(37);
      complex3.add((-2201.227342382378));
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex4.acos();
      complex5.ZERO.sinh();
      complex2.getImaginary();
      complex0.getField();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(7);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-1719.378), 0.0);
      Complex complex1 = complex0.sqrt1z();
      complex1.NaN.getField();
      Complex complex2 = complex1.INF.multiply(448);
      Complex complex3 = complex2.I.multiply(complex0);
      complex0.getReal();
      Complex complex4 = complex0.ONE.multiply(1.0);
      Complex complex5 = Complex.valueOf(20.0);
      complex1.sqrt();
      complex3.negate();
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5045560598373413);
      Complex complex1 = complex0.divide(0.5045560598373413);
      Complex complex2 = complex1.asin();
      complex1.INF.readResolve();
      complex0.abs();
      complex0.abs();
      complex0.abs();
      complex1.multiply(complex2);
      complex2.abs();
      complex1.createComplex(0.5045560598373413, 4.445372986583078E-135);
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.equals("non square ({0}x{1}) linear operator");
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      complex0.pow(complex2);
      Complex complex4 = complex3.cos();
      complex2.equals("non square ({0}x{1}) linear operator");
      complex4.tan();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.105749999899302E-7));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.reciprocal();
      complex2.I.abs();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.I.divide(0.0);
      complex4.multiply(complex1);
      complex1.isNaN();
      complex1.NaN.hashCode();
      Complex complex5 = complex1.multiply(1485);
      complex0.INF.readResolve();
      complex0.hashCode();
      complex5.readResolve();
      complex1.isNaN();
      complex0.pow(0.0);
      Complex complex6 = complex2.negate();
      complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-197.94708), 1.1857939200074815E-7);
      Complex complex1 = complex0.sqrt();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(2938);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      complex1.NaN.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.multiply(1485);
      Complex complex4 = complex3.ZERO.negate();
      complex3.nthRoot(1485);
      complex4.I.negate();
      Complex complex5 = complex0.INF.pow(complex2);
      Complex complex6 = complex5.ZERO.divide(complex1);
      complex0.getImaginary();
      Complex complex7 = complex5.I.subtract(complex6);
      Complex.valueOf((-1.797135137545755E-8));
      Complex.valueOf(0.0, 0.0);
      complex7.sin();
      complex0.isInfinite();
      Complex complex8 = complex0.tan();
      complex6.subtract(complex8);
      Complex complex9 = complex4.pow((double) 1485);
      Complex complex10 = complex9.INF.pow(complex0);
      complex2.add(complex6);
      complex0.toString();
      complex7.isInfinite();
      complex10.getField();
      complex8.cos();
      complex9.isInfinite();
      complex9.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sin();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1251.1838226));
      Complex complex1 = complex0.ZERO.asin();
      complex1.ZERO.subtract(1675.181);
      complex1.I.hashCode();
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract(1766.2941737497388);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.divide(complex0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex2.NaN.multiply(575);
      complex5.ZERO.add(0.6709295511245728);
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex1.log();
      Complex complex8 = complex1.I.acos();
      Complex complex9 = complex8.sinh();
      complex8.I.reciprocal();
      complex8.ZERO.createComplex(Double.NaN, 575);
      complex6.ONE.multiply((-130.6921));
      complex7.readResolve();
      Complex complex10 = complex7.pow(complex3);
      complex9.NaN.subtract(complex2);
      complex10.ONE.asin();
      Complex complex11 = Complex.ZERO;
      complex11.ONE.subtract(0.6709295511245728);
      complex6.pow(complex11);
      complex4.nthRoot(830);
      complex0.negate();
      complex0.getImaginary();
      Complex complex12 = complex9.negate();
      complex12.pow(complex3);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.cos();
      complex2.I.getField();
      Complex complex3 = complex0.tan();
      complex1.I.toString();
      complex3.ZERO.divide(complex0);
      Complex complex4 = complex3.ZERO.createComplex(1715.9718053, (-1434.0));
      complex2.INF.exp();
      complex4.INF.sinh();
      Complex complex5 = complex4.I.pow((-81.436));
      Complex complex6 = complex5.INF.tan();
      complex6.add(complex5);
      complex1.sin();
      Complex complex7 = complex3.createComplex(1715.9718053, 1715.9718053);
      complex3.sqrt();
      complex2.INF.hashCode();
      complex2.multiply(2071);
      complex2.negate();
      complex1.getReal();
      complex7.divide((-942.463));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.nthRoot((-1218));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,218
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.exp();
      complex1.ZERO.createComplex((-573.51586351), 2.0);
      complex2.INF.readResolve();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.ONE.tanh();
      Complex complex4 = complex0.subtract(2.0);
      complex4.INF.sin();
      complex0.multiply(949);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sqrt();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.NaN.acos();
      complex1.INF.pow(786.587538974);
      complex2.subtract(360.293332796886);
      Complex complex3 = Complex.INF;
      complex0.equals(complex3);
      complex3.getReal();
      complex3.I.reciprocal();
      complex3.ONE.acos();
      complex1.abs();
      complex0.multiply(complex3);
      Complex.valueOf((-1.0), 20.0);
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.cosh();
      complex4.ONE.divide(360.293332796886);
      Complex.valueOf((-1550.394867));
      Complex.valueOf((-1.0));
//      try { 
        complex5.I.nthRoot((-1925));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,925
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.equals(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.cos();
      complex3.equals((Object) null);
      complex0.tan();
      Complex complex6 = complex2.exp();
      complex6.atan();
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply((-2616));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2430.128213906633));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.I.log();
      complex2.sqrt1z();
      Complex complex3 = Complex.INF;
      complex2.NaN.subtract(complex3);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = Complex.valueOf((-2430.128213906633), 1.0);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.tan();
      complex5.INF.subtract((-1104.1162));
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex4.INF.cos();
      complex5.sinh();
      complex8.isInfinite();
      Complex complex10 = complex0.sqrt1z();
      complex10.I.toString();
      complex0.subtract(complex8);
      Complex complex11 = complex5.I.log();
      complex11.ZERO.pow(0.0);
      complex1.sqrt();
      complex5.abs();
      complex11.tan();
      complex6.cos();
      complex4.createComplex(3.8520227881415595E166, 0.0);
      Complex complex12 = complex5.multiply(455);
      complex12.getReal();
      complex9.tan();
      complex4.pow(2430.128419657085);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex((-1469.1436488565937), (-1469.1436488565937));
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.divide(Double.NaN);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2727.324, Double.POSITIVE_INFINITY);
      complex1.multiply(0);
      Complex.valueOf((double) 0, 2760.34706);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(1265);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.I.acos();
      complex0.readResolve();
      Complex.valueOf((-2684.739), Double.NaN);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex.valueOf(1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide(Double.NaN);
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.NaN.conjugate();
      complex1.ONE.hashCode();
      Complex complex6 = complex2.atan();
      complex6.INF.readResolve();
      complex1.getArgument();
      complex6.acos();
      Complex.valueOf(615.138, 638.1);
      complex2.getField();
      Complex complex7 = complex5.multiply((-2315));
      complex3.sin();
      complex6.exp();
      complex1.sqrt();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add((-3175.87476749641));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.sinh();
      complex3.readResolve();
      complex3.ZERO.readResolve();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.subtract(complex1);
      complex0.readResolve();
      Complex complex6 = complex3.subtract(complex2);
      complex2.I.acos();
      complex1.hashCode();
      complex1.subtract((-1.2645600379949252E-7));
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0, (-1.2645600379949252E-7));
      Complex complex9 = complex6.cosh();
      complex9.ZERO.tanh();
      complex4.add(complex9);
      complex8.pow(complex5);
      complex7.add(0.0);
      complex4.multiply(complex1);
      complex3.hashCode();
      complex8.getReal();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = new Complex((-121735.02715869913), (-121735.02715869913));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(Double.NaN);
      complex2.nthRoot(265);
      Complex complex3 = complex1.sqrt();
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add((double) 5);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow(0.66441810131073);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1465);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = new Complex(0.902472649809137);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-594.09122));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(Double.NaN);
      complex2.asin();
      Complex complex3 = Complex.INF;
      complex3.getReal();
      Complex complex4 = Complex.I;
      complex2.sin();
      Complex complex5 = Complex.I;
      Complex.valueOf((-1.0), (-1.0));
      Complex.valueOf(Double.NaN);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex1.pow(complex3);
      Complex complex9 = new Complex((-1.0), (-1.0));
      complex7.acos();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex1.tan();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide((-1.26E-7));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1635.8655663793836));
      Complex complex1 = Complex.valueOf((-1635.8655663793836), (-1.0));
      Complex complex2 = complex1.ZERO.tanh();
      Complex.valueOf((-1.0));
      Complex complex3 = complex0.subtract(Double.NaN);
      complex0.ONE.multiply((-1635.8655663793836));
      complex0.INF.divide(complex2);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.ONE.divide(complex3);
      complex4.divide(complex0);
      Complex complex7 = Complex.valueOf((-1635.8655663793836));
      complex6.sinh();
      complex7.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex0.multiply((-399));
      Complex complex6 = complex4.INF.exp();
      Complex complex7 = complex6.ONE.pow((double) (-399));
      complex5.abs();
      complex4.nthRoot(96);
      Complex complex8 = complex5.INF.atan();
      complex8.NaN.exp();
      complex2.ZERO.readResolve();
      Complex complex9 = complex5.subtract((double) 96);
      complex7.INF.exp();
      complex1.subtract((double) 96);
      complex7.readResolve();
      complex9.getArgument();
      complex3.exp();
      complex2.sinh();
      Complex complex10 = Complex.ONE;
      complex3.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.multiply(1.0274494061148778E-8);
      Complex complex1 = complex0.pow(1.0274494061148778E-8);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex0.getImaginary();
      complex2.ZERO.subtract(1.0274494061148778E-8);
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 271.72044895908);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0, 271.72044895908);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.sqrt1z();
      complex1.I.hashCode();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex0.add(complex1);
      complex2.readResolve();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex5.ONE.tan();
      Complex complex11 = complex10.NaN.asin();
      complex11.I.exp();
      complex7.reciprocal();
      complex4.equals(complex9);
      complex7.readResolve();
      complex8.abs();
      complex2.divide(271.72044895908);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(670.30005374);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2434.998);
      complex0.sin();
      Complex complex1 = Complex.ONE;
      Complex.valueOf(2434.998);
      Object object0 = new Object();
      Complex complex2 = Complex.INF;
      complex1.equals(complex2);
      Complex complex3 = new Complex(2434.998);
      complex3.ZERO.sinh();
      complex1.pow((-0.2656954540631705));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 271.72044895908);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(271.72044895908);
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.multiply(complex4);
      complex4.pow(complex0);
      Complex complex6 = complex5.cos();
      complex2.equals(complex4);
      Complex complex7 = new Complex(0.0);
      complex7.tan();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals("non square ({0}x{1}) linear operator");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      complex1.ZERO.divide(complex0);
      Complex complex2 = complex1.ONE.multiply(363.430964);
      Complex complex3 = Complex.valueOf(363.430964, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.tan();
      complex2.ONE.getArgument();
      Complex complex6 = Complex.valueOf(2.1608633995056152);
      Complex complex7 = complex0.tan();
      complex0.nthRoot(1);
      Complex complex8 = Complex.valueOf(1113.64);
      complex0.NaN.reciprocal();
      complex8.cos();
      Complex complex9 = complex7.divide(284.0);
      complex9.INF.sqrt1z();
      Complex complex10 = Complex.ONE;
      complex2.pow(complex10);
      complex9.multiply((-1986));
      complex9.multiply(complex6);
      complex5.multiply(1);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2843.00910649407, (-328.4457));
      complex0.nthRoot(1);
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      complex1.abs();
      Complex complex2 = complex1.ZERO.multiply(1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.INF.asin();
      complex1.getReal();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.INF.asin();
      complex5.divide((-2302.8));
      Complex.valueOf((-2302.8));
      Complex complex8 = complex6.pow(complex5);
      complex8.pow(complex7);
      complex3.subtract(4.308816643345461E286);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.getReal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = new Complex((-1189.505869627));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex0.isNaN();
      complex2.INF.readResolve();
      Complex complex3 = complex1.add((-1189.505869627));
      Complex complex4 = complex0.ONE.sinh();
      complex4.ZERO.getField();
      complex4.NaN.tan();
      Complex complex5 = complex4.ZERO.tanh();
      complex5.ONE.sin();
      Complex complex6 = complex0.divide(423.01988441717737);
      complex2.pow(0.0);
      Complex complex7 = Complex.valueOf(1678.2687978874753);
      Complex complex8 = complex7.INF.tanh();
      complex0.tanh();
      complex7.getArgument();
      complex8.subtract(complex2);
      complex6.sin();
      complex1.sinh();
      complex7.exp();
      complex1.pow((-1189.505869627));
      complex3.sqrt();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = new Complex(0.6022218465805054, (-805.91802742));
      Complex complex1 = complex0.tan();
      complex0.I.divide(5.440559532453721E-75);
      complex1.INF.readResolve();
      complex0.NaN.sinh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.multiply(232.31);
      complex4.multiply(5.440559532453721E-75);
      complex4.add((-1.0));
      Complex complex5 = Complex.valueOf(0.0);
      complex5.INF.acos();
      complex1.ZERO.multiply(complex4);
      Complex complex6 = complex1.subtract(232.31);
      complex1.getReal();
      Complex complex7 = complex6.cos();
      complex7.createComplex((-655.4), 0.0);
      complex7.NaN.negate();
      complex7.negate();
      complex3.pow(169.4820044324);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.ZERO.conjugate();
      Complex complex3 = complex0.ONE.sinh();
      complex0.tan();
      complex0.multiply(1641);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = new Complex(1.2232622070370946E-8, 1.2232622070370946E-8);
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.abs();
      assertEquals((-4.087431109402678E7), complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.sqrt1z();
      complex3.createComplex(0.0, 0.0);
      Object object0 = complex3.NaN.readResolve();
      assertEquals((-1.4963704271652636E-16), complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex6.I.log();
      complex6.ZERO.subtract(complex2);
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex0.pow(1014.6423510531781);
      Complex complex10 = complex9.INF.multiply(complex6);
      complex10.ZERO.negate();
      complex0.I.getField();
      Complex complex11 = complex0.divide(complex5);
      Object object1 = complex7.readResolve();
      Complex complex12 = complex11.ZERO.reciprocal();
      complex2.equals(object1);
      Complex complex13 = complex11.createComplex(1014.6423510531781, 2398.565076647);
      Complex complex14 = complex12.sqrt();
      assertSame(complex14, complex12);
      assertTrue(complex14.equals((Object)object0));
      assertNotSame(complex14, complex10);
      
      Complex complex15 = complex13.sin();
      assertTrue(complex5.equals((Object)complex4));
      assertEquals(Double.POSITIVE_INFINITY, complex15.getReal(), 0.01);
      assertEquals((-1.2151576462680468E-4), complex11.getReal(), 0.01);
      assertFalse(complex5.equals((Object)complex11));
      
      Object object2 = new Object();
      complex0.equals(object2);
      double double0 = complex8.getReal();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertTrue(complex8.equals((Object)complex9));
      assertEquals(5.0345710372629664E-5, complex6.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      assertSame(complex1, complex0);
  }
}
