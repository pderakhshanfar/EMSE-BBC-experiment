/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:47:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1719142537166848E16, (-2104.633956035));
//      try { 
        complex0.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 1.9730183364921177E-5);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply((-20.0));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2143.11, 2143.11);
      Complex complex1 = complex0.atan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = Complex.valueOf((-1550.686401));
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(254.0);
      Complex complex1 = complex0.createComplex(0.0, (-1412.0572));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex.valueOf(-0.0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 1.9730183364921177E-5);
      Complex complex1 = complex0.ZERO.multiply(1.9730183364921177E-5);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      Complex complex1 = complex0.reciprocal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2474.0975), 1561.52);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(1572.01, 1408.585311392);
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.negate();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.createComplex(0.0, 4.135457669031131E282);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2763.28714971);
      complex0.INF.subtract(2763.28714971);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(737.5074836119);
      complex0.subtract(737.5074836119);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.24746), (-29.24746));
      complex0.subtract(159.75);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1.0672499803427623E292);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(35.62986664, 5811.982690449799);
      Complex complex1 = complex0.acos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1.2247448713915892, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.multiply(218.6);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(35.62986664, 5811.982690449799);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2143.11, 2143.11);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.ZERO.subtract((-3800.0234));
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2474.0975), 1561.52);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.16524958610534668);
      complex0.pow(1.0672499803427623E292);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow((-7.34071933723896E-8));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      complex0.pow(3146.3100118095);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-30.2732));
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(1789);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(2642);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2474.0975), 1561.52);
      complex0.multiply(1561.52);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-571.746399877), (-939.8097465475));
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(0.0, 7.868666894503849E-163);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(254.0);
      Complex complex1 = complex0.cos();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3767075938441E7, 3.3767075938441E7);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1963.139972755335));
      Complex complex1 = complex0.createComplex(2.287280262665656E-62, (-1963.139972755335));
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.I.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.divide((-2014.9081797584065));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2474.0975), (-2474.0975));
      complex0.divide(1490.05481427);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(Double.POSITIVE_INFINITY, (-1693.842694428));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1027.12982851383);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-945.65475677), Double.POSITIVE_INFINITY);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.24746), (-29.24746));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.01338820214867596, (-210.59658582843528));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-30.2732));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2474.0975), 1561.52);
      Complex complex1 = complex0.negate();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1027.12982851383, Double.POSITIVE_INFINITY);
      complex0.INF.add(complex0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(96.94953660785082, 169.24104);
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.ZERO.add(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add((-1251.4587));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.I.add(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(7.785491934690374E-291);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      complex1.add((-1079.5128892));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-2117935782), (-2117935782));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 2146681722;
      // Undeclared exception!
      complex0.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex2, complex1);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1378.114007534398));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex0.add(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.divide(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ZERO.add(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.add(complex0);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4452.40977077224), 2143.11);
      double double0 = complex0.abs();
      assertEquals(2143.11, complex0.getImaginary(), 0.01);
      assertEquals(4941.34326261272, double0, 0.01);
      assertEquals((-4452.40977077224), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(182.2, 1612.71);
      double double0 = complex0.abs();
      assertEquals(182.2, complex0.getReal(), 0.01);
      assertEquals(1612.71, complex0.getImaginary(), 0.01);
      assertEquals(1622.9696189701149, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(1.256828068633383E-7, Double.NaN);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.256828068633383E-7, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      assertTrue(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(3304.990146876397);
      double double0 = complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertEquals(3304.990146876397, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1789, Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      List<Complex> list0 = complex0.INF.nthRoot(933);
      assertFalse(complex0.isNaN());
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(1693);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.nthRoot((-266));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -266
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-211.0232501));
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-211.0232501), complex0.getReal(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.tanh();
      assertFalse(complex0.isInfinite());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex((-1963.139972755335));
      Complex complex1 = complex0.INF.tanh();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1963.139972755335), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(224.4139662, (-38.47841760435743));
      Complex complex1 = complex0.tan();
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals((-38.47841760435743), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.valueOf(866.329562, 2339.640308837565);
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(2339.640308837565, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(866.329562, complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.tan();
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = new Complex((-1963.139972755335));
      Complex complex1 = complex0.NaN.sinh();
      assertEquals((-1963.139972755335), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.sin();
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.subtract(Double.NaN);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.subtract((-3054.4769810998177));
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(complex0);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = new Complex(5810.979, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.negate();
      assertTrue(complex0.isInfinite());
      assertEquals(5810.979, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1712.37445260642), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-994.40466201256));
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1712.37445260642), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(989.692435);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.pow(Double.NaN);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = new Complex(1.2247448713915892, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(477);
      assertEquals(1.2247448713915892, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1752));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(742);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex(35.629866635740235, 5810.979);
      Complex complex1 = complex0.multiply((-16));
      assertEquals((-92975.664), complex1.getImaginary(), 0.01);
      assertEquals(35.629866635740235, complex0.getReal(), 0.01);
      assertEquals((-570.0778661718438), complex1.getReal(), 0.01);
      assertEquals(5810.979, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.832180361661273E7, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow(complex1);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.multiply(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = new Complex(5810.979, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      assertTrue(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(5810.979, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(989.69243479355);
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(989.69243479355, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2285, (double) 2285);
      Complex complex1 = complex0.reciprocal();
      assertEquals(2285.0, complex0.getReal(), 0.01);
      assertEquals(2285.0, complex0.getImaginary(), 0.01);
      assertEquals(2.188183807439825E-4, complex1.getReal(), 0.01);
      assertEquals((-2.188183807439825E-4), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = new Complex((-1963.139972755335));
      Complex complex1 = complex0.I.reciprocal();
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.reciprocal();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = new Complex((-1963.139972755335));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.reciprocal();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1963.139972755335), complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.reciprocal();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex1.log();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-0.17471331810398982));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      complex0.equals(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(complex0);
      assertSame(complex2, complex0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.divide(complex1);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.conjugate();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(8.644149108467398E9);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.acos();
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = new Complex(0.16524958610534668);
      Complex complex1 = complex0.multiply(1.0672499803427623E292);
      Complex complex2 = complex1.asin();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.7636261752258085E291, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      assertEquals("(0.0, 1.0)", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(39);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(39, list0.size());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.acos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }
}
