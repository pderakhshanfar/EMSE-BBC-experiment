/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:01:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = Complex.valueOf(0.15023678541183472);
      complex1.add(0.15023678541183472);
      complex0.tan();
      Complex.valueOf(16.516016193794062);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-5.880540292725003E13), (-20.0));
      Complex complex1 = complex0.cosh();
      complex0.abs();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.cos();
      complex0.INF.getArgument();
      complex3.ONE.toString();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.negate();
      Complex.valueOf((-5.880540292725003E13), 5.880540292725003E13);
      Complex complex6 = complex5.asin();
      complex4.toString();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex3.ONE.multiply(2933);
      complex8.INF.cos();
      Complex complex9 = complex2.add(complex6);
      Complex complex10 = complex7.sqrt1z();
      complex10.reciprocal();
      Complex complex11 = Complex.valueOf((-104.4376), (-1593.9534076501));
      complex9.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4672600326020399E299));
      complex0.sqrt1z();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-1.4672600326020399E299));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.subtract(Double.NaN);
      complex0.subtract((-102.70955757777926));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(7.848361555046424E-8, 7.848361555046424E-8);
      Complex complex1 = Complex.valueOf(7.848361555046424E-8, Double.POSITIVE_INFINITY);
      complex1.multiply(1343.879681);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(1919);
      complex0.conjugate();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      complex2.ONE.subtract((-20.0));
      Complex complex3 = new Complex(1919, (-20.0));
      Complex complex4 = complex3.tan();
//      try { 
        complex4.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 32;
      complex0.ZERO.nthRoot(32);
      complex0.ONE.hashCode();
      complex0.abs();
      complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.pow((double) 32);
      complex2.I.cos();
      complex0.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.add((-47.026));
      complex3.abs();
      Complex complex4 = complex2.INF.acos();
      complex4.ZERO.divide((-723.4705));
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      complex5.tanh();
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex6.NaN.cos();
      complex0.reciprocal();
      complex0.sinh();
      complex1.INF.sqrt();
      Complex.valueOf((-533.072782116), Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.acos();
      complex7.I.sin();
      complex7.NaN.getArgument();
//      try { 
        complex2.I.nthRoot((-580));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -580
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(456.1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      complex3.NaN.abs();
      Complex complex4 = complex1.atan();
      complex3.INF.hashCode();
      Complex complex5 = complex4.divide(complex0);
      complex5.abs();
      Complex complex6 = complex2.NaN.conjugate();
      Complex complex7 = complex3.asin();
      complex7.I.multiply(Double.NaN);
      Complex complex8 = complex7.ONE.pow(456.1);
      Complex complex9 = complex3.atan();
      Complex complex10 = complex9.divide(complex3);
      complex4.NaN.divide(2.3810978455418157);
      complex10.sqrt();
      Complex complex11 = Complex.valueOf(456.1);
      Complex complex12 = complex4.multiply(0);
      complex12.I.divide(complex8);
      complex12.sqrt();
      complex8.cosh();
      complex9.subtract(456.1);
      complex6.sqrt();
      complex11.createComplex(456.1, 3552.13);
      complex3.createComplex(456.1, 456.1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = new Complex(7.848361555046424E-8, 7.848361555046424E-8);
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex3.cos();
      Complex complex6 = Complex.ZERO;
      complex4.asin();
      complex4.pow((-5.759582672039005E-10));
      complex5.sqrt1z();
      Complex complex7 = new Complex((-782.3475500606), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(66.468379462);
      complex0.I.hashCode();
      Complex complex1 = complex0.pow(66.468379462);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.atan();
      complex0.multiply(complex2);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.acos();
      complex3.log();
      complex3.acos();
      Complex complex6 = complex5.cosh();
      Complex.valueOf((-1061.728960582));
      complex4.pow(complex2);
      complex4.nthRoot(743);
      Complex complex7 = new Complex(743, (-1061.728960582));
      complex5.isInfinite();
      Complex complex8 = complex1.tan();
      complex3.pow((-1061.728960582));
      complex8.abs();
      complex7.multiply(743);
      Complex complex9 = complex2.tanh();
      complex9.sin();
      Complex complex10 = new Complex((-1.5535335184873003), 1.821357551420394E-18);
      complex10.sqrt();
      complex6.divide(complex10);
      complex1.multiply(1.1730463525082348E-7);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = new Complex((-3442.0178877451976));
      complex0.add(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(complex0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex2.getField();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(725.2939687, 725.2939687);
      complex4.add(complex0);
      Complex complex5 = complex4.multiply((-1.0571553019207106E-8));
      complex4.nthRoot(3811);
      Complex complex6 = complex2.createComplex(725.2939687, (-1.0946634815588584E12));
      complex5.getReal();
      complex5.pow((-1.0946634815588584E12));
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex2.cosh();
      complex4.toString();
      Complex complex9 = Complex.ONE;
      complex9.tan();
      Complex complex10 = Complex.ZERO;
      complex10.tanh();
      complex7.multiply((-1415.458));
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(725.2939687);
      Complex complex1 = Complex.valueOf((double) 147, 1881.7894);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.createComplex((-2060.4), (-2060.4));
      Complex complex4 = complex3.acos();
      complex4.I.nthRoot(147);
      complex1.sqrt();
      complex1.cosh();
      complex0.pow(complex3);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.INF.abs();
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.NaN.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.I.multiply(complex1);
      complex0.sin();
      Complex complex5 = complex4.ZERO.log();
      complex5.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ONE;
      complex3.createComplex(566.6418824173, 566.6418824173);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.sqrt();
      complex8.ZERO.log();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.INF.abs();
      complex0.multiply((-20.0));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.NaN.acos();
      complex1.I.atan();
      Complex complex5 = complex2.I.multiply(complex2);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.acos();
      Complex complex8 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.cosh();
      Complex complex10 = Complex.valueOf((-1061.728960582));
      Complex complex11 = complex4.pow(complex5);
      complex11.NaN.multiply(317.0);
      complex2.nthRoot(1710);
      complex0.ONE.tanh();
      complex10.isInfinite();
      complex9.pow(0.0);
      complex6.abs();
      complex4.multiply(1710);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.INF.multiply((-1440.42154089777));
      complex3.ONE.multiply(3793);
      complex0.getImaginary();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.ONE.pow((-3201.73));
      complex7.I.toString();
      complex5.nthRoot(1103);
      complex1.sqrt();
      Complex complex8 = complex4.sinh();
      complex8.I.tan();
      Complex.valueOf(0.0);
      complex1.toString();
      complex0.isNaN();
      Complex complex9 = Complex.ONE;
      complex5.divide(complex9);
      complex9.readResolve();
      complex4.atan();
//      try { 
        complex2.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.hashCode();
      complex0.negate();
      complex0.isInfinite();
      Complex complex1 = new Complex(2.0);
      complex1.sinh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      complex2.divide(7.685235201534525E71);
      Complex complex3 = Complex.valueOf((-2.0582596893119236E-232), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.multiply((-1609));
      complex1.reciprocal();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(1168.01);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = new Complex(1168.01);
      complex3.sinh();
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex4.divide(2826.412);
      Complex complex6 = Complex.I;
      complex6.multiply((-2040109465));
      complex5.reciprocal();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.conjugate();
      complex2.multiply(784.02720797024);
      Complex complex6 = complex0.add(complex3);
      complex2.equals(complex5);
      Complex.valueOf(197.621983, (double) 1);
      complex5.exp();
      Complex complex7 = Complex.INF;
      complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1168.01);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.negate();
      complex2.isInfinite();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.atan();
      complex2.multiply(complex3);
      Complex complex6 = complex4.sin();
      complex1.acos();
      Complex complex7 = complex1.log();
      Complex.valueOf(Double.NaN, 1.7211089134216309);
      complex6.cosh();
      Complex.valueOf(238.76104167282426);
      Complex complex8 = complex1.pow(complex5);
      complex2.nthRoot(1710);
      complex3.multiply(1710);
      Complex complex9 = new Complex(1335, (-515.52731));
      complex7.toString();
      complex5.tan();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.acos();
      complex2.ONE.divide(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      Complex complex3 = complex0.add((-362.37785));
      complex3.equals(complex2);
      complex1.createComplex(66.468379462, 931.068485);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.conjugate();
      complex3.multiply(2397.3);
      Complex complex6 = Complex.ZERO;
      complex6.add(complex5);
      Object object1 = complex3.readResolve();
      complex4.equals(object1);
      Complex complex7 = Complex.valueOf((-3.6754317105801715E46), 931.068485);
      complex7.NaN.tan();
      Complex complex8 = complex0.exp();
      Complex complex9 = Complex.INF;
      complex0.subtract(complex1);
//      try { 
        complex8.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.add(complex2);
      complex2.equals(complex0);
      Complex complex4 = complex2.divide(66.468379462);
      complex1.multiply(13);
      complex4.divide(complex1);
      Complex complex5 = Complex.NaN;
      complex1.multiply(13);
      complex0.toString();
      complex4.tan();
//      try { 
        complex3.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt1z();
      complex2.abs();
      complex1.getField();
      Complex complex3 = complex1.multiply((-20.0));
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.pow((-20.0));
      complex4.atan();
      Complex complex6 = complex4.multiply(complex3);
      complex3.sin();
      complex0.acos();
      Complex complex7 = new Complex(Double.NaN);
      complex4.cosh();
      Complex complex8 = Complex.valueOf((-20.0));
      Complex complex9 = Complex.ZERO;
      complex6.pow(complex9);
      complex8.nthRoot(1710);
      Complex complex10 = Complex.I;
      complex10.tanh();
      complex5.isInfinite();
      complex5.tan();
      Complex complex11 = complex3.pow(1.1521174907684326);
      complex11.abs();
      complex0.multiply(1710);
      Complex complex12 = complex3.tanh();
      complex12.multiply((-1061.728960582));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.sqrt1z();
      complex0.INF.abs();
      Complex complex1 = complex0.multiply((-490));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.sin();
      complex3.createComplex(17, Double.POSITIVE_INFINITY);
      complex0.acos();
      Object object0 = new Object();
      Complex complex4 = complex3.add(1544.71323);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(1544.71323, 0.7615941559557649);
      complex5.equals(complex6);
      Complex complex7 = complex2.createComplex(0.0, (-726.68974));
      complex7.sqrt();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, 1351.8522392667867);
      complex8.conjugate();
      complex7.multiply((-501.0242));
      complex4.add(complex3);
      complex4.equals(complex5);
      Complex.valueOf(0.8813735870195428, 1492.5597483);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.exp();
      Complex complex11 = Complex.INF;
      complex8.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(1);
      complex0.equals(complex2);
      Complex complex3 = Complex.valueOf(6.283185307179586, (-1492.5597483));
      Complex complex4 = complex2.subtract(complex1);
      complex4.exp();
      complex3.reciprocal();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sqrt1z();
      complex2.add(complex0);
      complex2.equals(complex0);
      Complex complex4 = Complex.valueOf(3.479157135998568E214, 839.1);
      Complex complex5 = complex4.subtract(complex3);
      complex5.exp();
      complex0.reciprocal();
      complex1.log();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(66.468379462, 66.468379462);
      complex0.I.hashCode();
      Complex complex1 = new Complex(66.468379462, 66.468379462);
      Complex complex2 = complex0.sqrt1z();
      complex2.equals(complex0);
      Complex complex3 = Complex.valueOf(66.468379462, (-1632.84683207));
      complex3.exp();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.81378074));
      int int0 = 17;
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.ONE.tanh();
      complex5.negate();
      Complex complex6 = new Complex(4223.0);
      complex1.getImaginary();
      Complex complex7 = complex4.sinh();
      complex7.divide((-2306.49825));
      // Undeclared exception!
      complex2.ZERO.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1168.01);
      Complex complex2 = complex0.acos();
      complex0.negate();
      complex2.isInfinite();
      Complex complex3 = Complex.valueOf((-3204.42863), 5.68253547942899E295);
      complex0.readResolve();
      Complex complex4 = new Complex(2.1046319007873535, (-3204.42863));
      complex4.divide((-1548.57409726117));
      Complex complex5 = complex3.asin();
      complex5.toString();
      Complex complex6 = Complex.NaN;
      complex6.toString();
      complex1.log();
      Complex complex7 = complex5.cosh();
      complex7.tan();
//      try { 
        complex4.nthRoot((-363));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -363
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.negate();
      Complex complex6 = Complex.valueOf(0.9999999999999305, 0.0);
      complex0.readResolve();
      complex3.divide((-2.44242319E-315));
      Complex complex7 = complex1.asin();
      complex4.toString();
      complex2.toString();
      complex7.log();
      complex5.cosh();
      Complex complex8 = new Complex(8.504948422097802E-8, 1473.20069798);
      complex8.tan();
      complex1.nthRoot(7);
      Complex complex9 = complex7.divide((double) 7);
      Complex complex10 = complex7.log();
      complex10.INF.asin();
      Complex complex11 = complex6.tan();
      complex11.reciprocal();
      complex8.add(8.504948422097802E-8);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(7);
      Complex complex1 = Complex.INF;
      complex1.ONE.getField();
      Complex complex2 = complex1.createComplex(Double.NaN, 3090.86638426532);
      complex2.INF.toString();
      complex1.pow(complex0);
      complex0.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(1168.01);
      Complex complex1 = complex0.acos();
      complex0.negate();
      complex1.isInfinite();
      Complex complex2 = new Complex(5.68253547942899E295);
      complex2.getImaginary();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.divide(Double.POSITIVE_INFINITY);
      complex4.multiply(4223);
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = Complex.NaN;
      complex6.multiply((-3575));
      complex1.INF.atan();
      complex6.multiply((-3575));
      complex3.toString();
      complex5.tan();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.81378074));
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.ONE.tanh();
      complex5.negate();
      Complex complex6 = Complex.valueOf((-3204.42863), 2.1046319007873535);
      Complex complex7 = (Complex)complex1.NaN.readResolve();
      complex7.divide((-3596.81378074));
      complex6.INF.asin();
      complex2.toString();
      complex0.NaN.toString();
      Complex complex8 = complex0.log();
      complex3.cosh();
      Complex complex9 = complex4.tan();
      complex8.nthRoot(17);
      complex0.atan();
      Complex complex10 = Complex.valueOf(324.47590107208305);
      Complex complex11 = complex4.divide(complex10);
      Complex.valueOf(324.47590107208305, 626.87);
      Complex complex12 = Complex.valueOf((-1.0));
      complex12.toString();
      complex11.toString();
//      try { 
        complex9.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-3519.825465807788);
      Complex complex1 = Complex.valueOf((-3519.825465807788), 1623.8);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.sqrt();
      complex3.getArgument();
      complex2.cos();
      complex3.sin();
      complex0.divide((-2875.27091005261));
      Complex complex4 = Complex.valueOf(66.468379462);
      complex4.add(1623.8);
      complex4.pow((-3179.8));
//      try { 
        complex4.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.INF.abs();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.0285082556185196E-38);
      complex2.sinh();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.divide(3731.6192966824783);
      complex4.multiply(complex1);
      Complex complex6 = new Complex((-3.885780586188048E-16), 2.0904882610105383E295);
      complex6.sin();
      complex4.abs();
      Complex complex7 = complex3.multiply(Double.NaN);
      complex1.acos();
      complex3.negate();
      complex7.isInfinite();
      complex5.getImaginary();
      Complex complex8 = complex5.sinh();
      complex8.divide(1594.7813);
      Complex complex9 = complex4.multiply(4223);
      complex1.divide(complex2);
      complex0.multiply(4223);
      complex9.multiply((-1741));
      complex6.toString();
      complex9.tan();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ZERO.acos();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = complex3.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex6.NaN.conjugate();
      complex7.INF.multiply(Double.POSITIVE_INFINITY);
      complex4.add(complex2);
      complex1.equals(complex6);
      Complex.valueOf(0.4986113866728328, Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.exp();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.pow(complex1);
      complex3.ONE.tan();
      Complex complex4 = complex1.NaN.divide((-1219.07818));
      Complex complex5 = complex4.I.multiply(complex0);
      complex4.I.sin();
      complex1.abs();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = complex7.NaN.negate();
      complex3.isInfinite();
      complex4.INF.toString();
      complex4.getImaginary();
      Complex complex9 = Complex.INF;
      complex9.tan();
      complex8.nthRoot(881);
      complex9.divide(Double.NaN);
      complex5.negate();
      Complex.valueOf(0.0, Double.NaN);
      complex0.log();
      Complex complex10 = new Complex(1523.693782644347, 5007.0);
      complex10.tan();
      complex9.reciprocal();
      complex5.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.81378074));
      Complex complex1 = complex0.multiply(17);
      complex1.conjugate();
      Complex complex2 = Complex.valueOf((-3596.81378074));
      complex2.I.atan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf((-3204.42863), 2.1046319007873535);
      Complex complex6 = (Complex)complex1.NaN.readResolve();
      Complex complex7 = complex6.divide((-3596.81378074));
      complex5.INF.asin();
      complex7.toString();
      complex0.NaN.toString();
      complex0.log();
      Complex complex8 = complex2.cosh();
      complex2.sinh();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex9.multiply(17);
      complex8.divide(complex4);
      complex8.multiply(4223);
      complex6.multiply(0);
      complex8.ZERO.sqrt();
      complex7.toString();
//      try { 
        complex5.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex0.getArgument();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex2.createComplex(1.0, 0.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.acos();
      Object object0 = new Object();
      complex1.equals((Object) null);
      Complex complex8 = complex6.createComplex((-646.8120489426507), (-387.4128570861));
      Complex complex9 = complex4.sqrt();
      complex8.conjugate();
      Complex complex10 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.add(complex7);
      complex10.equals(complex11);
      Complex.valueOf(0.4986113866728328, 2500.0);
      Complex complex12 = complex7.exp();
      complex10.reciprocal();
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex1.pow(complex0);
      complex0.ONE.reciprocal();
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex2.conjugate();
      complex9.I.nthRoot(1);
      complex5.tanh();
      Complex complex10 = complex6.cos();
      complex10.INF.sqrt();
      complex5.getReal();
      complex7.abs();
      complex1.sin();
      complex8.subtract(complex7);
      complex0.abs();
      complex1.subtract(0.41997434161402614);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.sinh();
      complex0.INF.abs();
      Complex.valueOf(2.0, (-636.23294));
      Complex complex3 = complex1.tanh();
      Complex.valueOf(1183.0);
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf((-4619.395614));
      complex5.readResolve();
      complex5.ONE.abs();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.subtract(1223.465);
      complex6.getField();
      complex6.abs();
      complex3.subtract(Double.POSITIVE_INFINITY);
      complex7.divide((-589.62197264991));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.81378074));
      complex0.NaN.abs();
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex5.negate();
      Complex complex7 = Complex.valueOf((-3204.42863), 2.1046319007873535);
      Complex complex8 = (Complex)complex1.NaN.readResolve();
      Complex complex9 = complex7.INF.asin();
      complex2.toString();
      complex0.NaN.toString();
      Complex complex10 = complex0.log();
      complex3.cosh();
      Complex complex11 = complex4.tan();
      complex11.INF.sqrt();
      complex10.nthRoot(17);
      Complex complex12 = complex8.pow((-3204.42863));
      complex6.conjugate();
      complex12.sin();
      Complex complex13 = new Complex(180, 1204.7985365);
      Complex complex14 = complex13.multiply(17);
      complex6.sqrt1z();
      complex12.equals(complex9);
      complex2.pow(complex8);
      complex7.negate();
      complex14.toString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.81378074));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.createComplex((-1270.0), 0.05786345899105072);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.pow(complex2);
      complex1.tan();
      complex4.divide(20.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.multiply(complex5);
      Complex complex7 = complex3.sin();
      complex1.abs();
      Complex complex8 = new Complex(2.8407720200442806E99, (-3596.81378074));
      complex8.multiply(0.0);
      Complex.valueOf((-20.0));
      complex6.pow((-20.0));
      complex7.nthRoot(2041);
      complex7.nthRoot(898);
      complex5.tan();
      complex7.atan();
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ZERO.acos();
      Object object0 = new Object();
      complex3.isNaN();
      Complex complex5 = complex3.createComplex(0.0, 0.0);
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex7.INF.multiply(Double.POSITIVE_INFINITY);
      complex5.sin();
      complex5.readResolve();
      Complex complex9 = complex1.multiply(7);
      complex9.I.subtract(complex0);
      complex7.INF.pow(0.0);
      Complex complex10 = complex9.I.pow(complex6);
      complex6.ONE.pow((double) 7);
      complex5.ZERO.nthRoot(7);
      Complex complex11 = complex10.subtract(complex4);
      complex11.I.readResolve();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 37.55204856929697);
      complex7.divide(complex5);
      Complex complex13 = complex12.exp();
      Complex complex14 = complex2.pow(0.0);
      complex14.NaN.conjugate();
      complex3.I.sin();
      complex12.NaN.add(37.55204856929697);
      Complex complex15 = complex0.multiply(180);
      Complex complex16 = complex15.sqrt1z();
      complex8.equals(complex15);
      complex2.pow(complex16);
      complex13.negate();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex0.getArgument();
      complex1.ONE.tan();
      Complex complex2 = new Complex(1.5707963267948966);
      Complex complex3 = complex1.NaN.add(1.5707963267948966);
      Complex complex4 = complex0.multiply(1270);
      complex4.INF.divide(complex2);
      Complex complex5 = complex1.cosh();
      Complex complex6 = new Complex(1.5707963267948966, 1270);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.sqrt();
      complex7.getArgument();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex7.NaN.sin();
      Complex complex11 = complex0.divide(0.0);
      Complex complex12 = Complex.valueOf((double) 1270);
      Complex complex13 = complex0.ZERO.add(1.5707963267948966);
      Complex complex14 = complex12.I.pow(835.961);
      complex14.ONE.add(complex11);
      complex14.sqrt1z();
      complex10.ONE.abs();
      Complex complex15 = complex0.atan();
      complex15.INF.divide(complex14);
      Complex complex16 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex16.INF.toString();
      complex16.I.toString();
      complex6.subtract(complex3);
      complex6.negate();
      complex7.isInfinite();
      complex9.atan();
      Complex complex17 = complex9.atan();
      complex10.getField();
      complex13.multiply(complex2);
      complex17.tan();
      complex13.multiply(1270);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.81378074));
      complex0.NaN.abs();
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.ONE.tanh();
      complex5.negate();
      Complex complex6 = Complex.valueOf((-3204.42863), 2.1046319007873535);
      complex1.NaN.readResolve();
      complex6.INF.asin();
      complex2.toString();
      complex0.NaN.toString();
      Complex complex7 = complex0.log();
      Complex complex8 = complex6.cosh();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.tan();
      complex10.sqrt();
      complex7.nthRoot(17);
      complex2.divide((double) 17);
      complex2.negate();
      Complex complex11 = Complex.valueOf((-4979.283960572147), (-2447.409));
      complex8.log();
      complex11.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.81378074));
      complex0.NaN.abs();
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.sqrt();
      complex1.cos();
      Complex complex6 = complex2.sqrt();
      complex5.getArgument();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex6.divide(66.468379462);
      Complex complex10 = Complex.valueOf(66.468379462);
      Complex complex11 = complex8.add(1.3775582313537598);
      complex4.pow((-399.0));
      complex0.add(complex4);
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex12.atan();
      complex4.divide(complex0);
      Complex complex14 = Complex.valueOf(66.468379462, (double) 17);
      complex9.toString();
      complex13.toString();
      complex6.subtract(complex10);
      complex5.isInfinite();
      complex11.atan();
      complex14.atan();
      complex14.getField();
      complex4.multiply(complex8);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.sinh();
      complex0.INF.abs();
      complex0.getField();
      Complex complex3 = complex0.multiply((-20.0));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.pow(0.0);
      complex5.NaN.acos();
      complex2.I.atan();
      complex4.I.multiply(complex4);
      complex2.sin();
      Complex complex6 = complex2.acos();
      complex6.ZERO.log();
      Complex complex7 = complex3.acos();
      complex7.cosh();
      complex6.add(3.6882538673612966);
      complex6.isNaN();
      Complex complex8 = Complex.INF;
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(66.468379462, 66.468379462);
      complex0.I.hashCode();
      Complex complex1 = complex0.pow(66.468379462);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.atan();
      complex0.multiply(complex2);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.acos();
      complex3.log();
      complex3.acos();
      Complex complex6 = complex5.cosh();
      Complex.valueOf((-1061.728960582));
      complex4.pow(complex2);
      complex4.nthRoot(743);
      Complex complex7 = complex0.tanh();
      complex5.isInfinite();
      Complex complex8 = complex1.tan();
      complex3.pow((-1061.728960582));
      complex8.abs();
      complex7.multiply(743);
      Complex complex9 = complex2.tanh();
      complex9.sin();
      Complex complex10 = new Complex((-1.5535335184873003), 1.821357551420394E-18);
      complex10.sqrt();
      complex10.tanh();
      complex6.divide(complex10);
      complex1.multiply(1.1730463525082348E-7);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.INF.pow(complex0);
      complex0.getImaginary();
      Complex complex5 = complex0.add(Double.NaN);
      Complex complex6 = complex1.INF.pow(Double.NaN);
      complex5.I.nthRoot(2041);
      complex4.multiply(2041);
      Complex complex7 = complex3.divide(complex1);
      Complex complex8 = complex5.multiply((-1840700269));
      Complex complex9 = complex8.multiply(2041);
      complex6.toString();
      complex9.tan();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ZERO.acos();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = complex3.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex6.NaN.conjugate();
      complex7.INF.multiply(Double.POSITIVE_INFINITY);
      complex4.add(complex2);
      complex1.equals(complex6);
      Complex.valueOf(0.4986113866728328, Double.POSITIVE_INFINITY);
      complex1.exp();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(66.468379462, 66.468379462);
      complex0.I.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.asin();
      complex2.readResolve();
      Complex complex3 = complex1.multiply(7);
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex2.pow(727.8710611473741);
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex1.pow(3349.124892291766);
      complex6.nthRoot(17);
      Complex complex8 = complex2.subtract(complex7);
      complex3.readResolve();
      Complex.valueOf(3260.4475560646774, 3349.124892291766);
      Complex complex9 = complex6.divide(complex5);
      Complex complex10 = complex6.exp();
      Complex complex11 = complex10.pow(727.8710611473741);
      Complex complex12 = complex9.conjugate();
      complex8.sin();
      complex12.multiply((-1654));
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = Complex.ONE;
      complex14.equals(complex9);
      Complex complex15 = Complex.I;
      complex5.negate();
      complex13.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getField();
      complex0.createComplex(2536.9559657023174, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = new Complex(1360.7201594096);
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ZERO.exp();
      Complex complex3 = complex2.I.asin();
      Complex.valueOf(1360.7201594096);
      Complex complex4 = complex0.sinh();
      complex4.I.abs();
      complex4.acos();
      complex0.I.toString();
      Complex complex5 = complex4.pow(complex0);
      complex5.nthRoot(2039);
      Complex complex6 = complex4.ONE.add((double) 2039);
      complex6.ONE.add((double) 2039);
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex5.pow(complex8);
      complex9.readResolve();
      complex5.cosh();
      complex8.INF.nthRoot(499);
      Complex complex10 = complex7.multiply((double) 2039);
      complex10.add(complex8);
      complex3.tan();
      Complex.valueOf((-278.60462116312), (-6.283185307179586));
      complex1.log();
      Complex complex11 = complex4.atan();
      complex11.tan();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.INF.pow(complex0);
      complex0.getImaginary();
      Complex complex5 = complex0.add(Double.POSITIVE_INFINITY);
      complex1.INF.pow(Double.POSITIVE_INFINITY);
      complex5.I.nthRoot(846);
      complex2.nthRoot(2041);
      Complex complex6 = Complex.NaN;
      complex6.add(complex3);
      complex6.subtract(complex1);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.abs();
      Complex complex1 = complex0.sinh();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.toString();
      complex2.getArgument();
      Complex complex3 = complex0.negate();
      Complex complex4 = new Complex((-4036.5689110508597), 6.283185307179586);
      complex3.add(complex4);
      complex3.log();
      Complex complex5 = Complex.ONE;
      complex5.tan();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(16.445813067200568, 16.445813067200568);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      complex1.INF.sin();
      Complex complex2 = complex0.createComplex(16.445813067200568, 16.445813067200568);
      Complex complex3 = complex2.ZERO.acos();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = complex2.createComplex(16.445813067200568, 16.445813067200568);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.INF.multiply(Double.POSITIVE_INFINITY);
      complex4.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex1.I.pow(complex5);
      complex5.atan();
      complex9.subtract(0.0);
      complex3.getField();
      complex7.abs();
      complex1.subtract((-435.8746984952199));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.sinh();
      complex0.INF.abs();
      complex1.getField();
      complex1.pow(complex0);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.divide(22.69362487);
      Complex complex6 = complex5.multiply(complex3);
      complex3.sin();
      Complex complex7 = Complex.ONE;
      complex7.abs();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, (-1219.07818));
      complex8.multiply(2496.4324992958);
      Complex complex9 = complex4.acos();
      complex5.negate();
      complex6.isInfinite();
      Complex complex10 = new Complex((-20.0), 2.6102792042257208E-23);
      complex10.toString();
      complex4.getImaginary();
      complex4.sinh();
      complex9.multiply(4223);
      Complex complex11 = Complex.ONE;
      complex11.divide(complex4);
      complex11.multiply(4223);
      complex1.multiply((-1741));
      complex1.toString();
      Complex complex12 = Complex.I;
      complex12.nthRoot(4223);
      Complex.valueOf(Double.NaN, 2496.4324992958);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.add(complex1);
      complex3.INF.pow(complex0);
      complex0.getImaginary();
      Complex complex4 = complex0.add(Double.NaN);
      complex1.INF.pow(Double.NaN);
      complex4.I.nthRoot(2041);
      complex2.nthRoot(2041);
      complex4.tan();
      Complex complex5 = complex2.atan();
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 363.934843843524);
      Complex complex1 = complex0.I.tanh();
      complex1.getArgument();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.divide((-800.668742482829));
      Complex complex5 = Complex.valueOf(363.934843843524);
      Complex complex6 = complex4.add(2043.93129);
      Complex complex7 = complex3.pow(2.414213562373095);
      Complex complex8 = new Complex(0.0);
      complex4.add(complex8);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex4.atan();
      complex9.divide(complex0);
      Complex.valueOf((-4619.395614), Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.ZERO;
      complex11.toString();
      complex2.toString();
      complex9.subtract(complex5);
      complex10.negate();
      complex3.isInfinite();
      complex7.atan();
      Complex complex12 = complex4.atan();
      complex7.getField();
      complex12.multiply(complex5);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.INF.pow(complex0);
      complex0.getImaginary();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.acos();
      complex3.negate();
      complex3.isInfinite();
      complex2.toString();
      complex4.getImaginary();
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.multiply(1);
      complex6.divide(complex2);
      complex4.multiply(4223);
      complex6.ONE.exp();
      complex0.multiply(1);
      complex6.toString();
      complex5.nthRoot(17);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ZERO.acos();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = complex2.ONE.sqrt();
      Complex complex6 = complex5.NaN.conjugate();
      complex6.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.multiply(7);
      Complex complex8 = complex6.INF.pow(0.0);
      complex5.ONE.pow((double) 7);
      complex0.ZERO.nthRoot(7);
      Complex complex9 = complex6.NaN.subtract(complex4);
      complex9.I.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex6.divide(complex0);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex11 = complex2.pow(0.0);
      complex11.NaN.conjugate();
      complex6.tan();
      complex8.atan();
      complex10.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.add(complex1);
      complex3.INF.pow(complex0);
      complex0.getImaginary();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex1.INF.pow(0.0);
      complex4.I.nthRoot(846);
      complex2.nthRoot(2041);
      complex4.tan();
      Complex complex6 = complex2.atan();
      complex6.multiply(complex1);
      complex4.pow(5.231756658302493E-4);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(66.468379462, 66.468379462);
      complex0.I.hashCode();
      Complex complex1 = complex0.tanh();
      complex1.I.asin();
      Complex complex2 = complex0.sqrt1z();
      complex0.add(complex2);
      complex2.equals(complex0);
      Complex complex3 = Complex.valueOf(66.468379462, 3.479157135998568E214);
      complex3.exp();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1681.43714, 1681.43714);
      Complex complex1 = complex0.ZERO.multiply(1);
      complex0.INF.divide((-1246.0));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.add((-1271.301464616));
      Complex complex4 = complex3.INF.sin();
      Complex.valueOf((-3.204473056113754E-129));
      Complex complex5 = complex2.NaN.divide((-1271.301464616));
      complex0.getReal();
      Complex complex6 = complex2.INF.add(0.0);
      Complex complex7 = complex6.ZERO.cosh();
      complex7.readResolve();
      complex5.toString();
      complex0.toString();
      Complex complex8 = Complex.valueOf(1681.43714, 0.0);
      complex1.acos();
      complex1.multiply((-2544));
      complex1.getImaginary();
      complex4.ONE.add(complex0);
      Complex complex9 = complex0.multiply(0);
      complex9.NaN.getArgument();
      complex8.getReal();
      complex4.sqrt1z();
      Complex.valueOf(5934.98702784);
      Complex complex10 = Complex.valueOf(0.0, 1681.43714);
      complex5.abs();
      complex9.tan();
      complex10.multiply(1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex1.NaN.divide((-1219.07818));
      Complex complex6 = complex5.I.multiply(complex0);
      Complex complex7 = complex5.I.sin();
      complex1.abs();
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex8.NaN.acos();
      complex9.NaN.negate();
      complex3.isInfinite();
      complex5.INF.toString();
      complex5.getImaginary();
      complex2.sinh();
      complex6.multiply(4223);
      Complex complex10 = complex4.divide(complex0);
      complex10.NaN.multiply((-1741));
      complex10.multiply(4223);
      complex7.toString();
//      try { 
        complex5.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.pow(289.92056);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.INF.multiply(2.0);
      complex3.ONE.abs();
      Complex complex4 = complex1.ZERO.multiply(738.0);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex0.divide(1693.938016028114);
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex6.INF.acos();
      complex0.INF.getField();
      complex4.getArgument();
      complex0.I.atan();
      Complex complex9 = complex5.sqrt1z();
      complex9.NaN.divide(1693.938016028114);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex2.pow(complex10);
      complex11.INF.atan();
      complex11.subtract(complex7);
      complex1.conjugate();
      Complex.valueOf(0.0, 20.0);
      complex8.INF.pow(738.0);
      Complex.valueOf((-1642.13523939), 0.0);
      complex0.getArgument();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.81378074));
      complex0.NaN.abs();
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.ONE.tanh();
      complex5.negate();
      Complex complex6 = Complex.valueOf((-3204.42863), 2.1046319007873535);
      complex1.NaN.readResolve();
      complex6.INF.asin();
      complex2.toString();
      complex0.NaN.toString();
      Complex complex7 = complex0.log();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex4.tan();
      complex9.INF.sqrt();
      complex7.nthRoot(17);
      complex7.divide(0.0);
      complex8.negate();
      Complex.valueOf((-4978.742), 0.0);
      complex8.log();
      complex7.tan();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      complex1.NaN.add(2.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.pow(complex1);
      complex3.INF.conjugate();
      complex1.pow(complex0);
//      try { 
        complex0.INF.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.add((-199.0));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = Complex.valueOf((-1074.56), (-1074.56));
      complex0.tanh();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.sqrt();
      complex0.I.nthRoot(1);
      Complex complex5 = complex4.subtract((-3879.969517097882));
      complex5.INF.negate();
      Complex complex6 = Complex.valueOf((-1074.56), (-199.0));
      complex4.ONE.readResolve();
      complex0.NaN.tan();
      complex4.ZERO.negate();
      Complex complex7 = complex6.atan();
      complex7.NaN.exp();
      complex2.nthRoot(574);
      complex0.I.asin();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.NaN.multiply(complex6);
      complex9.ZERO.tanh();
      complex2.getImaginary();
      complex4.hashCode();
      complex3.negate();
      complex6.getField();
      complex7.asin();
      Complex complex10 = complex1.pow((-199.0));
      Complex complex11 = complex10.ZERO.multiply((-1074.56));
      complex6.multiply(1);
      complex10.multiply(complex11);
      complex1.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ZERO.acos();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = complex3.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex7.INF.multiply(Double.POSITIVE_INFINITY);
      complex5.readResolve();
      Complex complex9 = complex1.multiply(7);
      complex9.I.subtract(complex0);
      complex7.INF.pow(0.0);
      complex9.I.pow(complex6);
      complex6.ONE.pow((double) 7);
      complex5.ZERO.nthRoot(7);
      Complex complex10 = complex7.NaN.subtract(complex4);
      complex10.I.readResolve();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex7.divide(complex5);
      Complex complex12 = complex11.exp();
      Complex complex13 = complex2.pow(0.0);
      complex13.NaN.conjugate();
      complex3.I.sin();
      Complex complex14 = complex0.multiply(180);
      Complex complex15 = complex14.sqrt1z();
      complex8.equals(complex14);
      complex2.pow(complex15);
      complex12.negate();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.add(complex1);
      complex3.INF.pow(complex0);
      complex0.getImaginary();
      Complex complex4 = complex0.add(Double.POSITIVE_INFINITY);
      complex1.INF.pow(Double.POSITIVE_INFINITY);
      complex4.I.nthRoot(846);
      complex2.nthRoot(2041);
      complex4.tan();
      Complex complex5 = complex2.atan();
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.abs();
      Complex complex1 = complex0.sinh();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.toString();
      complex2.getArgument();
      Complex complex3 = complex0.negate();
      complex3.NaN.pow(complex1);
      Complex complex4 = new Complex((-4036.5689110508597), 6.283185307179586);
      complex3.add(complex4);
      complex4.subtract(complex1);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1539.944951925099));
      Complex complex1 = Complex.ONE;
      complex1.ONE.divide(0.0);
      complex0.add(complex1);
      Complex complex2 = complex0.createComplex(0.0, 1.1279135096919439E268);
      complex2.ZERO.tan();
      complex0.getField();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.sinh();
      complex0.exp();
      complex5.abs();
      complex4.cosh();
      complex2.multiply(450);
      Complex complex7 = complex1.multiply(450);
      complex6.isNaN();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.multiply(2294);
      complex1.getField();
      complex1.isInfinite();
      Complex complex3 = complex0.ZERO.atan();
      complex0.NaN.cosh();
      Complex complex4 = complex0.multiply(complex2);
      complex3.I.sin();
      complex2.NaN.pow(complex1);
      complex3.ZERO.cos();
      Complex complex5 = complex4.acos();
      complex5.toString();
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = complex1.I.sqrt();
      Complex complex8 = Complex.valueOf(2.0, (-1.2645600379949252E-7));
      complex8.tan();
      Complex complex9 = complex6.add((double) 2294);
      complex9.getArgument();
      complex5.multiply(complex2);
      Complex complex10 = complex9.createComplex(0.0, (-1833.237773));
      complex10.subtract(complex6);
      complex1.toString();
      complex5.add((-895.47919679122));
      complex7.multiply((-879));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(515.7877432862, 0.0);
      complex0.I.tanh();
      Complex complex1 = complex0.NaN.tanh();
      complex1.ONE.sin();
      complex0.toString();
      complex0.nthRoot(901);
      Complex complex2 = Complex.valueOf((double) 901);
      Complex complex3 = complex2.cosh();
      complex2.divide(0.0);
      ComplexField complexField0 = complex3.getField();
      complex1.equals(complexField0);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1343.01479419285);
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.I.sqrt();
      complex1.ONE.toString();
      Complex complex3 = complex1.INF.add(1343.01479419285);
      Complex complex4 = complex3.INF.sqrt();
      complex4.I.getField();
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex3.ONE.divide(1343.01479419285);
      complex5.sqrt1z();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.multiply((-20.0));
      complex8.NaN.sqrt();
      Complex complex9 = complex7.multiply(complex0);
      complex9.NaN.negate();
      Complex complex10 = complex9.multiply(complex5);
      complex10.NaN.getField();
      Complex complex11 = complex4.add(0.0);
      complex11.NaN.sinh();
      complex1.subtract(0.0);
//      try { 
        complex6.nthRoot((-4880));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -4,880
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ONE.createComplex(484.5, 0.0);
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex0.ZERO.readResolve();
      Complex complex4 = complex1.NaN.conjugate();
      complex0.getImaginary();
      complex4.ONE.add((-3511.246961338));
      complex1.sin();
      complex1.INF.reciprocal();
      complex4.NaN.subtract(complex3);
//      try { 
        complex0.I.nthRoot((-4288));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -4,288
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.toString();
      complex0.isInfinite();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.INF.multiply((-2405));
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex1.I.log();
      Complex complex5 = Complex.valueOf((-287.5));
      Complex complex6 = complex0.sin();
      complex6.ONE.getArgument();
      Complex complex7 = complex6.INF.pow(0.0);
      complex7.ONE.pow(0.0);
      Complex complex8 = complex4.exp();
      Complex complex9 = complex8.pow(complex5);
      complex4.multiply(1.4403494631058154E207);
      complex9.hashCode();
      complex9.NaN.reciprocal();
      complex5.tanh();
      Complex complex10 = complex0.asin();
      complex10.NaN.conjugate();
      complex3.readResolve();
      complex0.getArgument();
      complex5.abs();
      complex9.hashCode();
      complex0.isNaN();
      complex4.readResolve();
      complex4.log();
      Complex.valueOf(0.0, 1.4403494631058154E207);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex3.ONE.multiply(0.0);
      complex4.I.sqrt1z();
      complex4.ONE.toString();
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = complex2.NaN.multiply(0.0);
      complex6.ZERO.acos();
      Complex complex7 = complex0.divide(complex5);
      complex3.getField();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = Complex.ONE;
      complex9.ZERO.pow(complex10);
      complex9.NaN.abs();
      Complex complex11 = complex7.pow(0.0);
      complex7.ZERO.acos();
      Complex complex12 = complex10.ONE.sinh();
      complex12.ONE.divide((double) 1);
      complex11.reciprocal();
      complex8.sinh();
      Complex complex13 = Complex.ONE;
      complex10.subtract(complex13);
      Complex complex14 = complex0.acos();
      complex14.INF.add(complex9);
      complex7.acos();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      complex0.getImaginary();
      complex0.sqrt();
      complex1.I.getField();
      Complex complex2 = complex0.tanh();
      complex1.atan();
      Complex.valueOf((-722.431), (-722.431));
      Complex complex3 = complex2.tanh();
      complex3.ONE.createComplex(5.275183961165903E212, (-1289.217710866));
      complex0.divide(639.7878151);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.toString();
      Complex complex1 = new Complex(1943.025252191, 1943.025252191);
      complex0.subtract(complex1);
      complex1.INF.subtract(1943.025252191);
      Complex complex2 = complex1.asin();
      complex2.INF.conjugate();
      Complex complex3 = Complex.valueOf(1943.025252191, 1.534146910128904E-8);
      Complex complex4 = Complex.I;
      complex4.divide(1.426849365234375);
      complex3.INF.add(complex4);
      Complex complex5 = complex1.tan();
      complex5.INF.tan();
      Complex complex6 = complex0.pow(1943.025252191);
      complex5.ONE.createComplex(0.0, 0.0);
      complex1.INF.asin();
      complex0.INF.multiply(3520);
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex0.reciprocal();
      complex5.isInfinite();
      complex7.conjugate();
      complex7.add(4165.267269);
      complex1.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.8859560029989374E-9));
      complex0.INF.toString();
      complex0.nthRoot(17);
      complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.INF.tan();
      complex3.ZERO.readResolve();
      complex3.ZERO.nthRoot(2372);
      complex2.NaN.conjugate();
      Complex complex4 = complex3.I.multiply(1341);
      Complex complex5 = complex4.ONE.cosh();
      complex1.nthRoot(17);
      complex0.ONE.log();
      complex1.isNaN();
      Complex complex6 = complex0.asin();
      complex0.abs();
      complex1.equals(complex0);
      Complex complex7 = complex1.log();
      complex7.getImaginary();
      complex5.isNaN();
      complex1.negate();
      Complex complex8 = Complex.valueOf(1949.57261879, (double) 17);
      complex4.divide(complex8);
      complex6.atan();
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.ZERO.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.tanh();
      complex3.ZERO.sqrt1z();
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex4.I.negate();
      complex6.getArgument();
      complex6.I.log();
      Complex complex7 = complex3.log();
      Complex complex8 = complex5.INF.cosh();
      complex5.ONE.readResolve();
      complex5.I.hashCode();
      Complex complex9 = complex5.acos();
      complex9.INF.asin();
      complex9.ZERO.getArgument();
      Complex complex10 = complex0.divide(0.0);
      complex10.I.subtract(0.0);
      Complex complex11 = complex8.tan();
      double double0 = (-997.8777);
      Complex complex12 = complex3.divide((-997.8777));
      complex11.NaN.exp();
      complex12.I.acos();
      complex12.pow(complex7);
      complex11.conjugate();
//      try { 
        complex7.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex1.ONE.subtract(complex0);
      complex0.toString();
      complex0.I.conjugate();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.NaN.sqrt();
      complex3.I.cos();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.ZERO.tan();
      complex5.NaN.multiply(1.007843017578125);
      complex5.getArgument();
      Complex complex6 = complex0.subtract(0.0);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.ONE.multiply(complex1);
      complex0.NaN.subtract(6.283185307179586);
      complex0.equals((Object) null);
      Complex complex2 = Complex.valueOf((-3685.53315), 3.479157135998568E214);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.sinh();
      complex0.INF.abs();
      complex0.getField();
      Complex complex3 = complex0.multiply((-20.0));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex6.ONE.conjugate();
      complex7.I.atan();
      Complex complex8 = complex7.I.multiply(complex4);
      Complex complex9 = complex2.sin();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.ZERO.log();
      Complex complex12 = complex3.acos();
      Complex complex13 = complex12.cosh();
      Complex complex14 = Complex.valueOf((-1061.728960582));
      complex12.pow(complex8);
      complex4.nthRoot(1710);
      complex0.ONE.tanh();
      complex14.isInfinite();
      Complex complex15 = complex14.NaN.tan();
      complex13.pow(0.0);
      complex12.abs();
      complex6.multiply(37);
      Complex complex16 = complex11.tanh();
      complex16.sin();
      complex14.sqrt();
      complex13.tanh();
      complex9.divide(complex15);
      complex1.multiply((-2113.6925));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.conjugate();
      complex0.INF.multiply(complex1);
      Complex complex3 = complex0.NaN.sinh();
      complex3.ONE.readResolve();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.NaN.multiply(0.0);
      Complex complex6 = complex0.pow((-65.3999071832));
      complex6.ZERO.nthRoot(1);
      Complex complex7 = complex6.sqrt();
      complex5.ZERO.cosh();
      Complex complex8 = complex7.ZERO.sqrt();
      complex5.acos();
      complex8.getArgument();
      complex1.getImaginary();
      complex7.add(complex8);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex0.getArgument();
      complex1.ONE.tan();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.NaN.add(1.5707963267948966);
      Complex complex4 = complex0.multiply(1270);
      complex4.INF.divide(complex2);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.sqrt();
      complex7.getArgument();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex7.NaN.sin();
      Complex complex11 = complex0.divide(0.0);
      Complex complex12 = Complex.valueOf((double) 1270);
      Complex complex13 = complex0.ZERO.add(1.5707963267948966);
      Complex complex14 = complex12.I.pow(835.961);
      complex14.ONE.add(complex11);
      complex14.sqrt1z();
      Complex complex15 = complex0.atan();
      complex15.INF.divide(complex14);
      Complex complex16 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex16.INF.toString();
      complex16.I.toString();
      complex6.subtract(complex3);
      complex6.negate();
      complex7.isInfinite();
      complex9.atan();
      Complex complex17 = complex9.atan();
      complex10.getField();
      complex13.multiply(complex2);
      complex17.tan();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(7);
      complex0.tan();
      Complex complex1 = complex0.add((double) 7);
      complex0.isNaN();
      complex1.acos();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.isNaN();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex0.sinh();
      complex4.getField();
      Complex complex5 = complex1.subtract((-2209.5392193863));
      Complex complex6 = Complex.valueOf(3389.563);
      complex6.NaN.cos();
      Complex complex7 = complex0.cos();
      complex7.I.tanh();
      Complex complex8 = complex3.log();
      Complex complex9 = complex2.cosh();
      complex8.hashCode();
      Complex complex10 = complex0.INF.createComplex(1.9911192455808124E-7, 0.0);
      Complex complex11 = Complex.valueOf(1.0, (-1107.6));
      complex8.getImaginary();
      complex11.INF.acos();
      Complex complex12 = complex11.tan();
      complex12.multiply(complex4);
      complex0.pow(0.0);
      complex10.cosh();
      Complex.valueOf((-3092.79), 0.0);
      complex12.sinh();
      complex9.getArgument();
      complex5.createComplex(1.0, 3389.563);
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.divide(565.2);
      Complex complex3 = complex2.ONE.sin();
      complex3.ZERO.getArgument();
      Complex complex4 = complex2.NaN.sqrt();
      complex3.add(complex2);
      Complex complex5 = complex0.NaN.sin();
      complex5.NaN.createComplex((-6530.55211929335), 0.0);
      complex5.INF.conjugate();
      complex5.ZERO.abs();
      complex4.conjugate();
      Complex complex6 = complex3.I.tan();
      complex0.asin();
      complex3.getImaginary();
      complex2.pow(complex1);
      complex6.asin();
      complex2.divide(complex4);
      complex1.multiply((-3044));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1655.332), 3523.5);
      Complex complex1 = new Complex(2.0, 3523.5);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex4.tanh();
      complex5.I.reciprocal();
      complex5.ZERO.divide(complex2);
      Complex complex6 = complex0.INF.sin();
      complex6.ZERO.reciprocal();
      Complex complex7 = complex2.INF.asin();
      complex7.INF.divide(3523.5);
      int int0 = (-1908);
      Complex complex8 = complex1.sqrt1z();
      complex8.ONE.sin();
      complex8.NaN.atan();
//      try { 
        complex2.NaN.nthRoot((-1908));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,908
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.readResolve();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex5.ONE.sqrt1z();
      complex6.INF.divide(0.27193373441696167);
      complex3.ZERO.divide(3.481513333662908E-8);
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex7.ONE.createComplex(2.3709316816226527E-8, 2.3709316816226527E-8);
      complex8.NaN.multiply(0.0);
      complex3.INF.getArgument();
      complex3.I.abs();
      complex0.getArgument();
      Complex complex9 = complex0.multiply(complex3);
      Complex complex10 = complex2.log();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex10.conjugate();
      complex12.ONE.hashCode();
      Complex complex13 = complex4.sqrt1z();
      complex13.NaN.subtract(complex9);
      complex11.getImaginary();
      Complex complex14 = complex4.asin();
      complex2.abs();
      complex14.sqrt();
      complex12.cos();
      complex3.sinh();
      complex7.sin();
      complex4.getField();
      complex0.multiply((-936));
      Complex.valueOf(2.3709316816226527E-8);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2531.30017567253, (-349.07));
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ONE.conjugate();
      complex0.isNaN();
      Complex complex2 = complex1.asin();
      complex0.createComplex((-349.07), 676.8485);
      Complex complex3 = complex0.divide(complex2);
      complex2.ONE.getField();
      complex0.ONE.multiply(1.0);
      complex2.getArgument();
      Complex complex4 = complex0.sqrt();
      complex1.INF.toString();
      Complex complex5 = complex4.pow((-464.67006790368));
      complex5.NaN.hashCode();
      Complex complex6 = complex3.sqrt1z();
      complex5.subtract(complex6);
      complex3.isInfinite();
      Complex.valueOf((-926.7410823), (-2.327564406466327E-7));
      complex6.pow(676.8485);
      complex5.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4909508228302002, 666.96);
      complex0.sin();
      Complex complex1 = complex0.subtract((-308.828682381628));
      complex0.isNaN();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex1.tanh();
      complex2.ONE.pow(complex4);
      complex1.isNaN();
      complex4.I.subtract(complex2);
      Complex complex5 = complex4.divide(complex1);
      complex5.acos();
      complex4.getField();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1374.0);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.INF.divide(1374.0);
      Complex complex4 = Complex.valueOf(1374.0, 0.0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = new Complex(1374.0, (-2115.3392795618374));
      Complex complex6 = complex3.NaN.asin();
      Complex complex7 = complex3.pow(complex5);
      complex7.INF.getArgument();
      Complex complex8 = complex7.ONE.add(complex5);
      assertFalse(complex8.isInfinite());
      assertEquals((-2115.3392795618374), complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex7.INF.add(1374.0);
      Complex complex10 = complex3.ONE.pow(complex0);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex5.ZERO.sinh();
      Object object0 = complex11.readResolve();
      assertFalse(object0.equals((Object)complex9));
      
      double double0 = complex11.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex7.ONE.log();
      complex2.abs();
      complex11.isInfinite();
      Complex complex13 = complex2.add(complex0);
      complex13.NaN.exp();
      Complex complex14 = Complex.NaN;
      complex0.equals(complex14);
      complex10.hashCode();
      assertTrue(complex3.equals((Object)complex13));
      
      Complex complex15 = complex11.pow(complex2);
      Complex complex16 = complex15.subtract(0.7853981633974483);
      assertTrue(complex16.equals((Object)complex10));
      assertNotSame(complex11, complex7);
      assertSame(complex15, complex6);
      assertTrue(complex2.equals((Object)complex12));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.INF.sin();
      complex1.I.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      int int0 = (-2222);
//      try { 
        complex2.NaN.nthRoot((-2222));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,222
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.multiply(472);
      assertEquals(472.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.multiply(472);
      complex1.toString();
      Complex complex4 = complex1.reciprocal();
      String string0 = complex3.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex5 = complex1.INF.sqrt();
      assertTrue(complex5.equals((Object)complex4));
      
      complex3.ONE.getField();
      Complex complex6 = complex3.divide((-1434.3));
      Complex complex7 = complex1.subtract(complex6);
      Complex complex8 = complex3.ONE.multiply(1887);
      Complex complex9 = Complex.valueOf(0.5016034841537476, 0.0);
      Complex complex10 = complex8.ONE.divide(complex9);
      Complex complex11 = complex10.sqrt();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(1887.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(1.4119513330572928, complex11.getReal(), 0.01);
      
      Complex complex12 = complex3.subtract((-1063.0));
      assertEquals(1063.0, complex12.getReal(), 0.01);
      
      complex7.readResolve();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex7.equals((Object)complex4));
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getField();
      Complex complex1 = complex0.createComplex(2536.9559657023174, (-717.297));
      assertFalse(complex1.isNaN());
      assertEquals((-717.297), complex1.getImaginary(), 0.01);
      assertEquals(2536.9559657023174, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }
}
