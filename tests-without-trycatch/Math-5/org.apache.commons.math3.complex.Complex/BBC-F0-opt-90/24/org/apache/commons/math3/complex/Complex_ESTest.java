/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:01:16 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2780.94606086), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      complex1.multiply(1737.336796679);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2780.94606086), Double.POSITIVE_INFINITY);
      complex1.multiply(1737.336796679);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(20.0, (-20.0));
      complex1.tanh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(679.963, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf(3.669404761339415E-165, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.abs();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-19.249), (-19.249));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      complex1.ONE.toString();
//      try { 
        complex0.I.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.pow((-634.949));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.add(1.1892591576149107E49);
      Complex complex5 = complex3.atan();
      Complex complex6 = Complex.valueOf((-634.949), 640.0);
      Complex complex7 = complex4.reciprocal();
      complex7.INF.hashCode();
      complex5.sin();
      complex1.pow(1.1892591576149107E49);
      Complex complex8 = complex3.divide(1.5707963267948966);
      complex0.I.nthRoot(2546);
      complex8.ONE.acos();
      Complex complex9 = Complex.valueOf(1.1892591576149107E49, Double.POSITIVE_INFINITY);
      complex2.pow(complex9);
      complex0.NaN.exp();
      Complex complex10 = complex4.tan();
      complex10.I.abs();
      complex6.sqrt();
      complex5.multiply((-517.9));
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(1824.0518504);
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.tan();
      Complex complex2 = Complex.ZERO;
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(19.2491727, 19.2491727);
      Complex.valueOf(951.8098998032287);
      Complex complex2 = complex1.sin();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4135.2406306067, 6.122543452787843E-82);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1097.0, 1097.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.cosh();
      Complex.valueOf(1097.0, Double.POSITIVE_INFINITY);
      complex0.NaN.tan();
      Complex complex4 = complex2.multiply((-20.0));
      complex4.ZERO.asin();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, Double.NaN);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      complex0.add(complex2);
      Complex complex3 = complex1.tanh();
      complex3.I.add(Double.NaN);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.conjugate();
      complex2.add(complex1);
      Complex complex3 = complex2.multiply((-1.0));
      complex2.atan();
      Complex complex4 = Complex.ZERO;
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-2723.33480573723), (-2723.33480573723));
      Complex complex2 = complex1.INF.log();
      complex2.INF.cos();
      complex2.ONE.add(complex0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.NaN.subtract((-2723.33480573723));
      Complex complex5 = complex0.negate();
      complex5.ONE.sqrt();
      complex1.cosh();
      complex4.createComplex((-2723.33480573723), 3.0099905634916516E236);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
//      try { 
        complex0.NaN.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-19.2491727), (-19.2491727));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.conjugate();
      complex0.add(complex2);
      complex1.multiply(15.859651655567509);
      complex3.atan();
      Complex complex4 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062);
      complex0.cos();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = complex0.I.cos();
      complex0.negate();
      int int0 = (-2746);
//      try { 
        complex1.ONE.nthRoot((-2746));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,746
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = new Complex((-1699.086912088), (-1699.086912088));
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex.valueOf(7.808670894670738E56, 7.808670894670738E56);
      Complex complex2 = complex0.tanh();
      complex1.asin();
      complex2.conjugate();
      Complex complex3 = complex0.add(complex2);
      complex3.multiply((-309.2175641));
      complex2.atan();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.016525972830718E-8, (-1751.26566253));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.tanh();
      complex0.ZERO.negate();
      Complex complex4 = complex0.pow(2.016525972830718E-8);
      Complex.valueOf(0.8423992534628301, 0.8423992534628301);
      complex0.abs();
      Complex complex5 = complex2.divide(3.861525553653117E-227);
      complex5.NaN.divide(complex2);
      complex0.multiply((-1317.323));
      Complex complex6 = complex5.sqrt1z();
      complex6.I.getArgument();
      complex4.acos();
      complex3.createComplex(2.016525972830718E-8, (-0.9999999951621779));
      Complex complex7 = complex2.divide(416.6456792);
      complex7.NaN.cos();
      Complex complex8 = Complex.valueOf(2.016525972830718E-8);
      Complex.valueOf(6.283185307179586);
      complex0.isInfinite();
      Complex complex9 = Complex.valueOf(2.016525972830718E-8, (-1317.323));
      complex8.add(complex9);
      complex1.multiply((-133.3221216046798));
//      try { 
        complex2.nthRoot((-590));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -590
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, (-20.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      complex1.add(complex2);
      complex0.tanh();
      Complex complex3 = Complex.valueOf(999.32309);
      complex2.sin();
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.ZERO;
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.reciprocal();
      Complex complex1 = new Complex((-1699.086912088), (-1699.086912088));
      complex0.multiply(complex1);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.conjugate();
//      try { 
        complex3.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      complex2.abs();
      complex2.multiply((-2390));
      Object object0 = new Object();
      Complex complex3 = Complex.ZERO;
      complex3.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sin();
      complex1.I.cos();
      complex5.ZERO.cosh();
      complex2.readResolve();
      complex3.sin();
      complex1.equals(complex2);
      Complex complex6 = Complex.I;
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      complex0.INF.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex2.readResolve();
      Complex complex3 = Complex.valueOf((-19.2491727));
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.ZERO;
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1.3325698375701904, 9.108847563791418);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.add(complex2);
      complex0.tanh();
      Complex complex4 = complex2.subtract(complex3);
      complex4.getImaginary();
      complex0.reciprocal();
      complex2.negate();
      complex2.pow(1.3325698375701904);
      complex3.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.valueOf((-4020.0));
      complex6.subtract((-470.4740221305));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1964.72571107303, 1.0);
      Complex complex1 = complex0.I.multiply(1662233503);
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex2.INF.subtract(3788.79211);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.cosh();
      complex1.toString();
      complex5.NaN.pow(complex2);
      complex4.I.abs();
      complex0.abs();
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex0.divide(complex6);
      complex7.I.asin();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex3.I.createComplex(Double.NaN, (-2613.8));
      complex9.NaN.divide(complex8);
      Complex complex10 = complex8.I.subtract(complex3);
      complex10.NaN.tanh();
      complex10.I.conjugate();
      Complex complex11 = complex5.multiply(complex4);
      complex6.I.conjugate();
      complex11.ZERO.asin();
      complex3.log();
      double double0 = (-2.6183651590639875E-8);
      complex4.multiply(complex8);
      Complex complex12 = complex4.pow((-2.6183651590639875E-8));
      complex12.NaN.conjugate();
      // Undeclared exception!
      complex2.nthRoot(1662233503);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, (-20.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.I;
      complex3.divide(complex1);
      Complex complex4 = Complex.valueOf((-640.0), (-1911.2472963));
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex3.multiply(25.935034337062);
      complex6.acos();
      complex5.getReal();
      complex3.hashCode();
      Complex complex8 = Complex.ZERO;
      complex8.NaN.log();
      Complex complex9 = Complex.valueOf(2.243727464929947E22, (-1.0));
      complex9.getReal();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 25.935034337062);
      complex7.sqrt1z();
      complex4.pow(complex9);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.log();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.atan();
      complex1.NaN.sin();
      complex2.abs();
      Complex complex3 = complex0.I.subtract(0.0);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.add(complex5);
      complex6.multiply(Double.NaN);
      complex3.atan();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3.6897084415718804E137), 1.7976931348623157E308);
      Complex complex2 = complex1.multiply(complex0);
      complex2.abs();
      Complex complex3 = complex1.multiply(1307772550);
      Object object0 = new Object();
      complex1.getArgument();
      complex0.sin();
      complex0.subtract(1.5707963267948966);
      Complex complex4 = complex1.sinh();
      complex1.toString();
      Complex complex5 = complex1.sinh();
      complex5.add(complex4);
      complex3.acos();
      Complex.valueOf(5.496286205947399);
      complex1.multiply(16487023);
      Complex complex6 = Complex.ONE;
      Complex complex7 = new Complex(20.0, (-690));
      complex7.subtract((-2690.0921879602));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      Complex complex1 = complex0.tanh();
      complex0.getImaginary();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.conjugate();
      Complex.valueOf(25.935034337062);
      complex0.add(complex4);
      complex2.multiply(1.054760847603618E-7);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.sqrt();
      complex0.toString();
      complex6.reciprocal();
      complex4.sqrt1z();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = new Complex((-1699.086912088), (-1699.086912088));
      complex1.I.abs();
      Complex complex3 = Complex.ONE;
      complex1.sin();
      complex2.tan();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, (-20.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.add(complex2);
      complex0.tanh();
      Complex complex4 = complex2.subtract(complex3);
      complex4.getImaginary();
      complex0.reciprocal();
      Complex complex5 = complex2.negate();
      complex3.abs();
      complex4.acos();
      complex0.multiply(1802);
      complex5.subtract(25.935034337062);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.tanh();
      complex3.subtract(complex2);
      complex2.getImaginary();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.negate();
      complex4.abs();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.multiply((-1974376476));
      complex8.subtract((double) 1802);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      complex0.exp();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf((-19.2491727), (-19.2491727));
      Complex complex4 = Complex.I;
      complex4.tanh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.conjugate();
      complex1.add(complex5);
      Complex complex7 = complex6.multiply((-19.2491727));
      Complex complex8 = complex7.atan();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.reciprocal();
      Complex complex1 = new Complex((-1699.086912088), (-1699.086912088));
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.abs();
      Complex complex3 = Complex.valueOf((-1699.086912088), 20.0);
      complex3.isInfinite();
      complex3.add(complex1);
      Complex complex4 = complex2.exp();
      complex1.pow(2091.0521);
      Complex complex5 = complex4.multiply(211);
      Complex complex6 = complex5.asin();
      complex6.readResolve();
      Object object0 = new Object();
      complex4.equals(object0);
      complex4.sqrt1z();
      complex2.createComplex(211, 4247.53028122966);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      complex0.atan();
      Complex complex1 = complex0.sin();
      complex0.abs();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.valueOf(36.677677300084994, 25.935034337062);
      Complex complex4 = complex3.add(complex0);
      complex4.ONE.subtract(complex2);
      Complex complex5 = complex3.pow(1.0);
      complex4.pow(complex2);
      complex5.hashCode();
      complex0.add(3.0099905634916516E236);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      complex1.INF.sin();
      complex0.abs();
      Complex complex3 = complex0.sinh();
      complex0.isInfinite();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.pow(1.0);
      complex6.multiply(211);
      Complex complex7 = complex5.acos();
      complex7.exp();
      complex1.getReal();
      complex5.hashCode();
      complex3.getReal();
      complex6.readResolve();
      complex3.sqrt1z();
      complex6.pow(complex4);
      Object object0 = complex7.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(197.269);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = Complex.valueOf(2.0, 197.269);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = Complex.valueOf(6.283185307179586, 2259.358992);
      Complex complex9 = complex7.tan();
      Complex complex10 = complex6.multiply((-2.962808678543354));
      complex9.acos();
      complex6.getReal();
      complex10.hashCode();
      complex9.getReal();
      complex3.readResolve();
      complex3.sqrt1z();
      complex10.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-20.0));
      complex0.sin();
      Complex complex1 = complex0.tan();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.log();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.NaN.sin();
      complex2.abs();
      Complex complex4 = complex0.I.subtract(0.0);
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.I.pow((-370.0));
      complex6.multiply(172);
      complex1.asin();
      complex3.readResolve();
      complex4.equals(complex6);
      Complex complex7 = Complex.NaN;
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.add(1.0);
      Complex complex3 = Complex.I;
      complex1.getArgument();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.pow(complex2);
      complex2.tan();
      complex5.isInfinite();
      complex2.atan();
      Complex complex7 = complex6.tanh();
      complex7.nthRoot(1);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.INF.subtract(complex5);
      complex4.getImaginary();
      Complex complex7 = complex1.I.reciprocal();
      complex7.INF.subtract(complex6);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = complex7.subtract((-8.204903560604627E-9));
      Complex.valueOf(2564.135500585, 1.4380402565002441);
      Complex complex11 = Complex.INF;
      Complex complex12 = new Complex((-370.0));
      complex12.pow((-370.0));
      complex10.pow(complex9);
      complex1.hashCode();
      complex5.add((-1141.5887));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = new Complex((-1699.086912088), (-1699.086912088));
      Complex complex3 = complex0.multiply(complex2);
      complex3.I.abs();
      complex1.ONE.multiply((-690));
      Object object0 = new Object();
      complex0.I.getArgument();
      Complex complex4 = complex3.INF.sin();
      complex0.subtract((-1699.086912088));
      Complex complex5 = complex1.NaN.sinh();
      complex5.INF.toString();
      complex4.sinh();
      complex4.add(complex0);
      Complex complex6 = complex3.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.multiply(895);
      Complex complex7 = Complex.ONE;
      complex7.subtract(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.add(complex0);
      complex2.INF.tanh();
      Complex complex4 = complex0.subtract(complex1);
      complex4.getImaginary();
      Complex complex5 = complex1.I.reciprocal();
      complex0.negate();
      complex4.abs();
      complex4.subtract(973.1196985959);
      complex0.add(complex2);
      complex1.pow(Double.POSITIVE_INFINITY);
      complex3.pow(complex0);
      complex4.hashCode();
      complex5.add(973.1196985959);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      complex0.INF.log();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.NaN.sin();
      complex3.abs();
      complex1.I.subtract(0.0);
      complex0.add(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.reciprocal();
      complex5.tan();
      Complex complex7 = complex2.multiply((-1344.67));
      Complex complex8 = complex6.acos();
      complex6.getReal();
      complex8.hashCode();
      Complex complex9 = Complex.ZERO;
      complex4.getReal();
      complex7.readResolve();
      Complex complex10 = new Complex(Double.NaN, 1148.5680425314);
      complex7.sqrt1z();
      Complex complex11 = Complex.I;
      complex9.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.subtract((-1523.0));
      Complex complex6 = complex5.pow(complex1);
      complex1.divide(complex4);
      complex5.readResolve();
      Complex complex7 = complex4.divide((-1523.0));
      complex4.divide(complex5);
      Complex complex8 = Complex.valueOf((-1911.2472963), 703.242179616328);
      Complex complex9 = complex3.sin();
      Complex complex10 = Complex.valueOf(Double.NaN, 1.4713785913045285E-4);
      complex8.ONE.hashCode();
      complex3.subtract(complex10);
      complex8.reciprocal();
      complex7.ONE.cos();
      Complex complex11 = complex7.tan();
      complex11.multiply(703.242179616328);
      complex2.acos();
      complex2.getReal();
      complex3.hashCode();
      Complex complex12 = Complex.ZERO;
      complex3.getReal();
      complex6.readResolve();
      Complex complex13 = new Complex(9.536371924829942E-17, (-359.7642));
      Complex complex14 = Complex.INF;
      complex14.sqrt1z();
      complex3.pow(complex9);
      complex3.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.add(1.0);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ZERO;
      complex4.getArgument();
      Complex complex5 = Complex.valueOf((double) (-22));
      complex2.INF.divide((double) (-22));
      Complex complex6 = complex5.tanh();
      complex0.readResolve();
      Complex complex7 = complex0.pow(complex2);
      complex2.tan();
      complex6.isInfinite();
      complex4.atan();
      Complex complex8 = complex7.tanh();
//      try { 
        complex8.nthRoot((-22));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -22
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex2.INF.atan();
      complex0.add(complex4);
      Complex complex5 = complex3.subtract(2.414213562373095);
      Complex complex6 = complex4.pow(complex5);
      complex4.divide(complex1);
      Complex complex7 = Complex.ZERO;
      complex7.readResolve();
      Complex complex8 = complex2.divide((-692.5780468));
      Complex complex9 = Complex.valueOf(3844.39, Double.NaN);
      Complex complex10 = complex7.divide(complex9);
      Complex complex11 = Complex.valueOf((-1.0), 4506.063734302391);
      Complex complex12 = complex10.sin();
      complex12.I.exp();
      complex4.subtract(complex3);
      Complex complex13 = complex6.reciprocal();
      Complex complex14 = complex9.tan();
      complex14.multiply(Double.NaN);
      complex2.acos();
      complex3.getReal();
      complex11.hashCode();
      complex8.getReal();
      complex9.readResolve();
      Complex complex15 = new Complex(2549.16, (-368.959647));
      complex15.sqrt1z();
      complex13.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.exp();
      complex2.ZERO.add(complex0);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.INF.subtract(complex5);
      complex4.getImaginary();
      Complex complex7 = complex1.I.reciprocal();
      complex7.INF.subtract(complex6);
      Complex complex8 = complex0.negate();
      complex5.divide(complex8);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      int int0 = (-3382);
//      try { 
        complex9.nthRoot((-3382));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,382
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      complex1.INF.nthRoot(1);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.ZERO.exp();
      complex3.INF.log();
      complex3.ONE.add(complex0);
      complex1.INF.subtract((double) 1);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.INF.divide(complex0);
      complex5.NaN.readResolve();
      Complex complex6 = complex1.divide(Double.NaN);
      Complex complex7 = complex6.NaN.divide(complex1);
      Complex.valueOf((-1911.2472963), 2.0);
      Complex complex8 = complex6.sin();
      complex0.NaN.subtract(complex1);
      complex4.reciprocal();
      Complex complex9 = Complex.valueOf((-2.962808678543354), (-2.962808678543354));
      complex9.tan();
      complex0.multiply((-3609.600203897364));
      Complex complex10 = complex1.acos();
      complex5.getReal();
      complex10.hashCode();
      complex7.getReal();
      complex6.readResolve();
      complex3.sqrt1z();
      complex8.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      complex2.sqrt1z();
      complex0.hashCode();
      Complex complex3 = complex1.INF.sin();
      complex0.abs();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.INF.sqrt();
      complex2.isInfinite();
      Complex complex6 = complex4.add(complex0);
      complex6.exp();
      Complex complex7 = complex1.pow(1.0);
      complex7.multiply(211);
      complex3.multiply((-2644));
      Complex.valueOf((double) (-1600));
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-19.2491727), 1.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.conjugate();
      complex3.add(complex4);
      complex4.multiply(25.935034337062);
      complex5.atan();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 4414.60426911);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.multiply(complex2);
      complex5.conjugate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.log();
      Object object0 = complex6.readResolve();
      complex1.equals(object0);
      complex0.tanh();
      complex8.toString();
      Complex.valueOf((-3468.4868640934), (-3468.4868640934));
      complex3.divide(Double.POSITIVE_INFINITY);
      complex6.toString();
      complex3.multiply(4723);
//      try { 
        complex3.nthRoot((-1179));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,179
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-3047.688659134));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = new Complex(2.787906051540986E261);
      complex4.hashCode();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.sin();
      Complex complex7 = Complex.valueOf(2.787906051540986E261, (-738.6));
      complex7.abs();
      Complex complex8 = complex3.sinh();
      Complex.valueOf((-574.24695040287), 0.49030399322509766);
      complex6.sqrt();
      complex3.isInfinite();
      complex1.add(complex8);
      complex2.exp();
      Complex complex9 = complex1.pow(Double.NaN);
      Complex complex10 = complex3.multiply(410);
      complex2.asin();
      complex6.readResolve();
      complex10.equals(complex2);
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      complex1.INF.nthRoot(1);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.INF.log();
      complex3.ONE.add(complex0);
      Complex complex5 = complex1.INF.subtract((double) 1);
      complex0.pow(complex1);
      Complex complex6 = complex1.INF.divide(complex0);
      complex6.NaN.readResolve();
      Complex complex7 = complex1.divide(Double.NaN);
      complex7.NaN.divide(complex1);
      Complex complex8 = Complex.valueOf((-1911.2472963), 2.0);
      complex6.createComplex(1, Double.NaN);
      complex0.abs();
      complex5.getArgument();
      complex1.cos();
      Complex.valueOf(Double.NaN, 2.0);
      complex4.equals(complex8);
      complex6.multiply(413);
      Complex.valueOf(2334.755);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex2.INF.atan();
      complex4.I.cos();
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex5.I.pow(complex1);
      Complex complex7 = complex1.INF.asin();
      Complex complex8 = complex3.multiply(17);
      Complex complex9 = Complex.ONE;
      complex9.getArgument();
      complex7.isNaN();
      Complex complex10 = new Complex(17);
      complex10.acos();
      complex6.getField();
      complex3.conjugate();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.INF;
      complex1.equals(object0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sqrt1z();
      complex0.hashCode();
      complex1.INF.sin();
      complex0.abs();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.INF.sqrt();
      complex2.isInfinite();
      Complex complex6 = complex4.add(complex0);
      complex6.exp();
      Complex complex7 = complex1.pow(1.0);
      Complex complex8 = complex7.multiply(211);
      complex3.asin();
      complex4.pow(5.073923825786778E-9);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex0.readResolve();
      complex1.tan();
      Complex complex2 = complex1.sinh();
      complex2.getField();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.reciprocal();
      complex0.abs();
      complex4.hashCode();
      Complex complex5 = Complex.NaN;
      complex2.subtract(complex5);
      Complex complex6 = complex0.subtract(complex5);
      complex0.isInfinite();
      Complex complex7 = complex3.log();
      complex0.nthRoot(423);
      complex6.atan();
      Complex complex8 = complex7.subtract((-3.702271091849158E-8));
      complex3.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.getField();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.asin();
      complex2.atan();
      complex3.abs();
      Complex complex4 = complex0.subtract(Double.NaN);
      Complex complex5 = complex4.add(complex2);
      complex0.pow((-2141.87));
      Complex complex6 = Complex.valueOf((-2141.87));
      complex6.pow(complex3);
      complex5.hashCode();
      complex0.add(1416.7994730161633);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.add(complex0);
      complex2.INF.tanh();
      Complex complex4 = complex0.subtract(complex1);
      complex4.getImaginary();
      Complex complex5 = complex1.I.reciprocal();
      complex0.negate();
      complex4.abs();
      complex4.subtract(973.1196985959);
      complex0.add(complex2);
      complex1.pow(Double.POSITIVE_INFINITY);
      complex3.pow(complex0);
      complex4.hashCode();
      complex4.add(15.24);
      complex5.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = Complex.I;
      complex2.ONE.getArgument();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.I.tan();
      complex1.isInfinite();
      complex5.createComplex(0.0, 0.0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.pow(complex3);
      complex4.toString();
      complex3.equals(complex7);
      Complex complex8 = Complex.ONE;
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.83901764243093E-296), 0.0);
      Complex complex1 = complex0.I.acos();
      complex0.INF.asin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.add(0.0);
      Complex complex5 = complex4.INF.exp();
      complex5.ZERO.getArgument();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.ZERO.multiply(complex4);
      Complex complex8 = complex6.cos();
      complex1.sinh();
      Complex complex9 = complex7.add(0.0);
      Complex complex10 = complex9.ONE.add(complex1);
      complex10.INF.toString();
      complex6.ZERO.exp();
      Complex complex11 = complex3.ZERO.sin();
      complex3.cos();
      complex9.INF.sinh();
      Complex complex12 = complex8.reciprocal();
      complex9.sqrt();
      complex3.getArgument();
      complex11.isInfinite();
      complex12.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.divide((-401.339486526));
      complex3.ONE.sinh();
      Complex complex4 = complex1.add(complex2);
      complex3.acos();
      Complex complex5 = complex4.multiply(1802);
      complex5.subtract((-401.339486526));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3690.27846112, 1.378919824418909E-7);
      Complex complex1 = new Complex(1062.9072, 1062.9072);
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.INF.multiply(2695);
      Complex complex4 = complex3.log();
      complex4.NaN.add(complex3);
      Complex complex5 = complex0.NaN.add(complex1);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ZERO.divide(3690.27846112);
      complex6.INF.nthRoot(521);
      complex2.isInfinite();
      Complex.valueOf((double) 2695, (-251.042949935562));
      Complex complex8 = complex1.multiply(725);
      complex8.divide(303.3417353);
      Complex complex9 = complex7.add((-1.0));
      complex9.I.subtract(complex2);
      complex2.conjugate();
      Complex complex10 = complex2.multiply(41);
      complex10.I.reciprocal();
      complex9.abs();
      complex5.acos();
      complex5.hashCode();
      complex2.tan();
      complex5.tan();
      Complex.valueOf(3642.5864547719, 3690.27846112);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(3644.47514783, 3644.47514783);
      Complex complex2 = new Complex((-3087.0));
      double double0 = (-2024.286);
      complex1.sqrt();
      complex2.ZERO.multiply((-2024.286));
      complex1.I.multiply(0.0);
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex1.I.divide(complex2);
      Complex complex5 = complex3.I.add((-2024.286));
      Complex complex6 = complex5.I.sinh();
      complex0.pow(complex1);
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex7.sqrt1z();
      complex8.INF.tanh();
      int int0 = (-1);
      complex2.ONE.exp();
      complex0.multiply((-1));
      Complex complex9 = complex4.INF.divide(complex6);
      complex3.NaN.reciprocal();
      complex9.ONE.acos();
      complex1.isInfinite();
      complex5.ONE.cosh();
//      try { 
        complex5.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      complex1.ZERO.getField();
      complex0.INF.log();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.atan();
      complex2.NaN.sin();
      complex3.abs();
      Complex complex4 = complex1.I.subtract(0.0);
      Complex complex5 = complex0.add(complex3);
      complex5.I.pow((-370.0));
      complex2.pow(complex1);
      complex2.hashCode();
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = Complex.valueOf(1.6374489573868447E-7, 1.6374489573868447E-7);
      Complex complex5 = complex4.INF.divide(1.6374489573868447E-7);
      complex1.toString();
      complex3.getField();
      complex3.ONE.reciprocal();
      Complex complex6 = complex0.NaN.divide(complex5);
      complex6.ZERO.atan();
      complex2.cos();
      Complex complex7 = complex2.cosh();
      complex7.I.cosh();
      Complex complex8 = complex0.asin();
      complex3.getImaginary();
      complex2.sqrt();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.9919903587080315E-56);
      complex0.NaN.abs();
      Complex complex2 = complex1.createComplex((-5968.78096), Double.NaN);
      Complex complex3 = complex2.reciprocal();
      complex3.ZERO.sinh();
      Complex complex4 = complex1.multiply((-5968.78096));
      complex0.INF.sqrt1z();
      complex4.INF.exp();
      complex0.ZERO.multiply(complex1);
      complex4.ONE.abs();
      Complex complex5 = complex0.acos();
      complex5.INF.hashCode();
      complex4.getArgument();
      Complex complex6 = complex5.INF.multiply(complex0);
      complex6.ONE.subtract(complex3);
      complex6.ZERO.multiply(0);
//      try { 
        complex6.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.990680456161499);
      complex0.isNaN();
      complex0.getReal();
      complex0.equals("-27$x`dunX#S-yX");
      Complex complex1 = complex0.acos();
      complex1.ONE.atan();
      Complex complex2 = Complex.valueOf(5025.28, 345.292217);
      complex1.sqrt();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(1555.46673, 1555.46673);
      complex0.getArgument();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.NaN;
      complex2.I.sqrt1z();
      complex0.divide(complex2);
      Complex complex3 = complex1.divide(2.043049589651736E-8);
      complex1.createComplex(0.5855053663253784, 0.7853981633974483);
      complex2.getArgument();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.INF.multiply(433);
      Complex complex3 = complex0.INF.multiply(433);
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex3.ZERO.subtract(complex4);
      complex2.I.atan();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex0.I.pow(complex4);
      Complex complex7 = complex6.exp();
      complex7.I.getArgument();
      complex1.I.getField();
      complex0.ONE.cosh();
      complex0.NaN.abs();
      complex1.ZERO.toString();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex2.divide(complex8);
      complex9.exp();
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex0.add(Double.NaN);
      complex6.isInfinite();
      complex5.tanh();
      complex11.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.exp();
      complex2.ZERO.add(complex0);
      complex2.INF.tanh();
      Complex complex3 = complex0.subtract(complex1);
      complex3.getImaginary();
      complex1.I.reciprocal();
      complex0.negate();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      int int0 = (-3382);
//      try { 
        complex4.nthRoot((-3382));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,382
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.readResolve();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex0.I.sqrt1z();
      complex5.I.pow(complex1);
      Complex complex6 = complex1.INF.asin();
      complex6.ZERO.multiply(17);
      complex0.getArgument();
      complex1.isNaN();
      Complex complex7 = complex6.acos();
      complex4.getField();
      complex5.conjugate();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      complex1.I.cosh();
      Complex.valueOf(755.84523108, 0.0);
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.INF.add(complex1);
      complex3.NaN.hashCode();
      complex2.ZERO.add(755.84523108);
      Complex complex4 = complex1.NaN.atan();
      complex0.ONE.sinh();
      Complex complex5 = complex0.conjugate();
      complex0.ONE.readResolve();
      complex5.isInfinite();
      complex4.nthRoot(2484);
      complex4.divide(complex0);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.NaN.sqrt1z();
      complex1.asin();
      complex6.sinh();
      complex7.acos();
      complex0.add((double) 2484);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex1.I.sin();
      complex1.pow(1045.29);
      Complex complex3 = complex2.INF.createComplex(0.0, 1045.29);
      complex3.NaN.negate();
//      try { 
        complex1.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(2825.2231235);
      Complex complex1 = Complex.valueOf((-167.070988072062));
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.getArgument();
      Complex complex3 = complex0.ZERO.conjugate();
      complex3.I.readResolve();
      complex0.ZERO.getArgument();
      Complex complex4 = Complex.valueOf(2825.2231235, 1.0);
      Complex complex5 = complex4.ONE.cosh();
      complex5.I.abs();
      Complex complex6 = complex4.INF.add((-2911.0));
      Complex.valueOf((-418.559675352));
      complex0.INF.toString();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ZERO.subtract(2825.2231235);
      complex8.ONE.reciprocal();
      complex7.readResolve();
      complex4.hashCode();
      Complex complex9 = complex6.multiply(2.0760536193847656);
      Complex complex10 = complex0.pow(6.283185307179586);
      Complex complex11 = Complex.ZERO;
      complex4.add(complex11);
      complex7.hashCode();
      Complex.valueOf(1.0);
      complex9.ZERO.abs();
      complex10.createComplex((-1920.481502), Double.POSITIVE_INFINITY);
      complex9.sqrt1z();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      complex0.INF.subtract(1160.6013669);
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex2.tanh();
      complex2.isNaN();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex2.ONE.sinh();
      complex2.ZERO.getArgument();
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex0.ZERO.asin();
      complex2.ONE.acos();
      complex9.ZERO.acos();
      complex4.readResolve();
      Complex complex11 = complex8.subtract(complex4);
      complex1.isInfinite();
      complex1.conjugate();
      Complex.valueOf((-1.1288398461391523E-295), Double.POSITIVE_INFINITY);
      Complex complex12 = complex5.reciprocal();
      complex0.add(0.0);
      Complex complex13 = complex7.conjugate();
      complex11.multiply(Double.POSITIVE_INFINITY);
      complex11.add(complex13);
      complex7.sinh();
      complex12.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sqrt1z();
      complex0.hashCode();
      complex1.INF.sin();
      complex0.abs();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.INF.sqrt();
      complex2.isInfinite();
      Complex complex6 = complex4.add(complex0);
      complex6.exp();
      Complex complex7 = complex1.pow(1.0);
      complex7.multiply(211);
      complex3.asin();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2810.3005336600604), (-29.67));
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cosh();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.sinh();
      complex0.getField();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex3.INF.reciprocal();
      complex2.abs();
      complex2.hashCode();
      Complex complex6 = complex0.subtract(complex1);
      complex6.subtract(complex3);
      complex0.isInfinite();
      complex0.ONE.log();
      complex5.nthRoot(7);
      Complex complex7 = complex3.atan();
      complex7.subtract((double) 7);
      complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = complex0.sinh();
      complex0.readResolve();
      complex1.conjugate();
      Complex complex2 = complex1.ONE.divide((-1961.82632188886));
      complex2.INF.abs();
      Complex complex3 = complex2.INF.createComplex((-1961.82632188886), (-1961.82632188886));
      Complex complex4 = complex3.ONE.exp();
      complex4.exp();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.ONE.multiply(0);
      complex7.INF.multiply((double) 0);
      complex1.abs();
      complex5.equals(complex1);
      complex1.getArgument();
      complex6.isInfinite();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.ZERO.abs();
      complex0.INF.pow(1519.404);
      Complex complex3 = complex0.subtract(complex1);
      complex3.I.divide(complex1);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = Complex.valueOf(1519.404);
      Complex complex6 = complex5.ZERO.add(2.0);
      Complex complex7 = complex0.add(complex4);
      complex7.sin();
      complex0.hashCode();
      complex6.asin();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(197.269, (-1656.79517456));
      Complex complex1 = complex0.ZERO.tanh();
      complex1.ZERO.asin();
      Complex complex2 = complex0.conjugate();
      complex2.add(complex0);
      complex0.ONE.multiply((-1656.79517456));
      complex0.atan();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-2384.68617074654));
      Complex complex1 = complex0.INF.multiply((-1468));
      Complex complex2 = complex1.ZERO.pow((-2384.68617074654));
      complex0.INF.toString();
      Complex complex3 = complex2.ONE.conjugate();
      complex3.ZERO.hashCode();
      complex2.NaN.negate();
      complex0.INF.pow((-2384.68617074654));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.NaN.tan();
      complex6.I.tan();
      complex5.sqrt1z();
      Complex.valueOf((double) (-1468));
      complex2.sinh();
//      try { 
        complex4.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.atan();
      complex0.INF.conjugate();
      complex0.isInfinite();
      Complex complex3 = complex0.tan();
      complex0.NaN.nthRoot(4907);
      Complex complex4 = complex2.NaN.sqrt();
      complex4.hashCode();
      Complex complex5 = complex0.ZERO.tan();
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex5.pow(complex2);
      Complex complex8 = complex3.INF.sin();
      Complex complex9 = complex8.I.multiply(4907);
      complex9.NaN.multiply((double) 4907);
      complex3.acos();
      complex8.I.multiply(complex5);
      complex9.multiply((double) 4907);
      complex1.NaN.createComplex((-249.73), 0.0);
      Complex complex10 = complex0.INF.createComplex((-909.0), (-249.73));
      complex10.I.asin();
      Complex.valueOf(3953.5488);
      complex9.equals(complex0);
      complex4.getImaginary();
      complex7.negate();
      Complex complex11 = complex6.divide(648.0);
      complex3.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-2569.9), (-2569.9));
      Complex complex1 = Complex.NaN;
      complex0.ONE.multiply(complex1);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.10291612148284912, 0.10291612148284912);
      complex0.I.pow((-176.62892377126377));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = Complex.valueOf((-20.0));
      complex1.NaN.tan();
      complex2.I.toString();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex1.tanh();
      complex5.I.add(complex4);
      complex5.NaN.tanh();
      Complex complex6 = complex5.subtract((-605.3700705));
      complex6.ZERO.abs();
      complex1.readResolve();
      complex6.add(4291.480110011733);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow((-193.8568371));
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.NaN.pow((-193.8568371));
      Complex complex4 = complex0.sqrt1z();
      complex3.ONE.exp();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.I.add(complex3);
      complex6.ONE.sinh();
      complex6.NaN.pow((-193.8568371));
      complex5.I.hashCode();
      complex0.getReal();
      Complex complex8 = complex0.sin();
      complex5.getField();
      complex2.add((-193.8568371));
      complex1.abs();
      Complex complex9 = complex2.divide((-193.8568371));
      Complex.valueOf((-193.8568371), 2.9885336757136527E-9);
      complex1.NaN.sqrt();
      complex9.I.sinh();
      complex4.reciprocal();
      complex5.asin();
      complex1.isNaN();
      complex1.createComplex((-193.8568371), (-193.8568371));
      Complex complex10 = complex8.cosh();
      complex9.pow(complex6);
      complex10.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.conjugate();
      complex5.I.tanh();
      complex1.getArgument();
      Complex complex6 = complex3.pow(0.15693697333335876);
      Complex complex7 = complex6.INF.sinh();
      complex6.INF.reciprocal();
      complex6.isInfinite();
      Complex complex8 = complex2.multiply(0.0);
      complex8.NaN.sinh();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.I.acos();
      complex10.INF.sqrt();
      Complex complex11 = complex3.multiply(complex7);
      complex11.ONE.abs();
      complex11.getArgument();
      complex7.isNaN();
      Complex complex12 = complex1.reciprocal();
      complex11.acos();
      Complex.valueOf(1.352233648300171);
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = complex0.I.add(0.0);
      complex1.ONE.log();
      Complex complex2 = Complex.valueOf(0.0);
      complex1.ZERO.subtract(complex2);
      Complex complex3 = complex0.tanh();
      complex0.INF.acos();
      int int0 = (-1570);
//      try { 
        complex3.I.nthRoot((-1570));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,570
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(25.935034337062, 25.935034337062);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      complex1.INF.nthRoot(1);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.ZERO.exp();
      complex3.INF.log();
      complex3.ONE.add(complex0);
      Complex complex4 = complex1.INF.subtract((double) 1);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex1.INF.divide(complex0);
      complex6.NaN.readResolve();
      Complex complex7 = complex1.divide(Double.NaN);
      complex7.NaN.divide(complex1);
      Complex.valueOf((-1911.2472963), 2.0);
      Complex complex8 = complex7.sin();
      complex0.NaN.subtract(complex1);
      Complex complex9 = complex5.reciprocal();
      complex9.tan();
      complex0.NaN.multiply(3342.8328);
      complex4.acos();
      complex7.getReal();
      complex6.hashCode();
      complex8.getReal();
      complex5.readResolve();
      Complex complex10 = complex8.sqrt1z();
      complex10.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(1846.0);
      Complex complex1 = new Complex(1846.0);
      Complex complex2 = complex0.ZERO.add(1995.1202461);
      complex2.getField();
      Complex complex3 = complex0.add(complex1);
      complex3.INF.sqrt();
      complex0.ZERO.getField();
      complex0.getField();
      complex1.reciprocal();
      Complex complex4 = complex2.pow(complex3);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex1.sqrt1z();
      Complex complex2 = complex0.subtract(3.1263099916916113E178);
      Complex complex3 = complex0.sin();
      complex0.ZERO.exp();
      Complex complex4 = complex2.subtract((-2661.096));
      Complex complex5 = complex4.NaN.add((-2661.096));
      Complex complex6 = complex3.sin();
      Complex complex7 = complex6.ZERO.divide(3.1263099916916113E178);
      complex3.INF.divide(complex1);
      complex2.getField();
      Complex complex8 = complex2.divide(complex0);
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex7.acos();
      Complex complex11 = complex10.ONE.atan();
      complex4.NaN.tan();
      Complex complex12 = complex5.divide(complex10);
      complex12.ZERO.sinh();
      complex7.equals(complex2);
      complex12.multiply(3.1263099916916113E178);
      complex11.toString();
      complex8.equals("(0.7853981633974483, 0.0)");
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = new Complex((-1699.086912088), (-1699.086912088));
      Complex complex3 = complex0.multiply(complex2);
      complex3.I.abs();
      Complex complex4 = complex1.ONE.multiply((-690));
      Object object0 = new Object();
      complex0.I.getArgument();
      complex3.equals(object0);
      complex3.INF.sin();
      Complex complex5 = complex0.subtract((-1699.086912088));
      Complex complex6 = complex1.NaN.sinh();
      complex6.INF.toString();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.ONE.add(complex7);
      Complex complex9 = complex5.I.sin();
      complex0.reciprocal();
      complex3.abs();
      complex8.reciprocal();
      complex8.ONE.add(complex9);
      Complex complex10 = Complex.valueOf(0.0, 1.0);
      complex7.add(complex3);
      complex1.equals(complex10);
      Complex complex11 = complex4.pow(0.0);
      Complex complex12 = complex11.ONE.divide(1.5707963267948966);
      complex12.multiply(complex5);
      Complex complex13 = complex3.divide(complex9);
      complex13.ONE.nthRoot(433);
      complex8.asin();
      complex5.getReal();
      complex6.sqrt();
      complex7.toString();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(1100.67657257021, 1100.67657257021);
      complex0.sqrt1z();
      complex0.NaN.toString();
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.subtract(3356.8058723);
      complex2.add(complex0);
      Complex complex3 = complex1.acos();
      complex3.NaN.createComplex(3356.8058723, Double.NaN);
      Complex complex4 = complex3.divide(complex2);
      complex3.multiply(complex1);
      complex1.getArgument();
      complex2.isNaN();
      complex4.createComplex(Double.NaN, (-2069.0));
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex3.divide(0.0);
      complex6.ZERO.toString();
      complex4.getField();
      Complex complex7 = Complex.valueOf(868.372);
      Complex complex8 = complex7.NaN.subtract(complex2);
      Complex complex9 = complex7.asin();
      Complex complex10 = complex2.INF.sinh();
      Complex complex11 = complex10.I.exp();
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      
      Complex complex12 = complex9.ZERO.divide(complex5);
      complex12.toString();
      complex3.hashCode();
      complex12.INF.cosh();
      Complex.valueOf(0.0);
      Complex complex13 = complex0.multiply(0.0);
      Complex complex14 = complex13.multiply(complex7);
      complex14.ONE.abs();
      complex8.negate();
      assertSame(complex8, complex14);
      
      complex4.readResolve();
      Complex complex15 = complex9.sqrt1z();
      assertEquals(1.5574443675410103, complex15.getImaginary(), 0.01);
      
      complex12.toString();
      Complex complex16 = complex5.cos();
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertEquals(1.0, complex16.getReal(), 0.01);
      
      complex13.isNaN();
      Complex complex17 = complex13.log();
      complex13.sin();
      String string0 = complex7.toString();
      assertEquals("(868.372, 0.0)", string0);
      
      Complex complex18 = complex1.sin();
      assertSame(complex18, complex12);
      
      complex17.multiply(0);
      assertSame(complex17, complex6);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.INF.abs();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      complex3.ONE.sin();
      complex1.ONE.sin();
      complex0.getReal();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex0.acos();
      complex4.ZERO.add(1.0);
      complex5.I.abs();
      complex0.ONE.negate();
      complex2.isInfinite();
      complex4.abs();
      complex5.hashCode();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.tanh();
//      try { 
        complex7.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
