/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:59:11 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-1032.213685), 20.0);
      Complex complex1 = complex0.tan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(2.4256181927024344E-120, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.log();
      complex1.multiply(complex0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(2.4256181927024344E-120, Double.POSITIVE_INFINITY);
      complex0.tan();
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.tanh();
      complex2.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.createComplex(Double.NaN, (-20.0));
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.548715389333397E-8), (-1.548715389333397E-8));
      complex0.abs();
//      try { 
        complex0.NaN.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-1.0083421467087312), Double.POSITIVE_INFINITY);
      complex0.nthRoot(1828);
      complex0.sqrt1z();
      Complex complex1 = new Complex(0.09672962129116058, 1.0);
      Complex complex2 = complex0.multiply(628983398);
      complex2.sqrt();
      complex0.createComplex(Double.POSITIVE_INFINITY, 902.827010563);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2331, (double) 2331);
      Complex complex1 = complex0.cos();
      complex1.INF.reciprocal();
      Complex.valueOf(5240.62968449839);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2331, (double) 2331);
      complex0.nthRoot(2331);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-113.393568540765), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-113.393568540765), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.sinh();
      complex1.I.divide(complex0);
      complex0.multiply(2306);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-113.393568540765), Double.POSITIVE_INFINITY);
      Complex.valueOf((-113.393568540765), 437.162);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2331, (double) 2331);
      complex0.multiply(2331);
      Complex complex1 = new Complex(2451.49055463781);
      complex0.pow(complex1);
      complex0.multiply(2451.49055463781);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1380.0, (-20.0));
      complex1.asin();
      complex1.tan();
      Complex complex2 = complex0.acos();
      complex2.sinh();
      Complex.valueOf(1380.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.equals(complex0);
      Complex complex1 = new Complex((-2194.872446), (-1822.145));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(1.0800524819387647E-4, (-1.2542332720182776E186));
      Complex complex1 = complex0.asin();
      complex1.getArgument();
      complex0.tan();
      Complex complex2 = complex0.acos();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2331, 2331);
      Complex complex2 = complex1.asin();
      complex0.acos();
      Complex.valueOf((double) 2331, (-3110.31));
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(Double.NaN);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-1937.647662927222));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf((-1937.647662927222), (-1049.887));
      complex4.multiply(complex1);
      complex3.asin();
      Complex complex5 = complex0.acos();
      complex5.divide(complex4);
      complex0.getReal();
      complex3.hashCode();
      complex0.acos();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      Complex complex1 = Complex.valueOf((-1936.457045700784));
      complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ZERO.subtract((-1936.457045700784));
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.sqrt1z();
      complex1.I.multiply(complex2);
      Complex complex6 = complex5.asin();
      complex6.INF.acos();
      Complex.valueOf((-1936.457045700784), Double.NaN);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.008342146708731209, (-2246.68117));
      Complex complex1 = complex0.NaN.divide((-2246.68117));
      Complex complex2 = complex0.ONE.add(0.008342146708731209);
      Complex complex3 = complex1.createComplex(0.008342146708731209, 0.008342146708731209);
      complex3.NaN.toString();
      complex1.toString();
      Complex complex4 = complex2.subtract(complex3);
      Complex.valueOf((-2246.68117), 0.0);
      complex0.ONE.nthRoot(764);
      complex0.equals(complex3);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.conjugate();
      complex4.divide(0.008342146708731209);
      Complex complex7 = complex6.sin();
      complex7.I.acos();
      complex7.getField();
      Complex.valueOf((-2246.68117), 5792.2793082377);
      Complex complex8 = Complex.INF;
      complex2.multiply(0);
      complex2.multiply((-3530));
      complex6.add((double) (-3530));
      complex2.atan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1936.457045700784));
      Complex complex1 = new Complex((-1936.457045700784), (-1936.457045700784));
      complex1.sin();
      complex1.I.subtract(complex0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.valueOf((double) 2287, (-1.0083421467087312));
      complex3.multiply(1074);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.008342146708731209, (-2246.68117));
      complex0.NaN.divide((-2246.68117));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.add(0.008342146708731209);
      Complex complex3 = complex1.createComplex(0.008342146708731209, 0.008342146708731209);
      complex3.NaN.toString();
      complex1.toString();
      Complex complex4 = complex2.subtract(complex3);
      Complex.valueOf((-2246.68117), 0.0);
      complex1.ONE.nthRoot(764);
      complex1.equals(complex3);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.conjugate();
      complex4.divide(0.008342146708731209);
      Complex complex7 = complex6.sin();
      complex7.I.acos();
      complex7.getField();
      Complex.valueOf((-2246.68117), 5792.2793082377);
      Complex.valueOf(0.008342146708731209);
      complex2.multiply(0);
      complex2.multiply((-3530));
      complex6.add((double) (-3530));
      complex2.atan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.multiply((-1255.621421802305));
      complex0.ONE.asin();
      complex2.add((-1255.621421802305));
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-4120.0));
      Complex complex2 = Complex.I;
      complex2.equals(complex0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      Complex complex1 = Complex.valueOf((-1936.457045700784));
      Complex complex2 = new Complex((-1936.457045700784), (-1936.457045700784));
      Complex complex3 = complex2.cosh();
      complex3.equals(complex1);
      Complex complex4 = complex1.tan();
      complex4.divide((-1936.457045700784));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(892.6381960258129);
      complex0.conjugate();
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      complex0.add(1991.29);
      complex1.pow(2391.602);
      Complex complex2 = complex1.tanh();
      complex0.conjugate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex.valueOf((-3.786663982218041E-8), 1857.357075);
      complex0.ZERO.readResolve();
      complex0.isInfinite();
      complex0.sqrt();
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex2.INF.add(Double.NaN);
      complex1.createComplex((-1382.355141), (-1382.355141));
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-577.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex1);
      complex2.sqrt1z();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(1216.9412);
      Complex complex1 = complex0.subtract((-1736.61175));
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      complex2.NaN.abs();
      Complex complex4 = complex1.INF.tan();
      complex4.INF.subtract((-1936.457045700784));
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.asin();
      complex2.add(1818.5412547943652);
      complex2.getReal();
      complex1.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.INF.hashCode();
      Complex complex7 = complex6.I.acos();
      complex7.INF.divide(Double.POSITIVE_INFINITY);
      complex1.ONE.createComplex((-152.0), (-358.6));
      complex3.getReal();
      Complex complex8 = complex2.conjugate();
      complex8.divide(complex5);
      Complex complex9 = complex3.acos();
      complex9.sqrt1z();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1726.483943), (-1726.483943));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.INF.sqrt1z();
      complex1.INF.getArgument();
      Complex complex4 = complex1.cosh();
      complex0.divide(complex4);
      Complex complex5 = complex4.pow(complex3);
      complex5.NaN.tan();
      complex3.ZERO.multiply(7);
      complex1.nthRoot(7);
      Complex complex6 = complex0.atan();
      complex6.ONE.cosh();
      complex4.abs();
      Complex complex7 = complex6.multiply(complex3);
      complex7.nthRoot(7);
      complex1.negate();
      complex2.INF.nthRoot(2357);
      Complex complex8 = complex2.acos();
      Complex complex9 = new Complex(7);
      Complex complex10 = complex8.INF.pow(complex9);
      complex10.hashCode();
      complex9.INF.atan();
      Complex complex11 = complex8.tan();
      complex11.INF.acos();
      Complex complex12 = complex0.add(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      complex10.tan();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = new Complex((-3444.2646));
      complex13.multiply(complex14);
//      try { 
        complex8.nthRoot((-2045458240));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,045,458,240
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.multiply((-1255.621421802305));
      complex2.multiply(complex1);
      complex1.nthRoot(4626);
      complex0.subtract((double) 4626);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1353.7), (-1353.7));
      Complex complex1 = new Complex((-3871.7928549330973));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.asin();
      complex0.hashCode();
      complex4.divide(3871.7928549330973);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.add((-1.8842098029339485E-137));
      complex0.pow((-3871.7928549330973));
      complex5.tanh();
      complex2.conjugate();
      complex6.hashCode();
      Complex complex7 = new Complex((-204.6));
      Complex complex8 = Complex.ONE;
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.conjugate();
      complex0.multiply((double) 873);
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      complex3.conjugate();
      Complex complex4 = new Complex(2093.0);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 2639.21;
      double double1 = 85.0;
      Complex complex0 = Complex.valueOf(2639.21, 85.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      complex0.nthRoot(1);
      Complex.valueOf(85.0);
      complex1.readResolve();
      complex0.NaN.exp();
      complex2.subtract(complex1);
      complex2.reciprocal();
      int int0 = 2049870754;
      // Undeclared exception!
      complex0.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(883);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 403);
      Complex complex3 = complex1.multiply(1187);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2076.103916162614), (-2076.103916162614));
      Complex complex1 = complex0.ZERO.asin();
      complex0.getField();
      Complex complex2 = complex0.subtract((-2076.103916162614));
      Complex complex3 = complex1.ONE.multiply((-2076.103916162614));
      complex3.NaN.subtract((-191.116032));
      Complex complex4 = complex2.atan();
      complex4.NaN.abs();
      Complex complex5 = complex1.ZERO.sqrt();
      Complex complex6 = complex2.cosh();
      complex6.ZERO.abs();
      complex1.isInfinite();
      Complex.valueOf((-2076.103916162614), (-2076.103916162614));
      Complex complex7 = complex5.divide((-2076.103916162614));
      complex7.ONE.readResolve();
      Complex complex8 = complex4.multiply((-1906));
      Complex complex9 = complex0.subtract(4350.3560314471);
      Complex complex10 = complex2.reciprocal();
      complex4.abs();
      Complex complex11 = complex10.negate();
      complex11.NaN.abs();
      complex3.tan();
      complex1.exp();
      Complex.valueOf(8.006569251375383E36);
      Complex complex12 = complex9.log();
      complex12.negate();
      Complex complex13 = complex0.negate();
      complex13.conjugate();
      complex8.multiply(1459.647581905);
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-602.68572855));
      Complex complex1 = complex0.sqrt1z();
      complex0.abs();
      complex0.abs();
      Complex complex2 = Complex.valueOf((-602.68572855));
      Complex complex3 = complex2.add((-1636.179382681426));
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = Complex.ONE;
      complex6.getArgument();
      complex5.tan();
      complex1.cos();
      complex5.hashCode();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex1.abs();
      Complex complex2 = complex0.add((-1636.179382681426));
      complex2.multiply(complex0);
      complex0.nthRoot(17);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.multiply(547);
      complex5.sqrt();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
      Complex.valueOf(2.095732474644446E-309, 20.0);
      Complex complex1 = Complex.valueOf(2.095732474644446E-309, 2.095732474644446E-309);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.tan();
      complex3.abs();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = Complex.valueOf(679.0893, 2.0);
      Complex complex8 = complex0.acos();
      complex7.getReal();
      complex5.hashCode();
      complex4.subtract(complex2);
      complex5.hashCode();
      Complex.valueOf(679.0893);
      Complex complex9 = complex6.tanh();
      complex8.add(679.0893);
      complex4.pow(Double.NaN);
      complex5.tanh();
      complex9.conjugate();
      complex5.hashCode();
      Complex complex10 = new Complex(1029.8958936269369);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.tan();
      complex4.NaN.abs();
      Complex complex5 = complex1.INF.tan();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.asin();
      complex7.INF.acos();
      Complex complex8 = Complex.ONE;
      complex8.divide(Double.NaN);
      complex8.tanh();
      Complex complex9 = Complex.NaN;
      complex9.add(566.76744);
      Complex complex10 = complex5.pow((-295.589));
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex2.conjugate();
      complex12.hashCode();
      Complex complex13 = Complex.NaN;
      complex7.sqrt();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.multiply((-1836.6857201487494));
      complex2.asin();
      Complex complex4 = complex3.sqrt1z();
      complex4.multiply((-1668));
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-4904.91));
      Complex complex2 = complex1.sinh();
      complex0.add(20.0);
      complex1.equals(complex2);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.multiply(20.0);
      complex2.asin();
      complex3.sqrt1z();
      Complex.valueOf((double) (-1668));
      complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1255.621421802305));
      Complex complex2 = Complex.INF;
      complex2.equals(complex1);
      Complex complex3 = complex2.conjugate();
      complex2.multiply((-1255.621421802305));
      Complex complex4 = new Complex((-1255.621421802305));
      complex3.sqrt1z();
      Complex.valueOf(1604312.879198916);
      Complex complex5 = Complex.valueOf((-1255.621421802305));
//      try { 
        complex5.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2363.0));
      complex0.hashCode();
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4504.8, 868.2411);
      Complex complex1 = Complex.valueOf(868.2411, (-1546.7836772062642));
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.NaN.add(complex1);
      complex3.NaN.sin();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex0.multiply(1);
      Complex complex7 = complex6.divide(complex3);
      Complex complex8 = complex7.INF.log();
      complex0.sqrt1z();
      Complex complex9 = complex8.ONE.pow(1.6702837344324732E7);
      complex9.ZERO.subtract(4.893671700956421E-4);
      Complex complex10 = complex7.add(1851.3172);
      complex0.divide(complex2);
      complex8.subtract((-444.36481441515));
      Complex complex11 = complex10.multiply(911);
      complex1.divide(complex11);
      complex1.sqrt();
      Complex.valueOf(3757.98);
      complex5.cos();
      complex2.exp();
      complex9.tanh();
      complex7.tanh();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2505.60431), (-96.63));
      Complex complex1 = complex0.add(1.470705509185791);
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex1.tanh();
      complex4.INF.multiply(914);
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex4.multiply(260);
      complex8.createComplex(379.0, 868.2411);
      complex8.INF.divide(complex7);
      Complex complex9 = complex4.divide(868.2411);
      Complex complex10 = complex9.add((-392.109541297648));
      complex10.ONE.multiply((-96.63));
      Complex complex11 = complex0.asin();
      complex0.add((-392.109541297648));
      complex6.equals(complex11);
      Complex complex12 = complex5.exp();
      complex12.NaN.sin();
      Complex complex13 = complex7.negate();
      complex13.ONE.negate();
      complex3.readResolve();
      complex4.isInfinite();
      complex6.multiply(1.0);
      complex5.pow(complex2);
//      try { 
        complex2.nthRoot((-1967));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,967
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-4904.91));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.add((-4904.91));
      complex1.multiply(2582);
      Complex complex4 = complex3.add(817.9993887528278);
      complex4.atan();
      Complex complex5 = new Complex(20.0, 770.1);
      complex5.tanh();
      Complex complex6 = complex4.sqrt1z();
      complex3.divide(770.1);
      Complex complex7 = Complex.ZERO;
      complex7.sin();
      complex6.reciprocal();
      Complex complex8 = Complex.INF;
      complex8.add(complex4);
      complex2.toString();
      complex4.createComplex((-3366.549479), 786);
      complex7.getField();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1255.621421802305));
      Complex complex2 = Complex.INF;
      complex0.equals(complex2);
      complex2.sqrt();
      complex1.readResolve();
      complex2.nthRoot(2628);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.tan();
      complex4.NaN.abs();
      complex1.INF.tan();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.asin();
      complex6.INF.acos();
      complex2.getReal();
      complex1.hashCode();
      complex2.subtract(complex0);
      complex3.INF.hashCode();
      Complex complex7 = complex6.I.acos();
      complex7.INF.divide(Double.POSITIVE_INFINITY);
      complex4.ONE.createComplex((-1936.457045700784), (-358.6));
      complex3.getReal();
      Complex complex8 = Complex.I;
      complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.43053877353668213, (-2363.0));
      Complex complex1 = complex0.createComplex((-795.03), (-2363.0));
      complex1.getReal();
      Complex complex2 = Complex.I;
      complex2.ZERO.acos();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-84.9368));
      Complex complex1 = Complex.valueOf(81.0);
      complex1.add(9.248598815279678E300);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.tan();
      complex4.NaN.abs();
      complex1.INF.tan();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.asin();
      complex6.INF.acos();
      complex2.getReal();
      complex1.hashCode();
      Complex complex7 = complex2.subtract(complex0);
      complex3.INF.hashCode();
      Complex complex8 = complex3.divide((-152.0));
      Complex complex9 = complex7.tanh();
      complex1.add(778.399);
      complex9.pow(Double.POSITIVE_INFINITY);
      complex8.tanh();
      complex2.conjugate();
      complex0.subtract((-2215.11578607));
      complex3.cosh();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.845584943222965E-121, 1.845584943222965E-121);
      Complex complex1 = new Complex((-1802.5581012971832), (-5.095591405025083E-281));
      complex0.divide(complex1);
      complex1.asin();
      Complex complex2 = complex1.sinh();
      complex1.nthRoot(547);
      complex2.sqrt1z();
      Complex complex3 = complex0.multiply(403);
      Complex complex4 = complex2.sqrt();
      complex4.reciprocal();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add((-1255.621421802305));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add((-2272.0));
      complex1.atan();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex3.divide(3.7291263280048303E-8);
      complex5.sin();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.reciprocal();
      complex1.hashCode();
      complex4.add(complex2);
      complex7.toString();
      Complex complex8 = complex2.createComplex((-136.65629717), (-4098.64884076));
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.tan();
      complex0.abs();
      Complex complex4 = complex0.tan();
      complex2.sqrt1z();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex2.acos();
      Complex complex7 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex7.getReal();
      Complex complex8 = Complex.I;
      complex8.hashCode();
      Complex complex9 = Complex.valueOf(870.0);
      complex9.subtract(complex3);
      complex6.hashCode();
      Complex complex10 = complex5.divide(870.0);
      complex1.acos();
      complex6.divide((-152.0));
      complex2.createComplex(0.015941066230880097, 0.015941066230880097);
      complex6.getReal();
      complex4.conjugate();
      complex3.divide(complex7);
      complex3.acos();
      complex10.sqrt1z();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-4904.91));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.add(20.0);
      Complex complex4 = complex0.divide(complex3);
      complex2.sqrt1z();
      complex0.abs();
      Complex complex5 = Complex.ONE;
      complex5.abs();
      Complex complex6 = complex5.add(20.0);
      complex3.multiply(complex1);
      complex3.tan();
      Complex complex7 = complex6.cos();
      complex4.hashCode();
      Complex complex8 = complex7.sqrt();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(3.627172425759641E-305);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.atan();
      complex0.getImaginary();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.subtract(complex0);
      complex3.hashCode();
      Complex complex7 = complex0.divide(3.627172425759641E-305);
      complex3.acos();
      complex2.divide(2702.37843204);
      complex6.createComplex(7.965560853296521E-4, 2619.14);
      complex7.getReal();
      Complex complex8 = complex6.conjugate();
      complex8.divide(complex7);
      Complex complex9 = complex6.acos();
      complex2.sqrt1z();
      complex1.cos();
      complex4.negate();
      complex6.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-4.079585475491198E-54));
      Complex complex2 = complex1.divide(complex0);
      complex1.asin();
      complex2.sin();
      complex0.sinh();
      complex2.nthRoot(547);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sqrt1z();
      complex4.multiply((-1212));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(3.627172425759641E-305);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.atan();
      complex3.add(complex4);
      complex0.getImaginary();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.multiply(complex2);
      complex6.ZERO.getField();
      complex6.hashCode();
      complex3.abs();
      complex2.abs();
      complex1.INF.asin();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1255.621421802305));
      Complex complex2 = Complex.INF;
      complex0.equals(complex2);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ZERO.multiply((-1255.621421802305));
      complex1.asin();
      complex0.ONE.sqrt1z();
      complex1.multiply((-1668));
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      complex0.NaN.sqrt();
      complex0.cosh();
      Complex complex1 = Complex.valueOf((-1936.457045700784), 0.0);
      Complex complex2 = complex0.cos();
      complex2.multiply((-3011));
      complex2.sqrt1z();
      Complex complex3 = new Complex(1201.3060196, 0.0);
      complex3.equals(", ");
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.acos();
      complex2.tan();
      complex1.abs();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf((-6.968742825553785E-8), (-6.968742825553785E-8));
      Complex complex8 = complex7.acos();
      complex2.getReal();
      complex4.hashCode();
      complex8.subtract(complex7);
      complex2.hashCode();
      Complex complex9 = complex7.divide(1.5707963267948966);
      complex9.NaN.createComplex(1.5707963267948966, 1.0);
      complex6.acos();
      complex3.divide((-943.531));
      complex5.createComplex((-943.531), 3071.17720562679);
      complex5.getReal();
      complex1.conjugate();
      Complex complex10 = complex6.divide(complex3);
      Complex complex11 = complex3.acos();
      complex11.sqrt1z();
      complex10.cos();
      complex4.divide((-152.0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1435.1441331553062);
      Complex complex1 = complex0.INF.log();
      complex1.ONE.pow(complex0);
      complex1.cos();
      Complex complex2 = complex0.ZERO.divide((double) 1);
      complex2.NaN.exp();
      Complex complex3 = complex2.I.multiply(0.2247048318386078);
      complex0.nthRoot(1);
      Complex complex4 = complex0.reciprocal();
      complex4.getImaginary();
      complex2.negate();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.add(0.0);
      complex6.ZERO.tanh();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.I.subtract(580.9136167);
      complex3.getField();
      complex8.cosh();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.tan();
      complex4.NaN.abs();
      complex1.INF.tan();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.asin();
      complex6.INF.acos();
      complex2.getReal();
      complex1.hashCode();
      complex2.subtract(complex0);
      Complex complex7 = complex3.reciprocal();
      complex7.getImaginary();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex8.add(3749864.889844208);
      complex9.pow(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex10.conjugate();
      complex0.subtract(1.1992295328636466E289);
      Complex complex11 = Complex.ONE;
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex1.ONE.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex3.divide(1827.2576209041);
      complex3.exp();
      Complex complex6 = complex2.multiply(2225.09252);
      complex5.nthRoot(840);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.reciprocal();
      complex8.getImaginary();
      Complex complex9 = complex2.negate();
      complex6.tanh();
      Complex complex10 = complex4.add((-9.161340309319204E252));
      complex9.pow(0.2247048318386078);
      complex8.tanh();
      complex10.conjugate();
      complex5.subtract(1205.81407321905);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1435.1441331553062);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.divide((-1699.7454307359199));
      Complex complex3 = complex1.pow((-1231.387703922943));
      complex2.getField();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.asin();
      complex0.cosh();
      complex5.tan();
      complex4.subtract((-20.0));
      complex0.getReal();
      complex1.asin();
      complex2.sin();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-793.63192412009));
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.asin();
      complex3.INF.sin();
      Complex complex4 = complex3.sinh();
      complex4.ONE.nthRoot(547);
      Complex complex5 = complex2.sqrt1z();
      complex5.ZERO.multiply(403);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.pow(complex1);
      complex4.createComplex(0.0, 0.0);
      Complex complex7 = complex6.INF.multiply((-820));
      Complex complex8 = Complex.valueOf(3076.3, 3076.3);
      Complex complex9 = complex8.I.tan();
      Complex complex10 = complex2.NaN.pow(complex4);
      complex3.ONE.divide(0.0);
      Complex complex11 = complex0.ZERO.subtract(complex8);
      complex11.INF.abs();
      Complex complex12 = complex6.INF.sqrt1z();
      complex6.isNaN();
      complex12.getImaginary();
      Complex complex13 = complex3.cosh();
      complex5.sinh();
      complex7.divide(complex9);
      complex0.getArgument();
      complex6.equals("LR&V{bXe')");
      Complex.valueOf(0.0);
      complex10.isInfinite();
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.I.atan();
      Complex complex1 = Complex.NaN;
      complex1.ZERO.exp();
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.sqrt();
      Complex complex3 = complex0.I.sqrt1z();
      complex3.ZERO.multiply(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.INF.sinh();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.sinh();
      complex3.ONE.acos();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex0.exp();
      complex8.I.readResolve();
      complex8.acos();
      complex3.multiply(complex6);
      Complex complex9 = complex6.sin();
      complex9.NaN.multiply((-74));
      complex9.INF.sin();
      complex6.log();
      Complex complex10 = complex6.add(0.0);
      complex7.add(0.0);
      complex5.reciprocal();
      complex0.ONE.multiply((-866));
//      try { 
        complex10.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(1.976524624939355E-8, 6.283185307179586);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = Complex.valueOf(1.976524624939355E-8);
      complex0.ZERO.pow(1.976524624939355E-8);
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.NaN.acos();
      complex2.I.getArgument();
      Complex complex5 = complex4.I.exp();
      complex5.readResolve();
      complex2.getImaginary();
      Complex complex6 = complex2.atan();
      complex6.INF.tanh();
      Complex complex7 = complex2.tanh();
      Complex complex8 = new Complex((-2082.293479302), 0.0);
      complex7.pow(complex8);
      Complex complex9 = complex0.multiply((-458));
      complex9.ZERO.multiply(complex5);
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex10.ONE.sqrt();
      complex11.cosh();
      Complex complex12 = complex10.ZERO.exp();
      complex12.NaN.createComplex((-2464.77623), (-2464.77623));
      complex6.abs();
      complex6.toString();
      complex8.exp();
      complex1.atan();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(618.0046340718145, 618.0046340718145);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.ZERO.subtract(618.0046340718145);
      Complex complex5 = complex0.ONE.sinh();
      complex5.I.cosh();
      complex5.ONE.getArgument();
      Complex complex6 = complex5.cosh();
      complex1.pow(0.0);
      complex0.getField();
      complex2.subtract(975.4291839611);
      complex2.hashCode();
      complex4.multiply(0.0);
      complex6.cosh();
      complex5.getField();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide(complex0);
      complex3.getArgument();
      Complex.valueOf(0.0, 0.0);
      complex0.getReal();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1936.457045700784));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.tan();
      complex4.NaN.abs();
      complex1.INF.tan();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.asin();
      complex6.INF.acos();
      complex2.getReal();
      complex1.hashCode();
      complex2.subtract(complex0);
      complex3.INF.hashCode();
      Complex complex7 = complex3.divide((-152.0));
      Complex complex8 = complex7.I.acos();
      complex8.INF.divide(Double.POSITIVE_INFINITY);
      complex4.ONE.createComplex((-152.0), (-358.6));
      complex3.getReal();
      Complex complex9 = complex2.conjugate();
      complex9.divide(complex5);
      Complex complex10 = complex3.acos();
      complex10.sqrt1z();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3270.209566192), (-3270.209566192));
      Complex complex1 = complex0.subtract((-3270.209566192));
      Complex complex2 = complex1.I.reciprocal();
      complex2.abs();
      complex0.getArgument();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.NaN.cosh();
      complex4.INF.getArgument();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex3.I.subtract(complex0);
      complex5.INF.multiply(1);
      Complex complex7 = complex0.ZERO.multiply(2.0);
      Complex complex8 = complex5.exp();
      complex0.hashCode();
      complex6.INF.sqrt1z();
      complex2.isNaN();
      complex7.I.sin();
      complex8.I.acos();
      complex5.NaN.acos();
      complex1.readResolve();
      complex8.getArgument();
      complex6.subtract(complex7);
      Complex.valueOf((-1023.597501));
      complex5.asin();
      Complex complex9 = Complex.valueOf(0.7853981633974483);
      complex1.equals(complex9);
      Complex.valueOf((-2.356194490192345), (double) 1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.reciprocal();
      complex0.add(complex1);
      complex4.multiply(334);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1824.2065), (-1824.2065));
      Complex complex2 = complex1.NaN.acos();
      complex0.ONE.cosh();
      complex0.pow(complex1);
      complex1.I.add((-1824.2065));
      Complex complex3 = Complex.valueOf(1061.930668);
      complex3.I.divide(1061.930668);
      Complex complex4 = complex1.multiply(complex0);
      complex4.INF.multiply(1061.930668);
      complex2.toString();
      Complex complex5 = complex4.multiply(0);
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2323.451819848));
      complex0.abs();
      Complex complex1 = Complex.valueOf(703.5543122515);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.negate();
      complex0.getReal();
      Complex complex5 = Complex.valueOf(2323.451819848, 3851.9535194);
      complex2.getArgument();
      complex0.pow(complex2);
      complex3.sqrt();
      complex0.hashCode();
      Complex complex6 = complex5.tan();
      complex6.INF.hashCode();
      complex6.toString();
      Complex.valueOf(703.5543122515);
      complex4.multiply((-1.9821451970481713E-7));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex3.NaN.subtract(complex0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.multiply(0);
      complex5.ZERO.nthRoot(257);
      Complex complex7 = complex0.conjugate();
      complex0.acos();
      Complex complex8 = complex7.multiply(1800);
      complex8.ZERO.sinh();
      Complex complex9 = complex7.tan();
      complex9.atan();
      complex6.getImaginary();
      complex2.add(complex0);
      Complex.valueOf((double) 0, 729.1399382573746);
      complex3.getImaginary();
      complex9.divide((double) 257);
      complex9.equals((Object) null);
      complex4.multiply((double) 257);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-834.0691653273));
      complex0.I.multiply(0.0);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.INF.tanh();
      Complex complex2 = complex0.sinh();
      complex0.getArgument();
      Complex complex3 = complex0.ONE.multiply(0.0);
      complex2.ZERO.exp();
      Complex complex4 = complex0.add(0.0);
      complex0.NaN.hashCode();
      Complex complex5 = complex4.ZERO.asin();
      complex2.hashCode();
      Complex complex6 = complex2.subtract(complex4);
      Complex complex7 = complex2.multiply(365);
      Complex complex8 = complex2.ONE.conjugate();
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex9.exp();
      complex5.I.getArgument();
      Complex complex11 = complex9.ZERO.multiply((-1800.786542148));
      complex11.INF.reciprocal();
      Complex complex12 = complex5.sin();
      complex7.multiply((-834.0691653273));
      complex6.exp();
      complex10.tan();
      complex8.sinh();
      complex12.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.INF.toString();
      Complex complex3 = complex0.tanh();
      complex3.ZERO.subtract(complex2);
      complex0.toString();
      complex2.INF.asin();
      Complex.valueOf(0.0, 2364.575556);
      complex2.isNaN();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex.valueOf((-3.786663982218041E-8), 1857.357075);
      complex0.ZERO.readResolve();
      complex0.isInfinite();
      complex0.sqrt();
      Complex.valueOf(Double.NaN);
      complex1.createComplex((-1382.355141), (-1382.355141));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-84.9368));
      complex0.multiply(1099);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.tan();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.multiply(0.0);
      complex2.ZERO.add(complex1);
      Complex.valueOf(2954.051881278315);
      complex0.sqrt1z();
      Complex complex3 = complex1.cos();
      Complex complex4 = new Complex(0.0);
      complex3.ZERO.divide(complex4);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1255.621421802305));
      Complex complex2 = Complex.INF;
      complex0.equals(complex2);
      complex2.conjugate();
      complex1.asin();
      complex0.ONE.sqrt1z();
      complex1.multiply((-1668));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(2.2261161215322043E232);
      Complex complex1 = complex0.tan();
      complex1.hashCode();
      Complex complex2 = complex1.pow(complex0);
      complex1.NaN.getField();
      Complex complex3 = complex2.cosh();
      complex0.NaN.pow(complex1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.cosh();
      complex4.ZERO.acos();
      complex0.getImaginary();
      Complex complex6 = complex5.I.multiply(complex4);
      complex6.ONE.sinh();
      Complex complex7 = complex2.multiply(1437);
      complex7.equals(complex5);
      complex3.multiply(526);
      complex6.nthRoot(181);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1526.76268445488, 1526.76268445488);
      complex0.ZERO.getArgument();
      Complex complex1 = Complex.valueOf(1526.76268445488);
      complex1.ZERO.divide(complex0);
      complex0.divide(complex1);
//      try { 
        complex1.nthRoot((-907));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -907
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.I.toString();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.INF.add(complex1);
      Complex complex4 = complex0.subtract(complex1);
      complex1.ONE.readResolve();
      complex4.ONE.readResolve();
      complex0.readResolve();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.log();
      complex6.I.getArgument();
      Complex complex7 = complex5.ZERO.exp();
      complex4.ONE.readResolve();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.ZERO.exp();
      Complex complex10 = complex4.conjugate();
      complex10.NaN.conjugate();
      Complex.valueOf(1.5707963267948966);
      complex1.isInfinite();
      complex2.getReal();
      complex4.INF.sqrt();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex11.NaN.asin();
      complex5.readResolve();
      complex10.nthRoot(820);
      Complex complex13 = complex4.pow(2856.109116);
      Complex complex14 = complex13.multiply((double) 820);
      complex14.ZERO.asin();
      complex9.getImaginary();
      complex12.getReal();
      complex7.nthRoot(1);
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-278.24));
      complex0.divide((-278.24));
      Complex complex1 = complex0.exp();
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.divide(4.809072216941908E-8);
      complex2.INF.pow((-1231.387703922943));
      complex3.I.getField();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.INF.cosh();
      complex4.tan();
      complex6.ZERO.subtract((-2166.959637472));
      complex2.getReal();
      complex3.asin();
      complex2.sin();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.reciprocal();
      complex2.I.toString();
      Complex complex3 = complex2.sinh();
      complex0.INF.divide(complex3);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.tan();
      complex5.ZERO.negate();
      Complex complex6 = complex4.tanh();
      complex1.ONE.conjugate();
      complex6.ONE.asin();
      complex1.INF.getField();
      double double0 = (-4155.75904);
      complex3.pow((-4155.75904));
      double double1 = (-5.619010749352923E-8);
      complex3.ZERO.multiply((-5.619010749352923E-8));
      complex1.cos();
//      try { 
        complex0.I.nthRoot((-175));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -175
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-818.0), 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.pow(1690.651922307);
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(3.627172425759641E-305);
      Complex complex3 = complex0.pow(complex2);
      complex3.atan();
      complex0.getImaginary();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.multiply(complex2);
      complex5.ZERO.getField();
      complex5.hashCode();
      complex3.abs();
      complex2.abs();
      complex1.INF.asin();
      complex1.multiply(766.3593348432399);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(226.9126373787);
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(226.9126373787, Double.NaN);
      Complex complex3 = complex0.divide(complex2);
      complex3.atan();
      Complex complex4 = complex1.NaN.sin();
      complex4.abs();
      complex0.reciprocal();
      Complex complex5 = Complex.valueOf((-4612.746897363018), (-6301.440707726086));
      Complex complex6 = complex1.sqrt();
      complex6.getField();
      complex6.atan();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.subtract(0.0);
      complex1.INF.sqrt1z();
      Complex complex2 = complex1.INF.divide(0.0);
      complex2.NaN.asin();
      Complex complex3 = complex1.NaN.acos();
      complex3.sinh();
      complex0.hashCode();
      complex0.getImaginary();
      Complex complex4 = complex0.multiply(complex1);
      complex4.ZERO.sqrt1z();
      complex4.exp();
      Complex.valueOf(1200.809499427124);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      complex1.sqrt();
      Complex complex2 = complex1.NaN.conjugate();
      complex2.toString();
      Complex complex3 = complex2.reciprocal();
      complex3.NaN.hashCode();
      Complex complex4 = complex0.INF.log();
      complex0.multiply(0.0);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex0.I.add(2192.9606);
      Complex.valueOf(0.0, (-2195.37561));
      Complex complex7 = complex0.tan();
      complex7.NaN.log();
      Complex complex8 = complex6.log();
      complex6.INF.getField();
      complex7.sinh();
      Complex.valueOf(2192.9606, 1.439903710393587E-8);
      complex6.nthRoot(313);
      Complex complex9 = complex0.tan();
      complex5.tanh();
      complex8.getField();
      complex9.isNaN();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(892.6381960258129);
      Complex complex1 = complex0.conjugate();
      complex0.add(complex1);
      Complex.valueOf(0.0);
      Complex.valueOf((-2356.1), (-1233.7121168358192));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.43053877353668213, (-2363.0));
      complex0.subtract(1933.6422537019);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1435.1441331553062);
      Complex complex1 = complex0.INF.log();
      complex1.ONE.pow(complex0);
      complex1.cos();
      Complex complex2 = complex0.ZERO.divide((double) 1);
      Complex complex3 = complex2.NaN.exp();
      complex2.I.multiply(0.2247048318386078);
      complex0.nthRoot(1);
      Complex complex4 = complex0.reciprocal();
      complex4.getImaginary();
      complex2.negate();
      Complex complex5 = complex0.tanh();
      complex5.add(0.0);
      Complex complex6 = complex1.pow(Double.POSITIVE_INFINITY);
      complex6.ZERO.tanh();
      Complex complex7 = complex2.conjugate();
      complex7.I.subtract(580.9136167);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1535.28, 0.0);
      complex0.getField();
      Complex complex1 = complex0.tanh();
      complex0.I.cos();
      Complex complex2 = complex1.multiply(0);
      complex2.ONE.readResolve();
      complex0.conjugate();
      Complex complex3 = Complex.valueOf((-947.0), (-703.9939501577));
      complex3.ONE.cosh();
      Complex complex4 = complex0.add(0.0);
      int int0 = (-1464);
//      try { 
        complex4.ZERO.nthRoot((-1464));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,464
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = new Complex(0.0);
      Complex.valueOf(2.5988736152648926, 20.0);
      complex1.I.getField();
      complex0.subtract(complex1);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = Complex.valueOf(0.0);
      complex1.pow(complex3);
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-5.806792575852521E10));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.ONE.subtract((-5.806792575852521E10));
      Complex complex7 = complex0.negate();
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex5.INF.add(532.1904540743);
      complex9.conjugate();
      complex1.toString();
      Complex complex10 = complex8.subtract((-2610.37586025));
      complex0.abs();
      Complex complex11 = complex6.sqrt();
      complex10.ZERO.getArgument();
      complex11.ONE.log();
      complex6.divide(complex10);
      Complex complex12 = complex6.conjugate();
      complex12.INF.sin();
      complex1.acos();
      complex8.acos();
      Complex complex13 = complex2.conjugate();
      complex13.abs();
      complex4.add((-685.391769078));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(1199.9672002732793);
      Complex complex1 = Complex.valueOf(0.0, 1199.9672002732793);
      complex1.hashCode();
      Complex complex2 = complex1.I.pow(0.4444103240966797);
      Complex complex3 = complex0.ONE.exp();
      complex3.pow(1199.9672002732793);
      Complex complex4 = complex0.ONE.add(0.0);
      complex4.INF.add(1199.9672002732793);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex0.divide(1199.9672002732793);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex3.pow(complex1);
      Complex complex8 = complex1.add(1199.9672002732793);
      complex8.ZERO.divide(0.0);
      Complex complex9 = complex2.ZERO.sinh();
      complex9.I.multiply(0.0);
      Complex complex10 = complex7.tanh();
      complex10.ONE.getField();
      complex5.subtract(0.0);
      Complex complex11 = complex1.subtract(0.0);
      Complex complex12 = complex2.tan();
      complex5.equals(complex6);
      Complex complex13 = complex10.multiply(0.0);
      complex11.sin();
      complex8.getField();
      complex12.getImaginary();
      complex13.add(2.0);
      complex8.atan();
      complex9.sinh();
      complex8.readResolve();
      complex10.add(2479.11);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      complex0.I.createComplex(0.0, (-1046.2709));
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.ONE.log();
      complex1.getImaginary();
      complex0.asin();
      Complex complex4 = complex2.pow(0.0);
      complex1.ONE.subtract(0.0);
      Complex complex5 = complex4.cos();
      complex1.log();
      Complex complex6 = complex3.divide(0.0);
      complex4.multiply(2148.9);
      complex2.ZERO.abs();
      Complex complex7 = complex6.sinh();
      complex7.sqrt1z();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(768.6);
      complex0.I.hashCode();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.exp();
      complex2.ZERO.cosh();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.atan();
      complex1.ZERO.toString();
      complex1.ZERO.abs();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex0.NaN.pow(892.55);
      Complex complex4 = complex3.add(892.55);
      complex2.NaN.negate();
      complex4.ONE.multiply(complex0);
      Complex complex5 = complex4.NaN.multiply(complex2);
      Complex complex6 = complex5.I.divide(0.0);
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.ZERO.acos();
      complex8.ZERO.exp();
      Complex.valueOf((-1.0));
      complex0.hashCode();
      complex0.abs();
      complex2.add(1705.924438);
      complex1.add(1754.10377997753);
      Complex.valueOf(0.0, 0.0);
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.sqrt();
      complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.I.multiply(1.0);
      Complex complex4 = complex3.ZERO.tan();
      complex1.ONE.toString();
      complex1.divide(complex4);
      complex0.getImaginary();
      complex2.ONE.pow(complex3);
      Complex complex5 = complex0.conjugate();
      Complex.valueOf(845.0);
      Complex complex6 = complex0.divide(complex5);
      complex4.isInfinite();
      complex3.I.subtract(1.0);
      complex4.pow(1.0);
      Complex complex7 = complex6.subtract(20.0);
      complex0.I.pow((-9.54468158713835E25));
      complex7.I.multiply((-2695));
      Complex complex8 = complex3.cos();
      complex8.NaN.getArgument();
      complex7.multiply(1048.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.exp();
      complex2.getField();
      Complex complex3 = complex1.I.add(complex0);
      complex0.equals(complex1);
      Complex complex4 = Complex.valueOf((-20.0));
      complex0.isNaN();
      Complex complex5 = complex3.multiply(3.597600556519039E85);
      complex5.I.nthRoot(1464);
      complex4.INF.getField();
      complex5.I.getField();
      complex5.INF.getField();
      Complex complex6 = (Complex)complex5.readResolve();
      assertEquals(3.597600556519039E85, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      complex4.I.getField();
      Complex complex7 = complex4.ZERO.cosh();
      Complex complex8 = complex0.INF.add((-20.0));
      complex8.ZERO.divide(339.1065);
      List<Complex> list0 = complex3.nthRoot(964);
      assertEquals(964, list0.size());
      
      complex4.add(3.597600556519039E85);
      Complex complex9 = complex7.subtract(complex0);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex9.pow(complex10);
      assertTrue(complex11.equals((Object)complex7));
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex12 = complex10.multiply(123.78220410204);
      complex0.isNaN();
      assertTrue(complex0.equals((Object)complex12));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1233.0, 0.0);
      complex1.ZERO.pow(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.sqrt1z();
      double double0 = complex2.I.abs();
      assertEquals(1.0, double0, 0.01);
      assertSame(complex2, complex3);
      
      complex0.abs();
      Complex complex4 = complex1.add(1233.0);
      Complex complex5 = complex1.multiply(complex4);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(3040578.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex1.ZERO.tan();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.cos();
      assertEquals((-0.9887362218361756), complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      complex4.hashCode();
      Complex complex8 = complex0.sqrt();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.I.cos();
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.NaN.multiply(5);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.ONE.sqrt1z();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex0.equals(complex2);
      Complex complex6 = complex0.atan();
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1426.464222451), (-1426.464222451));
      Complex complex1 = complex0.ONE.add(7.888519481107568E-9);
      Complex complex2 = Complex.valueOf((-1426.464222451));
      assertEquals((-1426.464222451), complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.createComplex(7.888519481107568E-9, 7.888519481107568E-9);
      Complex complex5 = complex4.exp();
      assertEquals(1.0000000078885196, complex5.getReal(), 0.01);
      assertEquals((-1.2560668255938158E-4), complex3.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals(7.88851954333631E-9, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.conjugate();
      assertEquals(1426.464222451, complex6.getImaginary(), 0.01);
  }
}
