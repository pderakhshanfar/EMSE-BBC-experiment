/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:34:08 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide(1.8784760208391767E259);
      Complex complex2 = complex0.reciprocal();
      complex1.I.exp();
      Complex complex3 = Complex.valueOf((-1333.280449747285), 1.8784760208391767E259);
      complex2.ONE.log();
      Complex complex4 = complex0.divide((-1801.99));
      Complex complex5 = complex4.I.createComplex(1.0, 1.8784760208391767E259);
      complex5.ZERO.createComplex((-1801.99), (-1333.280449747285));
      Complex complex6 = complex4.ONE.exp();
      complex6.ONE.add((-2090.0365));
      complex1.reciprocal();
      complex3.sqrt1z();
      Complex complex7 = complex3.exp();
      complex7.asin();
      complex4.add((-20.0));
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1448.954143), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = Complex.valueOf(558.7506293545);
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex2.add(complex0);
      Complex complex8 = complex0.atan();
      complex8.readResolve();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex4.divide(558.7506293545);
      complex10.pow(complex7);
      complex10.INF.add(558.7506293545);
      complex10.NaN.divide(complex6);
      complex2.ZERO.sqrt1z();
      Complex complex11 = complex7.atan();
      complex11.ONE.toString();
      complex7.ONE.log();
      complex0.cosh();
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex12.I.cos();
      Complex complex14 = complex0.asin();
      complex8.cos();
      complex2.ONE.multiply((-2441));
      complex0.INF.hashCode();
      Complex complex15 = complex1.INF.subtract(complex4);
      complex13.tanh();
      complex1.atan();
      complex15.getField();
      complex9.subtract(558.7506293545);
      complex7.add(complex14);
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-1498.733), Double.POSITIVE_INFINITY);
      complex0.ONE.add(4234.141456033257);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.INF.divide(complex3);
      complex1.add(complex0);
      complex0.acos();
      complex4.sinh();
      Complex complex5 = complex2.log();
      complex5.abs();
//      try { 
        complex1.nthRoot((-1342));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,342
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9539648830853395E7, 20.0);
      complex0.asin();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.negate();
      complex1.subtract((-20.0));
      complex0.pow((-20.0));
      Complex complex3 = new Complex((-20.0));
      Complex complex4 = Complex.ZERO;
      complex4.tanh();
      complex2.multiply(37);
      Complex complex5 = complex1.pow(827.9);
      Complex complex6 = Complex.valueOf(827.9, 2.0);
      Complex complex7 = complex3.negate();
      Complex complex8 = complex3.tanh();
      complex7.sqrt();
      complex5.acos();
      complex0.readResolve();
      complex8.add(complex7);
      complex5.nthRoot(1416);
      complex6.multiply(137);
      complex8.add(827.9);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.NaN.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-1411.5462187963453), Double.NaN);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.INF.acos();
      complex0.I.divide(complex1);
      Complex complex2 = complex0.INF.createComplex(Double.NaN, Double.NaN);
      complex2.reciprocal();
      Complex complex3 = complex1.INF.sqrt();
      complex3.ZERO.log();
      complex0.abs();
      complex0.subtract(237.4137);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.sqrt();
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex(2.0624330192486066E-8);
      complex0.add(complex2);
      complex3.abs();
      Complex complex4 = Complex.valueOf(2.0624330192486066E-8, (-20.0));
      complex4.cos();
      Complex complex5 = Complex.valueOf(2.0624330192486066E-8, (-20.0));
      complex5.tan();
      Complex complex6 = new Complex((-20.0));
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1375.3703145241159, 1375.3703145241159);
      Complex complex1 = new Complex((-2904.604114513), (-2904.604114513));
      Complex complex2 = complex1.asin();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex2.nthRoot(2533);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = new Complex(20.0);
      complex0.tanh();
      Complex complex2 = new Complex(20.0);
      Complex.valueOf(817.9146533, 817.9146533);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.tanh();
      complex5.ZERO.multiply(1271);
      complex1.acos();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(3194);
      Complex complex1 = Complex.I;
      complex1.multiply(3194);
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1815.461691964288);
      Complex complex1 = complex0.multiply((-20.0));
      Complex complex2 = Complex.ZERO;
      complex0.equals(complex2);
      Complex complex3 = Complex.ZERO;
      complex3.ZERO.nthRoot(1275);
      complex1.multiply(complex3);
      complex1.cosh();
      complex3.multiply(1275);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(2.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.cos();
      complex1.tan();
      Complex complex3 = Complex.I;
      complex2.multiply(complex3);
      Complex complex4 = Complex.valueOf((-1812.0), Double.POSITIVE_INFINITY);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.divide((-1.5707963267948966));
      complex1.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.5707963267948966));
      complex1.hashCode();
      complex3.nthRoot(2929);
      complex2.add((-1.5707963267948966));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getArgument();
      Complex complex1 = null;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.I;
      complex4.multiply(1685);
      Complex complex5 = Complex.ZERO;
      complex5.pow(422.89006157);
      Complex.valueOf(1827.3780887611, Double.POSITIVE_INFINITY);
      complex0.negate();
      Complex.valueOf(2018.692, (-1.5707963267948966));
      Complex complex6 = Complex.INF;
      complex6.divide(complex2);
      complex3.abs();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex(1827.3780887611);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
      complex0.toString();
      complex0.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.I;
      complex3.log();
      Complex complex4 = Complex.INF;
      complex4.divide(complex3);
      complex2.abs();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(Double.NaN);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = new Complex((-2904.604114513), 7.544137102816975);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.pow(7.544137102816975);
      complex0.tan();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.atan();
      complex4.conjugate();
      complex6.add((-1670.6752));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.acos();
      Complex complex1 = complex0.asin();
      complex1.INF.sin();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4234.141456033257));
      Complex complex1 = complex0.subtract((-4234.141456033257));
      Complex complex2 = Complex.INF;
      complex2.acos();
      complex0.sinh();
      complex1.pow((-4234.141456033257));
      Complex complex3 = new Complex((-4234.141456033257));
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.I;
      complex1.multiply(37);
      Complex complex6 = complex4.pow((double) 37);
      complex6.INF.divide(Double.NaN);
      Complex complex7 = Complex.valueOf(209.6725514968, (-952.967));
      Complex complex8 = complex7.negate();
      complex5.tanh();
      complex2.sqrt();
      complex6.acos();
      complex0.sqrt1z();
      complex1.readResolve();
      complex8.add(complex2);
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-719.4624590642134));
      Complex complex1 = Complex.NaN;
      complex1.ZERO.acos();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.subtract((-719.4624590642134));
      Complex complex4 = complex3.NaN.divide((-3089.865706282292));
      complex4.abs();
      Complex complex5 = complex3.ZERO.acos();
      complex5.I.asin();
      Complex complex6 = Complex.valueOf(153.9);
      Complex complex7 = new Complex((-719.4624590642134), 153.9);
      Complex complex8 = complex6.NaN.multiply(complex7);
      complex8.NaN.hashCode();
      Complex.valueOf((-3089.865706282292));
      complex4.NaN.abs();
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex9.ZERO.pow(complex1);
      complex10.INF.subtract(Double.NaN);
      complex2.subtract(153.9);
      complex6.sinh();
      complex10.cos();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow(1.1310926129226573E-4);
      complex1.ZERO.toString();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex4.INF.sqrt1z();
      complex5.INF.getField();
      Complex complex6 = complex3.divide(complex0);
      complex0.ONE.multiply((-119.58388));
      complex6.getImaginary();
      complex0.toString();
      complex2.acos();
      complex2.getImaginary();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4234.141456033257));
      complex0.subtract(3747.8343018893);
      Complex complex1 = new Complex(7.544137102816975, (-1465.20507358319));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.asin();
      Complex complex4 = new Complex(7.544137102816975);
      complex0.abs();
      complex3.cos();
      Complex complex5 = complex1.tan();
      complex5.cosh();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.cosh();
      complex6.asin();
      complex3.exp();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = Complex.valueOf(0.24740394949913025, (-4234.141456033257));
      complex9.ONE.subtract(complex10);
      complex1.toString();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.pow((-2323.367188904));
      complex0.createComplex(1718.49818, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(1377.2782478794);
      complex1.ZERO.readResolve();
      complex0.sqrt();
      Complex complex3 = new Complex((-18.2354192), (-18.2354192));
      complex3.conjugate();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.I.divide(Double.POSITIVE_INFINITY);
      complex2.INF.sinh();
      complex0.ZERO.hashCode();
      complex1.ZERO.abs();
      complex0.multiply(Double.NaN);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4233.0));
      complex0.ONE.abs();
      complex0.ZERO.pow(1.0);
      Complex complex1 = complex0.createComplex((-3063.9441457), 1.0);
      Complex complex2 = complex1.tanh();
      complex2.sqrt();
      complex1.conjugate();
      Complex complex3 = new Complex(1601.757);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(3280.0, (-4233.0));
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex3 = Complex.I;
      complex3.multiply(4923);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.pow(422.89006157);
      Complex complex6 = Complex.valueOf(1827.3780887611, Double.POSITIVE_INFINITY);
      complex0.negate();
      complex2.tanh();
      Complex complex7 = complex5.sqrt();
      complex4.acos();
      complex2.sqrt1z();
      complex5.readResolve();
      Complex complex8 = Complex.NaN;
      complex6.add(complex8);
      complex7.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.log();
      complex0.sqrt();
      Complex complex2 = complex1.sin();
      complex2.sin();
      Complex.valueOf(1377.2782478794, 9.744938448060427);
      Complex complex3 = complex2.log();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-1.0));
      complex0.isInfinite();
      complex1.getArgument();
      complex1.multiply(4374.648303002263);
      Complex complex2 = new Complex(6.371193600006338E7, (-1.0));
      complex2.multiply(complex1);
      complex1.toString();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      complex1.readResolve();
      complex1.reciprocal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.sqrt1z();
      complex3.getArgument();
      Complex complex4 = Complex.INF;
      complex4.readResolve();
      complex0.getArgument();
      complex4.isInfinite();
      complex1.sqrt();
      complex3.acos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.asin();
      complex9.exp();
      complex5.tanh();
      complex6.sqrt1z();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      complex1.abs();
      Complex complex2 = complex0.tan();
      complex2.tanh();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = new Complex(37);
      complex4.multiply(37);
      Complex complex5 = Complex.ONE;
      complex5.pow(649.9129);
      Complex complex6 = complex1.negate();
      Complex complex7 = new Complex(649.9129);
      complex7.tanh();
      complex2.sqrt();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.sqrt1z();
      complex3.cosh();
      Complex complex10 = Complex.ONE;
      complex5.asin();
      Complex complex11 = complex9.exp();
      complex11.tanh();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.asin();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = new Complex(1377.2782478794, 7.544137102816975);
      complex0.readResolve();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.sqrt1z();
      complex3.getArgument();
      complex3.readResolve();
      complex3.getArgument();
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex5 = complex0.tanh();
      complex0.exp();
      complex1.add(complex2);
      Complex complex6 = complex1.exp();
      complex6.conjugate();
      complex2.readResolve();
      complex5.reciprocal();
      Complex.valueOf(1377.2782478794, 7.544137102816975);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = Complex.ONE;
      complex5.getArgument();
      complex5.readResolve();
      complex0.getArgument();
      Complex complex6 = Complex.INF;
      complex6.equals(complex4);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex0.exp();
      Complex complex9 = new Complex(0.0);
      Complex complex10 = complex9.add(complex4);
      Complex complex11 = Complex.ONE;
      complex11.exp();
      complex8.conjugate();
      complex10.readResolve();
      Complex complex12 = complex3.reciprocal();
      complex3.ZERO.multiply(1687);
      complex0.pow((-2487.08137001));
      complex12.acos();
      complex7.divide((-2487.08137001));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.INF.divide(complex0);
      Complex complex2 = Complex.valueOf(0.0);
      complex0.getImaginary();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex3 = complex0.asin();
      complex3.I.readResolve();
      complex2.abs();
      complex2.tan();
      complex1.nthRoot(1725);
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = Complex.INF;
      complex0.pow(complex5);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2638.350539028079), 526.06575046491);
      Complex complex1 = complex0.multiply((-2638.350539028079));
      Complex complex2 = Complex.valueOf(968.09508);
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.multiply(968.09508);
      Complex complex6 = Complex.I;
      complex6.abs();
      Complex complex7 = complex6.add(complex5);
      complex1.pow(complex2);
      complex3.conjugate();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.10442488894585487, 6.7857249642669995E149);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.tan();
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.INF;
      complex0.getArgument();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.pow(1377.2782478794);
      complex4.NaN.sinh();
      Complex complex5 = complex0.subtract(1377.2782478794);
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex6.multiply(complex0);
      complex0.atan();
      Complex complex9 = complex3.multiply(complex7);
      complex8.toString();
      Complex.valueOf(0.7853981633974483);
      complex1.readResolve();
      complex9.toString();
      Complex complex10 = complex5.tan();
      complex0.sinh();
      complex7.cosh();
      complex10.asin();
      complex4.exp();
      complex9.tanh();
      complex1.sqrt1z();
      complex2.toString();
      Complex complex11 = Complex.ZERO;
      complex0.divide(complex11);
      complex8.multiply((-2827));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = new Complex((-2904.604114513), 7.544137102816975);
      Complex complex3 = complex2.asin();
      Complex complex4 = new Complex(8.083324209984255E-8);
      complex4.abs();
      complex1.cos();
      Complex.valueOf(1120.758590220093, (-2904.604114513));
      Complex complex5 = complex2.asin();
      complex4.divide(complex3);
      complex1.cos();
      complex2.abs();
      complex2.add(complex5);
      Complex complex6 = new Complex(8.083324209984255E-8);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      complex0.ONE.exp();
      Complex complex1 = Complex.INF;
      complex0.getArgument();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.pow(1377.2782478794);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.subtract(1377.2782478794);
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex2.negate();
      complex6.multiply(complex0);
      Complex complex8 = Complex.I;
      complex8.sqrt();
      Complex complex9 = complex5.multiply(37);
      Complex complex10 = new Complex(8.378351877809109E-4, (-461.2));
      complex10.pow((-1.0));
      Complex complex11 = complex7.negate();
      complex3.tanh();
      complex11.acos();
      complex6.sqrt1z();
      complex10.cosh();
      Complex complex12 = Complex.ONE;
      complex1.asin();
      complex10.exp();
      complex4.tanh();
      complex9.sqrt1z();
      complex1.toString();
      Complex.valueOf((-0.8945404572183225), 2.3810978455418157);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.8945404572183225, 0.8945404572183225);
      Complex complex1 = Complex.valueOf(8.165114384910189E-116, 0.8945404572183225);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.pow((-518.0));
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = Complex.valueOf(1970.250197, 0.8945404572183225);
      complex7.NaN.negate();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex8.divide(complex3);
      complex0.tan();
      Complex complex10 = complex0.divide(8.165114384910189E-116);
      Complex.valueOf((-518.0));
      Complex complex11 = complex2.pow(complex3);
      complex11.I.atan();
      Complex complex12 = complex8.sinh();
      complex4.getField();
      Complex complex13 = complex0.I.log();
      Complex complex14 = complex10.tanh();
      Complex complex15 = complex9.sqrt();
      Complex complex16 = complex14.exp();
      Complex complex17 = complex15.pow((-2494.80472070175));
      complex17.INF.subtract(complex12);
      Complex complex18 = complex6.log();
      complex16.cosh();
      complex2.isInfinite();
      Complex complex19 = complex18.atan();
      complex19.ONE.divide(complex7);
      complex13.multiply((-2291));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.pow(Double.POSITIVE_INFINITY);
      complex2.tanh();
      Complex complex5 = Complex.I;
      complex5.sqrt();
      Complex complex6 = new Complex((-693.2073468189), 1.7768193998956956);
      complex6.pow((-1.0953484767704112E226));
      Complex complex7 = complex0.negate();
      Complex complex8 = complex0.tanh();
      complex3.sqrt();
      complex7.acos();
      complex1.sqrt1z();
      complex3.cosh();
      Complex complex9 = Complex.ONE;
      complex4.asin();
      complex6.exp();
      complex3.tanh();
      complex8.sqrt1z();
      Complex complex10 = new Complex((-693.2073468189), (-181.563));
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.INF;
      complex0.getArgument();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.pow(1377.2782478794);
      complex4.NaN.sinh();
      Complex complex5 = complex0.subtract(1377.2782478794);
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex6.multiply(complex0);
      complex0.atan();
      Complex complex9 = complex3.multiply(complex7);
      complex8.toString();
      Complex.valueOf(0.7853981633974483);
      complex1.readResolve();
      complex9.toString();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex9.log();
      Complex.valueOf(6.049396364340984E87, 0.0);
      complex9.asin();
      complex5.divide(complex9);
      complex10.cos();
      complex4.abs();
      complex3.add(complex11);
      Complex complex12 = new Complex(6.049396364340984E87);
      Complex complex13 = complex12.pow(complex10);
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = new Complex((-2904.604114513), 7.544137102816975);
      Complex complex3 = complex2.asin();
      Complex complex4 = new Complex(8.083324209984255E-8);
      complex4.abs();
      complex1.cos();
      Complex complex5 = complex1.tan();
      complex2.sinh();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex5.asin();
      complex7.exp();
      complex3.tanh();
      Complex complex8 = complex6.sqrt1z();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(2.878626392440285E-10, 2.878626392440285E-10);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.reciprocal();
      complex0.ONE.abs();
      Complex complex3 = complex2.NaN.tan();
      complex2.NaN.nthRoot(1166);
      complex1.conjugate();
      complex3.multiply(1.0);
      complex0.abs();
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-2487.08137001));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.acos();
      complex3.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.pow((-595.7765));
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.multiply((-2118));
      complex8.pow((-3616.0886334170805));
      Complex complex9 = new Complex((-701.0), (-2118));
      complex9.negate();
      complex9.tanh();
      Complex complex10 = complex7.sqrt();
      complex10.acos();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.sqrt1z();
      complex6.cosh();
      Complex complex13 = Complex.ONE;
      complex1.asin();
      complex9.exp();
      Complex complex14 = Complex.NaN;
      complex14.tanh();
      complex2.sqrt1z();
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4736818914204564E-150, 1.4736818914204564E-150);
      Complex complex1 = complex0.asin();
      complex0.abs();
      Complex complex2 = complex0.cos();
      complex1.tan();
      Complex complex3 = complex1.sinh();
      complex2.cosh();
      Complex complex4 = complex1.asin();
      complex4.exp();
      complex3.tanh();
      complex0.sqrt1z();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.INF;
      complex0.getArgument();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.pow(1377.2782478794);
      complex4.abs();
      Complex complex5 = complex4.NaN.sinh();
      complex0.subtract(1377.2782478794);
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex6.multiply(complex0);
      complex0.atan();
      Complex complex9 = complex3.multiply(complex7);
      complex8.toString();
      Complex.valueOf(Double.NaN);
      complex1.readResolve();
      complex9.toString();
      Complex complex10 = complex8.sqrt();
      complex2.asin();
      complex7.abs();
      Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      complex1.multiply(2.0);
      complex6.hashCode();
      complex7.getField();
      complex6.sqrt();
      complex3.hashCode();
      complex9.subtract(3118.6977187);
      complex3.createComplex(1377.2782478794, 3118.6977187);
      complex0.getField();
      complex5.createComplex(0.7853981633974483, 0.7853981633974483);
      complex1.sin();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.exp();
      complex0.isInfinite();
      Complex complex2 = complex0.subtract((-595.7765));
      Complex complex3 = complex1.divide((-595.7765));
      Complex complex4 = complex1.sin();
      Complex complex5 = complex2.sinh();
      complex2.hashCode();
      complex4.abs();
      complex5.asin();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.pow(8.709065843311144E-8);
      complex7.getImaginary();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.exp();
      complex0.isInfinite();
      Complex complex2 = complex0.subtract((-595.7765));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex3.pow((-595.7765));
      complex6.INF.tanh();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.NaN.multiply(37);
      complex5.INF.pow((-595.7765));
      Complex complex9 = complex8.I.negate();
      complex4.tanh();
      complex5.sqrt();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex12.atan();
      Complex complex14 = Complex.ONE;
      complex14.asin();
      complex5.exp();
      complex11.tanh();
      complex2.sqrt1z();
      complex7.toString();
      complex7.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2638.350539028079), 526.06575046491);
      Complex complex1 = complex0.multiply((-2638.350539028079));
      complex1.add(526.06575046491);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      complex2.I.abs();
      complex0.nthRoot(1);
      Complex complex3 = complex0.exp();
      complex3.NaN.conjugate();
      Complex complex4 = complex2.INF.tan();
      complex4.ONE.createComplex(4829.925686217453, 4829.925686217453);
      complex0.isInfinite();
      Complex complex5 = complex2.sin();
      Complex complex6 = Complex.NaN;
      complex5.multiply(complex6);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      complex0.ZERO.atan();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.reciprocal();
      complex3.getArgument();
      Complex complex4 = complex3.createComplex((-20.0), (-20.0));
      complex4.I.getArgument();
      complex3.isInfinite();
      complex0.NaN.add(complex2);
      Complex complex5 = complex4.multiply(824);
      complex5.NaN.sqrt();
      Complex complex6 = complex0.atan();
      complex4.exp();
      complex6.INF.multiply(complex4);
      complex2.asin();
      Complex complex7 = complex0.multiply(-0.0);
      complex7.INF.sqrt1z();
      Complex.valueOf(-0.0, (-20.0));
      complex6.sqrt();
      Complex complex8 = complex1.add((-310.7152));
      complex8.INF.negate();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-2.8786263916116364E-10), (-2.8786263916116364E-10));
      complex0.I.asin();
      complex0.I.abs();
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.sinh();
      complex0.I.cosh();
      complex0.asin();
      complex2.multiply(1876);
      complex1.hashCode();
      Complex complex4 = Complex.valueOf(8.709065843311144E-8, (-5.262123923229857E95));
      complex4.log();
      complex3.abs();
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex0.I.multiply((-745.12864927658));
      complex6.I.sinh();
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.NaN.log();
      complex8.I.getField();
      complex5.exp();
      Complex complex9 = Complex.valueOf((-2338.0), 0.0);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.INF;
      complex0.getArgument();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.pow(1377.2782478794);
      complex4.abs();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex0.subtract(1377.2782478794);
      Complex complex7 = (Complex)complex0.readResolve();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex7.multiply(complex0);
      complex0.atan();
      Complex complex10 = complex3.multiply(complex8);
      complex9.toString();
      Complex.valueOf(Double.NaN);
      complex1.readResolve();
      complex10.toString();
      complex9.sqrt();
      complex10.log();
      Complex.valueOf(6.049396364340984E87, 0.0);
      complex10.asin();
      complex6.divide(complex10);
      complex1.multiply((-2991));
      Complex.valueOf((-1675.587022076));
      complex1.hashCode();
      complex3.getReal();
      complex4.isInfinite();
      complex5.readResolve();
      complex6.multiply((double) (-207));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      complex0.ONE.exp();
      Complex complex1 = Complex.INF;
      complex0.getArgument();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.pow(1377.2782478794);
      complex3.abs();
      Complex.valueOf(Double.NaN);
      complex0.subtract(1377.2782478794);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex4 = complex0.tanh();
      complex4.I.log();
      complex4.sqrt1z();
      Complex.valueOf(1377.2782478794, (-2762.1473560178524));
      Complex complex5 = complex1.asin();
      complex5.ZERO.nthRoot(1);
      Complex complex6 = complex1.cos();
      complex6.tanh();
      Complex complex7 = complex1.asin();
      complex7.ONE.abs();
      Complex complex8 = Complex.I;
      complex8.multiply(0);
      complex7.hashCode();
      complex6.log();
      complex4.abs();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2487.08137001), (-2487.08137001));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = (Complex)complex3.ONE.readResolve();
      Complex complex5 = Complex.ONE;
      complex5.conjugate();
      complex5.getArgument();
      Complex complex6 = complex1.divide(complex5);
      complex4.add(0.0);
      complex6.multiply((-1));
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.asin();
      // Undeclared exception!
      complex8.nthRoot(1518500250);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      complex1.abs();
      complex0.tan();
      complex0.nthRoot(298);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.pow(complex3);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.INF;
      complex3.readResolve();
      Complex complex4 = complex0.subtract(0.0);
      complex3.atan();
      complex2.add(complex3);
      Complex complex5 = complex3.divide(759.859);
      complex5.multiply(3995);
      complex1.hashCode();
      complex4.log();
      complex1.abs();
      Complex complex6 = complex2.cos();
      complex1.pow(0.0);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex0.getImaginary();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.pow((-1601.687));
      Complex complex6 = complex5.acos();
      complex4.readResolve();
      complex2.nthRoot(2014);
      complex1.sqrt1z();
      complex4.nthRoot(1894);
      Complex complex7 = complex4.divide((double) 1);
      Complex complex8 = Complex.valueOf(952.413, 952.413);
      complex4.ONE.multiply(complex7);
      complex6.abs();
      complex2.getArgument();
      complex0.atan();
      complex5.nthRoot(1);
      complex0.reciprocal();
      complex3.createComplex(1, 2328.0);
      complex8.multiply(Double.NaN);
      complex7.nthRoot(1894);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.I.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.INF.sinh();
      complex2.ZERO.hashCode();
      complex1.ZERO.abs();
      Complex complex4 = complex0.asin();
      complex3.readResolve();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = new Complex((-1.0), 0.0);
      Complex complex8 = complex7.sqrt1z();
      complex5.getArgument();
      complex4.readResolve();
      complex6.getArgument();
      complex8.equals(complex6);
      double double0 = (-7.084689150031056);
      Complex complex9 = Complex.valueOf(0.0, (-7.084689150031056));
      complex9.tanh();
      complex3.exp();
      complex6.nthRoot(1);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.valueOf((-1801.99));
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex1.subtract(complex3);
      Complex complex7 = complex6.INF.conjugate();
      complex7.ZERO.conjugate();
      complex6.I.getArgument();
      Complex complex8 = complex0.cosh();
      complex8.ONE.divide(complex2);
      complex6.add(0.0);
      complex5.multiply((-1878));
      complex1.asin();
      complex4.nthRoot(2029);
      complex4.exp();
      Complex.valueOf(4022.0178315157864);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.788169932297778E170));
      Complex complex1 = complex0.cos();
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.cos();
      complex2.ZERO.createComplex((-6.788169932297778E170), 20.0);
      complex1.I.sinh();
      complex0.ZERO.exp();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.INF.multiply((-1));
      Complex complex5 = complex2.I.subtract((-1.0));
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.ZERO.cosh();
      complex2.sin();
      complex2.cos();
      complex5.equals(complex4);
      complex4.tanh();
      Complex complex8 = complex1.multiply(complex2);
      complex6.log();
      Complex complex9 = new Complex(0.0, 20.0);
      complex8.multiply(complex9);
      complex9.add(1.315498542514467E-9);
      complex7.multiply((-5.0054634662706464E-9));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.I.acos();
      complex1.ONE.cos();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.NaN.pow(0.0);
      Complex complex5 = complex0.exp();
      complex5.ZERO.readResolve();
      complex1.getReal();
      Complex.valueOf(0.0);
      complex4.pow(0.0);
      Complex complex6 = complex5.asin();
      complex1.negate();
      complex6.isInfinite();
      complex3.sin();
      Complex complex7 = complex0.reciprocal();
      complex7.nthRoot(1272);
      complex0.abs();
      complex1.subtract(1.8386917534879182E-8);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, (-92.85435095503));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex1.ONE.tan();
      complex3.pow(0.0);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.cosh();
      complex5.ONE.log();
      Complex complex6 = complex5.NaN.createComplex(0.0, 0.0);
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex1.ONE.add(complex4);
      Complex complex9 = complex7.ONE.tanh();
      complex9.NaN.subtract(complex7);
      Complex.valueOf((-92.85435095503), 0.0);
      complex0.ZERO.toString();
      Complex complex10 = complex1.multiply(17);
      Complex complex11 = complex4.multiply(17);
      complex9.hashCode();
      complex9.acos();
      Complex complex12 = complex10.ONE.multiply(complex6);
      complex10.I.multiply(17);
      complex12.INF.createComplex((-390.03999575820563), 2770.918027418);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.pow(complex11);
      Complex complex13 = complex2.cosh();
      complex13.NaN.tan();
      Complex complex14 = complex1.cosh();
      complex14.ZERO.cos();
      Complex complex15 = complex4.add(complex8);
      complex15.cos();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 1270.110016752922);
      Complex complex1 = complex0.ONE.divide((-1.218609462241927E-9));
      complex0.ZERO.reciprocal();
      complex1.INF.exp();
      Complex complex2 = complex1.ONE.sqrt();
      complex0.abs();
      Complex complex3 = complex1.I.multiply(4051.4138191907);
      complex3.NaN.tan();
      complex3.INF.negate();
      complex1.ONE.subtract(complex0);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex2.NaN.atan();
      complex5.ONE.conjugate();
      complex4.divide(2271.0);
//      try { 
        complex4.I.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 727.1947);
      complex0.ZERO.abs();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.INF.multiply(2.0);
      complex1.ONE.exp();
      complex0.getArgument();
      complex0.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      complex3.NaN.sin();
      complex0.isNaN();
      complex0.INF.add(1420.34);
      Complex complex4 = new Complex(0.0);
      complex3.add(complex4);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.exp();
      complex0.isInfinite();
      Complex complex2 = complex0.subtract((-595.7765));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex3.pow((-595.7765));
      complex6.INF.tanh();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.NaN.multiply(37);
      complex5.INF.pow((-595.7765));
      Complex complex9 = complex8.I.negate();
      complex4.tanh();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex2.acos();
      Complex complex12 = complex11.sqrt1z();
      complex12.NaN.pow(0.0);
      Complex complex13 = complex10.tan();
      complex5.nthRoot(7);
      Complex complex14 = complex5.multiply((-595.7765));
      Complex.valueOf((-3957.1));
      complex13.negate();
      complex14.INF.hashCode();
      Complex complex15 = complex13.multiply(37);
      Complex complex16 = complex14.divide(complex10);
      complex15.isNaN();
      Complex complex17 = complex9.asin();
      complex17.divide(0.0);
      complex8.sqrt();
      complex16.tanh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4233.0));
      complex0.ONE.abs();
      complex0.ZERO.pow(1.0);
      Complex complex1 = complex0.tan();
      complex1.toString();
      complex1.NaN.add((-4233.0));
      complex1.acos();
      complex1.I.atan();
      Complex complex2 = complex1.conjugate();
      complex1.ONE.cos();
      complex2.sin();
      Complex.valueOf(394.2);
      complex1.atan();
      complex1.subtract(1.0);
      complex2.isInfinite();
      Complex.valueOf((-4233.0), 1.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3890.0141395809615, 1634.792694557);
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.tanh();
      complex1.I.multiply((-20.0));
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.INF.divide(3890.0141395809615);
      complex2.I.toString();
      Complex complex4 = complex1.multiply(37);
      complex1.abs();
      Complex complex5 = complex3.ONE.multiply((-19.0));
      Complex complex6 = complex4.pow(3890.0141395809615);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex2.asin();
      complex0.I.createComplex(37, 0.0);
      complex3.add((-20.0));
      Complex complex9 = complex5.multiply((-20.0));
      complex9.toString();
      Complex complex10 = complex6.add(complex9);
      complex10.sqrt1z();
      complex1.hashCode();
      complex8.cos();
      complex1.multiply((double) 37);
      complex8.divide(2228.6388153579);
      Complex complex11 = complex2.asin();
      complex11.NaN.multiply(complex2);
      complex1.reciprocal();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.2782478794, 1377.2782478794);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.INF;
      complex0.getArgument();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.pow(1377.2782478794);
      complex4.abs();
      complex4.NaN.sinh();
      Complex complex5 = complex0.subtract(1377.2782478794);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex6 = complex0.tanh();
      complex6.I.log();
      complex6.sqrt1z();
      Complex.valueOf(1377.2782478794, (-2762.1473560178524));
      Complex complex7 = complex2.asin();
      complex7.ZERO.nthRoot(1);
      Complex complex8 = complex2.cos();
      complex8.tanh();
      Complex complex9 = complex2.asin();
      complex9.ONE.abs();
      Complex complex10 = Complex.valueOf(1377.2782478794, 3514.578783);
      Complex complex11 = complex9.multiply(3514.578783);
      complex2.hashCode();
      complex5.getField();
      complex10.I.sqrt();
      complex11.hashCode();
      Complex complex12 = complex5.subtract(0.0);
      Complex complex13 = complex1.createComplex(0.0, 0.0);
      complex11.getField();
      complex12.createComplex((-4074.8354676181643), 0.0);
      complex10.sin();
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-842.639896297682));
      complex0.I.getField();
      Complex complex1 = Complex.valueOf((-20.0), (-842.639896297682));
      complex1.cos();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.067), (-5.533523366931846E-8));
      complex0.getReal();
      Complex complex1 = new Complex((-1.0), (-5.533523366931846E-8));
      complex1.getField();
      double double0 = 0.0;
      double double1 = 849.75;
//      try { 
        complex0.ONE.nthRoot((-4602));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -4,602
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-2.8786263916116364E-10), (-2.8786263916116364E-10));
      complex0.I.asin();
      complex0.I.abs();
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.tan();
      complex2.ONE.sinh();
      complex0.I.cosh();
      Complex complex3 = complex0.asin();
      complex3.ONE.exp();
      Complex complex4 = complex0.tanh();
      complex4.sqrt1z();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.NaN.reciprocal();
      complex2.ONE.add((-53.74));
      complex2.ONE.sin();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex0.multiply((-53.74));
      complex0.sinh();
      complex0.hashCode();
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.NaN;
      complex5.ZERO.subtract(complex6);
      Complex.valueOf((-53.74));
      Complex complex7 = Complex.valueOf(1014.5603479, (-299.57774097371));
      complex7.atan();
      Complex.valueOf((-1.0), (-1.0));
      complex3.negate();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.reciprocal();
//      try { 
        complex0.I.nthRoot((-1012));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,012
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(2.0);
      complex0.tanh();
      complex1.NaN.getArgument();
      complex0.ONE.conjugate();
      complex1.NaN.getArgument();
      complex0.ONE.sinh();
      complex0.getField();
      Complex complex2 = complex1.add(complex0);
      complex2.cos();
      complex0.pow(Double.NaN);
      Complex complex3 = complex0.createComplex((-3870.08), Double.NaN);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.exp();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.sinh();
      complex0.isInfinite();
      complex0.hashCode();
      complex6.pow(0.0);
      complex0.acos();
      complex6.getField();
      complex3.reciprocal();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.conjugate();
      Complex complex1 = complex0.reciprocal();
      complex0.ONE.abs();
      complex1.NaN.tan();
//      try { 
        complex1.NaN.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      complex0.INF.subtract(complex1);
      complex0.readResolve();
      complex1.atan();
      complex0.multiply((-170.22));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(5014.280563268, 0.0);
      Complex complex2 = complex1.NaN.add(complex0);
      complex1.INF.abs();
      complex1.I.hashCode();
      complex1.ONE.abs();
      complex0.getImaginary();
      Complex complex3 = complex2.divide(complex0);
      complex3.INF.acos();
      complex2.hashCode();
      complex2.getImaginary();
      Complex complex4 = complex2.INF.add(complex0);
      Complex complex5 = complex3.add(complex2);
      complex3.hashCode();
      Complex complex6 = complex5.conjugate();
      complex6.I.abs();
      Complex complex7 = complex5.log();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex5.I.divide(complex7);
      complex9.ONE.tan();
      Complex complex10 = complex9.NaN.add(complex8);
      complex9.NaN.pow(Double.NaN);
      complex5.multiply(4514);
      complex0.isNaN();
      Complex complex11 = complex3.multiply(4514);
      complex10.subtract(Double.NaN);
      complex11.multiply(4094);
      complex8.acos();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.INF.divide(complex0);
      Complex.valueOf(0.0);
      complex0.getImaginary();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = complex0.asin();
      complex2.I.readResolve();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex0.ONE.getArgument();
      Object object1 = complex0.readResolve();
      complex1.ONE.getArgument();
      complex0.equals(object1);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.exp();
      complex2.nthRoot(1);
      complex6.I.add(complex4);
      complex6.ZERO.exp();
      Complex complex7 = complex4.conjugate();
      complex6.readResolve();
      complex7.reciprocal();
      complex5.pow(1.0582754611968994);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-577.38480970633));
      complex0.hashCode();
      complex0.ONE.toString();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.NaN.multiply(719);
      complex2.cosh();
      complex1.INF.sqrt1z();
      Complex complex3 = complex0.NaN.sin();
      complex0.hashCode();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.NaN.reciprocal();
      complex1.conjugate();
      Complex complex6 = complex5.ZERO.multiply(0.0);
      complex4.pow(complex6);
      Complex complex7 = complex4.divide(5.321990399912051E-172);
      complex7.getReal();
      complex3.toString();
      complex1.cosh();
      Complex complex8 = complex0.cos();
      complex7.sin();
      complex8.toString();
      Complex complex9 = complex7.pow(complex2);
//      try { 
        complex9.nthRoot((-1485));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,485
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.I.sinh();
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.tanh();
      complex7.NaN.log();
      complex5.exp();
      Complex.valueOf((-2338.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.I.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.sin();
      complex2.INF.sinh();
      complex2.ZERO.hashCode();
      complex1.ZERO.abs();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.pow(952.413);
      Complex complex5 = complex0.acos();
      complex3.NaN.readResolve();
      complex5.ZERO.nthRoot(1);
      Complex complex6 = complex4.sqrt1z();
      complex6.ZERO.nthRoot(1);
      Complex complex7 = complex6.ONE.divide(952.413);
      Complex.valueOf(0.0, 0.0);
      complex3.abs();
      complex4.getArgument();
      Complex complex8 = complex5.atan();
      complex5.nthRoot(1);
      complex5.reciprocal();
      complex8.createComplex(1625.0, 1625.0);
      complex7.multiply(0.0);
      complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      complex1.I.abs();
      Complex complex2 = complex0.multiply((-2655));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex0.divide(complex3);
      complex3.INF.asin();
      complex0.toString();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex3.multiply((-2655));
      complex8.readResolve();
      complex6.NaN.sqrt();
      complex8.ONE.asin();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex2.multiply(complex5);
      Complex complex11 = complex4.sinh();
      complex11.tan();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex12.NaN.asin();
      Complex complex14 = complex9.divide((double) (-2655));
      Complex complex15 = Complex.valueOf(2304.62918);
      Complex.valueOf(2304.62918, 3.720075801577098E-44);
      complex2.abs();
      complex15.toString();
      complex5.multiply(complex9);
      Complex complex16 = complex13.subtract(455.2109);
      complex16.NaN.cos();
      complex14.atan();
      complex0.log();
      complex10.getReal();
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(570.88159599889, 2748.346183931397);
      Complex complex1 = complex0.I.exp();
      complex0.abs();
      complex0.readResolve();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.INF.nthRoot(7);
      Complex complex3 = Complex.valueOf(0.0, 1466.78);
      Complex complex4 = complex1.divide(complex3);
      complex0.isInfinite();
      complex3.multiply(0.0);
      complex4.tan();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex1.createComplex((-176.041255271168), (-5.198295198128238E28));
      Complex complex4 = Complex.valueOf((-1236.101), (-176.041255271168));
      Complex complex5 = complex4.ZERO.sin();
      complex0.ONE.readResolve();
      complex1.add(0.0);
      Complex complex6 = complex0.sqrt();
      complex6.ZERO.getArgument();
      complex0.readResolve();
      complex2.acos();
      complex4.isNaN();
      Complex complex7 = Complex.NaN;
      complex6.INF.abs();
      complex7.INF.getField();
      Complex complex8 = complex7.ZERO.divide(0.0);
      complex3.equals(complex7);
      complex6.acos();
      Complex complex9 = complex6.asin();
      complex5.sin();
      complex7.ZERO.sqrt1z();
      Complex complex10 = complex9.subtract(1917.808014757);
      complex10.getArgument();
      complex8.isNaN();
      complex5.atan();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex11.ZERO.sin();
      complex7.divide(complex9);
      complex0.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.ZERO.subtract(complex1);
      complex0.readResolve();
      Complex complex5 = complex0.log();
      complex3.getImaginary();
      complex2.isInfinite();
      Complex complex6 = complex4.divide(complex5);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.ZERO.cos();
      complex0.NaN.cos();
      complex0.ONE.hashCode();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex2.divide(2680.0);
      complex4.ZERO.negate();
      complex3.ZERO.createComplex((-270.4159), 1712.115995495);
      complex0.getArgument();
      complex2.add(complex4);
      complex0.getReal();
      Complex complex5 = complex3.multiply((-933.6111819));
      Complex complex6 = Complex.ZERO;
      complex5.subtract(complex6);
      complex6.sin();
      complex1.exp();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(2489.222862811);
      Complex complex1 = complex0.multiply(0.5707147121429443);
      complex1.INF.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.createComplex(2489.222862811, 683.2416397321066);
      complex4.conjugate();
      Complex complex5 = complex0.add(complex2);
      Complex.valueOf(2489.222862811, (-5.5957016861703E-8));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex6 = Complex.valueOf(0.0, (-2072.5257537250236));
      complex5.sin();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex9.atan();
      complex0.cos();
      complex7.getReal();
      complex0.abs();
      complex5.readResolve();
      complex3.divide(1.0);
      complex10.abs();
      complex8.multiply(3.1367659571899855E-9);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2487.08137001), (-2487.08137001));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.I.subtract(complex0);
      complex3.ONE.readResolve();
      complex2.I.subtract(0.0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.ZERO.add(complex3);
      complex5.ONE.divide(759.859);
      complex4.ZERO.multiply(0);
      complex4.INF.hashCode();
      complex1.log();
      complex4.abs();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.reciprocal();
      Complex complex1 = Complex.valueOf(1229.50368864, 1229.50368864);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-393.7510973999651), 0.0);
      Complex complex1 = complex0.NaN.divide(0.0);
      complex1.ONE.exp();
      Complex complex2 = new Complex(1.7804909509998055E-74);
      Complex complex3 = complex0.atan();
      complex2.INF.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.exp();
      complex0.pow(complex3);
      complex4.conjugate();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(252.273605, 252.273605);
      Complex complex1 = complex0.tanh();
      complex0.isNaN();
      complex0.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.subtract(complex0);
      complex4.subtract(252.273605);
      Complex complex5 = complex3.reciprocal();
      complex5.I.multiply(1.7875271881514469E-115);
      Complex complex6 = complex0.pow(0.0);
      complex6.log();
      Complex.valueOf((-222.579938), (-222.579938));
      Complex complex7 = complex2.log();
      complex7.I.multiply((-2367.92776048));
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2777.0179));
      Complex complex1 = Complex.valueOf(0.0, (-2777.0179));
      complex0.INF.add(complex1);
      Complex complex2 = Complex.ZERO;
      complex0.NaN.multiply(complex2);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ONE.tan();
      complex0.asin();
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(2479.301271822118, 2479.301271822118);
      complex0.toString();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.conjugate();
      complex0.NaN.readResolve();
      complex1.INF.conjugate();
      Complex complex6 = complex1.ONE.negate();
      Complex complex7 = complex4.multiply(complex5);
      Complex complex8 = complex5.atan();
      Complex complex9 = complex8.NaN.multiply(complex1);
      complex1.toString();
      Complex complex10 = Complex.valueOf(0.0);
      complex10.INF.readResolve();
      complex10.toString();
      complex4.sqrt();
      complex7.log();
      Complex.valueOf(0.0, 2479.301271822118);
      complex10.ZERO.asin();
      Complex complex11 = complex3.divide(complex1);
      complex11.ONE.multiply((-207));
      Complex.valueOf(2479.301271822118);
      complex6.hashCode();
      complex9.getReal();
      complex8.isInfinite();
      complex10.readResolve();
      complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex complex5 = complex4.I.conjugate();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals((-1.0), complex5.getImaginary(), 0.01);
      
      Complex complex6 = Complex.valueOf((-20.0), 2579.94521919);
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.NaN.divide(complex1);
      complex0.toString();
      Complex complex10 = complex7.sin();
      Complex complex11 = complex10.multiply((-3765.47298787));
      Complex complex12 = complex11.I.divide(complex0);
      Complex complex13 = complex3.atan();
      Complex complex14 = complex4.tanh();
      Complex complex15 = complex11.ZERO.cosh();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      
      Complex.valueOf(583.0);
      complex0.NaN.createComplex(2579.94521919, 2579.94521919);
      Complex complex16 = complex14.tanh();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      
      complex1.hashCode();
      complex4.getArgument();
      complex3.hashCode();
      complex12.readResolve();
      assertSame(complex12, complex11);
      
      Complex complex17 = complex9.add(complex6);
      complex17.getArgument();
      assertSame(complex17, complex7);
      assertEquals(2579.94521919, complex6.getImaginary(), 0.01);
      
      Complex complex18 = complex9.acos();
      assertTrue(complex0.equals((Object)complex16));
      assertTrue(complex2.equals((Object)object0));
      assertSame(complex18, complex13);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }
}
