/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:54:42 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-6.714376022102489E279), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(688.5317544, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-1140.210321308411), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.NaN.add(complex4);
      complex5.I.getField();
      Complex complex6 = complex0.pow((-1140.210321308411));
      complex5.toString();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex7.multiply(complex1);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.cosh();
      complex10.NaN.cos();
      complex2.multiply((-1140.210321308411));
      complex8.toString();
      complex2.multiply(complex3);
      complex7.createComplex((-1140.210321308411), Double.POSITIVE_INFINITY);
      int int0 = (-3521);
//      try { 
        complex6.nthRoot((-3521));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,521
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.NaN.asin();
      complex0.I.abs();
      complex0.log();
      Complex complex2 = Complex.valueOf((-1.1349246400274207E46), 1.0);
      Complex complex3 = complex2.divide(1.0);
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = new Complex(1.0);
      Complex complex6 = complex3.add(0.3087568535221259);
      Complex complex7 = complex1.atan();
      complex3.exp();
      complex4.asin();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex8.multiply((-780.356));
      complex9.I.subtract(1.0);
      complex6.isNaN();
      Complex.valueOf(0.3087568535221259);
      Complex complex10 = Complex.valueOf((-2049.00086111217), (-373.62447859));
      complex1.equals(complex10);
      Complex complex11 = Complex.ZERO;
      complex5.add((-1.0000000000000004));
      complex9.readResolve();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-6.488296536838142E224), 733.342);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.tan();
      complex0.add((-287.927));
      Complex complex4 = new Complex((-4128.7862));
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.exp();
      complex6.asin();
      complex2.acos();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (-4128.7862));
      complex4.atan();
      complex7.subtract(complex6);
      Complex complex8 = Complex.INF;
      complex8.toString();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tanh();
      complex1.negate();
      Complex complex2 = Complex.I;
      complex2.pow(complex0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.011320021817099E249));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.I;
      complex2.pow(complex1);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
//      try { 
        complex0.ONE.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.abs();
      complex1.INF.cos();
      Complex complex2 = complex0.divide(complex0);
      complex1.nthRoot(17);
      Complex complex3 = new Complex(0.6);
      complex3.subtract(complex2);
      complex0.toString();
      Complex complex4 = complex0.asin();
      complex4.I.createComplex(9.092255349846276, Double.POSITIVE_INFINITY);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.cosh();
      complex3.acos();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.sin();
      Complex complex3 = new Complex(1.0, 938);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.reciprocal();
      complex2.multiply((double) 1156);
      complex3.tanh();
      complex1.readResolve();
      complex5.createComplex(938, 9.092255349846276);
      complex5.multiply(1700.3768158159533);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1331.13, (-20.0));
      Complex complex2 = complex0.acos();
      complex2.abs();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.cosh();
      Complex.valueOf(Double.NaN);
      Complex complex5 = new Complex(2.9020207004099463, Double.NaN);
      complex3.tan();
      Complex complex6 = Complex.ZERO;
      complex6.getImaginary();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.acos();
      complex2.abs();
      complex2.divide(complex0);
      Complex complex3 = complex2.cosh();
      complex3.acos();
      Complex complex4 = new Complex(2.9020207004099463, 4.672800274777497);
      complex0.log();
      complex0.subtract(3.1324449191849455);
      complex2.cosh();
      complex1.tan();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(1956.14108, (-731.7013940996385));
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-731.7013940996385), (-731.7013940996385));
      complex2.ZERO.readResolve();
      Complex complex3 = complex2.NaN.tan();
      complex3.I.add(complex2);
      Complex.valueOf((double) 1384, (-731.7013940996385));
      complex2.ONE.nthRoot(1384);
      complex2.ONE.readResolve();
      Complex complex4 = complex0.pow(complex2);
      complex4.ZERO.multiply(1956.14108);
      Complex complex5 = complex1.multiply(complex2);
      Complex complex6 = complex5.sqrt();
      complex4.cosh();
      Complex complex7 = complex4.conjugate();
      complex7.createComplex((-731.7013940996385), (-731.7013940996385));
      Complex complex8 = complex6.multiply((-1770));
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.acos();
      complex2.abs();
      complex2.divide(complex0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.acos();
      Complex complex5 = new Complex(2.9020207004099463, 4.672800274777497);
      complex5.createComplex((-17.245980008937416), (-1336335.0));
      complex4.getImaginary();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.abs();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.atan();
      complex1.readResolve();
      complex1.equals(complex2);
      Complex complex4 = complex1.cosh();
      complex0.getField();
      complex2.abs();
      complex4.INF.abs();
      Complex complex5 = Complex.NaN;
      complex5.add(complex4);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2496.56, 1440.7);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex4.NaN.multiply((-2464));
      complex2.NaN.acos();
      Complex complex6 = complex2.ONE.multiply(complex0);
      complex6.ZERO.hashCode();
      Complex complex7 = complex6.NaN.divide(1440.7);
      complex0.readResolve();
      Complex complex8 = complex0.exp();
      complex8.multiply(complex1);
      Complex complex9 = complex8.multiply(complex1);
      Complex.valueOf((-4443.10252789146));
      complex7.sinh();
      complex9.sin();
      complex5.sqrt1z();
      Complex complex10 = complex3.multiply(complex8);
      complex10.NaN.add(complex6);
      complex5.getField();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sin();
      complex0.I.add(complex2);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.createComplex((-1141.06), (-3495.98033));
      complex5.conjugate();
      complex3.reciprocal();
      complex3.acos();
      complex5.createComplex(Double.NaN, (-3495.98033));
      Complex complex6 = Complex.valueOf((-2795.0), 1.414213562373095);
      complex6.hashCode();
      complex2.tan();
      Complex.valueOf(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.INF.atan();
      Complex complex2 = Complex.I;
      complex0.multiply(824);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.multiply((double) 1261);
      complex4.nthRoot(1261);
      complex2.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(919.205333, 919.205333);
      Complex complex1 = complex0.pow(919.205333);
      complex1.NaN.abs();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.log();
      complex3.NaN.asin();
      Complex complex4 = complex0.exp();
      complex4.INF.sin();
      complex3.ZERO.pow(complex4);
      Complex complex5 = Complex.valueOf(5144.73221150141, (-2.6489990728664908E-8));
      Complex.valueOf(919.205333);
      complex0.abs();
      complex3.sqrt();
      complex0.nthRoot(1);
      complex0.tanh();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex3.subtract(complex6);
      complex7.INF.subtract(complex2);
      complex7.NaN.createComplex(5144.73221150141, (-2.6489990728664908E-8));
      Complex complex8 = complex7.sinh();
      complex8.acos();
      complex1.cosh();
      complex5.sin();
      complex0.atan();
      complex6.multiply(21608.0);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(7.502618487550056E-238, 7.502618487550056E-238);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.log();
      complex1.I.abs();
      complex1.ZERO.hashCode();
      complex0.ZERO.subtract(Double.NaN);
      complex0.equals(complex1);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.I.tan();
      complex6.NaN.multiply(complex4);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1495.9343403929024, (double) (-1641));
      complex0.log();
      complex0.cosh();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 3.3791993048776982E-9);
      Complex complex2 = complex1.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.INF.atan();
      complex0.ONE.abs();
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.subtract(0.3087568535221259);
      Complex complex3 = complex2.cosh();
      complex1.abs();
      complex1.sqrt1z();
      complex3.acos();
      Complex complex4 = complex1.conjugate();
      complex3.reciprocal();
      Complex complex5 = complex2.acos();
      complex0.hashCode();
      complex4.add((-20.0));
      complex0.getArgument();
      complex1.multiply((-1));
      complex3.asin();
      Complex complex6 = Complex.valueOf(0.0, (-20.0));
      complex6.acos();
      Complex complex7 = Complex.NaN;
      complex3.getField();
      complex1.acos();
      complex2.subtract(2105.073882);
      Complex.valueOf((-1.483283901239408E-9), (-4047.4081));
      complex5.asin();
      complex2.negate();
      Complex.valueOf((double) 251, 0.3087568535221259);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.NaN.asin();
      complex0.I.abs();
      complex0.log();
      Complex complex2 = Complex.valueOf((-1.1349246400274207E46));
      Complex complex3 = complex2.divide(1.0);
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = new Complex(1.0);
      Complex complex6 = complex3.add(0.3087568535221259);
      complex1.atan();
      complex3.exp();
      complex4.asin();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.multiply((-780.356));
      complex8.I.subtract(1.0);
      complex6.isNaN();
      Complex.valueOf(0.3087568535221259);
      Complex complex9 = Complex.valueOf((-2049.00086111217), (-373.62447859));
      complex1.equals(complex9);
      Complex complex10 = Complex.ZERO;
      complex5.add((-1.0000000000000004));
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.NaN.asin();
      complex0.I.abs();
      Complex complex3 = complex0.subtract(1.0);
      Complex complex4 = complex1.cosh();
      complex3.abs();
      Complex complex5 = complex3.sqrt1z();
      complex0.acos();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex2.reciprocal();
      complex7.acos();
      complex2.hashCode();
      Complex complex8 = complex1.add(2105.073882);
      complex8.getArgument();
      complex4.asin();
      Complex complex9 = complex2.acos();
      Complex complex10 = Complex.NaN;
      complex6.getField();
      complex5.acos();
      Complex complex11 = Complex.ONE;
      complex11.subtract(2105.073882);
      Complex.valueOf(1.4142135623730951, 1.4142135623730951);
      complex11.asin();
      complex9.negate();
      Complex complex12 = new Complex(4.75042673479976E-4, 1431.4691775421893);
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex2 = complex0.sqrt();
      complex0.readResolve();
      complex1.equals(complex0);
      complex1.abs();
      complex0.cosh();
      Complex complex3 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex3.getField();
      Complex complex4 = complex3.subtract((-20.0));
      complex3.multiply(2147449562);
      Complex complex5 = complex2.exp();
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.NaN;
      complex6.nthRoot(1429);
      complex5.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.ZERO.subtract(complex0);
      complex1.tan();
      complex2.atan();
      Complex complex5 = complex4.acos();
      complex2.hashCode();
      complex0.divide(0.0);
      complex2.readResolve();
      complex3.tan();
      Complex complex6 = Complex.valueOf(1.6889383928999305E13, 1.7768193998956956);
      complex6.getField();
      complex2.log();
      complex3.negate();
      complex2.sqrt();
      complex5.subtract(2423.615773002);
      Complex.valueOf(2461.7798634951, 2423.615773002);
      complex1.asin();
      Complex complex7 = complex5.negate();
      Complex.valueOf(1.5707963267948966, 1.6889383928999305E13);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ZERO.abs();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.ONE;
      complex3.equals(complex4);
      complex0.ZERO.abs();
      Complex complex5 = complex3.cosh();
      complex5.I.getField();
      complex4.subtract(19.880636791804378);
      complex1.multiply(1261);
      complex3.exp();
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.subtract(6.283185307179586);
      Complex complex8 = Complex.I;
      complex7.sqrt1z();
      complex2.sin();
      Complex.valueOf(449.0, 712.9707947295);
      Complex.valueOf(1798.6, 1798.6);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ZERO.abs();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = (Complex)complex0.readResolve();
      complex3.equals(complex4);
      complex0.ZERO.abs();
      Complex complex5 = complex3.cosh();
      complex5.I.getField();
      complex3.subtract((-20.0));
      complex3.multiply(2536);
      complex1.exp();
      Complex complex6 = complex4.multiply(1.4142135623730951);
      Complex complex7 = complex4.subtract((-20.0));
      complex7.multiply(complex1);
      complex6.sqrt1z();
      complex3.sin();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex3.sin();
      complex3.multiply(4.505432606253564E64);
      Complex complex5 = complex0.subtract(1.0);
      complex5.NaN.readResolve();
      complex5.multiply(complex4);
      complex4.sqrt1z();
      Complex complex6 = new Complex(4.505432606253564E64);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.reciprocal();
      complex2.acos();
      Complex complex6 = Complex.ZERO;
      complex6.hashCode();
      complex1.add(0.684319257736206);
      complex0.getArgument();
      Complex complex7 = complex6.multiply(3164);
      complex0.asin();
      Complex complex8 = Complex.ZERO;
      complex8.acos();
      Complex complex9 = Complex.NaN;
      complex7.getField();
      Complex.valueOf((double) 251, (double) 3164);
      complex3.subtract((double) 3164);
      Complex complex10 = Complex.ZERO;
      complex5.asin();
      complex9.negate();
      Complex.valueOf(Double.NaN, 0.0);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.0);
      Complex complex2 = complex0.tanh();
      complex1.negate();
      complex2.pow(complex0);
      int int0 = (-2785);
      int int1 = 876349078;
      // Undeclared exception!
      complex1.nthRoot(876349078);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = Complex.I;
      complex2.tanh();
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.INF;
      complex4.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.sin();
      complex5.abs();
      Complex complex6 = complex5.asin();
      complex0.conjugate();
      Complex complex7 = Complex.valueOf(0.006812678650021553);
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.INF;
      Complex complex10 = complex7.acos();
      complex6.multiply(1518500250);
      complex10.tan();
      Complex complex11 = Complex.valueOf(20.0);
      complex11.cosh();
      complex0.reciprocal();
      complex8.conjugate();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      complex0.log();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex1.tan();
      complex4.ONE.add(0.0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.asin();
      complex5.acos();
      complex3.multiply(0.0);
      complex7.isNaN();
      Complex complex8 = Complex.valueOf(0.0);
      complex4.equals(complex8);
      Complex complex9 = Complex.INF;
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex2.I.sin();
      Complex complex5 = Complex.ZERO;
      complex5.toString();
      complex4.acos();
      complex3.hashCode();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.multiply(1659);
      complex7.getArgument();
      Complex complex8 = new Complex((-1634.0));
      Complex complex9 = complex3.divide(complex5);
      complex8.sin();
      Complex complex10 = complex8.acos();
      Complex complex11 = complex5.INF.atan();
      complex11.NaN.atan();
      Complex complex12 = Complex.ONE;
      complex9.subtract((-8.784622656707742E-9));
      complex10.isNaN();
      Object object0 = new Object();
      complex9.equals(complex9);
      Complex complex13 = new Complex(Double.NaN, 131.1256494);
      Complex complex14 = complex13.sin();
      complex14.INF.add(0.450652539730072);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.NaN.asin();
      complex1.I.abs();
      Complex complex5 = complex2.subtract(1.0);
      Complex complex6 = complex3.cosh();
      complex5.abs();
      complex5.sqrt1z();
      complex1.acos();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex4.reciprocal();
      complex8.acos();
      complex4.hashCode();
      Complex complex9 = complex3.add(2105.073882);
      complex9.getArgument();
      Complex complex10 = complex7.multiply(251);
      complex6.asin();
      complex4.acos();
      Complex complex11 = Complex.NaN;
      complex7.getField();
      Complex complex12 = complex10.acos();
      complex12.ONE.hashCode();
      Complex complex13 = complex10.subtract(0.8813735870195429);
      Complex complex14 = Complex.valueOf((-4047.4081), 4.75042673479976E-4);
      complex14.asin();
      complex9.negate();
      Complex.valueOf((-4047.4081), 2105.073882);
      complex13.reciprocal();
//      try { 
        complex3.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(502.00199171474765);
      complex0.INF.getField();
      Complex complex1 = complex0.sin();
      complex0.toString();
      complex0.cos();
      Complex.valueOf(6.283185307179586, (-3681.4210389));
      Complex complex2 = complex1.pow(502.00199171474765);
      complex2.ONE.tan();
      Complex complex3 = Complex.valueOf(502.00199171474765, 502.00199171474765);
      Complex complex4 = complex3.NaN.multiply(complex1);
      Complex complex5 = complex4.add((-20.0));
      complex5.exp();
      complex4.ZERO.atan();
      Complex complex6 = Complex.valueOf(0.5707963267948968, 502.00199171474765);
      complex6.equals("unable to bracket optimum in line search");
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex2.I.divide(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex3 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.cosh();
      complex0.abs();
      complex2.sqrt1z();
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex0.ONE.conjugate();
      complex2.reciprocal();
      Complex complex7 = complex6.ONE.acos();
      complex7.I.hashCode();
      Complex complex8 = complex0.add(Double.POSITIVE_INFINITY);
      complex8.getArgument();
      complex1.multiply(251);
      complex7.asin();
      Complex complex9 = complex4.acos();
      Complex complex10 = Complex.NaN;
      complex10.getField();
      complex8.acos();
      complex9.subtract((-1763.42719));
      complex4.asin();
      complex5.negate();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3821.250861735107));
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      complex2.tanh();
      complex2.INF.cos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.sin();
      complex0.abs();
      complex4.asin();
      complex2.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ONE;
      complex5.createComplex(1.0, Double.POSITIVE_INFINITY);
      complex1.acos();
      Complex complex6 = complex0.multiply(0);
      Complex complex7 = complex5.tan();
      complex7.cosh();
      Complex complex8 = complex6.reciprocal();
      complex8.conjugate();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      complex1.hashCode();
      complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cosh();
      complex0.abs();
      complex3.sqrt1z();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.conjugate();
      complex0.reciprocal();
      complex6.acos();
      complex2.hashCode();
      Complex complex8 = complex7.add(Double.POSITIVE_INFINITY);
      complex8.I.asin();
      Complex complex9 = Complex.ONE;
      complex9.getArgument();
      Complex complex10 = complex1.multiply((-326));
      complex5.asin();
      Complex complex11 = Complex.ONE;
      complex11.NaN.pow(2.0);
      complex11.acos();
      Complex complex12 = Complex.NaN;
      complex10.getField();
      complex1.acos();
      complex8.subtract(2493.36069508312);
      complex8.asin();
      complex10.negate();
      Complex.valueOf(2.8337810863376944E-4, (-367.028736));
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.asin();
      Complex complex1 = complex0.tan();
      complex1.ZERO.toString();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.INF.subtract(complex1);
      complex2.ZERO.tanh();
      Complex complex4 = Complex.valueOf((-0.3058015757857271), 1.0);
      complex1.getArgument();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.ONE.pow((-662.24559299687));
      complex6.I.exp();
      complex0.sqrt1z();
      Complex complex7 = new Complex(1.5707963267948966);
      complex3.divide(complex4);
      complex3.pow(complex5);
      Complex complex8 = Complex.ONE;
      complex8.sin();
      complex5.acos();
      Complex complex9 = Complex.ONE;
      complex2.subtract(9.772655251656639E79);
      complex8.asin();
      complex3.negate();
      Complex complex10 = Complex.valueOf(1.5707963267948966, (-3.785295042408568E37));
      complex10.reciprocal();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex1.multiply((-3495.98033));
      complex3.sin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex4.subtract((-3495.98033));
      complex2.hashCode();
      complex7.equals(complex5);
      complex6.abs();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.NaN.atan();
      complex0.readResolve();
      Complex complex3 = complex0.NaN.asin();
      complex1.I.abs();
      complex0.equals((Object) null);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex5.ONE.divide(complex0);
      Complex complex7 = complex3.log();
      complex7.nthRoot(1);
      Complex complex8 = complex0.INF.atan();
      Complex complex9 = complex8.acos();
      complex0.I.hashCode();
      Complex complex10 = complex7.divide(0.0);
      complex10.readResolve();
      Complex complex11 = complex1.tan();
      complex7.I.getField();
      Complex complex12 = complex11.I.log();
      complex8.ONE.sqrt();
      complex12.NaN.negate();
      Complex complex13 = complex1.sqrt();
      complex8.ZERO.multiply(1);
      complex2.getReal();
      complex3.hashCode();
      complex13.asin();
      complex13.isInfinite();
      complex3.abs();
      complex2.hashCode();
      complex10.INF.sqrt();
      complex9.getReal();
      complex6.isNaN();
      Object object0 = new Object();
      complex10.equals(object0);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(112.6, 20.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.INF.multiply(2.0);
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex3.I.multiply(complex0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.negate();
      complex6.ONE.add(6.283185307179586);
      complex2.conjugate();
      Complex complex7 = complex5.add(complex0);
      complex7.ONE.sqrt1z();
      complex4.negate();
      complex6.conjugate();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = (-498.5445588571849);
      Complex complex0 = Complex.valueOf((-498.5445588571849), (-498.5445588571849));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.pow(complex2);
      complex3.ONE.add(complex2);
      int int0 = (-1641);
//      try { 
        complex1.nthRoot((-1641));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,641
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1.0);
      complex0.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(1.0);
      complex2.hashCode();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.atan();
      complex5.I.pow(complex4);
      complex3.hashCode();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex1.hashCode();
      Complex complex3 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.cosh();
      complex0.abs();
      complex2.sqrt1z();
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex0.ONE.conjugate();
      complex2.reciprocal();
      Complex complex7 = complex6.ONE.acos();
      complex7.I.hashCode();
      Complex complex8 = complex0.add(Double.POSITIVE_INFINITY);
      complex8.getArgument();
      complex1.multiply(251);
      complex7.asin();
      Complex complex9 = complex4.acos();
      Complex complex10 = Complex.NaN;
      complex10.getField();
      complex8.acos();
      complex9.subtract((-1763.42719));
      complex4.asin();
      complex5.negate();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3821.250861735107));
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex0.subtract(705.30449654618);
      Complex complex5 = complex4.NaN.createComplex(705.30449654618, 2057.61);
      Complex complex6 = complex2.pow((-20.0));
      complex6.getImaginary();
      Complex complex7 = complex6.add((-20.0));
      complex7.reciprocal();
      complex3.toString();
      complex5.toString();
      complex7.abs();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.createComplex(Double.NaN, 2344.0);
      Complex complex10 = complex9.divide(Double.NaN);
      complex9.multiply((-617));
      complex3.acos();
      Complex complex11 = Complex.INF;
      complex8.equals(complex10);
      complex11.acos();
      complex11.multiply(37);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-498.5445588571849));
      complex0.NaN.getArgument();
      complex0.sqrt1z();
      Complex complex1 = new Complex(3.5763699344811903, 128.8519);
      Complex complex2 = complex1.conjugate();
      Complex.valueOf(Double.NaN);
      Complex complex3 = complex1.createComplex(3.9370054101984433, 1.1752011936438014);
      Complex complex4 = Complex.INF;
      complex4.acos();
      Complex complex5 = complex2.multiply(0);
      complex1.tan();
      complex5.cosh();
      Complex complex6 = Complex.ONE;
      complex6.reciprocal();
      Complex complex7 = complex3.conjugate();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ZERO.abs();
      Complex complex3 = complex0.sqrt();
      Object object0 = complex0.readResolve();
      ((Complex) object0).INF.exp();
      complex3.equals(object0);
      complex0.ZERO.abs();
      Complex complex4 = complex3.cosh();
      complex4.I.getField();
      Complex complex5 = complex3.subtract(20.0);
      Complex complex6 = complex3.multiply(1261);
      Complex complex7 = complex6.exp();
      complex0.ONE.toString();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex7.divide((double) 1261);
      complex8.INF.hashCode();
      Complex complex10 = complex8.I.divide(0.0);
      Complex complex11 = complex10.ZERO.multiply(1261);
      complex5.getArgument();
      Complex complex12 = new Complex(1099.671901259104);
      Complex complex13 = complex3.ONE.divide(complex12);
      Complex complex14 = complex8.pow(complex5);
      complex14.sin();
      complex9.sinh();
      complex14.hashCode();
      complex0.isInfinite();
      complex12.abs();
      complex12.hashCode();
      complex8.getReal();
      complex11.isNaN();
      Object object1 = new Object();
      Object object2 = complex9.readResolve();
      complex0.equals(object2);
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1782.916, 1782.916);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.cos();
      complex2.ONE.conjugate();
      Complex complex3 = new Complex((-1799.2592));
      Complex complex4 = complex0.sqrt();
      complex3.subtract((-273.37930588));
      complex0.reciprocal();
      complex4.subtract(1782.916);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      complex0.INF.divide(complex1);
      complex0.log();
      Complex complex2 = complex0.divide(0.0);
      complex1.divide(0.0);
      Complex complex3 = complex0.createComplex(1156.610511661927, 0.0);
      complex2.pow(1156.610511661927);
      complex3.subtract(1156.610511661927);
      complex1.multiply((-1477785539));
      Complex.valueOf(3.204135737993823E-8, 531.0730776376);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-85.6999688), (-85.6999688));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract((-18.984042573979497));
      complex0.multiply((-1552.248438921));
      complex1.sinh();
      Complex complex3 = complex2.atan();
      complex2.conjugate();
      Complex complex4 = complex1.divide((-20.0));
      complex3.hashCode();
      Complex complex5 = Complex.valueOf((-18.984042573979497), 4651.886559);
      complex5.getImaginary();
      Complex complex6 = complex0.pow(4651.886559);
      Complex complex7 = complex0.subtract(complex3);
      complex4.divide(complex1);
      complex0.tan();
      Complex complex8 = Complex.INF;
      complex8.getArgument();
      complex6.createComplex((-23.585226), 42.9036475838);
      Complex complex9 = complex8.divide((-18.984042573979497));
      complex8.add(complex0);
      Complex complex10 = Complex.ONE;
      complex9.pow((-15.918828678557897));
      complex0.log();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      complex2.ZERO.toString();
      complex2.log();
      Complex complex3 = complex2.divide((-1.0));
      complex3.subtract(complex2);
      Complex complex4 = Complex.valueOf(0.19999954104423523, (-1.0995116277759899E52));
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.add(0.0);
      complex5.atan();
      Complex complex7 = complex2.exp();
      complex2.asin();
      Complex complex8 = complex3.acos();
      complex6.multiply(0.19999954104423523);
      complex8.acos();
      complex0.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-498.5445588571849));
      complex0.NaN.getArgument();
      complex0.sqrt1z();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.divide(0.4203280806541443);
      complex2.hashCode();
      complex2.getImaginary();
      Complex complex3 = complex2.pow(0.4203280806541443);
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex0.divide(complex2);
      complex5.tan();
      complex2.getArgument();
      Complex complex6 = complex3.createComplex(15.918828678557897, (-3.141592653589793));
      complex6.add(complex0);
      complex2.atan();
      Complex complex7 = complex4.pow((-1.153577281189635E231));
      complex3.log();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex1.hashCode();
      Complex complex3 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.cosh();
      complex0.abs();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex0.ONE.acos();
      Complex complex7 = complex0.ONE.conjugate();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex7.ONE.acos();
      complex9.I.hashCode();
      complex5.ONE.pow(Double.POSITIVE_INFINITY);
      complex8.getImaginary();
      Complex complex10 = complex5.add((-3919.0));
      complex5.INF.reciprocal();
      complex9.I.toString();
      complex10.ONE.toString();
      complex6.abs();
      complex7.createComplex(Double.POSITIVE_INFINITY, 4245.29);
      complex8.divide(2292.9);
      Complex complex11 = complex10.multiply((-617));
      complex11.ONE.acos();
      Complex complex12 = Complex.INF;
      complex4.equals(complex12);
      complex9.acos();
      Complex complex13 = Complex.valueOf(0.0);
      complex13.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.negate();
      complex2.INF.pow(complex1);
      int int0 = (-2785);
//      try { 
        complex1.I.nthRoot((-2785));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,785
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.NaN.atan();
      complex0.readResolve();
      complex0.NaN.asin();
      complex1.I.abs();
      complex0.equals((Object) null);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex5.ONE.divide(complex3);
      Complex complex7 = complex3.log();
      complex7.nthRoot(1);
      Complex complex8 = complex0.INF.atan();
      Complex complex9 = complex8.acos();
      complex0.I.hashCode();
      Complex complex10 = complex7.divide(0.0);
      complex10.readResolve();
      Complex complex11 = complex1.tan();
      complex7.I.getField();
      Complex complex12 = complex11.I.log();
      complex12.NaN.negate();
      Complex complex13 = complex1.sqrt();
      complex8.ZERO.multiply(1);
      complex3.getReal();
      complex3.hashCode();
      complex13.asin();
      complex13.isInfinite();
      complex3.abs();
      complex2.hashCode();
      complex9.getReal();
      complex6.isNaN();
      Object object0 = new Object();
      complex10.equals(object0);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-205.27670306870502), (-205.27670306870502));
      complex0.abs();
      Complex complex1 = Complex.valueOf(290.3050975189974, 290.3050975189974);
      complex1.INF.cos();
      complex0.cosh();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.I.conjugate();
      complex3.acos();
      complex0.ZERO.readResolve();
      Complex complex4 = Complex.valueOf(1532.63621, 290.3050975189974);
      complex0.getImaginary();
      complex0.INF.add((-1.0));
      complex4.I.hashCode();
      complex2.divide(complex4);
      complex4.cos();
      complex3.nthRoot(1248);
      complex2.sqrt1z();
      Complex.valueOf(2995.58053981, (-205.27670306870502));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.subtract(1310.2898686549);
      Complex complex2 = complex0.I.negate();
      complex2.ONE.multiply(complex1);
      complex1.NaN.sin();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.atan();
      complex0.cos();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex1.I.sinh();
      complex7.INF.cos();
      Complex complex8 = Complex.NaN;
      complex7.ZERO.subtract(complex8);
      Complex complex9 = complex4.reciprocal();
      complex4.getField();
      complex0.sin();
      Complex complex10 = complex4.conjugate();
      complex10.INF.reciprocal();
      complex9.sin();
      complex1.getImaginary();
      complex9.acos();
      complex4.subtract(complex0);
      complex9.multiply((-3659));
      complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-525.644637131947), (-525.644637131947));
      Complex complex1 = complex0.multiply((-525.644637131947));
      Complex complex2 = complex0.asin();
      complex2.pow(6.283185307179586);
      Complex complex3 = complex2.I.divide(0.0);
      Complex complex4 = complex0.sinh();
      complex3.ZERO.cos();
      complex4.multiply(complex3);
      Complex complex5 = complex4.INF.reciprocal();
      complex0.ZERO.createComplex(0.0, 0.0);
      complex5.acos();
      Complex complex6 = complex2.INF.divide(complex4);
      complex4.I.pow(467.1);
      complex1.add(complex2);
      Complex complex7 = complex4.conjugate();
      complex7.conjugate();
      Complex complex8 = complex1.sqrt();
      complex6.getArgument();
      complex8.multiply(1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(450.6175107540024, 450.6175107540024);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.I.negate();
      Complex complex5 = complex4.NaN.reciprocal();
      complex0.divide((-3269.4386));
      complex0.abs();
      Complex complex6 = Complex.valueOf((-3795.20264292), 450.6175107540024);
      complex0.divide(complex6);
      complex6.NaN.readResolve();
      Complex complex7 = complex5.multiply(351);
      complex7.ONE.add(637.2693951511143);
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.NaN.subtract((-3269.4386));
      complex3.atan();
      complex5.divide(complex8);
      Complex complex10 = complex9.atan();
      complex5.conjugate();
      complex4.readResolve();
      Complex complex11 = complex3.acos();
      complex11.I.toString();
      complex4.multiply(complex9);
      complex10.hashCode();
      complex6.subtract(0.0);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      complex2.ZERO.toString();
      Complex complex3 = complex2.INF.reciprocal();
      complex3.INF.subtract(complex2);
      complex3.ZERO.tanh();
      Complex complex4 = Complex.valueOf((-0.3058015757857271), 1.0);
      complex2.getArgument();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.ONE.pow((-662.24559299687));
      complex6.I.exp();
      complex0.sqrt1z();
      complex2.sin();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex7.ZERO.cos();
      Complex complex9 = complex1.subtract(1.5707963267948966);
      complex9.hashCode();
      complex4.equals(complex8);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex1.hashCode();
      Complex complex3 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.cosh();
      complex0.abs();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex0.ONE.acos();
      Complex complex7 = complex0.ONE.conjugate();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex7.ONE.acos();
      complex9.I.hashCode();
      complex5.ONE.pow(Double.POSITIVE_INFINITY);
      complex8.getImaginary();
      Complex complex10 = complex5.add((-3919.0));
      complex5.INF.reciprocal();
      complex9.I.toString();
      complex10.ONE.toString();
      complex6.abs();
      complex7.createComplex(Double.POSITIVE_INFINITY, 4245.29);
      complex8.divide(2292.9);
      Complex complex11 = complex10.multiply((-617));
      complex11.ONE.acos();
      Complex complex12 = Complex.INF;
      complex4.equals(complex12);
      complex9.acos();
      complex12.multiply((-617));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1232.82012238, 1232.82012238);
      Complex complex1 = complex0.acos();
      complex1.ONE.abs();
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.cosh();
      complex2.ONE.divide(1232.82012238);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex3.NaN.multiply((-1034));
      complex4.ZERO.createComplex(1232.82012238, 0.0);
      complex2.getImaginary();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      complex0.abs();
      Complex complex1 = Complex.valueOf(0.6816387176513672);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.INF.tan();
      complex0.ZERO.hashCode();
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex0.I.pow(complex1);
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.I.subtract(0.0);
      complex6.ZERO.hashCode();
      Complex complex8 = complex0.NaN.pow(complex7);
      Complex.valueOf(0.6816387176513672);
      Complex complex9 = complex2.add(complex0);
      Complex complex10 = complex2.exp();
      Complex complex11 = complex2.divide(complex9);
      Complex.valueOf((-354.95443), (-354.95443));
      complex11.ZERO.readResolve();
      complex2.NaN.hashCode();
      complex1.multiply(Double.NaN);
      complex10.createComplex(2966.080566010449, 0.0);
      Complex complex12 = complex1.exp();
      complex4.getImaginary();
      complex0.getImaginary();
      complex5.divide(Double.NaN);
      complex8.createComplex(237.21459, (-330.122316416));
      complex2.sin();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1782.916, 1782.916);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.cos();
      complex2.ONE.conjugate();
      Complex complex3 = complex2.I.reciprocal();
      complex2.abs();
      Complex complex4 = complex0.NaN.conjugate();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex7.ZERO.multiply(complex1);
      complex8.ONE.nthRoot(3905);
      Complex complex9 = Complex.valueOf(0.0);
      complex4.ONE.sinh();
      Complex complex10 = complex9.NaN.divide(1782.916);
      complex1.NaN.hashCode();
      Complex complex11 = complex4.divide(2287.86658);
      complex0.multiply(complex1);
      complex5.getImaginary();
      complex10.ONE.asin();
      complex0.readResolve();
      Complex complex12 = complex11.sinh();
      Complex.valueOf(0.0);
      complex5.getArgument();
      complex3.getField();
      Complex complex13 = complex3.createComplex(0.0, 0.0);
      complex13.NaN.sqrt1z();
      complex13.divide(0.0);
      complex10.reciprocal();
      complex5.abs();
      complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1427.463));
      int int0 = 0;
      Complex complex1 = complex0.I.multiply(0);
      Complex complex2 = complex0.NaN.sqrt1z();
      complex0.getReal();
      complex0.isNaN();
      complex0.divide(complex2);
      Complex complex3 = Complex.valueOf((double) 0);
      complex3.INF.asin();
      complex1.ZERO.subtract(complex3);
      Complex complex4 = complex1.divide(45.5536474654);
//      try { 
        complex4.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
//      try { 
        complex0.ZERO.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.091070300111434E-88, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.log();
      complex3.getField();
      complex3.ONE.multiply(1587.0);
      Complex.valueOf((-1362.6882), 2.4526190464373087E-231);
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex0.asin();
      complex5.I.abs();
      complex4.ZERO.conjugate();
      complex0.isInfinite();
      complex0.createComplex(0.0, 0.0);
      complex4.sqrt();
      Complex complex6 = complex4.sin();
      Complex complex7 = new Complex(5.091070300111434E-88, 0.0);
      complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4004.892458640902), 0.11081436276435852);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.pow(complex0);
      int int0 = 0;
      Complex complex3 = complex2.INF.multiply(0);
      complex3.NaN.hashCode();
      Complex complex4 = complex0.reciprocal();
      complex0.isNaN();
      Complex complex5 = complex4.ONE.multiply(0.11081436276435852);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.ONE.reciprocal();
      complex5.getField();
      complex1.getField();
      Complex complex8 = complex7.negate();
      complex7.INF.sin();
      complex8.ZERO.cosh();
//      try { 
        complex0.I.nthRoot((-1070));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,070
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 233.0);
      complex0.abs();
      Complex complex1 = new Complex(0.3027053475379944);
      Complex complex2 = Complex.valueOf(0.3027053475379944, 0.3027053475379944);
      complex2.ZERO.sqrt();
      complex0.I.divide(complex1);
      complex0.toString();
      complex0.getReal();
      Complex complex3 = Complex.valueOf(896.8645978502216);
//      try { 
        complex3.nthRoot((-881));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -881
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.log();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex1.tan();
      complex5.ONE.add(0.0);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex1.exp();
      complex7.asin();
      complex6.acos();
      complex4.multiply(0.0);
      complex2.acos();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.divide(0.0);
      complex2.INF.abs();
      complex2.getField();
      Complex complex3 = complex0.multiply(1885);
      Complex complex4 = complex0.INF.divide(274.254217616);
      Complex complex5 = complex4.tan();
      complex5.I.getField();
      complex3.I.subtract(0.0);
      Complex complex6 = complex0.tan();
      complex6.toString();
      Complex complex7 = complex3.I.sqrt();
      Complex complex8 = complex3.negate();
      complex8.NaN.readResolve();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex9.reciprocal();
      complex6.subtract(0.0);
      complex7.ONE.toString();
      Complex.valueOf((-20.0));
      complex0.hashCode();
      complex7.add((double) 1885);
      complex5.add(complex10);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.pow(20.0);
      complex1.ONE.hashCode();
      Complex complex2 = complex1.INF.tan();
      complex1.I.nthRoot(996);
      complex2.ZERO.exp();
      Complex complex3 = complex0.NaN.acos();
      complex3.ZERO.sqrt();
      complex0.readResolve();
      complex1.getReal();
      complex2.multiply(1121);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.I.subtract(0.0);
      complex0.sin();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.NaN.sqrt1z();
      complex0.multiply(complex5);
      Complex complex7 = complex4.multiply(complex6);
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.I.exp();
      Complex complex11 = complex10.ZERO.conjugate();
      complex6.cos();
      Complex complex12 = complex5.subtract(complex2);
      complex8.hashCode();
      complex12.asin();
      complex3.negate();
      complex5.acos();
      complex11.getArgument();
      complex1.add(-0.0);
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.add(3264.6287877);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ZERO.log();
      complex2.ONE.tan();
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex.valueOf(0.0);
      complex4.abs();
      complex1.I.exp();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.ZERO.multiply(3264.6287877);
      complex6.INF.sinh();
      complex0.I.hashCode();
      complex5.readResolve();
      complex1.multiply((-1981));
      complex2.ONE.hashCode();
      complex5.multiply(20.0);
      complex2.equals((Object) null);
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex7.multiply(complex5);
      complex8.ZERO.getField();
      complex7.getField();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-331.1191));
      Complex complex1 = complex0.ONE.negate();
      complex1.NaN.tanh();
      Complex complex2 = Complex.valueOf((-331.1191), (-331.1191));
      Complex complex3 = complex0.multiply(complex2);
      complex2.INF.sqrt1z();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.ONE.sqrt();
      complex7.reciprocal();
      Complex complex8 = complex0.multiply(402);
      complex8.NaN.nthRoot(402);
      complex5.atan();
      complex2.toString();
      complex6.isNaN();
      Complex complex9 = complex5.atan();
      Complex complex10 = Complex.ZERO;
      complex9.I.divide(complex10);
      complex6.divide((double) 402);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 2476.8969);
      Complex complex1 = complex0.sinh();
      complex0.NaN.cos();
      Complex.valueOf(2476.8969);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = Complex.valueOf((-1849.8350944444903));
      complex3.ZERO.sqrt1z();
      complex3.ZERO.cos();
      complex2.divide(complex3);
      Complex complex4 = complex2.ONE.add(complex0);
      complex0.add((-1510.7423));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-2062.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.subtract(0.0);
      complex1.add(complex0);
      Complex complex3 = complex2.reciprocal();
      complex3.subtract(3261.7);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3729.1276), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex2.getArgument();
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex0.nthRoot(1);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.INF.multiply(1);
      Complex complex6 = complex2.conjugate();
      complex0.cos();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      complex5.ONE.conjugate();
      complex7.pow(complex6);
      Complex complex8 = complex3.INF.negate();
      Complex complex9 = complex7.INF.divide(0.0);
      complex1.multiply(complex3);
      Complex complex10 = complex5.exp();
      Complex complex11 = complex10.I.createComplex(0.0, (-6.22836197265283E-8));
      Complex complex12 = complex4.cosh();
      complex10.ONE.getField();
      complex12.ONE.cos();
      Complex complex13 = complex4.pow(2328.5872474320427);
      Complex complex14 = complex12.sqrt1z();
      complex14.hashCode();
      complex10.divide(complex5);
      complex13.getArgument();
      complex14.add(complex8);
      complex11.tan();
      complex13.divide(complex12);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-85.6999688), (-85.6999688));
      Complex complex1 = complex0.negate();
      complex1.INF.sqrt();
      complex1.I.getField();
      Complex complex2 = complex1.INF.createComplex((-1619.3590125781), (-1619.3590125781));
      complex2.ZERO.getField();
      Complex complex3 = Complex.valueOf(6.283185307179586, (-1131.1268190309));
      complex0.getField();
      complex1.getArgument();
      complex1.asin();
      Complex complex4 = complex1.atan();
      complex2.equals(complex4);
      complex3.createComplex(1.7396889119023863E293, (-1619.3590125781));
      complex4.multiply((-88.05));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(742.7379226133112);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.exp();
      complex0.isInfinite();
      complex0.readResolve();
      complex1.abs();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.divide(complex3);
      complex3.divide(complex0);
      Complex complex5 = complex3.ONE.atan();
      complex4.I.conjugate();
      complex5.negate();
      complex3.isInfinite();
      complex5.INF.add(742.7379226133112);
      complex4.isNaN();
      complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex0.subtract(705.30449654618);
      complex4.NaN.createComplex(705.30449654618, 2057.61);
      complex4.add((-820.4762512163));
      complex4.ONE.getArgument();
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = complex4.asin();
      complex6.acos();
      complex0.I.getField();
      complex5.acos();
      Complex complex7 = complex0.subtract((-2212.4926238));
      complex3.asin();
      complex7.negate();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.divide(0.0);
      complex1.I.cosh();
      Complex complex2 = complex1.ONE.pow((-657.3));
      complex2.I.hashCode();
      Complex complex3 = complex0.atan();
      complex3.readResolve();
      Complex complex4 = Complex.valueOf((-657.3));
      complex4.NaN.add((-657.3));
      Complex complex5 = complex3.subtract(2.0382811492597872E34);
      Complex complex6 = complex5.I.pow(complex3);
      complex6.NaN.multiply((-468.756048));
      complex1.isNaN();
      complex4.subtract(3163.10714594);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.4203280806541443);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.pow(0.4203280806541443);
      complex0.INF.readResolve();
      Complex complex4 = complex2.ONE.subtract(0.4203280806541443);
      Complex complex5 = complex4.ZERO.multiply(0.4203280806541443);
      complex5.INF.sinh();
      complex3.ZERO.atan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.divide(0.4203280806541443);
      complex2.hashCode();
      complex6.getImaginary();
      Complex complex8 = complex7.pow(63.9523123);
      Complex complex9 = complex8.subtract(complex2);
      complex2.divide(complex8);
      complex8.tan();
      complex0.ZERO.getArgument();
      Complex complex10 = complex8.createComplex(0.0, (-23.585226));
      complex7.divide(0.0);
      complex7.add(complex8);
      complex9.atan();
      complex10.pow((-23.585226));
      complex3.log();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.tan();
      complex2.readResolve();
      complex2.ONE.tanh();
      Complex complex3 = complex0.INF.multiply((-245));
      Complex complex4 = complex3.ZERO.add(complex0);
      complex0.toString();
      complex2.getArgument();
      complex4.ZERO.atan();
      Complex complex5 = complex4.ZERO.divide(complex1);
      complex5.ONE.divide(0.0);
      complex0.nthRoot(514);
      complex2.hashCode();
      complex0.sqrt();
      complex4.getImaginary();
      Complex complex6 = Complex.valueOf(1115.3531, 0.0);
      Complex.valueOf(1115.3531, 0.0);
      complex6.nthRoot(850);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-411.12538));
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, (-129.6097678251));
      Complex complex2 = complex1.I.cosh();
      complex2.NaN.tanh();
      Complex complex3 = complex2.NaN.sqrt();
      complex3.INF.subtract(complex1);
      Complex complex4 = complex0.divide(complex1);
      complex4.ZERO.multiply((-1594.629418190938));
      complex0.getImaginary();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(Double.NaN);
      complex1.I.getField();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.I.sin();
      complex2.INF.abs();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.conjugate();
      Complex.valueOf(2.092571258544922);
      Complex complex6 = complex4.createComplex(Double.POSITIVE_INFINITY, 128.8519);
      complex6.acos();
      Complex complex7 = complex2.multiply(0);
      complex7.ONE.tan();
      complex0.ONE.cosh();
      complex7.reciprocal();
      complex3.conjugate();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply((-20.0));
      complex2.ONE.getArgument();
      complex1.I.hashCode();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex4.ONE.pow(788.99);
      Complex complex6 = complex3.ONE.multiply(0.0);
      complex1.abs();
      Complex complex7 = complex0.acos();
      complex7.divide(complex1);
      complex1.subtract((-2781.75783));
      Complex complex8 = complex7.tanh();
      complex8.asin();
      complex6.sinh();
      complex3.getField();
      complex5.cos();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ZERO.abs();
      Complex complex3 = complex0.sqrt();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex3.equals(object0);
      assertFalse(boolean0);
      
      double double0 = complex0.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex4 = complex3.cosh();
      complex4.I.getField();
      Complex complex5 = complex3.subtract(20.0);
      Complex complex6 = complex3.multiply(1261);
      Complex complex7 = complex6.exp();
      complex0.ONE.toString();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex7.divide((double) 1261);
      complex8.INF.hashCode();
      Complex complex10 = complex8.I.divide(0.0);
      Complex complex11 = complex10.ZERO.multiply(1261);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex5.getArgument();
      Complex complex12 = new Complex(1099.671901259104);
      Complex complex13 = complex3.ONE.divide(complex12);
      Complex complex14 = complex8.pow(complex5);
      complex14.sin();
      Complex complex15 = complex9.sinh();
      complex14.hashCode();
      Complex complex16 = complex8.conjugate();
      Complex complex17 = complex8.sqrt1z();
      assertSame(complex17, complex4);
      
      Complex complex18 = complex14.multiply(0.0);
      complex7.atan();
      List<Complex> list0 = complex0.nthRoot(1261);
      assertTrue(list0.contains(object0));
      
      Complex complex19 = complex15.sin();
      assertSame(complex19, complex18);
      
      Complex complex20 = complex5.divide(complex13);
      assertEquals(9.093621459773761E-4, complex13.getReal(), 0.01);
      assertSame(complex20, complex2);
      assertSame(complex5, complex16);
      assertTrue(complex3.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      complex1.INF.exp();
//      try { 
        complex1.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.acos();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      complex1.I.createComplex(1.0, 1.0);
      complex2.ONE.getField();
      Complex complex4 = complex1.INF.pow(7.164663249266942E-88);
      Complex complex5 = complex1.multiply(0.0);
      assertNotSame(complex1, complex4);
      assertTrue(complex5.equals((Object)complex4));
      assertSame(complex0, complex2);
      
      Complex complex6 = Complex.valueOf(1315.0, 0.0);
      assertEquals(1315.0, complex6.getReal(), 0.01);
  }
}
