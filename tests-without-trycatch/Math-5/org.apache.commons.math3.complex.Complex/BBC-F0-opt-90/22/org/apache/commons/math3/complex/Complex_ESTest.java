/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:56:05 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.ONE.pow((double) (-668));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.tanh();
      complex0.ONE.exp();
      complex0.ZERO.sinh();
      complex0.INF.sin();
      Complex complex4 = complex0.multiply((-668));
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.pow((-657.550024));
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex5.sqrt1z();
      complex3.sqrt1z();
      complex8.sqrt1z();
      complex7.subtract(complex0);
      Complex.valueOf((-657.550024), (-657.550024));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      complex0.NaN.tan();
      complex1.tanh();
      complex0.sqrt();
      complex1.tan();
      Complex complex2 = complex0.sin();
      complex2.acos();
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex0.abs();
      complex0.hashCode();
      complex1.getField();
      int int0 = 1019;
      Complex complex2 = complex1.multiply(1019);
      Complex complex3 = new Complex(172.49141562745, 20.0);
      Complex complex4 = complex3.tan();
      complex0.multiply(complex2);
      complex4.ONE.toString();
      Complex complex5 = Complex.valueOf(1759.6558, 1.0);
      complex1.tan();
      complex1.isNaN();
      complex5.getImaginary();
      complex4.readResolve();
      Complex complex6 = new Complex((-1.0), 172.49141562745);
      complex6.divide(296.808);
      complex3.tanh();
      Complex complex7 = complex0.cosh();
      complex3.subtract((-4298.9595779));
      Complex complex8 = Complex.valueOf(1.0);
      complex8.hashCode();
//      try { 
        complex7.nthRoot((-774));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -774
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.abs();
      Complex complex2 = new Complex(1935.065307472213);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.multiply(1019);
      Complex complex1 = Complex.valueOf((double) 1019, Double.POSITIVE_INFINITY);
      complex1.INF.toString();
      complex1.multiply((-2252));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(265.748, (-20.0));
      complex1.tan();
      Complex complex2 = complex1.multiply(complex0);
      Complex.valueOf((-20.0), (-20.0));
      Complex complex3 = complex0.tan();
      complex2.isNaN();
      complex0.getImaginary();
      Complex complex4 = Complex.NaN;
      complex4.readResolve();
      Complex complex5 = new Complex((-1.0), 265.748);
      complex3.divide(5341.5473387734);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex4.tanh();
      complex4.hashCode();
      complex6.cosh();
      complex7.subtract((-1.0));
      complex1.hashCode();
      complex0.nthRoot(514);
      Complex.valueOf((-1096.076004907));
      Complex complex8 = Complex.NaN;
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getArgument();
      Complex complex1 = Complex.NaN;
      complex0.ZERO.add(complex1);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.hashCode();
      complex0.getField();
      complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = new Complex(1019.0, 1211.66);
      Complex complex3 = complex2.log();
      complex0.getField();
      Complex complex4 = complex0.tan();
      Complex.valueOf(0.14518201351165771);
      complex3.asin();
      complex1.sqrt();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      complex0.INF.abs();
      complex1.hashCode();
      complex2.isNaN();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.tanh();
      complex4.asin();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex5.ONE.toString();
      complex5.isInfinite();
      complex1.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex0.I.divide(complex1);
      complex0.INF.getArgument();
      Complex complex3 = complex2.ONE.exp();
      complex3.I.getField();
      Complex complex4 = complex0.ONE.subtract(complex3);
      Complex complex5 = complex4.I.sqrt1z();
      complex5.ONE.exp();
      Complex complex6 = complex0.pow((-1.0));
      complex0.NaN.atan();
      Complex complex7 = complex2.reciprocal();
      complex7.ZERO.exp();
      complex6.INF.cosh();
      complex0.isInfinite();
      complex0.toString();
//      try { 
        complex4.I.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      complex0.I.toString();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.ONE.multiply(1064);
      complex0.isInfinite();
      Complex complex4 = complex0.INF.pow(1728.52809549059);
      complex0.NaN.toString();
      complex3.log();
      complex0.multiply((double) 1064);
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.multiply(complex2);
      complex6.I.multiply(complex4);
      complex4.toString();
      Complex complex7 = Complex.ZERO;
      complex7.toString();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex5.add(complex8);
      Complex complex10 = complex2.divide(complex9);
      complex7.reciprocal();
      complex10.getImaginary();
      Complex.valueOf((-1216.5587885873));
      complex4.sin();
      complex0.equals("(NaN, NaN)");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.sinh();
      complex0.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.exp();
      complex5.NaN.abs();
      complex5.INF.log();
      Complex complex6 = new Complex((-3131.0), 1.2530567646026611);
      Complex complex7 = complex1.pow(complex3);
      Complex complex8 = Complex.INF;
      complex8.multiply(complex4);
      complex0.getField();
      Complex complex9 = Complex.INF;
      complex9.isNaN();
      Complex complex10 = new Complex(1.2530567646026611);
      complex7.tanh();
      Complex complex11 = new Complex(1.8836492887460383E270, (-457.72039966874075));
      complex11.asin();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.I.sin();
      complex0.INF.abs();
      Complex complex2 = complex0.sqrt1z();
      complex0.getField();
      complex2.multiply((-2.8476975783775358E-8));
      Complex complex3 = new Complex(0.0, (-2.8476975783775358E-8));
      complex3.abs();
      Complex complex4 = Complex.ONE;
      complex3.equals(complex0);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex1.readResolve();
      Complex complex3 = new Complex((-442.1), (-457.72039966874075));
      Complex complex4 = complex2.multiply(complex3);
      complex4.tan();
      Complex complex5 = Complex.valueOf((-442.1), (-442.1));
      complex5.isNaN();
      complex0.getImaginary();
      complex4.readResolve();
      complex2.asin();
      complex1.isInfinite();
      complex5.add((-2058.6257));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      complex0.INF.abs();
      Complex complex2 = complex0.sqrt1z();
      complex0.getField();
      Complex complex3 = Complex.I;
      complex3.multiply(927);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex((-1227.913), Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.multiply(complex5);
      Complex complex7 = Complex.valueOf((double) 927, 2.0);
      Complex complex8 = Complex.INF;
      complex8.tan();
      complex5.isNaN();
      Complex complex9 = new Complex((-853.162));
      complex8.tanh();
      complex7.asin();
      complex0.atan();
      complex6.add(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.pow(2232.4180337014);
      complex1.readResolve();
      Complex complex4 = Complex.NaN;
      complex4.equals("");
      complex2.readResolve();
      Complex complex5 = Complex.valueOf((-1.0), 2624.596);
      complex5.reciprocal();
      Complex complex6 = Complex.I;
      complex6.multiply((-3066.78158792));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1723.0498367), (-1723.0498367));
      Complex complex1 = complex0.INF.add(2562054.073879887);
      Complex complex2 = new Complex((-1723.0498367), (-1723.0498367));
      Complex complex3 = complex1.exp();
      Complex complex4 = new Complex(1.2076238768270153E-8, (-769.91449833));
      complex0.pow(complex1);
      Complex complex5 = Complex.valueOf(2562054.073879887, 2.0);
      complex2.pow((-1723.0498367));
      complex2.equals(complex0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.negate();
      complex7.pow(complex1);
      complex7.exp();
      complex3.getArgument();
      complex5.divide(complex1);
      complex5.asin();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex8.asin();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1291.212910287226), 6.564121077479524E12);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.ZERO.createComplex(947.6, (-1.0));
      complex1.I.negate();
      Complex complex2 = complex1.ONE.add(6.564121077479524E12);
      complex1.getArgument();
      Complex complex3 = complex0.cos();
      complex1.isInfinite();
      complex3.tan();
      complex1.divide(complex0);
      complex2.tan();
      complex2.sqrt();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex1.ZERO.createComplex(232.480612, Double.NaN);
      complex0.INF.abs();
      Complex complex3 = complex0.sqrt1z();
      complex0.getField();
      complex3.multiply(44.18585306244401);
      Complex complex4 = new Complex(0.0, 44.18585306244401);
      complex4.abs();
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex5.atan();
      complex6.nthRoot(584);
      Complex complex7 = Complex.valueOf(1912.786, 44.18585306244401);
      complex7.log();
      complex4.pow(1760.0);
      Complex.valueOf((-5.301386276260592E-111));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 2297.4944818455;
      Complex complex0 = Complex.valueOf(2297.4944818455);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.ONE.reciprocal();
      complex0.tan();
      complex4.ZERO.toString();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.ONE.asin();
      complex6.INF.getField();
      Complex complex7 = complex1.NaN.multiply(2297.4944818455);
      complex7.I.atan();
      int int0 = 484443010;
      complex2.INF.multiply(484443010);
      // Undeclared exception!
      complex0.nthRoot(484443010);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.getField();
      complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(2.0, Double.NaN);
      Complex complex3 = Complex.I;
      complex3.pow(0.0);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.negate();
      complex0.pow(complex2);
      Complex complex6 = complex4.exp();
      complex6.getArgument();
      complex4.divide(complex2);
      complex0.asin();
      Complex complex7 = Complex.valueOf(1.3355721565504037, Double.NaN);
      complex7.asin();
      complex7.acos();
      complex5.pow(complex2);
      Complex complex8 = Complex.ONE;
      complex8.pow(667.794170642);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.5168604427382497);
      complex0.log();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide((-20.0));
      Complex complex3 = Complex.ZERO;
      complex3.sqrt();
      Complex complex4 = new Complex(Double.NaN);
      complex4.I.getField();
      Complex complex5 = complex2.tanh();
      complex5.subtract(2.0014700145557332E-75);
      complex3.subtract(0.5168604427382497);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex0.INF.abs();
      complex1.hashCode();
      complex0.getField();
      Complex complex3 = complex1.multiply(1019);
      complex3.readResolve();
      Complex complex4 = new Complex(1019, (-457.72039966874075));
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = Complex.valueOf((double) 1019, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.tan();
      complex2.isNaN();
      complex0.getImaginary();
      complex7.atan();
      complex7.nthRoot(584);
      complex3.asin();
      complex6.multiply((double) 1019);
      complex2.subtract(complex5);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1723.0498367), (-1723.0498367));
      Complex complex1 = complex0.sin();
      complex0.abs();
      Complex complex2 = complex1.sqrt1z();
      complex2.getField();
      Complex complex3 = complex0.multiply(2562054.073879887);
      Complex complex4 = new Complex((-446.0), (-2.8476975783775358E-8));
      Complex complex5 = Complex.ONE;
      complex5.abs();
      complex2.pow(complex3);
      Complex complex6 = complex1.atan();
      complex6.nthRoot(1871);
      complex2.asin();
      complex1.multiply(5.716453096255401E-8);
      complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.ONE;
      complex1.getField();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.subtract(Double.NaN);
      complex5.subtract(complex2);
      complex5.pow(0.0);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex0.INF.abs();
      complex1.hashCode();
      complex0.getField();
      complex0.abs();
      complex2.sqrt1z();
      complex1.getField();
      Complex complex3 = complex0.multiply(6.283185307179586);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex3.ONE.getField();
      complex4.abs();
      Complex complex5 = complex3.pow(complex2);
      complex3.INF.createComplex(1.0968068384729757E-7, (-1136.6252353595125));
      complex3.readResolve();
      complex4.atan();
      complex4.nthRoot(613);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.asin();
      complex6.multiply(2866.6484801062065);
      complex6.subtract(complex2);
      Complex complex7 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex5.sqrt();
      complex7.multiply(613);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      double double0 = 0.0;
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.atan();
      complex4.I.cos();
      double double1 = -0.0;
      Complex complex5 = new Complex(-0.0, 0.29129956232369003);
      Complex complex6 = Complex.valueOf(0.29129956232369003);
      Complex complex7 = complex5.pow(complex6);
      complex7.INF.negate();
      Complex.valueOf(0.0, 0.0);
//      try { 
        complex2.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1723.0498367), (-1723.0498367));
      Complex complex1 = complex0.INF.add(2562054.073879887);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.exp();
      Complex complex4 = new Complex(1.2076238768270153E-8, (-769.91449833));
      complex0.pow(complex1);
      Complex complex5 = Complex.valueOf(2562054.073879887, 2.0);
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex2.pow((-1723.0498367));
      complex2.equals(complex0);
      Complex complex8 = Complex.ONE;
      complex3.tan();
      complex7.isNaN();
      complex7.getImaginary();
      complex0.readResolve();
      Complex complex9 = new Complex(2562054.073879887, (-1.134963954323427E-7));
      complex3.atan();
      complex7.isNaN();
      complex8.subtract((-1.0));
      complex7.nthRoot(803);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1723.0498367), (-1723.0498367));
      Complex complex1 = complex0.INF.add(2562054.073879887);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.exp();
      Complex complex4 = new Complex(1.2076238768270153E-8, (-769.91449833));
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = Complex.valueOf(2562054.073879887, 2.0);
      complex6.multiply(complex4);
      Complex complex7 = complex2.pow((-1723.0498367));
      Complex complex8 = Complex.INF;
      complex2.equals(complex0);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex7.negate();
      Complex complex11 = Complex.valueOf(2.0, 1.2076238768270153E-8);
      complex11.pow(complex5);
      Complex complex12 = complex4.exp();
      complex0.getArgument();
      complex10.divide(complex3);
      complex12.asin();
      Complex.valueOf(628.4575476948548, 1.2076238768270153E-8);
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex13.asin();
      complex0.acos();
      Complex complex15 = Complex.NaN;
      complex14.pow(complex3);
      complex0.pow((-769.91449833));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1723.0498367), (-1723.0498367));
      Complex complex1 = complex0.INF.add(2562054.073879887);
      Complex complex2 = complex0.log();
      complex1.exp();
      Complex complex3 = new Complex(1.2076238768270153E-8, (-769.91449833));
      complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(2562054.073879887, 2.0);
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex2.pow((-1723.0498367));
      complex5.I.add(complex0);
      Complex complex7 = Complex.INF;
      complex2.equals(complex0);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.negate();
      complex0.pow(complex4);
      Complex complex10 = Complex.I;
      complex10.exp();
      complex9.getArgument();
      Complex complex11 = complex2.divide(complex4);
      complex0.asin();
      complex9.INF.pow(1.029901759234897E-7);
      Complex.valueOf(2562054.073879887, 1.2076238768270153E-8);
      complex9.asin();
      Complex complex12 = complex5.acos();
      Complex complex13 = Complex.NaN;
      complex12.pow(complex11);
      complex6.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(3547.399790677438, 3547.399790677438);
      complex2.cos();
      Complex.valueOf((-487.47821057909516));
      complex0.add(3547.399790677438);
      complex0.nthRoot(1);
      Complex complex3 = complex2.conjugate();
      complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.atan();
      complex2.getReal();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.tan();
      Complex complex7 = new Complex((-20.0));
      Complex complex8 = new Complex(1364.0922288745, 0.0);
      complex7.tanh();
      Complex complex9 = complex2.log();
      Complex complex10 = complex4.pow(complex2);
      Complex complex11 = complex1.createComplex(0.0, (-20.0));
      Complex complex12 = complex11.log();
      Complex complex13 = complex7.exp();
      Complex complex14 = new Complex(1440.1023411211993, (-20.0));
      Complex complex15 = complex6.pow(complex13);
      complex7.multiply(complex12);
      complex8.pow(Double.NaN);
      Complex complex16 = Complex.INF;
      complex10.equals(complex2);
      complex15.negate();
      complex7.pow(complex6);
      complex16.pow(complex11);
      complex5.acos();
      complex9.subtract(1440.1023411211993);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(0.0);
      complex0.acos();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex3.tan();
      Complex complex6 = new Complex(1.0);
      Complex complex7 = new Complex(1.0, 1364.0922288745);
      complex3.tanh();
      Complex complex8 = complex3.log();
      Complex complex9 = complex5.pow(complex8);
      Complex complex10 = complex3.createComplex(1.0, 1357.1436195);
      complex3.log();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.exp();
      Complex complex13 = new Complex(20.0, 1357.1436195);
      Complex complex14 = complex10.pow(complex7);
      complex8.multiply(complex7);
      complex8.pow(0.9639025328498774);
      Complex complex15 = Complex.INF;
      complex8.equals(complex12);
      complex14.negate();
      Complex complex16 = new Complex(0.9639025328498774, 0.9639025328498774);
      Complex complex17 = Complex.valueOf(1.0);
      complex16.pow(complex17);
      complex4.pow(complex9);
      complex0.acos();
      complex2.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = (Complex)complex0.INF.readResolve();
      Complex complex3 = complex1.I.sin();
      complex0.INF.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex3.createComplex(1040.0945175, Double.POSITIVE_INFINITY);
      complex3.log();
      Complex complex7 = new Complex(1040.0945175);
      complex7.exp();
      Complex complex8 = new Complex(2.221441469079183, Double.POSITIVE_INFINITY);
      complex3.pow(complex8);
      Complex complex9 = complex6.multiply(complex7);
      complex5.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.INF;
      complex5.isInfinite();
      complex6.negate();
      complex9.pow(complex2);
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      complex4.acos();
      complex4.subtract(982.5335029061);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      complex1.ZERO.pow(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.I.cos();
      complex0.tan();
      Complex complex5 = new Complex(1364.0922288745);
      Complex complex6 = new Complex(1364.0922288745, 1364.0922288745);
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex3.log();
      complex8.I.pow(complex3);
      complex8.I.createComplex(1364.0922288745, 1364.0922288745);
      complex0.log();
      complex5.exp();
      Complex complex9 = new Complex((-769.91449833), (-769.91449833));
      complex6.pow(complex9);
      complex4.multiply(complex5);
      complex0.I.pow((-769.91449833));
      Complex complex10 = Complex.INF;
      complex0.equals(complex10);
      complex0.negate();
      Complex complex11 = complex1.pow(complex8);
      complex7.pow(complex6);
      complex11.acos();
      complex2.subtract(1364.0922288745);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1723.0498367), (-1723.0498367));
      Complex complex1 = new Complex((-1723.0498367), (-1723.0498367));
      complex0.getReal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf((-2.298302779758532E-9), (-1723.0498367));
      Complex complex4 = complex3.tan();
      complex1.divide((-1723.0498367));
      Complex.valueOf((-408.77463), (-1.0));
      Complex complex5 = Complex.ONE;
      complex5.exp();
      complex5.tanh();
      complex4.hashCode();
      complex0.toString();
      Complex complex6 = Complex.NaN;
      complex4.cosh();
      Complex.valueOf((-1723.0498367), 1.0227150917053223);
      complex1.hashCode();
      complex2.nthRoot(4261);
      Complex.valueOf(0.7937005259840998);
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex(3.846720258072078E-173);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1723.0498367), (-1723.0498367));
      Complex complex1 = complex0.INF.add(2562054.073879887);
      Complex complex2 = complex0.log();
      complex1.exp();
      Complex complex3 = new Complex(1.2076238768270153E-8, (-769.91449833));
      complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(2562054.073879887, 2.0);
      complex4.multiply(complex3);
      Complex complex5 = complex2.pow((-1723.0498367));
      Complex complex6 = Complex.INF;
      complex2.equals(complex0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.pow(complex1);
      complex8.exp();
      complex6.getArgument();
      complex4.divide(complex1);
      complex4.asin();
      Complex complex10 = Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      Complex complex11 = complex10.asin();
      complex11.acos();
      Complex complex12 = Complex.NaN;
      complex0.pow(complex5);
      complex9.pow(1.4142135623730951);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex0.INF.abs();
      complex1.hashCode();
      complex0.getField();
      Complex complex3 = complex1.multiply(1019);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.exp();
      complex2.tanh();
      complex1.hashCode();
      complex0.toString();
      Complex complex7 = complex1.cosh();
      complex6.subtract((-1189.63));
      complex5.hashCode();
      complex5.nthRoot(1019);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.NaN;
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      complex0.nthRoot(739);
      complex0.reciprocal();
//      try { 
        complex1.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.pow((-3.732266217624991E251));
      complex2.I.sin();
      Complex complex3 = complex0.I.divide((-2630.21062));
      complex3.getArgument();
      complex3.ZERO.tanh();
      complex3.NaN.add(0.9991994667853182);
      Complex complex4 = complex3.INF.negate();
      complex4.NaN.sqrt1z();
      complex0.nthRoot(1158);
      complex0.isInfinite();
      Complex complex5 = Complex.valueOf(0.5624021291732788, (-818.28051570258));
      complex5.readResolve();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex2.sin();
      complex7.negate();
      Complex complex9 = Complex.valueOf((-1874.3572));
      complex6.divide(complex9);
      complex8.atan();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      complex1.NaN.divide(complex0);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.NaN.readResolve();
      complex2.INF.pow(complex0);
      Complex complex4 = Complex.valueOf((-1065.7243322270276), (-1065.7243322270276));
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex4.atan();
      complex6.NaN.abs();
      complex5.divide((double) 1194);
      Complex complex7 = Complex.valueOf(Double.NaN, 7.770560657946324E-9);
      complex7.exp();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.tanh();
      complex9.INF.atan();
      complex1.hashCode();
      Complex complex10 = Complex.valueOf((-7.796557225750673E-258), 1118.172939493);
      complex10.toString();
      complex3.NaN.reciprocal();
      complex7.cosh();
      Complex complex11 = complex3.subtract((-4182.0214272399));
      complex6.hashCode();
      int int0 = (-2233);
//      try { 
        complex11.nthRoot((-2233));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,233
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex0.INF.abs();
      complex1.hashCode();
      complex0.getField();
      Complex complex3 = complex1.multiply(1019);
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = new Complex(1019, (-458.7795675672));
      complex0.multiply(complex5);
      Complex complex6 = Complex.valueOf((double) 1019, Double.POSITIVE_INFINITY);
      complex6.tan();
      complex2.isNaN();
      complex0.getImaginary();
      Complex complex7 = (Complex)complex2.readResolve();
      Complex complex8 = new Complex(1019, 790.840239276);
      Complex complex9 = complex4.sqrt1z();
      complex4.tanh();
      complex7.tan();
      complex3.nthRoot(1019);
      complex9.log();
      complex1.pow((-5.301386276260592E-111));
      Complex.valueOf((-5.301386276260592E-111));
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex0.INF.abs();
      complex1.hashCode();
      complex0.getField();
      Complex complex3 = complex1.multiply(1019);
      complex3.readResolve();
      Complex complex4 = new Complex(1019, (-458.7795675672));
      Complex complex5 = Complex.INF;
      complex5.atan();
      complex0.getReal();
      complex2.sinh();
      Complex complex6 = Complex.valueOf((-458.7795675672), (-1668.386784319322));
      Complex complex7 = complex1.tan();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex2.tanh();
      complex9.I.getArgument();
      complex7.cos();
      complex6.tan();
      complex5.nthRoot(1965);
      complex7.log();
      complex2.pow((double) (-2890));
      Complex.valueOf((double) (-2890));
      complex8.atan();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.I.sin();
      complex0.INF.abs();
      Complex complex2 = complex0.sqrt1z();
      complex0.getField();
      Complex complex3 = Complex.INF;
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.tanh();
      complex5.hashCode();
      complex4.toString();
      complex1.cosh();
      complex3.subtract(2889.509436427);
      complex2.hashCode();
//      try { 
        complex3.nthRoot((-2175));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,175
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.sinh();
      complex0.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.log();
      complex3.exp();
      Complex complex5 = new Complex((-3131.0), 1.2530567646026611);
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.multiply(complex4);
      complex7.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.INF;
      complex3.equals("Uq[7KUG9ke`");
      complex4.negate();
      Complex complex10 = Complex.ONE;
      complex10.exp();
      complex10.getArgument();
      complex1.divide(complex8);
      complex7.asin();
      complex6.asin();
      complex7.acos();
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 1782.57);
      complex12.pow(complex3);
      complex1.pow(1.2530567646026611);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex0.INF.abs();
      complex1.hashCode();
      complex0.getField();
      Complex complex3 = complex1.sinh();
      complex1.hashCode();
      Complex complex4 = complex2.tanh();
      complex0.readResolve();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex3.multiply((-565.9339206693));
      Complex complex7 = complex2.asin();
      complex6.sin();
      complex3.pow(complex0);
      complex7.acos();
      complex3.nthRoot(651);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex0.INF.abs();
      complex1.hashCode();
      complex0.getField();
      complex0.abs();
      complex2.sqrt1z();
      complex1.getField();
      Complex complex3 = complex0.multiply(6.283185307179586);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex4.abs();
      complex3.pow(complex2);
      complex3.readResolve();
      complex4.atan();
      complex4.nthRoot(613);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.asin();
      complex5.multiply(2866.6484801062065);
      complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.INF.abs();
      Complex complex2 = complex0.sinh();
      complex2.hashCode();
      complex2.tanh();
      complex0.readResolve();
      Complex complex3 = complex0.reciprocal();
      complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.asin();
      complex0.sin();
      complex1.pow(complex1);
      complex4.acos();
      complex2.nthRoot(651);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 8629.18089236783);
      complex0.readResolve();
      complex0.ZERO.getField();
      Complex complex1 = complex0.tanh();
      complex0.acos();
      complex1.subtract(8629.18089236783);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      complex0.I.toString();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.ONE.multiply(1071);
      complex0.isInfinite();
      Complex complex4 = complex0.INF.pow(1728.52809549059);
      complex0.NaN.toString();
      complex3.log();
      Complex complex5 = complex0.multiply((double) 1071);
      Complex complex6 = complex1.log();
      complex1.multiply(complex2);
      complex4.toString();
      Complex complex7 = Complex.ZERO;
      complex7.toString();
      Complex complex8 = Complex.ONE;
      complex6.add(complex8);
      Complex complex9 = complex5.divide(complex8);
      complex7.reciprocal();
      complex9.getImaginary();
      Complex.valueOf((-1216.5587885873));
      complex4.sin();
      complex0.equals("(NaN, NaN)");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      complex0.I.toString();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.ONE.multiply(1071);
      complex0.isInfinite();
      Complex complex4 = complex0.INF.pow(1728.52809549059);
      complex0.NaN.toString();
      Complex complex5 = Complex.valueOf((-1216.5587885873), 0.0);
      Complex complex6 = complex4.ZERO.multiply(4982);
      Complex complex7 = complex0.ONE.multiply(1728.52809549059);
      Complex complex8 = complex6.multiply(complex5);
      Complex complex9 = Complex.NaN;
      complex9.pow((double) 4982);
      Complex complex10 = Complex.INF;
      complex7.equals(complex6);
      Complex complex11 = complex0.negate();
      complex8.pow(complex7);
      complex0.exp();
      complex11.getArgument();
      Complex complex12 = Complex.valueOf((-3.141592653589793), 0.0);
      complex3.divide(complex12);
      complex3.asin();
      complex1.asin();
      complex2.acos();
      Complex complex13 = Complex.NaN;
      Complex complex14 = Complex.ONE;
      complex14.pow(complex13);
      complex2.pow(1928.5103);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = (Complex)complex4.NaN.readResolve();
      complex3.pow(complex2);
      Complex.valueOf((-1065.7243322270276), 0.030771657824516296);
      complex2.acos();
      complex1.atan();
      complex5.abs();
      complex2.nthRoot(3551);
      complex0.pow(complex2);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.subtract(272.2873985486);
      Complex.valueOf(2.6279604146140025);
      complex0.add(Double.NaN);
      complex0.sqrt();
      Complex complex8 = complex1.sin();
      complex7.getImaginary();
      complex6.add(complex8);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      complex1.NaN.divide(complex0);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = (Complex)complex3.NaN.readResolve();
      Complex complex5 = complex2.INF.pow(complex0);
      Complex complex6 = Complex.valueOf((-1065.7243322270276), (-1065.7243322270276));
      complex6.INF.acos();
      Complex complex7 = complex6.atan();
      complex7.NaN.abs();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex3.pow(complex5);
      Complex complex10 = Complex.INF;
      complex10.exp();
      complex8.getArgument();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex2.divide(complex11);
      complex6.asin();
      complex6.asin();
      Complex complex13 = Complex.NaN;
      complex9.pow(complex2);
      complex12.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sin();
      complex0.INF.abs();
      complex1.hashCode();
      complex0.getField();
      Complex complex3 = complex1.multiply(1019);
      complex3.readResolve();
      Complex complex4 = new Complex(1019, (-458.7795675672));
      complex0.multiply(complex4);
      Complex complex5 = Complex.valueOf((double) 1019, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.tan();
      complex2.isNaN();
      complex0.getImaginary();
      complex2.readResolve();
      Complex complex7 = new Complex(1019, 790.840239276);
      Complex complex8 = complex7.divide(5341.5473387734);
      complex8.exp();
      complex6.tanh();
      complex7.hashCode();
      complex5.toString();
      Complex complex9 = complex1.cosh();
      complex9.subtract(0.7924371142043287);
      complex8.hashCode();
      complex2.nthRoot(1989);
      Complex.valueOf((-458.7795675672));
      Complex complex10 = Complex.NaN;
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.subtract(1364.0922288745);
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex8.NaN.tanh();
      complex9.ZERO.cosh();
      Complex complex10 = complex4.log();
      Complex complex11 = complex10.I.pow(complex4);
      Complex complex12 = complex10.I.createComplex(1364.0922288745, 1364.0922288745);
      Complex complex13 = complex0.log();
      complex7.exp();
      Complex complex14 = new Complex((-769.91449833), (-769.91449833));
      complex8.pow(complex14);
      complex5.multiply(complex7);
      complex0.I.pow((-769.91449833));
      Complex complex15 = Complex.INF;
      complex0.equals(complex15);
      complex13.negate();
      complex12.pow(complex11);
      Complex complex16 = complex0.exp();
      complex3.getArgument();
      Complex.valueOf(Double.NaN);
      complex15.asin();
      Complex complex17 = complex2.asin();
      Complex complex18 = complex16.acos();
      Complex complex19 = Complex.NaN;
      complex12.pow(complex19);
      complex17.pow((-647.05));
      complex18.exp();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8628.18089236783), 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.divide((-8628.18089236783));
      complex2.ONE.cosh();
      Complex complex4 = Complex.valueOf(0.0, (-8628.18089236783));
      complex4.getArgument();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.conjugate();
      complex3.getField();
      complex5.multiply(1893.5976140214623);
      complex1.multiply((-2988));
      Complex complex7 = Complex.ZERO;
      complex1.getArgument();
      Complex complex8 = Complex.valueOf((double) (-2988), (-8628.18089236783));
      complex7.tan();
      complex6.sqrt1z();
      Complex complex9 = Complex.INF;
      complex9.tanh();
      complex1.tan();
      complex1.nthRoot(1145);
      complex2.log();
      complex8.pow(3682.291160880222);
      Complex.valueOf((-1.5707963267948966));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.divide(complex0);
      complex0.ZERO.sinh();
      Complex complex3 = new Complex(0.0, 0.0);
      complex3.NaN.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf((-1065.7243322270276), (-1065.7243322270276));
      complex5.INF.acos();
      Complex complex6 = complex5.atan();
      complex6.NaN.abs();
      complex0.nthRoot(1194);
      complex0.subtract(1.3829498291015625);
      Complex.valueOf((-873.6));
      complex0.add((-1065.7243322270276));
      complex5.cosh();
      complex0.subtract(1.3829498291015625);
      complex4.hashCode();
      complex3.nthRoot(1194);
      Complex.valueOf(728.539);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.createComplex(0.0, 0.0);
      complex0.I.toString();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ONE.multiply(1071);
      complex0.isInfinite();
      Complex complex3 = complex0.INF.pow(1728.52809549059);
      complex0.NaN.toString();
      Complex complex4 = Complex.valueOf((-1216.5587885873), 0.0);
      complex3.ZERO.multiply(4982);
      Complex complex5 = complex0.ONE.multiply(1728.52809549059);
      complex0.NaN.subtract(complex0);
      complex0.getArgument();
      complex2.abs();
      Complex complex6 = Complex.ONE;
      complex6.sin();
      complex4.multiply(1225);
      complex5.add(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf(140.883461365);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex0.INF.negate();
      Complex complex6 = (Complex)complex0.readResolve();
      complex0.hashCode();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex7.ONE.multiply(852);
      Complex complex9 = new Complex(852, (-8.869604401089358));
      Complex complex10 = complex9.pow(complex1);
      Complex complex11 = Complex.valueOf((-347.11641378));
      complex11.multiply(complex4);
      Complex complex12 = complex5.pow(140.883461365);
      Complex complex13 = Complex.INF;
      Complex complex14 = Complex.NaN;
      Complex complex15 = Complex.NaN;
      complex14.equals(complex15);
      complex12.negate();
      complex11.INF.multiply(complex8);
      complex15.pow(complex1);
      complex11.exp();
      complex1.getArgument();
      Complex complex16 = Complex.NaN;
      Complex complex17 = complex6.divide(complex16);
      complex3.asin();
      complex10.asin();
      Complex complex18 = Complex.ONE;
      complex18.acos();
      Complex complex19 = Complex.NaN;
      complex18.ONE.sin();
      complex17.pow(complex1);
      complex18.pow(0.16340454652043634);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.sinh();
      complex0.hashCode();
      complex0.asin();
      Complex complex3 = complex1.sqrt1z();
      complex0.abs();
      complex1.pow(0.0);
      complex0.getArgument();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = new Complex(1.0, Double.NaN);
      Complex complex6 = complex5.tanh();
      complex3.getField();
      Complex complex7 = Complex.ZERO;
      complex3.exp();
      complex2.abs();
      complex4.cos();
      Complex complex8 = complex4.multiply(complex0);
      complex6.multiply((-1.0));
      complex8.getArgument();
      Complex complex9 = Complex.valueOf(0.0, (-2070.78));
      Complex complex10 = complex9.log();
      complex10.divide(1.733140900346534E-58);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.toString();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.INF.sqrt();
      complex1.getArgument();
      complex2.getField();
      complex1.ZERO.multiply((-431));
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.cos();
      complex1.tanh();
      complex4.readResolve();
      complex2.reciprocal();
      Complex complex5 = complex0.multiply((double) (-431));
      complex5.asin();
      complex0.sin();
      Complex complex6 = Complex.valueOf((double) (-431), 0.0);
      complex3.pow(complex6);
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex(77.40889006239);
      complex8.nthRoot(1155);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex0.NaN.conjugate();
      complex2.NaN.atan();
      Complex complex3 = complex0.acos();
      complex3.ZERO.pow(436.177517146);
      complex0.sinh();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.NaN.readResolve();
      complex3.INF.pow(complex0);
      Complex complex5 = Complex.valueOf((-1065.7243322270276), (-1065.7243322270276));
      complex5.INF.acos();
      Complex complex6 = complex5.atan();
      complex6.NaN.abs();
      complex0.nthRoot(1194);
      Complex complex7 = complex0.subtract(1.3829498291015625);
      Complex.valueOf((-873.6));
      complex0.add((-1065.7243322270276));
      complex0.sqrt();
      complex3.sin();
      complex7.getImaginary();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(1490.90144);
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.INF.hashCode();
      Complex complex3 = complex0.acos();
      complex3.ONE.nthRoot(1);
      complex1.cos();
      complex2.subtract((-2205.617682265));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-2383.6));
      Complex complex1 = Complex.valueOf((-2383.6), (-606.9));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3122.456), (-3122.456));
      Complex complex1 = complex0.I.add((-3122.456));
      Complex complex2 = complex1.acos();
      complex2.NaN.divide((-2597.14));
      complex2.I.multiply((-2104.0));
      Complex complex3 = complex1.tanh();
      complex0.subtract((-486.6));
      complex3.pow((-3122.456));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-2609.7079272));
      Complex complex1 = complex0.ONE.log();
      complex0.ONE.negate();
      complex0.getArgument();
      complex0.I.sqrt1z();
      Complex complex2 = complex1.asin();
      complex2.INF.createComplex((-2609.7079272), (-1751.55554));
//      try { 
        complex2.NaN.nthRoot((-54));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -54
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.toString();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.INF.sqrt();
      complex1.getArgument();
      complex2.getField();
      Complex complex3 = complex1.ZERO.multiply((-431));
      complex1.subtract(complex2);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.ZERO.asin();
      complex2.INF.sqrt1z();
      complex4.ZERO.abs();
      Complex complex6 = complex2.pow(0.0);
      complex6.INF.getArgument();
      Complex complex7 = complex6.subtract(complex4);
      complex7.NaN.tanh();
      complex7.getField();
      complex5.sinh();
      Complex complex8 = complex2.exp();
      complex8.NaN.abs();
      complex1.cos();
      complex3.INF.multiply(complex6);
      Complex complex9 = complex3.multiply(2780.775843438679);
      complex8.getArgument();
      Complex.valueOf(0.0, (-4532.1));
      complex0.log();
      complex9.divide((-2203.0499899585));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.subtract(1364.0922288745);
      Complex complex8 = complex7.I.sin();
      complex8.NaN.tanh();
      Complex complex9 = complex4.log();
      Complex complex10 = complex9.I.pow(complex4);
      Complex complex11 = complex9.I.createComplex(1364.0922288745, 1364.0922288745);
      Complex complex12 = complex0.log();
      complex7.exp();
      Complex complex13 = new Complex((-769.91449833), (-769.91449833));
      complex8.pow(complex13);
      complex5.multiply(complex7);
      complex0.I.pow((-769.91449833));
      Complex complex14 = Complex.INF;
      complex0.equals(complex14);
      complex12.negate();
      Complex complex15 = complex11.pow(complex10);
      Complex complex16 = complex0.exp();
      complex3.getArgument();
      complex8.divide(complex15);
      complex14.asin();
      Complex complex17 = complex2.asin();
      complex16.acos();
      Complex complex18 = Complex.NaN;
      complex11.pow(complex18);
      complex17.pow((-647.05));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(3130.9, 3130.9);
      Complex complex1 = Complex.valueOf(1400.61889960748, 1400.61889960748);
      complex0.pow(complex1);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      complex0.I.toString();
      Complex complex2 = complex0.ZERO.log();
      complex2.ONE.multiply(1071);
      complex0.isInfinite();
      Complex complex3 = complex0.INF.pow(1728.52809549059);
      complex0.NaN.toString();
      Complex.valueOf((-1216.5587885873), 0.0);
      complex3.ZERO.multiply(4982);
      Complex complex4 = complex0.ONE.multiply(1728.52809549059);
      Complex complex5 = complex3.multiply(1);
      Complex complex6 = complex5.NaN.subtract(complex0);
      complex0.getArgument();
      Complex.valueOf((double) 1071, 0.0);
      complex0.tan();
      Complex complex7 = complex0.sqrt1z();
      complex4.tanh();
      complex7.NaN.tan();
      complex7.nthRoot(726);
      complex6.log();
      complex1.pow((double) 4982);
      Complex.valueOf((-2096.7));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
//      try { 
        complex0.I.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      complex1.ZERO.toString();
      complex0.getArgument();
      Complex complex3 = complex1.multiply(complex2);
      complex1.multiply((-792));
      complex1.sinh();
      Complex complex4 = complex0.multiply((-792));
      Complex complex5 = complex3.divide(Double.NaN);
      complex5.ONE.conjugate();
      complex3.reciprocal();
      Complex complex6 = complex4.add(0.0);
      complex1.multiply(complex2);
      complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.NaN.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.add(1748.11450233592);
      complex4.pow(0.0);
      Complex complex5 = complex3.NaN.atan();
      complex5.NaN.abs();
      Complex complex6 = complex1.multiply(Double.NaN);
      complex6.acos();
      complex3.cosh();
      Complex complex7 = complex2.conjugate();
      complex0.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.sinh();
      complex0.hashCode();
      Complex complex3 = complex0.tanh();
      complex3.INF.readResolve();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex3.ONE.multiply(0.0);
      complex5.INF.asin();
      Complex complex6 = complex1.sin();
      complex6.I.pow(complex2);
      complex0.acos();
      complex4.nthRoot(651);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.ONE.abs();
      complex0.ZERO.getField();
      complex0.divide((-1.0));
      complex0.readResolve();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.tanh();
      complex1.acos();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      complex1.INF.toString();
      Complex complex2 = complex0.ONE.tan();
      complex0.hashCode();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.sinh();
      complex2.ONE.pow(complex4);
      complex2.NaN.hashCode();
      complex4.ONE.sqrt1z();
      Complex complex5 = complex2.add(2722.38761);
      Complex complex6 = complex5.I.sqrt();
      complex0.getArgument();
      complex2.INF.createComplex(1.5707963267948966, 2722.38761);
      complex2.ONE.sin();
      Complex.valueOf(648.87727848953, 0.0);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.reciprocal();
      complex8.ZERO.sqrt();
      Complex complex9 = complex6.createComplex(7.813044552050569E-215, (-486.488));
      Complex complex10 = complex9.NaN.tanh();
      int int0 = 0;
//      try { 
        complex10.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1270.321165564259));
      Complex complex1 = Complex.INF;
      complex1.NaN.negate();
      complex0.NaN.multiply(complex1);
      Complex complex2 = Complex.ZERO;
      complex0.subtract(complex2);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1460.0), (-1460.0));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.multiply(0.0);
      complex2.INF.atan();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.ONE.cos();
      complex4.I.subtract(complex2);
      complex0.ZERO.log();
      Complex complex5 = complex3.INF.multiply(0.0);
      complex5.INF.log();
      Complex complex6 = complex2.ZERO.multiply(complex0);
      complex6.ZERO.toString();
      complex6.toString();
      Complex complex7 = complex2.add(complex0);
      Complex complex8 = complex7.divide(complex0);
      complex0.reciprocal();
      complex3.getImaginary();
      Complex.valueOf(0.0);
      complex8.sin();
      complex7.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(0.2607102394104004);
      Complex complex2 = Complex.valueOf(0.2607102394104004);
      complex0.equals(complex2);
      complex2.INF.add(0.2607102394104004);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.I.multiply(complex4);
      Complex complex8 = complex4.ONE.sinh();
      Complex complex9 = complex7.ZERO.sin();
      Complex complex10 = complex2.sqrt1z();
      complex10.getArgument();
      complex1.pow(complex2);
      Complex complex11 = complex2.I.tan();
      complex8.ZERO.log();
      complex11.NaN.toString();
      Complex complex12 = complex5.atan();
      complex12.ONE.cosh();
      complex5.getReal();
      complex9.getImaginary();
      Complex complex13 = complex3.sinh();
      complex11.hashCode();
      complex6.INF.divide(complex7);
      Complex complex14 = Complex.ZERO;
      complex8.divide(complex14);
      complex5.ONE.asin();
      complex0.I.multiply(complex7);
      Complex complex15 = complex3.pow(complex4);
      complex8.exp();
      complex13.ZERO.add((-569.43307));
      complex13.multiply(0.0);
      complex13.hashCode();
      complex15.acos();
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex0.conjugate();
      complex4.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.log();
      complex0.I.pow(complex2);
      complex3.getReal();
      complex5.I.pow(0.0);
      Complex complex6 = complex2.ZERO.cosh();
      complex6.ONE.multiply(37);
      Complex complex7 = complex3.NaN.multiply(complex2);
      Complex complex8 = complex3.sinh();
      complex8.cos();
      complex3.readResolve();
      complex3.asin();
      complex7.readResolve();
//      try { 
        complex3.nthRoot((-873));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -873
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.I.negate();
      complex0.getField();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex4.sqrt1z();
      complex5.divide((-629.524371));
      Complex complex6 = complex5.I.cosh();
      complex2.I.cosh();
      Complex complex7 = Complex.ZERO;
      complex5.divide(complex7);
      complex7.log();
      complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-945.4629357), (-945.4629357));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.log();
      complex2.INF.asin();
      Complex complex3 = complex0.conjugate();
      complex3.ZERO.toString();
      Complex complex4 = complex3.NaN.pow(487.44055654022);
      Complex complex5 = complex1.tanh();
      complex2.INF.cosh();
      complex5.INF.getField();
      Complex complex6 = complex0.asin();
      complex6.ONE.cosh();
      Complex complex7 = Complex.valueOf((-945.4629357), (-945.4629357));
      complex7.INF.pow(complex5);
      complex7.ZERO.abs();
      Complex complex8 = complex0.subtract(complex3);
      Complex complex9 = complex8.ZERO.multiply(complex4);
      complex3.getArgument();
      Complex complex10 = complex2.sqrt();
      complex10.ZERO.conjugate();
      Complex complex11 = complex6.createComplex(1703.0, (-945.4629357));
      Complex.valueOf(2.356194490192345);
      Complex.valueOf(487.44055654022, 0.0);
      complex11.NaN.conjugate();
      complex3.getField();
      complex11.tan();
      complex3.nthRoot(1897);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1634.99865));
      complex0.INF.asin();
      complex0.ONE.sin();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.INF.atan();
      complex0.ZERO.atan();
      complex1.ZERO.nthRoot(1);
      complex1.ONE.hashCode();
      Complex complex3 = complex0.conjugate();
      complex2.INF.add(0.0);
      complex3.abs();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex5.I.conjugate();
      complex2.isInfinite();
      complex2.sin();
      complex4.ONE.sqrt1z();
      complex0.sinh();
      complex6.readResolve();
      complex5.readResolve();
      Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-1.0);
      complex0.INF.pow(553.788938);
      Complex complex1 = Complex.valueOf((-1.0), Double.NaN);
      Complex complex2 = complex0.INF.divide(complex1);
      double double1 = (-695.3332622486);
      complex1.NaN.atan();
      Complex complex3 = complex2.add((-695.3332622486));
      complex2.INF.tan();
      complex3.NaN.exp();
      complex1.ONE.divide((-695.3332622486));
      complex0.I.sin();
      Complex.valueOf((-695.3332622486));
      complex2.getField();
      complex0.isInfinite();
      complex2.tanh();
      Complex complex4 = Complex.valueOf(553.788938);
      complex4.reciprocal();
//      try { 
        complex1.nthRoot((-892));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -892
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      complex0.ONE.toString();
      complex0.abs();
      Complex complex2 = complex0.multiply((-1364));
      complex2.ZERO.multiply((-1364));
      Complex complex3 = Complex.valueOf(6.283185307179586, (-101.152865));
      complex1.getArgument();
      complex0.add((-4.1691464781797555E-8));
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(255.2125560991801, 255.2125560991801);
      Complex complex1 = complex0.add(255.2125560991801);
      complex1.INF.exp();
      complex0.INF.readResolve();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.valueOf(255.2125560991801);
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex5.INF.acos();
      complex1.INF.reciprocal();
      Complex complex7 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex8 = complex0.reciprocal();
      complex8.multiply(complex1);
      complex6.isInfinite();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.NaN.sinh();
      complex10.I.readResolve();
      Complex complex11 = complex8.acos();
      complex11.asin();
      complex3.isNaN();
      complex10.ZERO.negate();
      Complex.valueOf(0.0, 3350.0593710986);
      Complex.valueOf((-2662.1433960836));
      complex2.toString();
      complex7.multiply(350);
      complex6.subtract(complex10);
      complex2.sqrt();
      Complex complex12 = complex10.createComplex(350, 2.6527209281921387);
      Complex complex13 = complex0.add(complex12);
      complex4.conjugate();
      complex9.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1555.261), (-1555.261));
      complex1.getField();
      complex0.I.multiply(complex1);
      Complex complex2 = complex1.I.multiply(1303);
      complex2.NaN.toString();
      Complex complex3 = complex1.ZERO.negate();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex0.conjugate();
      complex6.INF.pow(complex2);
      Complex complex7 = complex5.INF.tan();
      Complex.valueOf((-1555.261), 20.0);
      complex4.I.getField();
      complex6.INF.nthRoot(854);
      Complex complex8 = complex5.divide(complex1);
      complex8.add(complex7);
      complex2.getArgument();
      complex1.hashCode();
//      try { 
        complex0.nthRoot((-2295));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,295
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(1.0);
      Complex complex2 = complex1.NaN.multiply(1.0);
      complex2.INF.abs();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.NaN;
      complex4.ZERO.multiply(1442.0);
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex4.ZERO.cosh();
      Complex complex7 = complex6.ZERO.sinh();
      complex7.ONE.hashCode();
      Complex complex8 = complex5.I.multiply(17);
      Complex complex9 = complex3.negate();
      complex5.I.sinh();
      Complex.valueOf(1689.072997085);
      Complex.valueOf(2190.5);
      complex0.getImaginary();
      complex2.hashCode();
      complex9.abs();
      complex8.cos();
      complex1.NaN.multiply(17);
      complex9.add(complex2);
      Complex complex10 = complex5.sqrt();
      complex10.sinh();
      complex9.multiply(complex8);
      complex1.add(1.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8628.18089236783), 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.divide((-8628.18089236783));
      complex1.ONE.cosh();
      Complex complex3 = Complex.valueOf(0.0, (-8628.18089236783));
      complex3.getArgument();
      Complex complex4 = complex0.asin();
      complex1.conjugate();
      complex2.getField();
      complex2.getReal();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.I.sqrt1z();
      complex6.ZERO.multiply((-4784));
      complex2.ZERO.readResolve();
      complex2.multiply(0.0);
      Complex.valueOf(0.0);
      complex0.isInfinite();
      complex1.getReal();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      complex0.ZERO.atan();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.INF.pow(complex0);
//      try { 
        complex3.I.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.getField();
      Complex complex3 = complex0.sqrt1z();
      complex2.nthRoot(1);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.I;
      complex0.ZERO.subtract(complex1);
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.cosh();
      complex4.createComplex(1.0, 6.283185307179586);
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.I.cos();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.INF.subtract(complex2);
      complex6.ONE.divide(0.0);
      complex6.ONE.abs();
      Complex complex7 = complex4.INF.multiply(0);
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex1.ZERO.conjugate();
      complex9.ONE.sqrt();
      complex8.ONE.hashCode();
      complex0.ONE.getField();
      Complex complex10 = complex3.multiply(1989);
      complex2.readResolve();
      complex10.I.multiply(complex4);
      Complex complex11 = complex8.tan();
      complex2.isNaN();
      complex1.getImaginary();
      complex8.readResolve();
      Complex complex12 = complex3.divide((double) 1989);
      complex12.ZERO.exp();
      complex11.tanh();
      complex8.hashCode();
      complex8.toString();
      complex8.cosh();
      complex10.subtract(5.2243955659975294E-98);
      complex2.hashCode();
      complex7.nthRoot(1989);
      Complex.valueOf(0.0);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getField();
      Complex complex1 = complex0.createComplex(1276.924419, 1276.924419);
      Complex complex2 = complex1.NaN.pow(complex0);
      complex2.conjugate();
      complex0.sqrt();
      complex0.toString();
      complex2.sqrt1z();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.abs();
      complex0.atan();
      complex0.ZERO.exp();
      Complex complex1 = Complex.valueOf(1.0);
      complex1.ONE.sinh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf(140.883461365);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex0.INF.negate();
      complex0.readResolve();
      complex0.hashCode();
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex6.ONE.multiply(852);
      Complex complex8 = complex7.I.reciprocal();
      assertEquals((-1.0), complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      complex6.NaN.add(1941.859);
      complex4.getField();
      complex6.subtract((double) 852);
      Complex complex9 = complex6.multiply(140.883461365);
      complex9.ZERO.abs();
      Complex complex10 = complex4.I.pow(complex7);
      assertEquals((-4.506452628607625E-14), complex10.getImaginary(), 0.01);
      
      complex9.readResolve();
      complex4.atan();
      List<Complex> list0 = complex5.nthRoot(852);
      assertFalse(list0.contains(complex9));
      
      complex3.asin();
      complex4.multiply(140.883461365);
      complex7.subtract(complex1);
      assertFalse(complex7.isInfinite());
      assertSame(complex6, complex4);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-515.2037));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = new Complex((-515.2037), (-515.2037));
      Complex complex4 = complex3.subtract((-2754.12291088246));
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex0.INF.asin();
      Complex complex7 = complex6.I.sqrt();
      assertEquals(0.7071067811865476, complex7.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex7.getImaginary(), 0.01);
      
      complex6.NaN.getArgument();
      Complex complex8 = complex5.NaN.tan();
      Complex complex9 = complex0.NaN.conjugate();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex10.ONE.subtract(complex3);
      assertEquals(516.2037, complex11.getReal(), 0.01);
      
      Complex complex12 = complex8.INF.conjugate();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex3.negate();
      Complex complex15 = complex4.log();
      assertEquals(7.7395472839438675, complex15.getReal(), 0.01);
      
      String string0 = complex14.toString();
      assertEquals("(515.2037, 515.2037)", string0);
      
      complex0.createComplex(0.0, 0.0);
      Complex complex16 = complex5.subtract(complex8);
      assertSame(complex16, complex6);
      assertEquals((-515.2037), complex5.getReal(), 0.01);
      
      Complex complex17 = complex2.divide(2017.31);
      assertSame(complex17, complex2);
      
      complex13.getArgument();
      assertEquals(0.017496973929918225, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Object object0 = complex10.readResolve();
      assertTrue(object0.equals((Object)complex1));
      
      Complex complex18 = complex4.cosh();
      assertFalse(complex18.isNaN());
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex5));
  }
}
