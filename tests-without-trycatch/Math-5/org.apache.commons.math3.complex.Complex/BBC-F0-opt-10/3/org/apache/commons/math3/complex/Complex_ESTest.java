/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:01:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(2933);
      Complex complex1 = Complex.valueOf((-464.145), (-1000299.9222751482));
      complex1.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      complex3.pow(complex0);
      complex1.multiply(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf((-1000299.9222751482), Double.POSITIVE_INFINITY);
      complex1.multiply(complex5);
      Complex complex6 = Complex.NaN;
      complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(403.14676636591, 703.992842);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.createComplex((-3.200068509818696E299), 703.992842);
      Complex complex3 = complex2.ZERO.exp();
      complex3.INF.divide(14.36219);
      complex1.ZERO.pow((-2659.2745984698595));
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.ZERO.sqrt1z();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.ONE.asin();
      complex7.INF.asin();
      complex6.I.exp();
      Complex complex8 = complex0.multiply((-1));
      Complex complex9 = complex8.NaN.cosh();
      complex1.sqrt1z();
      complex5.negate();
      complex9.getField();
      Complex complex10 = complex4.asin();
      Complex complex11 = complex10.ZERO.acos();
      Complex complex12 = complex1.sin();
      complex12.INF.cos();
      Complex complex13 = complex9.add(complex7);
      complex13.ONE.multiply(336);
      complex0.multiply(310.520070628911);
      complex1.createComplex((-2087.6196348), 1463.784782096);
      complex11.divide((-2087.6196348));
      Complex.valueOf(310.520070628911);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex1.ONE.divide(complex0);
      complex1.acos();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.pow(complex2);
      Complex.valueOf((-2187.4089679));
      complex1.INF.divide(2.6049034495973114E134);
      complex1.sqrt1z();
      Complex complex4 = complex1.sin();
      complex2.log();
      complex4.pow(complex1);
      Complex complex5 = Complex.valueOf(4.985137671479376E-20);
      Complex complex6 = complex3.multiply(complex2);
      Complex complex7 = complex1.acos();
      complex6.log();
      Complex complex8 = new Complex((-2187.4089679), Double.NaN);
      Complex complex9 = complex8.createComplex((-207.2911408768784), (-2187.4089679));
      complex9.I.negate();
      complex5.log();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1798895835645554, 6029.3041);
      Complex complex1 = Complex.valueOf((-870.24483), Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = Complex.valueOf((-1543.9085084262547), 20.0);
      Complex complex2 = complex1.tan();
      complex1.pow(complex2);
      complex1.sqrt();
      complex2.nthRoot(2229);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(17.04721407, 17.04721407);
      Complex complex3 = new Complex(17.04721407, Double.POSITIVE_INFINITY);
      complex3.tan();
      complex3.multiply(complex0);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 2.608817438130718E248;
      Complex complex0 = Complex.valueOf(2.608817438130718E248);
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      Complex complex2 = new Complex(17.04721407, 17.04721407);
      Complex complex3 = new Complex(17.04721407, Double.POSITIVE_INFINITY);
      complex3.tan();
      complex3.multiply(509);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
      Complex complex2 = new Complex(17.04721407, 17.04721407);
      Complex complex3 = new Complex(17.04721407, Double.POSITIVE_INFINITY);
      complex3.tan();
      Complex complex4 = Complex.I;
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.multiply((-921.711726404327));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 3102.797;
      Complex complex0 = new Complex(3102.797, 1614.18479);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.I.createComplex((-20.0), (-20.0));
      complex1.NaN.acos();
      Complex complex2 = complex0.ZERO.subtract(0.7451131604793487);
      complex2.INF.readResolve();
      complex0.NaN.multiply(1325);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.conjugate();
      complex5.ZERO.toString();
      complex1.abs();
      Complex complex6 = complex3.log();
      complex6.NaN.multiply(0);
      complex4.NaN.toString();
      complex3.getArgument();
      complex5.sqrt();
      Complex complex7 = complex6.createComplex(1.0, 2.3182239583484444E255);
      complex7.INF.getField();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex7.subtract(0.7451131604793487);
      complex3.ONE.exp();
      complex5.reciprocal();
      complex9.pow((-3.141592653589793));
      complex8.equals("XG,e?B$RHW");
      complex10.abs();
      Complex complex11 = complex6.pow(2.3182239583484444E255);
      Complex complex12 = Complex.NaN;
      complex11.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.log();
      complex0.abs();
      complex3.ONE.sqrt();
      Complex complex5 = complex4.ONE.sqrt();
      complex5.NaN.negate();
      Complex complex6 = complex5.divide(Double.POSITIVE_INFINITY);
      complex6.INF.divide(Double.POSITIVE_INFINITY);
      complex2.NaN.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.2050528526306152);
      Complex complex7 = complex3.multiply(1.4061005115509033);
      complex7.cosh();
      complex2.conjugate();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      complex1.ZERO.nthRoot(1930);
      Complex complex2 = Complex.valueOf((-4831.80416823147), (-4831.80416823147));
      complex2.add((-2575.05510548));
      complex0.subtract(complex2);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.subtract((-2700.18));
      complex0.divide(complex1);
      Complex complex2 = Complex.valueOf((double) 192, (-1808.14360027));
      complex2.tan();
      Complex complex3 = complex0.multiply(complex2);
      complex1.readResolve();
      complex3.sqrt();
      complex3.equals(complex0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1073.8);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.cosh();
      complex2.I.pow(complex1);
      Complex complex3 = complex0.negate();
      complex3.ONE.conjugate();
      Complex complex4 = complex3.ZERO.multiply(2145403029);
      complex0.abs();
      complex4.atan();
      complex3.createComplex(1073.8, 1073.8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.12996721591364E-202, (-266.0));
      complex0.getImaginary();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.ONE;
      complex2.I.multiply(1054);
      complex1.ZERO.pow(complex2);
      complex0.multiply(1270);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1.1293346659459732E69);
      Complex complex3 = Complex.I;
      complex3.hashCode();
      complex3.divide(complex1);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.createComplex(758.456, (-2516.296));
      complex4.isNaN();
      complex2.hashCode();
      Complex complex6 = complex4.subtract(0.7615941559557649);
      Complex complex7 = complex0.divide(complex5);
      complex7.tan();
      Complex complex8 = Complex.ONE;
      complex1.multiply(complex8);
      complex4.readResolve();
      Complex complex9 = complex3.sqrt();
      Object object0 = new Object();
      complex6.equals(complex9);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-0.40112799685391004), (-0.40112799685391004));
      Complex complex1 = complex0.createComplex((-0.40112799685391004), (-0.40112799685391004));
      Complex complex2 = complex0.subtract((-0.40112799685391004));
      complex0.divide(complex2);
      Complex complex3 = complex1.tan();
      Complex complex4 = new Complex((-2210.4783304959283), 2.0);
      Complex complex5 = complex3.multiply(complex4);
      complex1.readResolve();
      Complex complex6 = Complex.ONE;
      complex6.createComplex(2.0, (-0.40112799685391004));
      Complex complex7 = Complex.ZERO;
      complex7.sqrt();
      complex4.readResolve();
      complex3.equals(complex5);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ZERO;
      complex1.toString();
      complex2.readResolve();
      Object object0 = new Object();
      Complex complex4 = Complex.I;
      complex1.equals(complex4);
      Complex complex5 = Complex.ZERO;
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.cos();
      complex0.sqrt();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(2860.032, 2860.032);
      complex2.INF.sinh();
      complex2.readResolve();
      Complex complex3 = Complex.I;
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(complex1);
      Complex.valueOf(2734.944007516782);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide((-1.0));
      Complex complex5 = Complex.valueOf((-1.0), 2734.944007516782);
      complex4.readResolve();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex1.atan();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(1.1293346659459732E69);
      complex1.INF.hashCode();
      Complex complex2 = Complex.I;
      complex2.divide(1.1293346659459732E69);
      complex1.reciprocal();
      Complex complex3 = Complex.INF;
      complex0.multiply(complex2);
      Complex.valueOf(177.92374, 1.1293346659459732E69);
      Complex.valueOf(2073.53427, (-2018.097768082));
      Complex complex4 = complex0.reciprocal();
      complex4.readResolve();
      Complex complex5 = Complex.I;
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(890.64357692148, 0.8414709848078965);
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.readResolve();
      complex0.ZERO.add(complex1);
      complex1.toString();
      complex1.INF.readResolve();
      complex0.getField();
      complex0.NaN.pow(890.64357692148);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex0.multiply((-1.0));
      complex4.nthRoot(1699);
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex0.sin();
      Complex.valueOf((-1530.8432595058), Double.NEGATIVE_INFINITY);
      Complex complex7 = complex5.log();
      complex7.INF.hashCode();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex8.createComplex((-1530.8432595058), (-530.987956));
      complex9.ONE.getArgument();
      complex8.divide((-1530.8432595058));
      Complex complex10 = complex0.subtract(complex9);
      complex10.ONE.toString();
      Complex.valueOf((-408.1812859), (-408.1812859));
      complex8.nthRoot(705);
      complex0.abs();
      complex2.multiply(complex3);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.multiply((-2773.414));
      complex2.subtract(complex3);
      complex0.add(complex3);
      Complex complex4 = Complex.valueOf(1.009889435954157E-17, (-2773.414));
      complex4.exp();
      Complex complex5 = Complex.I;
      complex5.isNaN();
      Complex complex6 = Complex.INF;
      complex5.multiply(complex1);
      Complex.valueOf(2385.6, 2.0);
      complex3.readResolve();
      Complex complex7 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(1.1293346659459732E69);
      complex1.INF.hashCode();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ZERO.createComplex(1.1293346659459732E69, (-1031.1372770145));
      complex1.isNaN();
      complex2.getReal();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex1.pow(complex0);
      complex5.multiply(complex1);
      Complex.valueOf(692.75678, 1.1293346659459732E69);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex4.readResolve();
      Complex complex7 = Complex.I;
      complex6.multiply(692.75678);
      complex2.subtract(8.81692671529277);
      complex0.log();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add((-8.833499967268279E225));
      Complex complex3 = Complex.valueOf((-708.75));
      complex3.cos();
      Complex complex4 = Complex.valueOf(0.6608942747116089);
      complex2.ONE.multiply(complex4);
      complex0.pow((-1664.5092841128));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2385.6);
      Complex complex1 = complex0.I.createComplex(2385.6, 2385.6);
      complex1.NaN.acos();
      Complex complex2 = complex0.ZERO.subtract(0.7451131604793487);
      complex2.INF.readResolve();
      complex0.NaN.multiply(1325);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.conjugate();
      complex5.ZERO.toString();
      complex1.abs();
      Complex complex6 = complex3.log();
      complex6.NaN.multiply(0);
      complex4.NaN.toString();
      complex3.getArgument();
      complex5.sqrt();
      Complex complex7 = complex6.createComplex(1.0, 2.3182239583484444E255);
      complex7.INF.getField();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex7.subtract(0.7451131604793487);
      complex3.ONE.exp();
      complex5.reciprocal();
      complex0.log();
      complex9.pow(3.141592653589793);
      complex8.equals("XG,e?B$RHW");
      complex10.abs();
      Complex complex11 = complex6.pow(2.3182239583484444E255);
      Complex complex12 = Complex.NaN;
      complex11.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex2.multiply((-891.34355914));
      Complex complex4 = complex1.INF.subtract(complex0);
      Complex complex5 = complex4.ZERO.add(complex0);
      Complex complex6 = complex0.I.exp();
      complex0.isNaN();
      complex2.ONE.readResolve();
      complex0.getImaginary();
      complex0.ZERO.acos();
      complex6.ONE.cos();
      Complex complex7 = complex2.INF.multiply(0);
      complex4.pow(complex6);
      complex5.ONE.getArgument();
      Complex complex8 = new Complex((-891.34355914));
      complex3.NaN.add(complex8);
      Complex complex9 = complex3.cos();
      complex9.ZERO.log();
      Complex complex10 = complex5.add(0.0);
      complex1.getArgument();
      complex0.abs();
      complex10.readResolve();
      complex10.equals(complex7);
      complex7.conjugate();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.tan();
      complex2.sqrt1z();
      Complex complex4 = complex0.exp();
      complex0.abs();
      complex3.hashCode();
      complex2.getArgument();
      Complex complex5 = Complex.INF;
      complex1.divide(complex4);
      complex4.reciprocal();
      Complex complex6 = Complex.INF;
      complex5.multiply(complex0);
      Complex.valueOf(20.0, 19.974984355438178);
      Complex.valueOf(Double.POSITIVE_INFINITY, 20.0);
      Complex complex7 = new Complex(20.0, 0.0);
      complex7.readResolve();
      Complex complex8 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex0.NaN.divide(1.0);
      complex2.ZERO.abs();
      complex1.INF.hashCode();
      Complex complex3 = complex0.ONE.subtract(1.0);
      Complex complex4 = complex1.divide(complex3);
      complex1.tan();
      Complex complex5 = complex4.multiply(complex1);
      complex0.readResolve();
      complex4.equals(complex5);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide((-3470.60987));
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex4.exp();
      complex6.abs();
      complex7.hashCode();
      complex1.getArgument();
      Complex complex8 = Complex.INF;
      complex3.divide(complex2);
      complex2.readResolve();
      Complex complex9 = Complex.ZERO;
      complex9.atan();
      complex8.divide(393.650523);
      Complex complex10 = complex2.exp();
      complex10.readResolve();
      complex3.isNaN();
      Complex complex11 = new Complex(393.650523);
      complex11.tanh();
      complex10.getField();
      complex0.log();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.multiply(20.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex3.add(complex6);
      complex0.exp();
      complex7.isNaN();
      complex5.readResolve();
      complex6.getImaginary();
      Complex complex8 = complex7.acos();
      complex3.cos();
      complex1.multiply((-2969));
      complex0.pow(complex6);
      complex3.getArgument();
      Complex complex9 = new Complex((-6.995964550587914E136), Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.cos();
      complex10.log();
      complex8.tanh();
      complex1.acos();
      complex10.createComplex((-6.995964550587914E136), (-868.3));
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(1.9421599201082424E43);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract(complex0);
      complex0.tan();
      Complex complex3 = Complex.valueOf(1.0000019150838448);
      complex3.sqrt1z();
      Complex complex4 = complex3.exp();
      complex4.abs();
      complex3.hashCode();
      complex2.getArgument();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(1.0000019150838448);
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex4.log();
      Complex complex9 = complex2.createComplex(Double.POSITIVE_INFINITY, 0.3594330038102771);
      Complex complex10 = complex7.subtract((-1293.1483));
      complex2.isInfinite();
      complex10.multiply(216);
      complex1.hashCode();
      complex2.isInfinite();
      complex9.tanh();
      complex7.cos();
      Complex complex11 = complex9.sqrt();
      complex2.hashCode();
      Complex complex12 = Complex.ONE;
      complex0.add(complex8);
      complex11.sqrt();
      Complex complex13 = Complex.ONE;
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.exp();
      complex0.abs();
      complex3.hashCode();
      complex2.getArgument();
      Complex complex6 = Complex.INF;
      complex1.divide(complex5);
      Complex complex7 = complex1.log();
      Complex complex8 = complex5.createComplex(20.0, (-0.7615941559557649));
      Complex complex9 = complex5.subtract((-0.7615941559557649));
      complex4.isInfinite();
      complex2.multiply(216);
      complex9.hashCode();
      Complex complex10 = Complex.ONE;
      complex10.isInfinite();
      complex8.tanh();
      complex8.cos();
      complex7.sqrt();
      complex6.hashCode();
      Complex complex11 = Complex.ONE;
      complex6.add(complex11);
      Complex complex12 = Complex.ONE;
      complex12.sqrt();
      Complex complex13 = Complex.ONE;
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = new Complex(4349.41);
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-1.9872713979884691E43), 2.0);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex1.acos();
      Complex complex6 = Complex.valueOf((-20.0));
      Complex complex7 = complex6.createComplex((-1.9872713979884691E43), 1096.24084631351);
      complex4.isNaN();
      complex5.getReal();
      Complex complex8 = complex3.divide(complex5);
      Complex complex9 = complex6.pow(complex1);
      complex8.getArgument();
      complex9.sqrt1z();
      complex1.multiply(complex8);
      Complex complex10 = complex0.pow(complex2);
      Complex.valueOf((-1413.49), (-818.371));
      Complex complex11 = complex10.acos();
      complex4.negate();
      Complex complex12 = complex8.divide(complex7);
      complex12.getReal();
      complex2.getReal();
      complex11.toString();
      complex8.log();
      complex7.cos();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.exp();
      complex0.abs();
      complex3.hashCode();
      complex2.getArgument();
      Complex complex6 = Complex.INF;
      complex1.divide(complex5);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.log();
      Complex complex9 = complex5.createComplex(Double.POSITIVE_INFINITY, 996.0);
      complex9.subtract(3.434477109643361E-8);
      Complex complex10 = Complex.valueOf((-1.0), 3.434477109643361E-8);
      complex10.isInfinite();
      Complex complex11 = complex8.multiply(216);
      complex6.hashCode();
      complex7.isInfinite();
      complex2.tanh();
      complex11.cos();
      complex1.sqrt();
      complex8.hashCode();
      Complex complex12 = Complex.ONE;
      Complex complex13 = new Complex(0.001383865544376974, 996.0);
      complex1.add(complex4);
      complex5.abs();
      complex12.cosh();
      complex7.getArgument();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.sinh();
      complex1.add((-8.833499967268279E225));
      Complex complex2 = Complex.valueOf((-708.75));
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      complex2.cos();
      complex3.cosh();
      Complex complex4 = Complex.valueOf(0.6608942747116089);
      complex4.getArgument();
      complex0.getReal();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.add(complex2);
      complex6.sqrt();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.I.divide((-722.61355452));
      complex3.reciprocal();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = Complex.valueOf(1235.36625265536, 1235.36625265536);
      complex4.add((-708.75));
      Complex complex6 = Complex.valueOf((-708.75));
      complex2.pow(6.283185307179586);
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.cosh();
      complex5.getArgument();
      complex6.getReal();
      Complex complex9 = new Complex(0.0);
      Complex complex10 = complex3.add(complex9);
      complex10.sqrt();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      complex1.INF.hashCode();
      Complex complex2 = complex0.ONE.subtract(1.0);
      complex0.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.createComplex(710.04318846, 710.04318846);
      Complex complex8 = complex5.subtract(37.0);
      complex2.isInfinite();
      complex7.multiply(0);
      complex6.hashCode();
      complex5.isInfinite();
      complex5.tanh();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex8.sqrt();
      complex9.hashCode();
      Complex complex11 = Complex.ONE;
      Complex complex12 = new Complex(0.0, (-20.0));
      Complex complex13 = Complex.INF;
      Complex complex14 = Complex.valueOf(1.5707963267948966);
      complex13.add(complex14);
      Complex complex15 = Complex.NaN;
      complex12.ONE.add(710.04318846);
      complex15.abs();
      complex0.cosh();
      complex12.getArgument();
      complex13.isInfinite();
      complex10.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex0.subtract(complex2);
      complex7.NaN.reciprocal();
      complex5.getArgument();
      complex4.readResolve();
      Complex complex8 = complex6.tanh();
      Complex complex9 = Complex.INF;
      complex9.nthRoot(700);
      Complex complex10 = complex8.acos();
      Complex complex11 = complex3.cosh();
      complex9.getReal();
      complex10.add(complex6);
      complex2.sqrt();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.exp();
      complex2.abs();
      complex1.hashCode();
      Complex complex4 = new Complex(1362.3638588, 2297.1052);
      complex4.getArgument();
      Complex complex5 = Complex.INF;
      complex4.divide(complex0);
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.createComplex((-491.2), 586.1331829509);
      Complex complex8 = complex5.subtract(2574.2578815785055);
      complex6.isInfinite();
      complex7.multiply(216);
      complex4.hashCode();
      complex3.isInfinite();
      Complex complex9 = complex5.tanh();
      complex2.cos();
      complex9.sqrt();
      complex7.hashCode();
      Complex complex10 = Complex.ONE;
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY, 401.49652);
      complex1.add(complex2);
      Complex complex12 = Complex.ONE;
      complex12.INF.add(complex11);
      complex12.abs();
      complex3.cosh();
      Complex complex13 = Complex.ZERO;
      complex13.getArgument();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      complex1.INF.divide(20.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.NaN.exp();
      complex0.abs();
      complex0.hashCode();
      complex0.NaN.getArgument();
      Complex complex6 = Complex.INF;
      complex0.divide(complex6);
      complex5.readResolve();
      complex3.sinh();
      complex2.atan();
      Complex complex7 = complex1.tan();
      complex0.reciprocal();
      complex7.readResolve();
      complex2.conjugate();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex8.acos();
      complex2.abs();
      complex5.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(1.1293346659459732E69);
      complex1.INF.hashCode();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.createComplex(1.1293346659459732E69, (-1031.1372770145));
      complex1.isNaN();
      complex2.getReal();
      complex4.divide(complex1);
      complex1.pow(complex0);
      complex3.getArgument();
      Complex complex5 = complex3.sqrt1z();
      complex5.multiply(complex4);
      complex5.ZERO.pow(complex0);
      Complex.valueOf((-3091.71), -0.0);
      complex4.readResolve();
      complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getArgument();
      Complex complex1 = new Complex(2.0, 2.0);
      Complex complex2 = complex1.subtract(1.5707963267948966);
      Complex complex3 = complex2.ONE.pow(complex1);
      complex3.I.add(complex2);
      complex1.I.conjugate();
      Complex complex4 = complex0.subtract(complex1);
      complex4.NaN.reciprocal();
      complex4.I.log();
      complex4.atan();
      complex4.log();
      complex0.pow(1.5707963267948966);
      // Undeclared exception!
      complex1.nthRoot(1312145731);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.I.divide((-722.61355452));
      complex3.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = Complex.valueOf(1235.36625265536, 1235.36625265536);
      Complex complex7 = complex5.add((-708.75));
      Complex complex8 = Complex.valueOf(1235.36625265536);
      complex8.pow(1235.36625265536);
      complex7.I.cos();
      complex7.INF.hashCode();
      complex7.nthRoot(202);
      Complex complex9 = complex0.sin();
      complex2.getImaginary();
      complex9.add(complex6);
      complex2.tanh();
      complex9.acos();
      complex3.multiply(1235.36625265536);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.exp();
      complex0.abs();
      complex3.hashCode();
      complex2.getArgument();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.divide(complex5);
      complex1.log();
      Complex complex8 = complex5.createComplex(20.0, (-0.7615941559557649));
      Complex complex9 = complex5.subtract((-0.7615941559557649));
      complex4.isInfinite();
      Complex complex10 = complex2.multiply(216);
      complex9.hashCode();
      complex4.isInfinite();
      complex8.tanh();
      complex0.cos();
      complex10.sqrt();
      complex2.hashCode();
      Complex complex11 = Complex.ONE;
      Complex complex12 = new Complex(0.5307431221008301, (-2.356194490192345));
      complex7.add(complex12);
      complex6.abs();
      complex8.cosh();
      complex3.getArgument();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-559.5317291));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.INF;
      complex2.multiply(complex0);
      Complex.valueOf(2041.344185093377, 2785.21194736216);
      Complex complex4 = complex0.add((-464.0));
      Complex.valueOf(2041.344185093377);
      Complex complex5 = Complex.valueOf(2783.3125967, 2783.3125967);
      Complex complex6 = complex5.pow((-464.0));
      complex4.cos();
      complex1.hashCode();
      int int0 = 0;
//      try { 
        complex6.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.NaN.subtract(complex3);
      Complex complex6 = Complex.INF;
      complex6.getArgument();
      complex5.sinh();
      Complex complex7 = complex3.multiply(complex6);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = new Complex(0.7853981633974483);
      Complex complex10 = complex9.exp();
      complex8.pow(0.7853981633974483);
      complex8.abs();
      complex5.abs();
      complex8.readResolve();
      Complex complex11 = Complex.valueOf(0.7853981633974483, Double.NaN);
      Object object0 = complex11.readResolve();
      complex10.equals(object0);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.INF.divide(20.0);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex5.NaN.exp();
      complex0.abs();
      complex0.hashCode();
      complex0.NaN.getArgument();
      Complex complex7 = Complex.INF;
      complex0.divide(complex7);
      complex6.readResolve();
      complex2.atan();
      Complex complex8 = complex2.divide(Double.NaN);
      complex3.exp();
      complex3.readResolve();
      complex8.isNaN();
      Complex complex9 = complex0.tanh();
      complex9.getField();
      complex3.log();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1293.1483));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(1);
      complex1.nthRoot(37);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex3.INF.add((-1293.1483));
      complex1.I.cosh();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex4.I.exp();
      complex6.getField();
      complex0.sqrt1z();
      Complex complex7 = Complex.valueOf((double) 1, (-1293.1483));
      complex7.reciprocal();
      complex5.getArgument();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex8.sinh();
      complex0.atan();
      complex9.tan();
      Complex complex10 = complex4.reciprocal();
      complex2.readResolve();
      Complex complex11 = complex10.conjugate();
      complex11.acos();
      complex0.abs();
      complex2.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      complex0.sinh();
      Complex complex1 = Complex.valueOf(3.3739397633046517E-9, 2100.177);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-5.36108186384227E-9));
      Complex complex1 = complex0.I.atan();
      complex0.INF.readResolve();
      complex0.getImaginary();
      Complex complex2 = Complex.NaN;
      complex2.I.getArgument();
      complex2.INF.subtract(0.0);
      complex1.ZERO.multiply(2.0);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.I.pow(complex2);
//      try { 
        complex4.ONE.nthRoot((-1159));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,159
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex2.multiply((-891.34355914));
      Complex complex4 = complex1.INF.subtract(complex0);
      Complex complex5 = complex4.ZERO.add(complex0);
      Complex complex6 = complex0.I.exp();
      complex0.isNaN();
      complex2.ONE.readResolve();
      complex0.getImaginary();
      complex0.ZERO.acos();
      complex6.ONE.cos();
      complex2.INF.multiply(0);
      complex4.pow(complex6);
      complex5.ONE.getArgument();
      Complex complex7 = complex3.cos();
      complex7.ZERO.log();
      Complex complex8 = complex6.tanh();
      complex8.ONE.acos();
      complex5.createComplex((-3484.792573129902), 1.0);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1.5038413653121357E55), (-1.5038413653121357E55));
      complex0.INF.readResolve();
      Complex complex1 = complex0.exp();
      complex0.cos();
      complex0.I.getArgument();
      Complex complex2 = complex1.ZERO.divide(2727.4868729591667);
      complex2.ONE.sinh();
      complex2.multiply(1);
      Complex.valueOf(2727.4868729591667, (-261.69294));
      Complex complex3 = complex2.INF.pow(Double.POSITIVE_INFINITY);
      complex1.NaN.pow(242.3834091821);
      Complex complex4 = complex1.multiply(2981);
      Complex complex5 = complex4.ZERO.multiply(1078.0);
      Complex complex6 = complex5.I.sqrt1z();
      complex1.add(2727.4868729591667);
      complex1.cos();
      Object object0 = new Object();
      complex3.equals(object0);
      complex3.nthRoot(2981);
      complex6.pow((-261.69294));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.NaN.multiply((-552));
      complex3.NaN.cos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.sqrt1z();
      complex5.ONE.reciprocal();
      Complex complex6 = complex4.tan();
      complex2.NaN.abs();
      complex2.getArgument();
      Complex.valueOf((double) (-552), -0.0);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.divide((-1435.3103077582));
      complex6.sqrt();
      complex3.divide((-1435.3103077582));
      Complex complex9 = Complex.valueOf(-0.0, Double.NaN);
      complex9.NaN.multiply((-552));
      Complex complex10 = complex5.cos();
      complex8.nthRoot(899);
      Complex complex11 = complex10.sinh();
      complex8.getField();
      complex5.INF.divide(-0.0);
      complex6.isNaN();
      complex0.exp();
      complex11.add(complex6);
      complex6.cosh();
      complex5.divide(complex1);
      Complex.valueOf(-0.0, (-1435.3103077582));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-2731.525), (-2731.525));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.createComplex((-2731.525), (-2731.525));
      Complex complex3 = complex2.ZERO.atan();
      complex2.getField();
      complex3.divide(complex0);
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex1.getImaginary();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.add(complex5);
      complex6.sqrt();
      complex2.ONE.hashCode();
      complex0.ONE.sqrt();
      complex2.getReal();
      complex1.ZERO.asin();
      Complex complex7 = complex1.pow(complex0);
      complex4.divide(complex0);
      complex3.add(1.0);
//      try { 
        complex7.nthRoot((-359));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -359
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(846.91067770422);
      Complex complex3 = complex1.pow(complex0);
      Complex.valueOf((-1.0));
      Complex complex4 = complex2.exp();
      complex4.NaN.add(846.91067770422);
      Complex complex5 = complex3.cos();
      complex5.ZERO.log();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ZERO.subtract(846.91067770422);
      complex0.readResolve();
      complex5.sqrt1z();
      Complex complex8 = complex7.multiply(complex0);
      complex5.divide(complex0);
      complex5.subtract(complex8);
      complex3.multiply(0);
      complex4.sqrt();
      Complex.valueOf((double) 0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.I.divide((-722.61355452));
      complex3.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = Complex.valueOf(1235.36625265536, 1235.36625265536);
      Complex complex7 = complex5.add((-708.75));
      Complex complex8 = Complex.valueOf(1235.36625265536);
      complex8.pow(1235.36625265536);
      complex7.I.cos();
      complex7.INF.hashCode();
      complex7.nthRoot(202);
      Complex complex9 = complex0.sin();
      complex2.getImaginary();
      Complex complex10 = complex9.add(complex6);
      Complex complex11 = complex2.tanh();
      complex11.INF.multiply(202);
      complex10.exp();
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.ZERO.getArgument();
      Complex complex3 = complex1.ONE.log();
      complex1.NaN.toString();
      Complex complex4 = complex1.ONE.exp();
      complex3.INF.createComplex(0, (-1.0));
      complex2.I.subtract(0.0);
      complex4.conjugate();
      complex3.ONE.getArgument();
//      try { 
        complex0.I.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.createComplex(1467.45818458866, 1467.45818458866);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.abs();
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex4.INF.sin();
      complex5.INF.cos();
      complex5.NaN.multiply(0.0);
      complex5.I.subtract(0.0);
      Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex2.ONE.subtract(complex6);
      Complex complex7 = complex4.ZERO.divide(complex1);
      complex7.abs();
      complex7.ONE.add(1.0);
      complex0.add(complex1);
      complex3.sqrt1z();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(566.9086458946, 566.9086458946);
      complex0.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(0.0);
      complex1.INF.readResolve();
      complex0.getReal();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.subtract(complex1);
      complex4.I.readResolve();
      complex2.pow(complex1);
      complex3.I.multiply(complex4);
      complex0.ONE.tanh();
      Complex complex5 = Complex.valueOf(0.0, 1539.0);
      complex0.subtract(complex5);
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.NaN.subtract((-121.01));
      complex6.sin();
      complex7.acos();
      complex7.multiply((-4319.9736094326));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Complex complex1 = complex0.NaN.sin();
      complex0.I.sqrt();
      complex0.ZERO.hashCode();
      complex0.NaN.atan();
      Complex complex2 = complex1.I.cos();
      complex2.ONE.sin();
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4810.54148875), (-4810.54148875));
      Complex complex1 = Complex.valueOf((-834.2), 0.0);
      Complex complex2 = complex1.I.sqrt();
      complex1.conjugate();
      complex0.I.nthRoot(497);
      complex0.abs();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.divide(2355.0791217226842);
      complex5.NaN.conjugate();
      complex3.nthRoot(2210);
      complex3.I.getArgument();
      Complex complex6 = complex3.createComplex(151.77173480975, 2210);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex6.ZERO.divide(411.550243);
      complex8.divide(complex6);
      complex7.ZERO.readResolve();
      complex6.readResolve();
      complex2.getImaginary();
      Complex complex9 = complex6.add((-218.682));
      complex9.NaN.getArgument();
      complex9.asin();
      complex2.isInfinite();
      Complex complex10 = complex0.pow(0.0);
      complex10.tanh();
      Complex complex11 = complex9.acos();
      complex6.getReal();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.ONE.conjugate();
      complex0.getImaginary();
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.I;
      complex4.equals(complex6);
      Complex complex7 = complex5.ZERO.pow(complex6);
      complex7.NaN.tanh();
      Complex complex8 = Complex.valueOf((-1165.25054785));
      complex3.isNaN();
      Complex complex9 = complex3.add(complex5);
      Complex complex10 = complex9.NaN.add((-1702.42682));
      complex8.getField();
      complex3.ONE.readResolve();
      Complex complex11 = complex3.NaN.conjugate();
      Complex complex12 = complex2.ONE.subtract(2.0);
      Complex complex13 = complex12.I.tanh();
      Complex complex14 = complex5.sqrt();
      complex14.NaN.divide(4994.67223);
      Complex complex15 = complex5.conjugate();
      complex3.asin();
      complex10.atan();
      complex15.isNaN();
      complex11.multiply((-1.452507231312146E-49));
      complex13.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex1.add((-2325.463289));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.INF.asin();
      complex5.I.subtract(0.0);
      complex4.NaN.nthRoot(1);
      complex0.divide(0.0);
      Complex complex6 = complex0.pow(complex5);
      complex3.isNaN();
      complex2.atan();
      Complex complex7 = complex4.divide(complex6);
      complex7.getField();
      complex3.pow((-1770.0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(1164.7681, 1164.7681);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.divide(1164.7681);
      Complex complex3 = complex2.I.multiply(1013.707);
      complex3.NaN.nthRoot(129);
      Complex complex4 = Complex.valueOf(0.0, 20.0);
      complex0.hashCode();
      Complex complex5 = complex0.negate();
      complex5.INF.sqrt1z();
      complex0.I.getArgument();
      Complex complex6 = complex5.multiply(17);
      complex1.equals("m]}sFC?");
      complex6.NaN.toString();
      Complex complex7 = complex1.divide(complex5);
      complex0.ONE.multiply(complex1);
      complex7.ONE.nthRoot(1);
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex8.ONE.multiply(0.0);
      complex7.nthRoot(129);
      complex9.ONE.getArgument();
      Complex complex10 = complex0.sinh();
      complex10.I.sin();
      complex6.getField();
      complex4.multiply(17);
      complex7.isNaN();
      complex8.multiply(129);
      complex7.add(complex4);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1585.24743), 0.0);
      complex0.ONE.abs();
      Complex complex1 = complex0.INF.subtract((-1585.24743));
      complex1.I.exp();
      Complex complex2 = complex1.ZERO.acos();
      complex0.sinh();
      complex2.I.hashCode();
      Complex complex3 = complex1.I.sqrt();
      complex3.getField();
      complex0.getReal();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.tan();
      complex5.isNaN();
      complex1.equals(complex5);
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.I.createComplex(2.146925464473481E-8, 0.0);
      complex7.NaN.negate();
      complex0.getArgument();
      complex6.nthRoot(713);
      Complex complex8 = complex3.sqrt();
      complex3.multiply(713);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-317.04565), 1.6016578405624026E-8);
      Complex complex1 = complex0.I.log();
      complex1.INF.hashCode();
      complex1.nthRoot(1449);
      Complex complex2 = complex0.INF.log();
      complex2.ZERO.conjugate();
      Complex complex3 = complex0.ONE.divide((-317.04565));
      complex3.divide(complex0);
      Complex.valueOf(7.699097067385825E-248, (-164.0));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex5.ONE.createComplex(0.0, 1.6016578405624026E-8);
      complex7.INF.getArgument();
      complex4.readResolve();
      complex4.subtract(complex6);
      complex7.subtract(0.0);
      Complex complex8 = complex1.atan();
      complex8.multiply(37);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.ZERO.pow((-187.25786115815));
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.INF.divide(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.log();
      complex6.asin();
      complex3.pow(complex1);
      complex1.isNaN();
      complex2.readResolve();
      complex3.add(459.58906309925);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 3568.3691871288;
//      try { 
        complex0.INF.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex1.I.negate();
      complex4.INF.sinh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.sin();
      complex6.INF.sin();
      complex6.cosh();
      complex3.reciprocal();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.INF.divide(complex0);
      complex1.INF.tan();
      Complex.valueOf(4.820873399634487E-8);
      complex0.ZERO.add(complex1);
      Complex complex4 = complex0.atan();
      complex4.ONE.atan();
      complex1.ZERO.multiply(0);
      complex1.INF.atan();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex3.add(0.0);
      complex7.NaN.getArgument();
      complex7.ONE.nthRoot(1453);
      Complex complex8 = complex2.log();
      complex6.multiply((-1698.186));
      Complex complex9 = complex8.divide(complex1);
      Complex.valueOf(6.283185307179586, (-96.1));
//      try { 
        complex9.ONE.nthRoot((-1919));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,919
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1315.52, 0.0);
      complex0.getField();
      Complex complex1 = complex0.add(1315.52);
      Complex complex2 = complex0.INF.multiply(1315.52);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex3.NaN.add(complex2);
      Complex complex6 = complex1.pow(complex0);
      complex1.NaN.multiply(0.0);
      Complex complex7 = complex6.pow(1315.52);
      Complex complex8 = new Complex(0.0, 0.0);
      Complex complex9 = complex7.pow(complex8);
      complex3.isNaN();
      complex5.sqrt();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex10.NaN.add(0.0);
      complex11.I.tan();
      Complex complex12 = Complex.valueOf(2.0862243734177337E-306, 2.0862243734177337E-306);
      complex12.NaN.tanh();
      complex5.readResolve();
      complex4.pow(864.0384826857754);
      Complex complex13 = complex0.exp();
      complex13.INF.getArgument();
      complex9.sqrt();
      complex12.add((-3090.23476344));
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-1.6167825196198978E160));
      Complex complex1 = new Complex((-1.6167825196198978E160), 2271.448082244);
      Complex complex2 = complex0.ONE.divide(complex1);
//      try { 
        complex2.INF.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.subtract((-1.0));
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.NaN.subtract((-3708.431354502291));
      complex4.I.acos();
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = complex5.sin();
      complex6.I.readResolve();
      Complex complex7 = complex0.negate();
      complex7.cosh();
      Complex complex8 = complex1.divide(complex7);
      Complex.valueOf((-3708.431354502291), (-1.0));
      Complex complex9 = complex8.ONE.reciprocal();
      complex8.sqrt();
      complex9.sinh();
      complex5.createComplex(1084.373953254, (-234.85));
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.tanh();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.cos();
      complex4.ZERO.negate();
      complex4.createComplex(20.0, 20.0);
      complex2.exp();
      complex1.pow(Double.NaN);
      complex0.multiply(0);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(0.0, 0.0);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(1.1293346659459732E69);
      complex1.INF.hashCode();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.createComplex(1.1293346659459732E69, (-1031.1372770145));
      complex1.isNaN();
      complex2.getReal();
      complex4.divide(complex1);
      Complex complex5 = complex1.pow(complex0);
      complex3.getArgument();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.multiply(complex4);
      Complex complex8 = complex6.ZERO.pow(complex0);
      Complex.valueOf((-1413.49), 5.593494835247651E-9);
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.NaN.negate();
      Complex complex11 = complex2.divide(complex3);
      complex5.getReal();
      complex0.getReal();
      complex11.toString();
      complex2.log();
      complex4.cos();
      complex8.subtract(complex7);
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-1626.5177773));
      Complex complex1 = complex0.I.reciprocal();
      complex0.equals("*-jd#BTvHa");
      complex1.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex2.ZERO.exp();
      complex3.INF.pow((-1626.5177773));
      complex2.abs();
      complex4.abs();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      complex1.INF.divide(20.0);
      complex1.conjugate();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.NaN.exp();
      complex0.abs();
      complex0.hashCode();
      complex0.NaN.getArgument();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.divide(complex4);
      complex5.NaN.createComplex(Double.NaN, 20.0);
      complex4.subtract(Double.NaN);
      complex1.isInfinite();
      Complex complex6 = complex4.multiply(216);
      complex6.I.hashCode();
      complex0.isInfinite();
      Complex complex7 = complex6.tanh();
      complex7.INF.cos();
      Complex complex8 = complex0.sqrt();
      complex8.hashCode();
      Complex complex9 = Complex.ONE;
      complex4.add(complex9);
      complex6.abs();
      complex4.cosh();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.multiply(complex0);
      complex4.NaN.subtract(complex3);
      complex0.getArgument();
      complex0.readResolve();
      Complex complex5 = complex1.INF.tanh();
//      try { 
        complex5.ONE.nthRoot((-1254));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,254
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-559.5317291));
      Complex.valueOf(0.0);
      Complex complex1 = complex0.cos();
      complex0.ONE.reciprocal();
      Complex complex2 = complex1.ONE.createComplex((-3044.94492152), (-3044.94492152));
      complex1.getField();
      complex2.ONE.sqrt1z();
      Complex complex3 = complex1.reciprocal();
      complex3.NaN.getArgument();
      complex2.tanh();
      Complex complex4 = complex1.sinh();
      complex3.INF.atan();
      complex4.tan();
      complex3.reciprocal();
      complex1.readResolve();
      Complex complex5 = complex4.conjugate();
      complex4.acos();
      complex4.abs();
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2284.6793706493227, 2284.6793706493227);
      complex0.isNaN();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.reciprocal();
      complex2.INF.toString();
      complex0.ZERO.negate();
      complex1.I.sqrt();
      complex0.ZERO.getArgument();
      Complex complex3 = complex2.ONE.pow(2416.6362682);
      complex0.pow(complex1);
      complex3.NaN.abs();
      Complex complex4 = complex0.negate();
      complex4.INF.subtract(20.0);
      Complex complex5 = complex0.subtract(complex4);
      complex3.hashCode();
      Complex complex6 = complex3.pow(2416.6362682);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ONE.negate();
      complex1.sin();
      complex3.readResolve();
      complex5.reciprocal();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.ZERO.asin();
      complex10.ZERO.divide(20.0);
      complex4.add((-2656.25209453));
      complex4.INF.divide(938.771326);
      complex3.hashCode();
      Complex.valueOf(20.0);
      complex9.negate();
      complex4.cosh();
      complex4.cos();
      complex8.createComplex(8.593554223894477E135, (-483.13815569));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1293.1483));
      Complex complex1 = Complex.NaN;
      int int0 = 37;
      complex0.multiply(1);
      complex1.nthRoot(37);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.add((-1293.1483));
      complex1.I.cosh();
      complex0.NaN.log();
      complex3.I.exp();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex.valueOf(1.0);
      complex1.conjugate();
      complex0.getReal();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.add(complex1);
      complex6.INF.sqrt1z();
      complex4.isNaN();
      Complex complex7 = complex5.tanh();
//      try { 
        complex7.I.nthRoot((-1953));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,953
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.readResolve();
      complex0.NaN.abs();
      complex0.ONE.sin();
      complex0.toString();
      complex0.getField();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-5163.26615019651));
      double double0 = complex0.abs();
      assertEquals(5163.2662470344385, double0, 0.01);
      
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.createComplex(1.0, 5163.2662470344385);
      Complex complex3 = complex1.NaN.multiply((-5163.26615019651));
      complex3.I.hashCode();
      Complex complex4 = complex0.multiply((-2126));
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex4.I.conjugate();
      complex4.conjugate();
      Complex complex8 = complex5.multiply(complex1);
      Complex complex9 = complex5.divide((-5163.26615019651));
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertEquals((-1.9367585766655486E-4), complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex3.sin();
      Complex complex11 = complex0.multiply(complex2);
      Complex.valueOf((-166.172369), 0.0);
      double double1 = complex11.INF.abs();
      assertEquals(2.665931883776509E7, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(9.683792814030312E-5, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex10.pow(complex7);
      List<Complex> list0 = complex1.nthRoot(1);
      assertTrue(list0.contains(complex8));
      
      Complex complex13 = complex10.pow(complex6);
      complex5.toString();
      complex1.getField();
      complex13.pow(complex10);
      Complex complex14 = complex0.atan();
      Complex complex15 = complex14.NaN.multiply(856);
      complex14.I.multiply(1);
      assertEquals((-1.936758528234211E-4), complex14.getImaginary(), 0.01);
      
      complex6.nthRoot(1);
      assertSame(complex6, complex12);
      assertSame(complex6, complex15);
      
      Complex complex16 = complex5.multiply(1);
      Complex complex17 = complex16.asin();
      assertEquals(0.8813735870195428, complex17.getImaginary(), 0.01);
      
      String string0 = complex7.toString();
      assertEquals((-2126.0), complex4.getReal(), 0.01);
      assertEquals("(0.0, -1.0)", string0);
      
      complex1.getField();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.3304404046850136E-9), 2444.7828916980557);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.createComplex((-7.3304404046850136E-9), 0.0);
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex3.INF.reciprocal();
      complex0.getField();
      Complex complex6 = complex0.pow(complex1);
      assertEquals(0.010860925085588575, complex6.getReal(), 0.01);
      
      complex0.hashCode();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex7.ZERO.tanh();
      complex8.isNaN();
      assertEquals(1.557407724654902, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      boolean boolean0 = complex4.isNaN();
      assertFalse(boolean0);
      
      Object object0 = complex0.readResolve();
      complex7.equals(object0);
      complex0.getImaginary();
      Complex complex10 = complex5.add(complex0);
      assertTrue(complex5.equals((Object)complex9));
      assertTrue(complex10.equals((Object)object0));
      assertFalse(complex5.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-849.8323677589015));
      Complex complex1 = complex0.reciprocal();
      complex0.ONE.readResolve();
      complex1.INF.getArgument();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.multiply(Double.NaN);
      Complex complex5 = (Complex)complex3.INF.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.sinh();
      complex6.INF.createComplex(0.7853981633974483, 0.0);
      Complex complex7 = complex0.ZERO.log();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      
      complex6.NaN.abs();
      assertEquals(0.001176702379394657, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex8 = complex1.NaN.asin();
      Complex complex9 = complex8.I.conjugate();
      complex1.ZERO.conjugate();
      double double0 = complex2.abs();
      assertEquals(849.8335444615524, double0, 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex10.cos();
      assertEquals(1.0000006923146443, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex9.sin();
      assertSame(complex8, complex4);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals((-1.1752011936438014), complex12.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 4528.1531448);
      Complex complex2 = complex0.INF.log();
      assertTrue(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      
      complex0.I.negate();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex0.divide(1568.9);
      Complex complex7 = complex4.subtract(4528.1531448);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals((-4527.3677466366025), complex7.getReal(), 0.01);
      assertEquals((-2.2084058732606496E-4), complex3.getImaginary(), 0.01);
      
      Complex complex8 = complex6.sin();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      complex1.subtract(complex6);
      assertFalse(complex0.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      complex1.INF.hashCode();
      Complex complex2 = complex0.ONE.subtract(1.0);
      Complex complex3 = complex2.ONE.sqrt();
      List<Complex> list0 = complex2.I.nthRoot(192);
      assertEquals(192, list0.size());
      
      complex2.ONE.readResolve();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex0.divide(6.283185307179586);
      Complex complex6 = complex0.exp();
      complex6.ONE.readResolve();
      complex4.isNaN();
      Complex complex7 = complex4.tanh();
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex4);
      
      complex5.getField();
      assertEquals(0.15915494309189535, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex8 = complex6.log();
      double double0 = complex3.getArgument();
      assertTrue(complex0.equals((Object)complex8));
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
