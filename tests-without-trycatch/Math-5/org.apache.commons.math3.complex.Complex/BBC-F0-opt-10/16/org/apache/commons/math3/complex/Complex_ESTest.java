/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:44:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      double double0 = 2967.076097757;
      Complex complex2 = new Complex(2967.076097757, Double.POSITIVE_INFINITY);
      complex2.multiply(1718);
      complex1.sqrt1z();
      complex0.tanh();
      Complex complex3 = Complex.ONE;
      complex2.pow(complex3);
      complex3.nthRoot(336);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.17595365643501282);
      Complex complex5 = Complex.valueOf((double) 1718, 1.5564115047454834);
      complex5.nthRoot(3370);
      complex4.log();
//      try { 
        complex3.nthRoot((-1959));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,959
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1623.7731199751, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply((-41.5));
      complex2.tanh();
      complex2.nthRoot(552);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-120.976693611205), (-120.976693611205));
      complex0.multiply(3881.885429526544);
      Complex complex1 = complex0.ZERO.multiply(2349);
      Complex complex2 = complex0.INF.multiply((-120.976693611205));
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex0.cosh();
      complex4.asin();
      complex2.ZERO.reciprocal();
      Complex complex5 = complex4.INF.add(complex1);
      Complex complex6 = complex1.negate();
      complex4.getField();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.ONE.acos();
      complex3.pow(complex7);
      complex6.add(complex2);
      complex3.toString();
      complex5.subtract(complex8);
      Complex.valueOf((-2244.49275), 20.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.557407724654902);
      Complex complex1 = new Complex(1.557407724654902, 1.557407724654902);
      complex0.exp();
      Complex complex2 = Complex.valueOf(1.557407724654902, (-20.0));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.atan();
      complex4.cos();
      Complex complex5 = Complex.NaN;
      complex3.toString();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1496.2), Double.NaN);
      Complex complex1 = complex0.NaN.subtract((-1496.2));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.subtract(complex0);
      complex3.multiply((-791));
      complex0.tan();
      complex0.abs();
      Complex complex4 = complex3.reciprocal();
      complex3.ONE.readResolve();
      Complex complex5 = complex4.INF.subtract((-1496.2));
      Complex complex6 = Complex.valueOf((-1113.9959672057507));
      complex6.NaN.atan();
      complex5.ONE.divide(complex6);
      complex4.tan();
      complex3.I.multiply((-791));
      complex4.I.asin();
      Complex complex7 = complex4.sinh();
      complex1.atan();
      complex7.exp();
      complex0.add((double) (-791));
      complex7.subtract((double) (-791));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(2.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ZERO;
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(990.8466703);
      Complex complex2 = new Complex(990.8466703, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      complex3.atan();
      complex1.sqrt();
      complex2.getArgument();
      Complex complex4 = complex3.asin();
      complex0.cos();
      Complex complex5 = Complex.NaN;
      complex4.atan();
      complex1.getField();
      complex3.sqrt();
      complex1.toString();
      complex2.tan();
      Complex complex6 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-6486.726));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.I.conjugate();
      double double0 = (-26.8);
      Complex complex4 = complex3.I.createComplex((-2.311793113282453), (-26.8));
      complex4.NaN.abs();
      complex3.NaN.sqrt1z();
      complex3.ONE.divide((-6486.726));
      complex0.INF.readResolve();
      Complex complex5 = complex1.atan();
      complex5.getImaginary();
      double double1 = (-782.2862);
      Complex complex6 = Complex.valueOf((-782.2862));
      Complex complex7 = complex2.divide((-0.4221974766908565));
      complex7.INF.getArgument();
      complex1.NaN.add(5.575538653428039E-8);
      complex5.pow(complex2);
      Complex complex8 = Complex.valueOf((-0.4221974766908565), 0.5421652793884277);
      Complex complex9 = complex6.add(complex8);
      complex9.INF.cosh();
      complex2.I.multiply(0.5421652793884277);
      Complex complex10 = complex6.sinh();
//      try { 
        complex10.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt();
      complex0.getArgument();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.NaN;
      complex3.getField();
      complex2.sqrt();
      Complex complex6 = Complex.ZERO;
      complex6.toString();
      complex4.tan();
      complex6.toString();
      complex6.cosh();
      Complex complex7 = Complex.ZERO;
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex1.INF.toString();
      Complex complex2 = Complex.ONE;
      // Undeclared exception!
      complex2.nthRoot(1852628642);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      complex0.add((-120.976693611205));
      Complex complex1 = complex0.acos();
      complex0.exp();
      complex1.tanh();
      Complex complex2 = complex0.atan();
      complex2.sqrt();
      complex2.getArgument();
      complex2.asin();
      complex0.cos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf(20.0);
      complex4.reciprocal();
//      try { 
        complex4.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      complex0.add((-120.976693611205));
      Complex complex1 = complex0.acos();
      complex0.exp();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.atan();
      complex3.sqrt();
      complex3.getArgument();
      complex3.asin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex((-0.005126733508785087));
      complex4.isNaN();
      complex4.atan();
      complex3.log();
      complex2.log();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.5));
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-0.5), 14236.360397099366);
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.add(complex1);
      complex2.I.sqrt1z();
      Complex.valueOf((-3170.0), 3735.7);
      complex2.INF.nthRoot(492);
      complex2.INF.cosh();
      Complex complex3 = complex1.multiply((-2776.207971494301));
      complex1.createComplex(14236.360397099366, (-2776.207971494301));
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-729.980139), (-729.980139));
      complex0.hashCode();
      complex0.cos();
      Complex complex1 = complex0.reciprocal();
      complex0.getField();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1978.5464), (-1978.5464));
      complex0.nthRoot(7);
      Complex complex1 = complex0.ZERO.tan();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.ZERO.log();
      complex2.ONE.hashCode();
      Complex complex4 = complex0.sin();
      complex4.I.divide((double) 7);
      Complex complex5 = complex2.conjugate();
      complex0.abs();
      complex3.INF.tanh();
      Complex complex6 = Complex.valueOf(64.65388167093985);
      Complex complex7 = complex4.tanh();
      complex7.NaN.tanh();
      complex7.ONE.subtract(complex3);
      Complex complex8 = complex0.atan();
      complex8.INF.abs();
      Complex complex9 = complex6.sqrt();
      complex9.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.pow((-1.0088898215431471E52));
      complex10.toString();
      complex10.reciprocal();
      complex5.getField();
      complex7.reciprocal();
      complex6.cos();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      Complex complex1 = complex0.add((-120.976693611205));
      Complex complex2 = complex0.acos();
      complex1.subtract((-120.976693611205));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.sqrt();
      complex5.getArgument();
      Complex complex7 = Complex.valueOf((-120.976693611205));
      complex0.cos();
      Complex complex8 = Complex.NaN;
      complex8.getField();
      complex8.toString();
      complex6.tan();
      complex5.toString();
      complex4.add((-120.976693611205));
      complex3.cosh();
      complex7.tan();
      complex7.getReal();
      Complex.valueOf(20.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.ZERO.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.toString();
      complex1.NaN.add(complex0);
      Complex complex2 = complex1.add(1.0);
      complex2.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.subtract(complex3);
      complex4.I.createComplex(Double.NaN, Double.NaN);
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(1.0);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.toString();
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex(1, 1);
      complex3.nthRoot(1);
      complex1.subtract((double) 1);
      Complex complex4 = Complex.valueOf(948.0, (-1856.1032));
      complex4.exp();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.tanh();
      complex3.atan();
      Complex complex7 = Complex.valueOf((double) 1);
      complex7.sqrt();
      Complex complex8 = Complex.NaN;
      complex8.getArgument();
      Complex complex9 = new Complex(1);
      complex9.asin();
      Complex complex10 = Complex.ONE;
      complex10.cos();
      Complex complex11 = Complex.NaN;
      complex9.getField();
      complex9.toString();
      complex10.tan();
      Complex complex12 = Complex.INF;
      complex12.toString();
      Complex complex13 = complex6.add(948.0);
      complex2.cosh();
      complex8.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-729.980139), (-729.980139));
      List<Complex> list0 = complex0.nthRoot(1);
      complex0.hashCode();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      complex2.INF.reciprocal();
      Complex complex3 = complex2.sin();
      complex3.equals(list0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.toString();
      Complex complex2 = complex1.add(1.0);
      complex2.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.sin();
      Complex complex3 = Complex.valueOf(6.610611940107793E-8);
      complex3.tanh();
      Complex complex4 = Complex.valueOf((-3591.410253953), (-2660.126433));
      complex4.reciprocal();
      Complex complex5 = complex4.atan();
      complex2.multiply(complex5);
      complex4.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(368.345876);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.sqrt();
      complex5.getArgument();
      Complex complex6 = complex2.asin();
      complex3.cos();
      Complex complex7 = Complex.NaN;
      complex6.getField();
      complex1.toString();
      complex7.tan();
      complex0.toString();
      complex4.add(368.345876);
      complex7.cosh();
      Complex complex8 = Complex.ONE;
//      try { 
        complex8.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.toString();
      Complex complex2 = complex1.add(1.0);
      complex2.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      complex0.subtract(complex3);
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      complex4.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(1.0);
      complex5.sqrt1z();
      Complex complex6 = Complex.valueOf(1.0, 0.9999977901743976);
      complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.toString();
      Complex complex2 = complex1.add(1.0);
      complex2.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.sin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.asin();
      complex2.cos();
      Complex complex5 = Complex.NaN;
      complex4.getField();
      complex2.toString();
      complex1.tan();
      Complex complex6 = new Complex(Double.NaN, 5.9604644775390625E-8);
      complex6.toString();
      complex3.add(1537.6304);
      complex2.cosh();
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.toString();
      Complex complex2 = complex1.add(1.0);
      complex2.getArgument();
      Complex.valueOf(Double.NaN);
      Complex complex3 = complex0.sin();
      complex1.asin();
      complex2.cos();
      Complex complex4 = Complex.NaN;
      complex4.getField();
      complex2.toString();
      complex3.tan();
      complex0.toString();
      complex3.add(38.47841760435743);
      complex1.cosh();
      Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex0.pow(complex1);
      complex0.toString();
      Complex complex2 = complex1.tanh();
      complex2.reciprocal();
      Complex complex3 = complex0.multiply(2054114793);
      complex3.sqrt();
      complex2.acos();
      Complex.valueOf((-1572.90117043));
      complex1.createComplex((-20.0), 2.7791221546900733);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2157.445, 1179.0721);
      Complex complex1 = complex0.sqrt();
      complex1.ONE.getField();
      Complex complex2 = complex1.ZERO.sinh();
      complex1.NaN.multiply(complex0);
      complex0.getField();
      Complex complex3 = Complex.valueOf((-2.0937429891059164E185), 1179.0721);
      complex3.acos();
      complex3.NaN.multiply(2.432550290565648E-8);
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.I.createComplex(20.0, 1559.9);
      complex5.I.divide(45.6393419);
      Complex complex8 = Complex.valueOf(2157.445, 1179.0721);
      complex8.toString();
      complex6.subtract(complex2);
      Complex complex9 = complex4.multiply(2.67091703414917);
      complex9.conjugate();
      complex2.sinh();
      Complex complex10 = complex5.tan();
      complex10.NaN.abs();
      Complex complex11 = Complex.valueOf((-1862.1464003246), (-1862.1464003246));
      Complex complex12 = complex2.multiply(complex11);
      complex6.createComplex((-1862.1464003246), 1179.0721);
      complex7.multiply((-974));
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1736.8), (-1736.8));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-1736.8), 1206.8);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex1.ZERO.cos();
      complex1.INF.sinh();
      complex1.tanh();
      Complex complex5 = complex1.divide((-1736.8));
      Complex complex6 = complex5.pow(complex2);
      complex2.NaN.add(1206.8);
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex7.subtract(complex0);
      Complex complex11 = complex9.divide(1206.8);
      complex11.ZERO.subtract(1234.997251535);
      Complex complex12 = complex6.add(1206.8);
      complex12.I.readResolve();
      Complex complex13 = complex2.INF.sin();
      Complex complex14 = complex12.ONE.subtract(complex3);
      complex14.ONE.sin();
      complex12.cosh();
      complex10.abs();
      Complex.valueOf((-1736.8));
      complex12.equals(complex6);
      Complex complex15 = Complex.valueOf(1234.997251535, 1.0238355945704727);
      complex7.cosh();
      complex13.divide(1206.8);
      complex4.multiply(complex15);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      Complex complex2 = complex1.add(4.521448560089285E190);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.negate();
      complex0.acos();
      complex4.nthRoot(1);
      Complex complex5 = Complex.valueOf((-49.51256626961), (-1876.0));
      Complex complex6 = complex5.subtract(Double.NaN);
      Complex complex7 = complex2.exp();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.tanh();
      Complex complex11 = Complex.ZERO;
      complex1.atan();
      complex8.sqrt();
      Complex complex12 = Complex.valueOf(4.521448560089285E190, Double.NaN);
      complex12.getArgument();
      Complex complex13 = complex7.cos();
      complex13.asin();
      complex9.cos();
      Complex complex14 = Complex.NaN;
      complex10.getField();
      complex6.toString();
      complex8.tan();
      complex0.toString();
      complex5.add(Double.NaN);
      complex0.cosh();
      complex4.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-28.1));
      Complex complex1 = Complex.NaN;
      complex1.toString();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      complex3.cos();
      Complex complex4 = Complex.ONE;
      complex4.divide(complex1);
      complex3.abs();
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.valueOf((-28.1), (-1.0));
      Object object0 = complex0.readResolve();
      complex2.tanh();
      complex2.sin();
      Complex complex7 = new Complex(28.284271247461902);
      complex7.equals(object0);
      complex5.tanh();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex0.pow(complex1);
      complex0.toString();
      Complex complex2 = complex1.tanh();
      complex2.reciprocal();
      Complex complex3 = complex0.multiply(2054114793);
      complex3.sqrt();
      complex2.acos();
      Complex.valueOf((-1572.90117043));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow((-1165.4272478494086));
      Complex complex2 = Complex.valueOf((-1165.4272478494086), (-632.4647728716));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.tan();
      complex2.exp();
      Complex complex5 = complex1.createComplex(0.0, (-160.67587587519));
      Complex complex6 = new Complex(0.0, (-160.67587587519));
      Complex complex7 = complex4.tan();
      complex3.atan();
      complex5.getField();
//      try { 
        complex7.nthRoot((-1068));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,068
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-632.6500229057349), 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.divide((-632.6500229057349));
      complex0.multiply(complex1);
      complex2.divide(6.283185307179586);
      complex2.isInfinite();
      complex1.add((-131.0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex0.pow(complex1);
      complex1.multiply(complex0);
      complex1.getField();
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-912.5606880885666));
      Complex complex1 = complex0.I.reciprocal();
      complex0.multiply(195);
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.atan();
      complex2.multiply(complex3);
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.toString();
      Complex complex2 = complex1.add(1.0);
      complex2.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.sin();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.tan();
      Complex complex4 = Complex.ONE;
      complex0.subtract(complex4);
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(1.0);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.3805527514118243));
      Complex complex1 = complex0.sin();
      complex1.toString();
      complex1.tanh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-912.5606880885666), (-912.5606880885666));
      complex0.isInfinite();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      Complex complex1 = complex0.add((-120.976693611205));
      complex1.NaN.negate();
      Complex complex2 = complex0.acos();
      complex1.nthRoot(1);
      complex1.subtract((-120.976693611205));
      complex0.exp();
      complex2.tanh();
      Complex complex3 = complex1.createComplex(783.237956938, 20.0);
      Complex.valueOf(20.0, (double) 1);
      complex1.readResolve();
      complex0.tanh();
      complex3.sin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.INF;
      Complex.valueOf((-1002.0999464784188));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.pow(888.62703);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.I.exp();
      complex4.ONE.getField();
      complex0.INF.add(complex2);
      Complex complex7 = complex3.INF.sqrt1z();
      Complex complex8 = complex7.I.createComplex((-1.0), 888.62703);
      Complex complex9 = complex8.INF.sqrt();
      complex1.getImaginary();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex0.acos();
      complex11.NaN.pow(1.0);
      complex0.toString();
      complex3.abs();
      complex10.ONE.tan();
      complex10.INF.subtract(complex7);
      complex1.multiply(complex10);
      Complex complex12 = complex10.add((-1236.0));
      complex11.add(complex4);
      Complex complex13 = complex7.ONE.tan();
      complex0.negate();
      complex8.conjugate();
      complex9.divide(0.7615941559557649);
      complex13.atan();
      complex12.add(888.62703);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-632.4647728716), 0.0);
      Complex complex1 = new Complex(0.0);
      complex0.abs();
      Complex complex2 = complex0.tan();
      complex1.NaN.createComplex(632.4647728716, 2.0);
      Complex complex3 = Complex.valueOf(2.0, 2.0);
      Complex complex4 = (Complex)complex2.readResolve();
      complex3.tanh();
      Complex complex5 = complex0.sin();
      complex4.divide(complex5);
      Complex.valueOf((-1460.58136258));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7660059778220905E-220);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(complex0);
      complex2.INF.conjugate();
      complex1.multiply(complex1);
      Complex complex3 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      Complex complex1 = complex0.add((-120.976693611205));
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.acos();
      complex1.nthRoot(1);
      Complex complex4 = complex1.subtract((-120.976693611205));
      complex0.exp();
      complex2.toString();
      Complex complex5 = complex2.multiply((-2042521997));
      Complex complex6 = complex5.sin();
      complex4.toString();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex5.tanh();
      complex8.atan();
      Complex complex9 = Complex.INF;
      complex9.NaN.acos();
      Complex complex10 = complex9.sqrt();
      complex10.getArgument();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.cos();
      complex1.asin();
      Complex complex13 = Complex.valueOf(3192.52603);
      Complex complex14 = complex3.cos();
      complex8.getField();
      complex14.toString();
      complex14.tan();
      complex13.toString();
      Complex complex15 = Complex.ZERO;
      complex12.cosh();
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-120.976693611205));
      complex1.NaN.negate();
      Complex complex2 = complex0.acos();
      complex1.nthRoot(1);
      complex1.subtract((-120.976693611205));
      complex0.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.sqrt();
      complex4.getArgument();
      Complex complex6 = complex0.cos();
      complex4.asin();
      complex0.cos();
      Complex complex7 = Complex.NaN;
      complex7.getField();
      complex7.toString();
      Complex complex8 = complex5.tan();
      complex8.toString();
      complex3.add((-120.976693611205));
      complex6.cosh();
      Complex complex9 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.ZERO.toString();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex3.NaN.divide(complex1);
      complex0.equals(complex1);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.atan();
      complex5.sqrt();
      complex3.getArgument();
      complex1.cos();
      Complex complex7 = complex2.asin();
      complex1.cos();
      Complex complex8 = Complex.NaN;
      complex0.getField();
      complex5.toString();
      complex4.tan();
      complex6.toString();
      complex5.add(-0.0);
      complex7.cosh();
      complex0.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-912.5606880885666));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(707);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.cosh();
      complex4.getArgument();
      complex1.pow((-912.5606880885666));
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      Complex complex1 = complex0.add((-120.976693611205));
      complex1.NaN.negate();
      Complex complex2 = complex0.acos();
      complex1.nthRoot(1);
      complex1.subtract((-120.976693611205));
      complex0.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.atan();
      complex4.sqrt();
      complex4.getArgument();
      complex0.cos();
      complex4.asin();
      complex0.cos();
      Complex complex5 = Complex.NaN;
      complex4.tanh();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-912.5606880885666));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.multiply(195);
      complex0.I.acos();
      Complex complex3 = complex0.cosh();
      complex3.INF.getArgument();
      Complex complex4 = complex1.pow(3.599615946028287E-186);
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-912.5606880885666));
      complex0.I.reciprocal();
      Complex complex1 = complex0.multiply(195);
      complex1.I.pow((double) 195);
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.cosh();
      complex3.INF.getArgument();
      complex3.pow(6.283185307179586);
      Complex complex4 = Complex.ONE;
      complex4.INF.cos();
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.abs();
      Complex complex3 = new Complex(1.0, (-1255.1736960788305));
      complex3.tan();
      Complex complex4 = Complex.valueOf((-1255.1736960788305), (-1499.44));
      complex3.readResolve();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.sin();
      complex1.equals(complex6);
      complex4.toString();
      Complex complex7 = Complex.I;
      complex7.tanh();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      Complex complex1 = complex0.add((-120.976693611205));
      complex1.NaN.negate();
      Complex complex2 = complex0.acos();
      complex1.nthRoot(1);
      complex1.subtract((-120.976693611205));
      complex0.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.sqrt();
      complex4.getArgument();
      Complex complex6 = complex0.cos();
      complex4.asin();
      complex0.cos();
      Complex complex7 = Complex.NaN;
      complex7.getField();
      complex7.toString();
      Complex complex8 = complex5.tan();
      complex8.toString();
      Complex complex9 = complex3.add((-120.976693611205));
      complex6.cosh();
      complex6.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.toString();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.ONE.cos();
      complex0.toString();
      complex3.getReal();
      complex0.getField();
      Complex complex4 = complex0.divide(0.5403023058681398);
      complex2.readResolve();
      complex4.getArgument();
      Complex complex5 = complex0.pow(1429.931953873773);
      complex5.sqrt1z();
//      try { 
        complex1.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.sinh();
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.I.multiply(3.931710344901743E-9);
      Complex complex3 = complex0.pow(338.13935);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex2.add(complex4);
      complex3.hashCode();
      Complex complex6 = complex4.reciprocal();
      complex5.multiply(complex4);
      Complex complex7 = complex6.log();
      complex7.ONE.subtract((-1691.87));
      complex7.multiply(0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 1.0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.multiply(37);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.cosh();
      Complex complex8 = Complex.ONE;
      complex8.toString();
      complex0.getReal();
      complex5.getField();
      Complex complex9 = complex5.divide(1.0);
      complex2.readResolve();
      complex6.getArgument();
      Complex complex10 = complex7.pow((-145.838));
      Complex complex11 = complex8.sqrt1z();
      complex7.add(complex3);
      complex10.hashCode();
      complex4.reciprocal();
      complex9.multiply(complex11);
      complex0.log();
      complex1.multiply(37);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ZERO.cosh();
      complex2.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.pow(0.0);
      complex2.sqrt1z();
      Complex complex6 = complex0.add(complex5);
      complex6.hashCode();
      complex5.reciprocal();
      complex0.multiply(complex5);
      Complex complex7 = complex1.log();
      complex7.INF.tanh();
      complex2.multiply(667);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-912.5606880885666));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf(285.193556661178);
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf((-6298.038583701));
      Complex complex5 = complex2.tan();
      complex4.subtract(complex3);
      Complex complex6 = complex5.divide(7.84069876400596E-139);
      complex0.sqrt1z();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      Complex complex1 = complex0.add((-120.976693611205));
      complex1.NaN.negate();
      Complex complex2 = complex0.acos();
      complex1.nthRoot(1);
      Complex complex3 = complex1.subtract((-120.976693611205));
      Complex complex4 = complex3.ONE.multiply((-2845.835565609));
      Complex complex5 = complex2.divide(20.0);
      Complex complex6 = complex5.ZERO.multiply(complex4);
      complex6.multiply((-177949.3341772705));
      complex0.toString();
      Complex complex7 = complex3.tan();
      complex7.ZERO.multiply((-2845.835565609));
      complex5.toString();
      complex1.add((-1.0349502873728E7));
      complex5.cosh();
      complex5.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply(2.0);
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.createComplex(2.0, 0.0);
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex0.ONE.subtract(complex3);
      Complex complex6 = Complex.valueOf((-1207.5026016018653));
      complex0.ONE.createComplex(2.0, 0.0);
      Complex complex7 = complex3.NaN.sin();
      complex0.getImaginary();
      Complex complex8 = complex4.sinh();
      complex8.ZERO.createComplex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex9 = complex3.multiply(complex5);
      complex9.INF.add(Double.POSITIVE_INFINITY);
      complex3.getImaginary();
      Complex complex10 = complex5.cos();
      complex10.multiply(17);
      complex10.I.sin();
      complex6.multiply(1770);
      complex4.isInfinite();
      complex6.cos();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1458.54);
      Complex complex1 = complex0.acos();
      complex0.NaN.readResolve();
      complex1.getField();
      Complex complex2 = complex1.ONE.multiply(0.0);
      complex2.NaN.reciprocal();
      Complex complex3 = complex1.negate();
      complex3.NaN.cos();
      Complex.valueOf(0.0, 0.0);
      complex0.INF.acos();
      Complex complex4 = Complex.valueOf(1458.54, 1458.54);
      Complex complex5 = Complex.valueOf(1458.54, 951.34);
      Complex complex6 = complex1.negate();
      complex6.NaN.cosh();
      complex5.nthRoot(1);
      Complex complex7 = complex0.log();
      complex4.hashCode();
      Complex complex8 = complex5.atan();
      complex0.createComplex((-20.0), 1458.54);
      complex0.toString();
      complex8.multiply(1458.54);
      Complex complex9 = complex7.asin();
      complex9.NaN.multiply(1);
      complex9.atan();
      complex3.getArgument();
      Complex.valueOf((-20.0), 0.0);
      complex0.multiply((-1130.271439004));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3500.662736399, 3500.662736399);
      complex0.hashCode();
      Complex complex1 = new Complex(0.12211392819881439, 1324.6127634);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.multiply(60);
      Complex complex4 = complex3.multiply(Double.NaN);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex2.reciprocal();
      complex4.NaN.multiply((double) 60);
      complex4.ONE.readResolve();
      complex0.getReal();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.INF.asin();
      complex8.ONE.sin();
      Complex complex9 = complex0.asin();
      complex9.ONE.subtract(complex8);
      Complex complex10 = complex5.multiply(60);
      complex10.acos();
      Complex complex11 = complex7.pow(0.2145126760005951);
      Complex complex12 = complex11.cosh();
      complex12.I.sin();
      Complex complex13 = complex7.subtract(complex4);
      complex13.ZERO.toString();
      complex6.getField();
      complex0.nthRoot(797);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(910.1);
      Complex complex1 = complex0.INF.createComplex(910.1, 910.1);
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.sinh();
      complex3.ZERO.getArgument();
      complex2.I.subtract(complex3);
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = Complex.ZERO;
      complex6.ONE.pow(complex7);
      Complex complex8 = Complex.valueOf(0.0);
      complex2.I.getArgument();
      complex2.ZERO.toString();
      Complex complex9 = complex0.ZERO.sinh();
      complex9.INF.atan();
      Complex complex10 = complex0.cosh();
      complex9.INF.exp();
      complex0.abs();
      Complex.valueOf(0.0);
      complex9.exp();
      complex10.getImaginary();
      Complex complex11 = Complex.valueOf(910.1, (-1546.5100434586907));
      complex8.createComplex(910.1, 0.0);
      complex1.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.toString();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.ONE.cos();
      complex3.NaN.divide(complex1);
      complex0.equals(complex1);
      complex0.abs();
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.readResolve();
      complex1.tanh();
      complex2.sin();
      complex4.equals(complex5);
      complex5.toString();
      complex0.tanh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.log();
      Complex complex1 = Complex.valueOf(2274.808, 2274.808);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.divide(complex1);
      complex5.multiply(3738);
      Complex.valueOf(0.0, 0.0);
      complex5.INF.subtract(complex2);
      Complex complex6 = complex4.multiply(837);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex4.reciprocal();
      complex6.conjugate();
      complex7.isNaN();
      complex2.subtract((-864.5938));
      complex3.sqrt();
      Complex complex9 = complex5.sin();
      complex8.sqrt();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.sqrt();
      complex3.ONE.getField();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ONE.multiply(20.0);
      Complex complex6 = complex5.NaN.cosh();
      complex6.NaN.abs();
      Complex complex7 = complex4.ZERO.log();
      complex7.INF.pow(0.0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.ONE.sqrt();
      Complex complex9 = complex7.INF.tan();
      complex9.I.getField();
      Complex complex10 = complex3.sinh();
      complex1.ZERO.negate();
      Complex complex11 = complex0.multiply(complex1);
      complex3.equals(complex11);
      complex3.INF.asin();
      complex2.tanh();
      complex10.sqrt1z();
      Complex complex12 = complex3.asin();
      Complex complex13 = Complex.valueOf(Double.NaN);
      complex13.I.log();
      Complex complex14 = Complex.valueOf(0.0);
      complex1.equals(complex14);
      complex4.getArgument();
      complex0.subtract(complex14);
      complex2.pow(complex12);
      complex0.conjugate();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(1.8700714111328125);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.cosh();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.createComplex(0.0, 3168.047155);
      complex2.I.pow(0.0);
      Complex complex3 = complex2.I.add(0.0);
      complex3.INF.add(3127.64135649528);
      Complex complex4 = complex2.cosh();
      complex4.NaN.hashCode();
      Complex complex5 = complex1.INF.subtract(complex0);
      Complex complex6 = complex0.divide(2455.98036446);
      Complex complex7 = complex6.ZERO.subtract(complex1);
      complex7.NaN.atan();
      complex6.log();
      Complex complex8 = complex1.sqrt();
      complex5.NaN.sqrt();
      complex8.isInfinite();
      complex5.tanh();
      complex7.getField();
      complex0.hashCode();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-469.0), 0.0);
      complex0.NaN.pow(147.24484);
      complex1.nthRoot(1);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.INF;
      complex0.ONE.exp();
      complex2.NaN.multiply(complex0);
      complex2.INF.divide(complex3);
      Complex complex4 = Complex.valueOf(0.0, (-469.0));
      Complex complex5 = complex4.NaN.acos();
      complex3.sqrt();
      Complex complex6 = complex2.add((double) 1);
      complex4.asin();
      complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double double0 = (-2357.377);
      Complex complex0 = new Complex((-2357.377));
      complex0.sin();
      complex0.NaN.add((-2357.377));
      Complex.valueOf((-789.5586243682));
      int int0 = (-222);
//      try { 
        complex0.nthRoot((-222));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -222
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-912.5606880885666));
      complex0.I.reciprocal();
      Complex complex1 = complex0.multiply(195);
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.cosh();
      complex3.INF.getArgument();
      complex0.nthRoot(388);
      complex1.sqrt();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-120.976693611205));
      Complex complex1 = complex0.add((-120.976693611205));
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.acos();
      complex1.nthRoot(1);
      Complex complex4 = complex1.subtract((-120.976693611205));
      Complex complex5 = complex4.ONE.multiply((-2845.835565609));
      Complex complex6 = complex3.divide(20.0);
      complex6.ZERO.multiply(complex5);
      complex6.add(complex2);
      complex1.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1687.80165), (-1687.80165));
      complex0.INF.getArgument();
      Complex complex2 = complex0.tan();
      complex1.NaN.tan();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.atan();
      complex4.NaN.toString();
      complex0.getImaginary();
      complex1.readResolve();
      complex0.isNaN();
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply((-840));
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-3068.771554157), Double.NaN);
      complex0.isNaN();
      complex1.ZERO.add(complex2);
      complex0.readResolve();
      complex1.readResolve();
      complex1.isNaN();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex6.INF.add((double) (-840));
      complex7.reciprocal();
      Complex complex8 = complex4.ONE.asin();
      complex8.I.pow((-3068.771554157));
      Complex complex9 = Complex.NaN;
      Complex.valueOf(Double.NaN);
      complex8.NaN.pow(complex9);
//      try { 
        complex3.nthRoot((-840));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -840
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.NaN.pow(complex1);
      Complex complex4 = complex1.NaN.sin();
      Complex complex5 = complex4.ZERO.divide(complex0);
      complex5.I.cos();
      Complex complex6 = complex0.INF.cosh();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.ONE.sinh();
      complex6.ZERO.pow(0.0);
      Complex complex9 = complex6.ZERO.add(0.0);
      Complex complex10 = complex7.add((-1099.0726493672296));
      Complex complex11 = complex6.pow(complex8);
      complex7.divide((-1099.0726493672296));
      complex4.readResolve();
      complex10.divide((-1099.0726493672296));
      Complex complex12 = complex0.sqrt1z();
      complex12.INF.reciprocal();
      complex11.atan();
      Complex complex13 = complex9.createComplex(0.0, (-196.083289146));
      complex7.subtract((-479.3568422021));
      complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply((-756));
      complex3.NaN.reciprocal();
      Complex complex4 = complex3.NaN.reciprocal();
      complex4.NaN.divide(complex3);
      complex4.ONE.reciprocal();
      Complex complex5 = complex3.sqrt();
      complex5.INF.multiply(1);
      Complex complex6 = Complex.valueOf(0.0);
      complex1.isNaN();
      Complex complex7 = complex2.sqrt();
      complex7.NaN.createComplex(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex.valueOf(0.0);
      complex3.equals(complex1);
      complex6.readResolve();
//      try { 
        complex3.nthRoot((-756));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -756
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-729.980139), (-729.980139));
      complex0.nthRoot(1);
      complex0.hashCode();
      Complex complex1 = complex0.cos();
      complex0.nthRoot(1);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.426541418071);
      Complex complex1 = new Complex(1145.426541418071);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.INF.cos();
      complex2.I.abs();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex3.ZERO.sin();
      complex3.ONE.getArgument();
      complex3.INF.getField();
      Complex complex5 = complex3.NaN.reciprocal();
      complex3.NaN.multiply(complex2);
      complex3.NaN.multiply(complex4);
      complex5.INF.pow(1.0);
      Complex complex6 = complex0.sqrt();
      complex3.I.sin();
      Complex complex7 = complex2.reciprocal();
      complex1.getArgument();
      complex0.multiply(1);
      Complex complex8 = complex6.sin();
      complex0.toString();
      Complex complex9 = complex7.cosh();
      complex9.NaN.exp();
      complex3.ONE.tanh();
      Complex complex10 = complex9.ZERO.atan();
      Complex complex11 = complex4.sqrt();
      complex11.getArgument();
      complex9.ONE.cos();
      complex0.asin();
      complex11.cos();
      complex7.getField();
      complex11.toString();
      complex2.tan();
      complex8.toString();
      complex9.add((double) 1);
      complex1.cosh();
      complex0.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.createComplex(0.0, 0.0);
      complex2.INF.pow(complex0);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex0.INF.divide(5.166420404109835E-55);
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = complex7.INF.asin();
      complex5.NaN.multiply((-20.0));
      complex8.INF.pow(complex5);
      complex7.I.pow(0.0);
      complex7.conjugate();
      complex0.tan();
      complex0.log();
      complex7.sinh();
      Complex complex9 = complex6.divide(0.0);
      complex9.NaN.tanh();
      Complex complex10 = complex1.sin();
      complex10.I.tanh();
      complex0.tan();
      complex6.divide(complex10);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-106.7), 2.0760536193847656);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.INF.asin();
      Complex complex2 = Complex.valueOf(2.0760536193847656, (-845.4075));
      complex2.I.getField();
      complex1.ONE.sin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.I.divide(complex3);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.ZERO.asin();
      Complex complex7 = complex0.ZERO.cosh();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.I.conjugate();
      complex9.ONE.getArgument();
      complex8.INF.multiply((-106.7));
      Complex complex10 = complex3.multiply(0.0);
      complex10.INF.abs();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex11.ZERO.divide(0.0);
      complex12.ZERO.multiply(complex5);
      complex0.ONE.getArgument();
      complex0.nthRoot(30);
      complex0.getField();
      complex0.isInfinite();
      complex7.isInfinite();
      complex5.nthRoot(30);
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 30);
      complex13.readResolve();
      Complex complex14 = complex12.ZERO.pow(complex8);
      complex6.exp();
      complex12.getArgument();
      complex14.isInfinite();
      Complex.valueOf(0.0, 1341.2638582534955);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
      Complex complex1 = new Complex(0.0, 0.0);
      complex1.ZERO.multiply(complex0);
      complex1.ZERO.cosh();
      Complex complex2 = complex0.add(complex1);
      complex2.INF.divide(complex1);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.NaN.pow(184.8432655);
      Complex complex4 = complex0.divide(0.0);
      Complex.valueOf((-20.0), 0.0);
      complex4.ZERO.divide(0.0);
      Complex complex5 = complex4.sqrt1z();
      complex5.divide(370.984923518541);
      complex2.pow(complex3);
      complex0.divide(2548.51703127);
      complex3.equals(complex5);
      Complex complex6 = Complex.valueOf((-20.0), 0.0);
      complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.add(0.0);
      complex1.INF.getField();
      complex0.INF.getArgument();
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-8.146080588190463E-9), (-8.146080588190463E-9));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ONE.subtract((-8.146080588190463E-9));
      complex1.ZERO.multiply((-8.146080588190463E-9));
      complex2.ZERO.divide(complex0);
      Complex complex4 = Complex.valueOf((-8.146080588190463E-9));
      complex4.add((-714.1136427));
      Complex complex5 = complex0.conjugate();
      complex5.ONE.subtract((-8.146080588190463E-9));
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.atan();
      complex5.ZERO.tan();
      Complex complex8 = Complex.valueOf((-8.146080588190463E-9));
      complex8.ONE.nthRoot(1);
      complex8.toString();
      complex8.NaN.reciprocal();
      complex3.cosh();
      Complex complex9 = complex5.subtract((-8.146080588190463E-9));
      Complex complex10 = complex9.subtract(complex5);
      Complex complex11 = complex1.cos();
      complex11.sin();
      complex3.tan();
      complex10.subtract(complex9);
      complex7.tan();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.multiply((-10));
      Complex complex4 = complex3.NaN.cosh();
      complex1.toString();
      complex1.getReal();
      complex0.ZERO.getField();
      Complex complex5 = complex4.divide((double) (-10));
      complex5.ONE.readResolve();
      complex5.ONE.getArgument();
      Complex complex6 = complex4.pow(3509.58);
      complex5.ONE.sqrt1z();
      complex6.I.add(complex5);
      complex5.hashCode();
      Complex complex7 = complex3.reciprocal();
      complex7.ZERO.multiply(complex4);
      complex0.log();
      complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.log();
      Complex complex1 = new Complex(2.3703896609663678E-8);
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex2.I.toString();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.exp();
      complex3.readResolve();
      complex2.multiply((-2097.592331));
      complex0.acos();
      Complex complex4 = complex0.divide((-1.0));
      Complex complex5 = complex0.I.multiply(334.9);
      complex5.ONE.negate();
      complex2.multiply((-1071.35));
      complex1.log();
      complex1.createComplex(2.3703896609663678E-8, (-2097.592331));
      complex2.createComplex((-1.0), 0.0);
      complex2.readResolve();
      complex4.asin();
      complex1.sqrt1z();
      Complex.valueOf((-1071.35));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(1066.7808978730259);
      Complex complex2 = complex1.INF.cosh();
      complex0.pow(1066.7808978730259);
      Complex complex3 = Complex.valueOf(1066.7808978730259, 1066.7808978730259);
      Complex complex4 = complex2.add(1066.7808978730259);
      Complex complex5 = complex4.INF.divide(complex2);
      Complex complex6 = complex1.subtract(1066.7808978730259);
      complex0.getArgument();
      Complex complex7 = complex4.subtract(complex5);
      complex7.cos();
      complex1.getArgument();
      complex7.abs();
      complex6.abs();
      complex2.add(complex0);
      complex3.subtract((-406.7458679243848));
      complex2.divide(complex6);
      complex5.cosh();
      Object object0 = new Object();
      complex5.equals(object0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3271.0500032928217));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.NaN.subtract(complex4);
      complex4.INF.hashCode();
      Complex complex6 = complex1.divide((-3.639873824357815E-8));
      String string0 = complex6.toString();
      assertEquals("(8.986712620100052E10, -0.0)", string0);
      
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.NaN.multiply(complex4);
      complex8.ONE.abs();
      complex2.getField();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex9.I.pow(complex3);
      Complex complex11 = complex2.negate();
      Complex complex12 = complex0.INF.exp();
      Complex complex13 = complex12.I.add(complex2);
      assertEquals((-3271.0500032928217), complex13.getReal(), 0.01);
      
      Complex complex14 = complex11.tanh();
      Complex complex15 = complex0.exp();
      complex15.ZERO.getArgument();
      Complex complex16 = complex14.add((-3271.0500032928217));
      Complex complex17 = complex4.asin();
      Complex complex18 = Complex.valueOf((-471.323707591));
      complex18.INF.tan();
      Complex complex19 = Complex.valueOf(0.0, 0.0);
      complex9.sqrt();
      Complex complex20 = complex7.cosh();
      assertEquals(1.3328709367466092, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      
      Complex complex21 = complex19.acos();
      Complex complex22 = new Complex(1421.96, 0.7853981633974483);
      Complex complex23 = complex21.NaN.divide(complex22);
      assertSame(complex23, complex5);
      assertEquals(0.0, complex19.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex21.getReal(), 0.01);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex16);
      
      complex10.isNaN();
      assertEquals((-0.2072386686291178), complex10.getImaginary(), 0.01);
      
      complex7.add(complex0);
      complex15.sqrt();
      assertTrue(complex0.equals((Object)complex17));
      assertFalse(complex15.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.multiply((-3067));
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.ONE.pow(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex3.nthRoot(1);
      assertTrue(list0.contains(complex5));
      
      double double0 = complex5.getArgument();
      assertSame(complex3, complex1);
      assertNotSame(complex5, complex0);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.0);
      Complex complex1 = complex0.negate();
      assertEquals((-2.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.INF.add(0.0);
      complex1.ZERO.getArgument();
      Complex.valueOf(0.0);
      Complex complex2 = complex1.ZERO.sin();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.tan();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex2));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.I.divide(0.0);
      assertTrue(complex5.equals((Object)complex1));
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      
      Complex complex7 = complex0.sqrt1z();
      assertTrue(complex7.equals((Object)complex6));
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double double0 = (-28.1);
      Complex complex0 = Complex.valueOf((-28.1));
      double double1 = 0.0;
      complex0.I.pow(0.0);
      Complex complex1 = complex0.sinh();
      complex0.INF.tan();
      Complex complex2 = complex1.ZERO.exp();
      complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex1.ONE.sqrt1z();
      complex3.I.tan();
      Complex complex4 = complex3.atan();
      complex0.getField();
//      try { 
        complex4.ONE.nthRoot((-2263));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,263
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 20.0);
      Complex complex3 = complex2.INF.multiply(0.0);
      assertEquals(20.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      
      complex1.isNaN();
      Complex complex4 = complex1.sinh();
      complex4.hashCode();
      assertSame(complex4, complex1);
  }
}
