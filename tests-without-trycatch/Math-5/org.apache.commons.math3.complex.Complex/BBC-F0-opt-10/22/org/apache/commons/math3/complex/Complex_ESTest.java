/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:51:18 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add(9.916187343252014E175);
      Complex.valueOf(0.0);
      Complex.valueOf(5.294053246347931E-8, 1.3994258162094293E-130);
      Complex complex3 = complex2.sqrt1z();
      complex3.multiply(2057787027);
      Complex complex4 = complex2.tanh();
      complex4.readResolve();
      Complex complex5 = complex3.multiply(1576.1686);
      complex5.pow(239.98);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = Complex.I;
      complex2.sqrt1z();
      Complex complex3 = Complex.I;
      complex1.tan();
      int int0 = (-1);
//      try { 
        complex1.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex0.abs();
      Complex complex2 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex1.nthRoot(1183);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = Complex.I;
      complex0.INF.log();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = Complex.ONE;
      complex4.exp();
      complex5.multiply(1183);
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.subtract(0.0);
      complex0.abs();
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex0.pow(complex0);
      complex1.multiply((-217));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex0.getField();
      Complex complex2 = complex0.add((-352.885046360365));
      complex2.abs();
      Complex complex3 = complex2.createComplex((-2211.7649384), Double.POSITIVE_INFINITY);
      complex2.subtract(complex0);
      complex3.acos();
      complex2.conjugate();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(399.0, (-1709.0));
      Complex complex1 = complex0.createComplex((-399.0), 20.0);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.pow(399.0);
      complex3.toString();
      complex3.tanh();
      Complex complex4 = complex0.multiply((-1391));
      Complex complex5 = complex2.I.sqrt1z();
      complex5.I.reciprocal();
      complex0.nthRoot(1648);
      Complex complex6 = complex2.log();
      complex6.sqrt();
      complex6.acos();
      complex6.divide(complex2);
      Complex complex7 = complex0.NaN.multiply(complex5);
      complex0.createComplex(2380.32, (-1103.654));
      complex5.add(complex2);
      complex4.exp();
//      try { 
        complex7.nthRoot((-1391));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,391
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(24.6256617713176, 24.6256617713176);
      complex0.tan();
      Complex complex1 = complex0.sinh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.acos();
      complex1.I.createComplex((-20.0), (-1832.889));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1924.7822157882426));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = Complex.valueOf(4.734805892507655E-8, 0.0);
      complex5.getArgument();
      complex3.hashCode();
      Complex complex6 = Complex.ONE;
      complex3.tan();
      complex0.add(Double.NaN);
      complex1.multiply(1);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = (-913.4524355922);
      Complex complex0 = new Complex((-913.4524355922));
      Complex complex1 = complex0.tanh();
      double double1 = 844.0;
      complex1.I.add(844.0);
      complex1.divide((-913.4524355922));
//      try { 
        complex0.INF.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex1.getField();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = Complex.valueOf(799.7534733885, (-1.4088399542613178E-38));
      complex4.I.getArgument();
      Complex complex5 = Complex.I;
      complex5.sqrt1z();
      complex3.tanh();
      complex0.multiply((-1.4088399542613178E-38));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-92.9), (-92.9));
      complex1.subtract(complex0);
      Complex complex2 = complex0.acos();
      complex0.getArgument();
      Complex complex3 = Complex.INF;
      complex3.sqrt1z();
      Complex complex4 = Complex.I;
      complex4.ZERO.readResolve();
      complex1.tan();
      complex3.getImaginary();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.divide(Double.POSITIVE_INFINITY);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-92.9), (-92.9));
      complex1.subtract(complex0);
      Complex complex2 = complex0.acos();
      complex0.getArgument();
      Complex complex3 = Complex.INF;
      complex3.sqrt1z();
      Complex complex4 = Complex.INF;
      complex4.ZERO.readResolve();
      complex1.tan();
      complex3.getImaginary();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(1.0);
      complex5.divide(Double.POSITIVE_INFINITY);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.multiply((-2101.1187437738463));
      complex4.I.multiply(2019.0);
      complex2.equals(complex4);
      Complex complex5 = complex1.negate();
      complex2.acos();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.670771210463886E128);
      complex0.acos();
      Complex complex1 = new Complex(9.670771210463886E128, (-2412.1980710030225));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.acos();
      complex2.hashCode();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-4644.70597), (-4644.70597));
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex2.acos();
      complex0.getArgument();
      complex3.hashCode();
      Complex complex5 = Complex.ONE;
      complex4.tan();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex5.sqrt1z();
//      try { 
        complex2.INF.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1192.379435217));
      complex0.add((-645.9745872008083));
      Complex complex2 = complex1.tanh();
      complex2.getArgument();
      Complex complex3 = complex1.tan();
      complex3.nthRoot(1914);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.I;
      complex3.exp();
      Complex complex6 = Complex.NaN;
      complex6.nthRoot(7);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.I;
      complex8.divide(3069.636052721594);
      Complex complex9 = Complex.ONE;
      complex9.subtract(3069.636052721594);
      complex8.readResolve();
      complex2.equals(complex0);
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.negate();
      complex3.multiply(1022);
      complex3.ZERO.abs();
      complex1.NaN.negate();
      complex3.I.multiply((-1790));
      Complex complex4 = complex2.acos();
      complex4.NaN.atan();
      complex4.I.getArgument();
      complex0.ONE.pow(complex4);
      complex1.abs();
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.subtract(complex6);
      complex5.abs();
      complex4.pow((-1410.2769));
      complex1.sinh();
      complex3.sin();
      Complex.valueOf(1484.571, (-1735.249388668331));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3394.81);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.createComplex(3394.81, 3394.81);
      Complex complex3 = complex2.INF.sqrt();
      complex3.I.subtract(complex2);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex1.multiply((-3453));
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.tan();
      complex8.NaN.exp();
      complex5.divide(complex8);
      complex2.log();
      complex8.reciprocal();
      complex1.pow(3394.81);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.pow(440.4693981646);
      complex0.subtract(complex0);
      Complex complex2 = complex0.divide(complex0);
      complex2.sqrt();
      complex1.getArgument();
      complex2.hashCode();
      Complex complex3 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.divide((-4.8));
      Complex.valueOf(1259.2, (double) 552);
      complex0.ZERO.nthRoot(552);
      Complex complex2 = complex0.createComplex(4.3079982556221595E-8, (-1881.2172399203914));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.NaN.conjugate();
      Complex complex5 = complex3.NaN.cosh();
      complex5.ZERO.divide(complex4);
      complex5.I.sin();
      complex2.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.tanh();
      complex6.NaN.tanh();
      complex1.ONE.acos();
      complex6.NaN.tan();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex1.NaN.conjugate();
      Complex complex9 = complex7.subtract(complex1);
      Complex complex10 = complex1.sinh();
      complex9.NaN.readResolve();
      complex9.NaN.abs();
      Complex complex11 = complex1.sinh();
      complex11.I.createComplex(1259.2, 1902.9724282);
      complex2.acos();
      complex8.tanh();
      complex3.conjugate();
      complex4.cosh();
      complex2.sin();
      Complex complex12 = complex10.conjugate();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-20.0), (-1438.9279828));
      Complex complex4 = complex2.subtract(1.0577249492414076E-176);
      Complex complex5 = new Complex(1.0577249492414076E-176, (-0.9987859115235671));
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.asin();
      complex7.cos();
      Complex complex8 = complex0.conjugate();
      complex5.tanh();
      Complex complex9 = new Complex((-1438.9279828), (-1438.9279828));
      complex9.add((-237.8735666027));
      complex4.equals(complex1);
      Complex.valueOf((-2198.871), (-823.6625940358362));
      Complex complex10 = complex2.sqrt1z();
      complex10.tanh();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-1924.55994512));
      Complex complex1 = complex0.sinh();
      complex0.nthRoot(1);
      complex1.sin();
      Complex complex2 = complex0.add(2775.846);
      Complex.valueOf((double) 1);
      Complex complex3 = Complex.valueOf((-20.0), 1451.2);
      Complex complex4 = complex2.sqrt1z();
      complex3.tanh();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1438.9279828));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = Complex.valueOf((-1438.9279828), (-1438.9279828));
      Complex complex5 = complex4.subtract((-2090722.5290536198));
      Complex complex6 = Complex.INF;
      complex2.reciprocal();
      complex5.asin();
      Complex complex7 = complex4.cos();
      complex0.conjugate();
      Complex complex8 = Complex.ONE;
      complex8.tanh();
      complex7.add((-0.9987859115235671));
      Complex.valueOf((-486.0));
      complex3.equals(complex2);
      Complex.valueOf((-1.4088399542613178E-38), (-0.9987859115235671));
      complex6.sqrt1z();
      complex5.tanh();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1438.9279828));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.ZERO;
      complex1.ZERO.subtract(complex2);
      complex1.subtract(complex2);
      complex2.acos();
      complex0.exp();
      complex1.sqrt();
      Complex complex3 = Complex.INF;
      complex0.divide((-1438.9279828));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-1941.44123);
      Complex complex1 = new Complex((-1941.44123), Double.NaN);
      Complex complex2 = complex1.add((-1927.70153777359));
      complex2.INF.subtract(complex0);
      double double1 = (-3171.7013752);
      complex2.ONE.multiply((-3171.7013752));
      Complex complex3 = complex0.multiply(complex1);
      complex2.getArgument();
      Complex complex4 = complex3.INF.cosh();
      complex4.INF.abs();
      complex4.pow(Double.NaN);
      double double2 = 1.7448012828826904;
      int int0 = (-2145992265);
//      try { 
        complex3.nthRoot((-2145992265));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,145,992,265
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-823.6625940358362), (-823.6625940358362));
      Complex complex1 = complex0.pow((-2225.3));
      Complex complex2 = complex0.sinh();
      complex1.nthRoot(2854);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.equals(complex2);
      Complex.valueOf(3123.2537316933, 0.0);
      Complex complex5 = complex4.sqrt1z();
      complex0.tanh();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.subtract((-0.9987859115235671));
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex4.reciprocal();
      complex6.asin();
      complex1.cos();
      complex1.conjugate();
      complex7.tanh();
      complex5.reciprocal();
      complex4.acos();
      complex7.sqrt();
      complex6.createComplex((-0.9987859115235671), (-0.9987859115235671));
      complex1.divide((-208.21595));
      complex5.readResolve();
      complex6.getField();
      Complex complex8 = Complex.I;
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-1438.9279828));
      Complex complex1 = new Complex(2.0000003153814383, (-1438.9279828));
      Complex complex2 = Complex.valueOf(2.0000003153814383);
      complex2.acos();
      Complex complex3 = complex0.subtract(complex2);
      complex3.acos();
      complex3.sqrt();
      complex3.getArgument();
      Complex.valueOf(2.0000003153814383, 0.6086184978485107);
      complex1.sqrt1z();
      complex1.sqrt();
      Complex complex4 = Complex.INF;
      complex1.getImaginary();
      Complex complex5 = new Complex(2.0000003153814383, Double.POSITIVE_INFINITY);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = new Complex(1.0, (-361.826011627085));
      complex1.subtract(complex2);
      complex2.divide(complex1);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, (-361.826011627085));
      complex3.add(complex0);
      Complex complex4 = new Complex(Double.NaN);
      Complex complex5 = Complex.NaN;
      complex5.multiply((-361.826011627085));
      Complex complex6 = Complex.valueOf(2.422974840736314E-181);
      complex6.INF.add((-1505.370588));
      complex0.asin();
      complex4.subtract(1114.47071131);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1259.119364);
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex1.subtract(1259.119364);
      Complex complex7 = complex4.pow(complex1);
      Complex complex8 = complex5.reciprocal();
      complex4.asin();
      complex7.cos();
      complex2.tanh();
      complex6.reciprocal();
      complex6.acos();
      complex6.sqrt();
      complex6.createComplex(1259.119364, 6.283185307179586);
      complex5.divide(2241.8703152929284);
      complex8.readResolve();
      complex2.getField();
      Complex complex9 = Complex.I;
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1438.9279828));
      complex0.NaN.asin();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(20.0, 20.0);
      Complex complex3 = complex2.pow(3.139132557537509E-17);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-48.159504));
      complex3.subtract(complex4);
      complex0.divide(complex4);
      complex4.add(complex0);
      Complex complex5 = new Complex((-1761.58434438379));
      complex2.multiply((-1403.0));
      Complex.valueOf(1.6811473947084092);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1438.9279828));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex3.NaN.subtract((-0.9987859115235671));
      Complex complex6 = complex4.ONE.pow(complex0);
      Complex complex7 = complex0.tanh();
      complex4.getArgument();
      complex6.tan();
      complex0.negate();
      complex6.nthRoot(7);
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.I;
      complex5.exp();
      complex7.nthRoot(7);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex1.divide((-2201.5401));
      complex2.subtract(Double.NaN);
      complex2.readResolve();
      complex2.equals(complex11);
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.pow(440.4693981646);
      Complex complex2 = new Complex(3.0352228657193336E-4, (-118.9454243));
      complex2.subtract(complex0);
      Complex complex3 = complex2.divide(complex0);
      complex3.I.add(complex1);
      Complex complex4 = new Complex(2.422974840736314E-181);
      complex4.multiply((-337.89));
      Complex.valueOf(2.422974840736314E-181);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex4.createComplex((-0.9987859115235671), 0.0);
      complex13.divide((-3.474809484487196E-4));
      complex12.readResolve();
      complex7.getField();
      complex11.asin();
      complex13.multiply(complex9);
      complex10.sin();
      Complex complex14 = complex6.divide((-3.474809484487196E-4));
      complex13.pow(complex8);
      Complex complex15 = Complex.valueOf((-159.276));
      complex15.tanh();
      complex14.reciprocal();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.add((-560.8));
      Complex complex3 = complex1.exp();
      complex3.reciprocal();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.asin();
      complex5.getField();
      Complex complex6 = complex5.cosh();
      complex6.nthRoot(487);
      Complex complex7 = Complex.valueOf((double) 487);
      complex7.atan();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      complex1.add((-560.8));
      complex1.exp();
      complex0.nthRoot(1361);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.divide(140.9830645784);
      Complex complex4 = complex0.subtract(546.0);
      complex3.readResolve();
      Complex complex5 = new Complex(546.0);
      Object object0 = new Object();
      complex4.getReal();
      Complex complex6 = Complex.INF;
      complex1.add(complex6);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-823.6625940358362), (-823.6625940358362));
      Complex complex1 = Complex.valueOf((-823.6625940358362));
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.NaN.subtract(complex1);
      complex0.acos();
      Complex complex4 = complex0.sqrt();
      complex3.getArgument();
      Complex.valueOf(1.0049292062252009, Double.NaN);
      complex3.sqrt1z();
      complex2.sqrt();
      Complex complex5 = Complex.INF;
      complex5.getImaginary();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      complex0.I.getField();
      complex0.reciprocal();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.asin();
      complex0.getField();
      complex3.add((-2402.0707164111004));
      Complex complex4 = Complex.valueOf(1015.757, 1015.757);
      complex4.exp();
      complex3.nthRoot(509);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(1.5800256583859738);
      complex6.divide(1015.757);
      complex4.subtract((-427.111583751));
      complex2.readResolve();
      Complex complex7 = new Complex(1015.757, 994.100161361968);
      complex3.equals(complex7);
      complex7.getReal();
      Complex complex8 = Complex.INF;
      Complex complex9 = new Complex(509);
      complex9.ZERO.sinh();
      complex8.add(complex9);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-823.6625940358362), (-823.6625940358362));
      Complex complex1 = Complex.valueOf((-823.6625940358362));
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.asin();
      complex4.getField();
      complex3.cosh();
      Complex complex5 = Complex.NaN;
//      try { 
        complex5.nthRoot((-2001563237));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,001,563,237
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      complex1.INF.divide(complex0);
      Complex complex2 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getField();
      complex0.reciprocal();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.asin();
      complex2.getField();
      complex0.cosh();
      complex1.nthRoot(1371);
      Complex complex3 = complex2.createComplex(2.0568656302182574E254, 0.0);
      Complex complex4 = Complex.valueOf(2.0568656302182574E254, (-1.4088399542613178E-38));
      complex4.sqrt1z();
      complex0.sqrt();
      complex3.getImaginary();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.INF;
      complex3.tanh();
      Complex complex4 = complex2.divide(0.0);
      complex4.add(0.0);
      Complex complex5 = Complex.ONE;
      complex5.tanh();
      complex1.getArgument();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = complex3.negate();
      complex7.nthRoot(17);
      Complex complex8 = Complex.I;
      complex8.add((-3607.70326239));
      complex5.exp();
      Complex complex9 = Complex.valueOf((-5.301386276260592E-111));
      complex9.nthRoot(17);
      complex8.divide((double) 17);
      Complex complex10 = complex4.subtract((-447.0));
      Complex complex11 = Complex.I;
      complex9.equals(complex11);
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.divide((-855.0));
      Complex complex4 = complex1.add(3103.838);
      Complex complex5 = complex3.tanh();
      complex2.getArgument();
      complex4.tan();
      complex5.negate();
      complex0.nthRoot(7);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.add((double) 7);
      complex4.exp();
      complex3.nthRoot(7);
      Complex complex8 = Complex.ZERO;
      complex8.divide(0.0);
      Complex complex9 = complex2.subtract((-855.0));
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex7.getReal();
//      try { 
        complex9.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.I.pow(826.4770374411836);
      complex0.I.sinh();
      complex0.nthRoot(1);
      Complex complex4 = complex0.sin();
      complex4.ONE.add(2775.846);
      Complex complex5 = Complex.valueOf(0.0);
      complex0.equals(complex4);
      complex0.getReal();
      Complex complex6 = complex2.divide(1.0);
      complex6.I.log();
      complex6.INF.abs();
      complex1.ZERO.cos();
      complex1.sin();
      complex1.ONE.multiply(complex3);
      Complex complex7 = Complex.NaN;
      complex7.ONE.getArgument();
      complex5.sqrt();
      complex5.getImaginary();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.tanh();
      complex1.divide(0.0);
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.ZERO.tanh();
      complex2.getArgument();
      complex3.INF.tan();
      Complex complex5 = complex0.NaN.negate();
      Complex complex6 = complex0.INF.add(0.0);
      complex3.I.nthRoot(7);
      complex4.divide(0.0);
      complex2.I.reciprocal();
      complex2.subtract((-2166.7371446381));
      complex5.equals(complex3);
      complex6.getReal();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      complex0.I.getField();
      complex0.reciprocal();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.asin();
      complex3.getField();
      complex1.cosh();
      complex2.NaN.acos();
      complex3.tan();
      Complex complex4 = new Complex(1912.1938841, 1912.1938841);
      Complex complex5 = Complex.valueOf(885.3818932, (double) (-641));
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex5.atan();
      complex7.conjugate();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.negate();
      complex1.multiply((-733));
      Complex complex10 = Complex.valueOf(885.3818932);
      Complex complex11 = complex10.tanh();
      complex9.add(complex11);
      complex6.getImaginary();
      complex4.getImaginary();
      complex0.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-473.51822361384365));
      Complex complex1 = new Complex(0.7615941559557649, (-473.51822361384365));
      Complex complex2 = Complex.valueOf(0.7615941559557649);
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.NaN;
      complex4.subtract(complex3);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex3.sqrt();
      complex6.getArgument();
      complex5.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(1075.42, 20.0);
      Complex complex3 = complex1.NaN.subtract(complex2);
      complex3.multiply(20.0);
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      Complex complex5 = complex1.NaN.subtract(complex4);
      complex5.NaN.divide(20.0);
      complex5.I.readResolve();
      Complex complex6 = complex1.I.pow(2.0);
      Complex.valueOf(20.0, 2.0);
      complex6.I.getArgument();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.I;
      complex9.sin();
      Complex complex10 = complex3.multiply(complex8);
      complex5.pow(Double.POSITIVE_INFINITY);
      complex5.getArgument();
      complex1.sqrt1z();
      Complex complex11 = complex10.tan();
      complex1.atan();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex12.createComplex(Double.POSITIVE_INFINITY, (-1.1264032993918548E58));
      complex3.getImaginary();
      complex3.isInfinite();
      complex11.add(20.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-823.6625940358362), (-823.6625940358362));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(174.92309324367704);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex2.cos();
      double double0 = 1963.0;
      Complex complex7 = complex1.pow(1963.0);
      int int0 = (-1398);
      Complex complex8 = complex6.multiply((-1398));
      complex1.getField();
      Complex complex9 = complex8.add(complex5);
      complex7.conjugate();
      complex2.conjugate();
      complex3.conjugate();
      complex9.abs();
      complex0.reciprocal();
      complex8.pow(1.5907089565090164E-173);
      Complex.valueOf((double) (-1398), 174.92309324367704);
      int int1 = 37;
//      try { 
        complex5.nthRoot((-1398));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,398
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.hashCode();
      complex0.ONE.toString();
      complex0.abs();
      Complex complex1 = complex0.divide((double) 1);
      Complex complex2 = complex0.multiply(1431655765);
      complex2.getArgument();
      complex0.asin();
      complex0.hashCode();
      complex2.atan();
      complex0.subtract(complex2);
      // Undeclared exception!
      complex1.ZERO.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1979.71));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.add((-1979.71));
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex1.divide(complex2);
      complex4.ZERO.add(complex3);
      complex0.hashCode();
      Complex complex6 = complex1.sinh();
      complex1.multiply((-1));
      Complex complex7 = complex4.exp();
      complex7.toString();
      complex5.isInfinite();
      complex5.equals(complex4);
      complex3.multiply(609.97847);
      complex0.cosh();
      complex5.multiply(complex0);
      Complex complex8 = complex6.sin();
      complex5.hashCode();
      complex4.atan();
      complex8.add(609.97847);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1.5707963267948966;
      Complex complex0 = new Complex(0.0, 1.5707963267948966);
      complex0.getField();
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(437.37782984);
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf((-147.1));
      complex3.pow(complex2);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.9999977438192427);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.atan();
      complex3.ONE.subtract(complex0);
      complex1.atan();
      complex1.pow(0.9999977438192427);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1022.4291);
      Complex complex2 = new Complex(1022.4291);
      Complex complex3 = complex2.divide(complex1);
      complex0.hashCode();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.multiply((-1));
      Complex complex6 = complex5.exp();
      Complex complex7 = Complex.NaN;
      complex7.toString();
      complex4.isInfinite();
      complex3.equals(complex5);
      complex1.multiply((double) (-1));
      Complex complex8 = complex5.cosh();
      Complex complex9 = Complex.I;
      complex9.multiply(complex8);
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex10.sin();
      complex9.hashCode();
      Complex complex11 = new Complex((-1), (-1));
      complex11.atan();
      complex8.add(259.0);
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.cosh();
      complex13.ZERO.acos();
      complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(756.91, (-967.17615174823));
      Complex complex2 = Complex.valueOf(756.91);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.subtract(complex3);
      complex0.acos();
      complex0.sqrt();
      Complex complex5 = new Complex(7.8181175385131187E17);
      complex4.multiply((-3023.3658457001075));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-784.2902573195131), (-784.2902573195131));
      Complex.valueOf((-784.2902573195131));
      complex0.INF.acos();
      Complex complex1 = Complex.ZERO;
      complex0.acos();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.sqrt();
      complex1.getArgument();
      complex2.multiply((-30.997650139999415));
      complex0.add(0.0);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(756.91);
      Complex complex2 = complex1.ONE.subtract(756.91);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.tan();
      complex0.INF.tan();
      Complex complex5 = (Complex)complex4.I.readResolve();
      complex2.abs();
      Complex complex6 = complex4.I.tan();
      complex2.createComplex(755.91, Double.NaN);
      complex2.log();
      complex3.pow(complex0);
      Complex complex7 = complex5.subtract(6.283185307179586);
      Complex complex8 = complex1.pow(6.283185307179586);
      complex7.getArgument();
      Complex.valueOf(Double.NaN);
      complex8.getImaginary();
      complex8.abs();
      Complex complex9 = complex6.add(complex7);
      complex7.multiply(complex9);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(1075.42, 20.0);
      Complex complex3 = complex1.NaN.subtract(complex2);
      complex3.multiply(20.0);
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      Complex complex5 = complex1.NaN.subtract(complex4);
      complex5.NaN.divide(20.0);
      complex5.I.readResolve();
      Complex complex6 = complex1.I.pow(2.0);
      Complex.valueOf(20.0, 2.0);
      complex6.I.getArgument();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.ONE.add(complex0);
      Complex complex10 = complex7.atan();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = Complex.ZERO;
      complex12.negate();
      complex11.multiply((-733));
      complex9.tanh();
      complex10.add(complex12);
      complex3.getImaginary();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(1022.4291);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add(1022.4291);
      Complex complex3 = Complex.ONE;
      complex3.add(complex2);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.I.pow(826.4770374411836);
      complex0.I.sinh();
      complex0.nthRoot(1);
      Complex complex3 = complex0.sin();
      complex3.ONE.add(2775.846);
      complex0.equals(complex3);
      complex1.getReal();
      Complex complex4 = complex0.divide(Double.NaN);
      Complex complex5 = complex4.I.log();
      complex4.INF.abs();
      complex4.multiply(1);
      complex1.getArgument();
      complex1.asin();
      complex4.hashCode();
      complex5.subtract(complex2);
      Complex complex6 = complex2.tan();
      complex6.subtract(826.4770374411836);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getField();
      complex0.getReal();
      complex0.getArgument();
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-679.908798170886), 3.378413594504258E148);
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.ONE.sqrt1z();
      complex3.INF.conjugate();
      complex2.NaN.getArgument();
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = complex4.ONE.divide(1535.0);
      Complex complex6 = Complex.valueOf((-3199.685929885599));
      Complex complex7 = complex0.divide((-229.419));
      complex7.I.acos();
      Complex complex8 = complex5.cos();
      complex5.INF.getField();
      Complex.valueOf((-2104.48992), 0.0);
      complex8.hashCode();
      complex6.pow(complex1);
      complex1.divide(1535.0);
//      try { 
        complex6.nthRoot((-1245));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,245
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt();
      complex1.getReal();
      complex0.NaN.getField();
      complex1.INF.divide(complex3);
      Complex complex4 = complex1.asin();
      complex4.I.sinh();
      Complex complex5 = Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      complex5.I.acos();
      Complex complex6 = complex2.ONE.tan();
      Complex complex7 = complex2.acos();
      complex3.abs();
      Complex complex8 = complex0.INF.sin();
      complex1.getImaginary();
      Complex complex9 = complex0.add(complex2);
      Complex complex10 = complex1.sinh();
      complex10.divide(complex3);
      complex9.getArgument();
      Complex complex11 = complex7.multiply(complex3);
      Complex complex12 = complex6.cos();
      complex12.INF.pow(0.7853981633974483);
      complex10.I.sinh();
      complex11.acos();
      complex8.toString();
      complex1.isNaN();
      complex10.isInfinite();
      complex4.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      double double0 = 0.0;
      Complex complex2 = complex0.INF.tanh();
      complex1.divide(0.0);
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.ZERO.tanh();
      complex2.getArgument();
      complex3.INF.tan();
      complex0.NaN.negate();
      complex0.nthRoot(7);
      Complex complex5 = complex0.conjugate();
      complex5.INF.add(0.0);
      Complex complex6 = complex4.exp();
//      try { 
        complex6.I.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-287.043237706));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.pow(0.0);
      complex2.ONE.negate();
      complex1.NaN.getArgument();
      Complex complex3 = complex0.subtract((-287.043237706));
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex3.ONE.cos();
      Complex complex7 = complex6.INF.subtract(0.0);
      complex3.getReal();
      complex5.multiply(complex6);
      complex6.ONE.pow(complex5);
      Complex.valueOf(0.0);
      complex6.getReal();
      complex6.cosh();
      Complex complex8 = complex7.multiply(0.5403023058681398);
//      try { 
        complex8.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-473.51822361384365));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = Complex.valueOf(0.0, 3.847174961282827E30);
      complex4.I.add(0.0);
      complex6.I.multiply(complex0);
      complex0.divide(complex6);
      complex0.hashCode();
      complex6.sinh();
      Complex complex7 = complex0.multiply((-1));
      complex3.I.exp();
      complex7.I.toString();
      complex2.isInfinite();
      complex4.equals(complex0);
      Complex complex8 = complex2.multiply((-473.51822361384365));
      complex8.ZERO.cosh();
      complex6.multiply(complex8);
      Complex complex9 = complex7.sin();
      complex5.hashCode();
      complex9.atan();
      complex7.add((-473.51822361384365));
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(756.91);
      Complex complex2 = complex1.ONE.subtract(756.91);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.tan();
      complex0.INF.tan();
      complex4.I.readResolve();
      complex2.abs();
      complex4.I.tan();
      Complex complex5 = complex2.createComplex(755.91, Double.NaN);
      complex2.log();
      Complex complex6 = complex3.pow(complex0);
      complex2.I.conjugate();
      Complex complex7 = complex6.INF.negate();
      complex6.ONE.multiply((-733));
      complex0.tanh();
      complex7.add(complex4);
      complex5.getImaginary();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-1586.673), (-1586.673));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf((-1586.673), 0.0);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.ONE.pow(complex2);
      complex6.ZERO.pow(0.0);
      Complex complex7 = complex3.acos();
      Complex.valueOf((-1391.970919537018));
      Complex complex8 = complex4.multiply(complex2);
      complex8.getArgument();
      complex8.hashCode();
      complex3.getArgument();
      Complex complex9 = complex7.createComplex((-2882.9397444257), 0.0);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      complex0.I.getField();
      Complex complex2 = complex0.multiply(0.0);
      complex1.I.tan();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex3.acos();
      complex4.ONE.divide(complex1);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.ONE.cos();
      complex6.I.pow(1963.0);
      Complex complex7 = complex4.ZERO.multiply((-1398));
      complex7.ONE.getField();
      Complex complex8 = complex4.ONE.add(complex5);
      complex8.NaN.conjugate();
      complex8.conjugate();
      Complex complex9 = complex5.conjugate();
      complex9.NaN.abs();
      complex0.reciprocal();
      Complex complex10 = complex9.NaN.pow(0.0);
      Complex.valueOf(1963.0, (double) (-1398));
      complex2.nthRoot(37);
      complex2.isInfinite();
      Complex complex11 = complex4.asin();
      complex11.INF.multiply(37);
      complex10.getArgument();
      complex10.sinh();
      complex0.isInfinite();
      Complex complex12 = complex4.divide((-458.5763432994308));
      complex12.ZERO.conjugate();
      complex3.multiply((-1398));
      Complex complex13 = Complex.INF;
      complex5.add(complex13);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-212));
      complex0.isNaN();
      Complex complex2 = complex1.sqrt();
      complex0.INF.acos();
      complex0.conjugate();
      Complex complex3 = complex0.atan();
      complex2.NaN.subtract(complex1);
      Complex complex4 = complex2.subtract(complex0);
      complex1.ONE.log();
      complex3.getField();
//      try { 
        complex4.nthRoot((-212));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -212
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.getImaginary();
      complex1.getArgument();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.INF.sqrt1z();
      complex0.nthRoot(85);
      Complex complex5 = complex3.multiply((-8));
      complex5.INF.multiply(complex3);
      Complex complex6 = complex2.createComplex((-8), 0.0);
      complex6.pow(0.0);
      complex1.isInfinite();
      complex3.multiply(24.820251417);
      Complex complex7 = Complex.I;
      complex1.subtract(complex7);
      complex1.cos();
      Complex complex8 = complex4.negate();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(1083.13376382808, 1083.13376382808);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.I.divide(1083.13376382808);
      Complex complex5 = complex3.INF.log();
      complex3.INF.abs();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.ONE.exp();
      complex7.INF.subtract(1086.90688);
      Complex complex8 = complex1.negate();
      complex8.hashCode();
      complex0.INF.tan();
      Complex complex9 = Complex.valueOf((-1900.2528));
      Complex complex10 = complex9.sinh();
      complex8.getArgument();
      Complex complex11 = complex2.add(complex8);
      Complex complex12 = complex1.conjugate();
      complex2.ZERO.sqrt();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex13.I.add((-0.7853981633974483));
      complex0.I.getField();
      complex11.tanh();
      Complex complex15 = complex4.divide((-455.10104814));
      complex15.I.divide(complex3);
      complex15.I.acos();
      complex1.log();
      complex14.abs();
      complex10.nthRoot(2363);
      complex5.sin();
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.I.pow((-2679.0702287909357));
      Complex complex6 = complex3.subtract(0.0);
      complex3.I.getField();
      complex0.I.sqrt1z();
      Complex complex7 = complex6.INF.sin();
      complex6.ONE.readResolve();
      complex0.getImaginary();
      complex7.isNaN();
      Complex complex8 = complex1.sqrt1z();
      complex4.sqrt1z();
      Complex complex9 = complex0.atan();
      complex8.INF.sqrt();
      Complex complex10 = complex8.negate();
      complex10.subtract((-731.0));
      complex4.tanh();
      complex0.getArgument();
      complex9.INF.divide(complex5);
      complex2.isNaN();
      Complex complex11 = complex9.cosh();
      complex11.ZERO.add((-2679.0702287909357));
      complex7.abs();
      complex3.add(complex1);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(4.4373726292703545E-243);
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.negate();
      complex1.INF.readResolve();
      Complex complex3 = complex0.subtract(4.4373726292703545E-243);
      Complex complex4 = complex3.I.add(4.4373726292703545E-243);
      Complex complex5 = complex4.NaN.asin();
      complex5.abs();
      Complex complex6 = complex2.NaN.sqrt();
      Complex complex7 = complex0.multiply((-1));
      complex7.I.abs();
      complex1.sqrt();
      complex0.NaN.add(complex3);
      complex2.INF.readResolve();
      complex7.getReal();
      Complex complex8 = complex2.acos();
      complex8.ONE.sinh();
      complex2.log();
      complex1.nthRoot(1209);
      Complex complex9 = complex6.pow((-3.983067093146514E-8));
      complex4.pow(2332.7960832);
      complex0.pow(3079.5);
      complex9.NaN.sqrt1z();
      complex9.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex2.ZERO.tan();
      Complex complex3 = complex0.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.ONE.exp();
      complex0.INF.hashCode();
      complex0.toString();
      Complex complex5 = complex1.pow(complex0);
      complex5.INF.abs();
      complex5.INF.nthRoot(37);
      complex4.INF.abs();
      complex3.nthRoot(256);
      complex5.toString();
      complex4.pow(6.283185307179586);
      complex0.equals("(Infinity, 0.0)");
      complex5.sin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
//      try { 
        complex0.INF.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(2384.562);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = Complex.valueOf(2384.562);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex0.ONE.pow(complex3);
      complex5.ZERO.tan();
      complex5.ONE.getArgument();
      Complex complex6 = complex4.INF.subtract(complex2);
      complex4.I.toString();
      Complex complex7 = complex4.multiply(1094);
      complex3.INF.tan();
      Complex complex8 = complex7.multiply(complex3);
      complex4.ONE.multiply(complex7);
      complex1.getImaginary();
      Complex complex9 = complex7.tan();
      complex0.multiply((-2660));
      complex2.getImaginary();
      complex7.INF.getField();
      complex8.abs();
      complex2.multiply(1094);
      complex6.sqrt1z();
      complex8.tanh();
      Complex complex10 = complex1.tan();
      complex10.I.getField();
      complex9.hashCode();
      Complex complex11 = complex8.pow(complex0);
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex0.acos();
      complex2.ZERO.abs();
      complex0.abs();
      complex4.pow(complex2);
      complex3.isInfinite();
      complex3.getArgument();
      complex0.readResolve();
      complex1.INF.acos();
//      try { 
        complex4.nthRoot((-2400));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,400
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex1.INF.readResolve();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.sqrt();
      complex4.ZERO.toString();
      Complex complex5 = complex2.INF.log();
      complex1.abs();
      Complex complex6 = complex4.I.acos();
      complex6.exp();
      complex0.hashCode();
      complex4.ZERO.toString();
      Complex complex7 = complex3.NaN.divide(0.0);
      complex4.nthRoot(1);
      complex2.negate();
      complex3.hashCode();
      complex5.atan();
      complex2.tanh();
      complex7.getImaginary();
      Complex complex8 = complex3.negate();
      complex8.ZERO.cosh();
      complex1.hashCode();
      complex1.pow(complex4);
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.negate();
      complex2.I.createComplex(1, 1);
      complex0.INF.nthRoot(1);
      complex0.readResolve();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.divide((double) 1);
      complex4.I.getArgument();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex5.I.pow(1.5707963267948966);
      Complex complex7 = complex3.ONE.acos();
      Complex complex8 = complex7.ONE.conjugate();
      complex3.atan();
      Complex complex9 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex3.ZERO.hashCode();
      Complex.valueOf(0.0);
      complex3.ZERO.multiply(complex6);
      complex4.toString();
      Complex complex10 = complex4.multiply(complex3);
      complex10.ZERO.sin();
      complex1.isInfinite();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex11.sinh();
      complex12.ONE.abs();
      complex9.getArgument();
      complex8.subtract((double) 1);
      complex12.toString();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.I.pow(826.4770374411836);
      complex0.I.sinh();
      complex0.nthRoot(1);
      Complex complex4 = complex0.sin();
      complex4.ONE.add(2775.846);
      Complex complex5 = Complex.valueOf(0.0);
      complex0.equals(complex4);
      complex5.getReal();
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = complex6.I.log();
      complex6.INF.abs();
      complex1.ZERO.cos();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex1.ONE.multiply(complex3);
      Complex complex10 = complex9.NaN.pow(Double.POSITIVE_INFINITY);
      complex10.ONE.getArgument();
      complex7.sqrt1z();
      Complex complex11 = complex7.tan();
      complex11.ONE.atan();
      complex8.createComplex((-1246.0), 0.0);
      complex5.getImaginary();
      complex6.isInfinite();
      complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(1454.538, 20.0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      complex1.getField();
      complex0.I.add(complex1);
      complex1.ONE.toString();
      Complex complex2 = complex0.log();
      complex2.INF.getArgument();
      complex2.ZERO.pow(1.6215758323669434);
      complex2.NaN.toString();
      Complex complex3 = complex2.createComplex(0.0, 5.840507984320445E-71);
      Complex complex4 = complex3.ZERO.cos();
      complex4.ONE.hashCode();
      complex3.getArgument();
      complex3.ONE.asin();
      Complex complex5 = complex0.asin();
      complex3.subtract(1.5707963267948966);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.add(1.5707963267948966);
      complex3.INF.conjugate();
      complex7.toString();
      complex7.ONE.add((-3237.461011003204));
      complex6.log();
      complex5.abs();
      Complex.valueOf(0.0, 0.8813735870195428);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex6.multiply(0.8813735870195428);
      complex9.tanh();
      complex8.pow(0.0);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.NaN.add(0.0);
      complex2.I.add(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.I.cos();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex5.toString();
      Complex complex8 = complex4.reciprocal();
      complex6.NaN.asin();
      Complex complex9 = complex8.I.createComplex(2619.078812603, 0.0);
      complex9.I.atan();
      complex0.ZERO.cos();
      complex6.NaN.atan();
      complex5.isInfinite();
      Complex complex10 = complex6.divide(complex4);
      Complex complex11 = complex10.ZERO.createComplex(2619.078812603, 0.0);
      complex11.ZERO.getField();
      complex3.cosh();
      Complex complex12 = complex5.sin();
      complex7.pow(complex12);
      complex0.multiply(complex6);
      complex7.hashCode();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      complex0.ZERO.acos();
      complex1.ZERO.add(0.0);
      Complex complex2 = complex0.asin();
      complex2.getField();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-1979.71));
      complex0.sqrt1z();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.acos();
      complex0.INF.multiply(complex1);
      Complex complex3 = complex0.subtract(609.97847);
      complex3.hashCode();
      complex1.pow(complex3);
      complex1.negate();
      complex2.multiply(0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.cosh();
      complex3.ONE.acos();
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf((-20.0));
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.log();
      complex5.ZERO.divide((-20.0));
      Complex complex6 = complex4.I.cosh();
      complex6.NaN.toString();
      Complex complex7 = complex0.divide((-20.0));
      complex7.INF.getArgument();
      complex7.INF.divide((-20.0));
      complex5.ONE.pow((-20.0));
      Complex complex8 = complex5.sinh();
      complex5.I.multiply(7);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.log();
      Complex complex11 = complex8.multiply(complex9);
      complex11.INF.readResolve();
      complex5.readResolve();
      Complex complex12 = complex4.subtract((double) 7);
      complex0.getImaginary();
      complex12.divide(complex10);
      Complex complex13 = Complex.I;
      complex5.subtract(complex13);
      Complex complex14 = complex5.log();
      complex10.asin();
      complex1.abs();
      complex0.cosh();
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(1022.4291);
      Complex complex1 = complex0.negate();
      complex0.atan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-670.4993737));
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.INF.asin();
      Complex complex2 = new Complex((-670.4993737), (-670.4993737));
      Complex complex3 = complex1.NaN.divide(complex2);
      complex1.ONE.hashCode();
      complex3.ONE.abs();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.tanh();
      complex5.I.asin();
      Complex complex6 = complex2.sinh();
      complex6.NaN.createComplex((-670.4993737), 826.0);
      complex4.sin();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-823.6625940358362), (-823.6625940358362));
      Complex complex1 = Complex.valueOf((-823.6625940358362));
      complex0.INF.acos();
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex0.acos();
      Complex complex3 = complex0.sqrt();
      complex2.getArgument();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.ZERO.subtract(0.0);
      complex3.INF.nthRoot(37);
      Complex complex5 = complex1.NaN.acos();
      complex5.NaN.nthRoot(37);
      complex1.ZERO.abs();
      complex1.ONE.getArgument();
      complex0.ZERO.nthRoot(37);
      Complex complex6 = Complex.valueOf((-1275.4925599401884));
      Complex complex7 = complex6.multiply((-2156.94560821535));
      Complex complex8 = complex1.divide(0.0);
      Complex complex9 = complex0.NaN.log();
      complex9.ONE.createComplex((-1579.122), 0.0);
      Complex.valueOf(0.0);
      complex8.ONE.getArgument();
      Complex complex10 = complex0.ZERO.sqrt1z();
      complex10.NaN.abs();
      complex6.isInfinite();
      complex1.equals(complex8);
      complex1.readResolve();
      complex8.abs();
      Complex.valueOf(0.0);
      complex7.toString();
      complex0.isNaN();
      complex3.reciprocal();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      complex1.INF.divide(complex0);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tan();
      complex2.I.hashCode();
      complex2.ONE.multiply(2270.19715389085);
      Complex complex3 = Complex.I;
      complex3.ONE.sin();
      Complex complex4 = Complex.valueOf(1016.654890594);
      complex4.I.pow(complex2);
      complex4.I.conjugate();
      Complex complex5 = complex2.I.subtract(complex3);
      Complex complex6 = complex5.INF.reciprocal();
      complex6.ZERO.toString();
      complex6.ZERO.readResolve();
      Complex complex7 = complex5.INF.sinh();
      complex0.isInfinite();
      complex1.abs();
      complex5.divide(382.24);
      complex2.getField();
      complex6.multiply(complex0);
      complex0.readResolve();
      Object object0 = complex7.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex0.NaN.pow(complex1);
      complex5.ONE.readResolve();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.NaN.subtract((-3045.0));
      Complex complex8 = Complex.valueOf(1.7976931348623157E308);
      complex1.I.sqrt1z();
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex8.I.divide(1.7976931348623157E308);
      Complex complex11 = complex0.I.sinh();
      Complex complex12 = complex6.ONE.cosh();
      Complex complex13 = complex11.ZERO.subtract(complex0);
      Complex complex14 = complex13.INF.pow((-3045.0));
      complex14.ZERO.sinh();
      Complex complex15 = complex9.ZERO.tan();
      complex15.INF.sinh();
      complex15.getField();
      complex8.add(complex4);
      complex7.sinh();
      Complex complex16 = complex1.cosh();
      Complex complex17 = complex5.cos();
      complex1.isNaN();
      complex10.sin();
      complex16.NaN.add(1.7976931348623157E308);
      Complex complex18 = complex3.multiply((-3045.0));
      complex16.tanh();
      complex10.sin();
      Complex complex19 = complex17.sqrt();
      complex19.INF.log();
      complex18.tanh();
      complex7.conjugate();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(1075.42, 20.0);
      Complex complex3 = complex1.NaN.subtract(complex2);
      Complex complex4 = complex3.multiply(20.0);
      Complex complex5 = Complex.valueOf(20.0, 20.0);
      Complex complex6 = complex1.NaN.subtract(complex5);
      Complex complex7 = complex6.NaN.divide(20.0);
      complex6.I.readResolve();
      Complex complex8 = complex1.I.pow(2.0);
      Complex.valueOf(20.0, 2.0);
      complex8.I.getArgument();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.tan();
      complex10.ONE.add(complex0);
      complex9.atan();
      Complex complex11 = complex2.subtract(0.0);
      complex11.pow(0.0);
      complex3.getArgument();
      Complex.valueOf(729.8);
      complex4.getImaginary();
      complex5.abs();
      complex1.add(complex4);
      complex9.multiply(complex4);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 665.752881118);
      complex0.NaN.getField();
      Complex complex2 = complex0.multiply(complex1);
      complex2.sinh();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex3.ONE.add(complex2);
      complex3.abs();
      complex3.ONE.divide(665.752881118);
      Complex complex5 = complex2.multiply(1);
      complex5.NaN.getArgument();
      complex1.ONE.asin();
      complex2.hashCode();
      complex1.atan();
      complex4.subtract(complex3);
      complex5.tan();
      complex1.subtract((-1988.77432));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.cosh();
      complex1.asin();
      complex0.getField();
      Complex complex3 = complex0.ONE.cosh();
      complex0.nthRoot(487);
      complex3.ZERO.createComplex(2.0568656302182574E254, (-4236.441357));
      complex0.sqrt1z();
      complex3.sqrt();
      complex2.getImaginary();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      Complex complex1 = new Complex((-2784.48018735187));
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.I.createComplex(1.0, 1.0);
      Complex complex5 = complex4.I.multiply(complex1);
      Complex complex6 = complex3.atan();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex5.INF.multiply(complex2);
      complex1.hashCode();
      Complex complex10 = complex5.asin();
      complex10.I.cosh();
      complex10.ZERO.add((-2784.48018735187));
      Complex complex11 = complex8.tanh();
      complex11.ONE.toString();
      Complex complex12 = complex2.INF.sqrt();
      complex9.subtract(complex10);
      complex2.getField();
      complex0.add((-2196.1895));
      complex4.sqrt();
      complex7.atan();
      complex12.getImaginary();
      complex0.pow((-2196.1895));
      Complex complex13 = complex6.reciprocal();
      complex13.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex2.ONE.multiply(complex0);
      complex4.NaN.hashCode();
      complex4.INF.tanh();
      complex3.I.log();
      complex2.ZERO.getArgument();
      int int0 = (-618);
      Complex complex5 = complex0.cosh();
      complex5.INF.tan();
//      try { 
        complex2.INF.nthRoot((-618));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -618
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 1162.6160563637;
      Complex complex0 = new Complex(1162.6160563637);
      Complex complex1 = complex0.I.sqrt1z();
      Complex.valueOf(3271.9, (-1301.749));
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      List<Complex> list0 = complex0.nthRoot(3063);
      assertEquals(3063, list0.size());
      
      complex0.NaN.sin();
      complex0.INF.divide(0.0);
      Complex complex1 = complex0.cos();
      complex0.ZERO.abs();
      Complex complex2 = complex0.negate();
      complex2.INF.sin();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ONE.conjugate();
      complex4.ONE.conjugate();
      complex3.NaN.cosh();
      assertEquals(0.9957901442164847, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      complex1.isInfinite();
      complex2.getArgument();
      Complex complex5 = complex2.divide(0.0);
      Complex complex6 = complex5.sinh();
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.negate();
      Complex complex8 = new Complex(1.1134037971496582, 3063);
      complex1.add(complex8);
      assertFalse(complex1.equals((Object)complex7));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.INF.sqrt();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      
      complex1.conjugate();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex4.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex3));
      
      complex4.createComplex(0.0, 0.0);
      Complex complex6 = complex4.add(0.0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex6.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3150.2);
      complex0.ONE.getField();
      complex0.INF.hashCode();
      Complex complex1 = complex0.sinh();
      int int0 = (-4817);
//      try { 
        complex1.INF.nthRoot((-4817));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -4,817
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
