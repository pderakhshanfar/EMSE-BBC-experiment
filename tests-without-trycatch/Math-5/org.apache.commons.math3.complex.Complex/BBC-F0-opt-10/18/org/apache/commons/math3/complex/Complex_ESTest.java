/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:52:16 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sinh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1036.2945859224);
      Complex complex1 = complex0.negate();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1031867081275999, (-496.0));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(1720.99646042, 1720.99646042);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4903074102418675E-7, 7.5830510282268655);
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(complex0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-4.181177882069608E-9));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex(1.7413966655731201, 0.0);
      complex0.INF.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1031867081275999, (-496.0));
      complex0.subtract((-496.0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(19.26908131616, 5.8759898326913254E166);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1879.91213938);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1615.1163807727316, 1615.1163807727316);
      complex0.ZERO.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(5.4541482188921644E-17);
      Complex complex1 = complex0.ZERO.log();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2103.9687216));
      complex0.ZERO.sinh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1615.1163807727316, 1615.1163807727316);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.926566330392234E-4));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.NaN);
      complex0.ONE.sin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1031867081275999, (-496.0));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.89333199110902E-8));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.2690813162, 19.2690813162);
      Complex complex1 = complex0.cos();
      complex1.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-2144.76618444444));
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.4903074102418675E-7);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.89333199110902E-8));
      complex0.pow(1254.627069874);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(449.29845817061783);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(171.311);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2.5257552661512635E-165, (-2080.788060755846));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add((-2164.27));
      complex1.multiply(251);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(731);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1231.4019063697467), (-1231.4019063697467));
      complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(8.467026501338835E-8);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1879.91213938);
      Complex complex1 = complex0.conjugate();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 8.467026501338835E-8);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-80.928020484526), (-80.928020484526));
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.926566330392234E-4));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1514.56), 3.619891246849381E103);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4903074102418675E-7, (-1835.7179044612));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getArgument();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4903074102418675E-7, 7.5830510282268655);
      Complex complex1 = complex0.add(3004.49748087744);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1273.3773864));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(1.4903074102418675E-7, (-6010.52882930888));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract((-1.0));
      Complex complex2 = complex0.multiply(complex0);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.2690813162, 19.2690813162);
      Complex complex1 = complex0.cos();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(8.467026501338835E-8);
      Complex complex1 = complex0.INF.subtract(0.0);
      complex1.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.createComplex(0.0, (-3541.35759));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.createComplex(Double.POSITIVE_INFINITY, 174.3093389375);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1036.2945859224);
      complex0.I.cosh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.subtract((-1.0));
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.ONE.cos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-2579.1), (-2579.1));
      Complex complex1 = complex0.cosh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1231.4019063697467), (-1231.4019063697467));
      Complex complex1 = complex0.conjugate();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-1.0865453656579032E-8));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.89333199110902E-8));
      Complex complex1 = complex0.INF.createComplex((-187.549045904861), (-1049.9));
      Complex complex2 = complex1.cosh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1273.3773864), 1705.43929);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(789.7021);
      complex0.INF.add(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.add(complex0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.add(complex1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex0.add(1.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.add(0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4903074102418675E-7, (-1835.7179044612));
      complex0.add(3004.49748087744);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-911.955444), (-2.738246981762776E132));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.2690813162, 19.2690813162);
      Complex complex1 = complex0.cos();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.divide(823.1478354268613);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(8.467026501338835E-8);
//      try { 
        complex0.NaN.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-1273.3773864));
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(81.9351656268);
      complex0.nthRoot(2576);
      // Undeclared exception!
      complex0.ZERO.nthRoot(2576);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2103.9687216));
//      try { 
        complex0.INF.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.6170875772350974, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.sqrt();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4876.5978360218), (-4876.5978360218));
      Complex complex1 = complex0.I.log();
      assertEquals((-4876.5978360218), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4876.5978360218), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.pow(complex0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1036.2945859224);
      Complex complex1 = complex0.multiply(0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1036.2945859224, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(3.619891246849381E103, (-1514.56));
      Complex complex1 = complex0.NaN.multiply((-1813.6));
      assertEquals((-1514.56), complex0.getImaginary(), 0.01);
      assertEquals(3.619891246849381E103, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1036.2945859224);
      Complex complex1 = complex0.INF.multiply(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1036.2945859224, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.pow(complex0);
      Complex complex2 = complex1.multiply(complex0);
      assertSame(complex2, complex1);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-496.0));
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.181177882069608E-9), (-4.181177882069608E-9));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.pow((-1273.3773864));
      Complex complex3 = complex2.add(complex0);
      assertTrue(complex3.isNaN());
      assertNotSame(complex3, complex2);
      assertEquals((-4.181177882069608E-9), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals((-4.181177882069608E-9), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1273.3773864), 1705.43929);
      Complex complex1 = complex0.ONE.add(complex0);
      assertEquals(1705.43929, complex1.getImaginary(), 0.01);
      assertEquals(1705.43929, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1272.3773864), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4903074102418675E-7, 7.5830510282268655);
      double double0 = complex0.abs();
      assertEquals(7.583051028226867, double0, 0.01);
      assertEquals(7.5830510282268655, complex0.getImaginary(), 0.01);
      assertEquals(1.4903074102418675E-7, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2103.9687216));
      double double0 = complex0.ZERO.getArgument();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2103.9687216), complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-45434.054025), Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1);
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex1.nthRoot(1094);
      assertTrue(list0.contains(complex1));
      assertEquals(1, list0.size());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.nthRoot((-2134));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,134
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex((-1039.3217513195707));
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1039.3217513195707), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 57);
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(57.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tan();
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-2.0), complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1231.4019063697467), 419.0907340268024);
      Complex complex1 = complex0.tan();
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-1231.4019063697467), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(419.0907340268024, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.2690813162, 19.2690813162);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.tan();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(1.5707963215727572, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(5.222139512241652E-9, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.NaN.sin();
      assertFalse(complex0.isInfinite());
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex((-1039.3217513195707));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.cosh();
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1039.3217513195707), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(1720.99646042, 1720.99646042);
      Complex complex1 = complex0.cosh();
      assertFalse(complex0.isInfinite());
      assertEquals(1720.99646042, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.pow(complex0);
      Complex complex2 = complex1.cos();
      assertSame(complex2, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex(5.4541482188921644E-17);
      Complex complex1 = complex0.NaN.acos();
      assertEquals(5.4541482188921644E-17, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1273.3773864), 1705.43929);
      Complex complex1 = complex0.subtract(Double.NaN);
      assertEquals((-1273.3773864), complex0.getReal(), 0.01);
      assertEquals(1705.43929, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = new Complex(1720.99646042, 1720.99646042);
      Complex complex1 = complex0.I.subtract(2.0);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-2.0), complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = new Complex((-1039.3217513195707));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.subtract(6.283185307179586);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1039.3217513195707), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1879.91213938);
      Complex complex1 = complex0.NaN.subtract(complex0);
      assertEquals(1879.91213938, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 8.467026501338835E-8);
      Complex complex1 = complex0.negate();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(8.467026501338835E-8, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = new Complex((-1273.3773864));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1273.3773864), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = new Complex(0.6480542736638855, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-6.488296536838142E224));
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.6480542736638855, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = new Complex(2.5257552661512635E-165, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(1268);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(2.5257552661512635E-165, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = new Complex(19.26908131616, 5.8759898326913254E166);
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex1.multiply(1452);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2.264498517981171E168, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(5.8759898326913254E166, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = new Complex(1720.99646042, 1720.99646042);
      Complex complex1 = complex0.pow(1720.99646042);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.multiply((-2174));
      assertTrue(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1720.99646042, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(1720.99646042, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(7.403960307783564E-5, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(7.403960307783564E-5, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4903074102418675E-7, (-1835.7179044612));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1835.7179044612), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1.4903074102418675E-7);
      Complex complex2 = new Complex(1.4903074102418675E-7);
      boolean boolean0 = complex1.equals(complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(1.4903074102418675E-7, complex1.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1031867081275999, (-496.0));
      Complex complex1 = complex0.NaN.tanh();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.1031867081275999, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-496.0), complex0.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = new Complex(1720.99646042, 1720.99646042);
      boolean boolean0 = complex0.equals("B6.9YI_f:");
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1720.99646042, complex0.getReal(), 0.01);
      assertEquals(1720.99646042, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4903074102418675E-7, 7.5830510282268655);
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.4903074102418675E-7, complex0.getReal(), 0.01);
      assertEquals(7.5830510282268655, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex((-1039.3217513195707));
      Complex complex1 = (Complex)complex0.I.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      assertFalse(boolean0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.reciprocal();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.asin();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-496.0));
      Complex complex1 = complex0.reciprocal();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-496.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0020161290322580645, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = new Complex(5.4541482188921644E-17);
      Complex complex1 = complex0.NaN.reciprocal();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(5.4541482188921644E-17, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4876.5978360218), (-4876.5978360218));
      Complex complex1 = complex0.divide(Double.NaN);
      assertEquals((-4876.5978360218), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4876.5978360218), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = new Complex((-1039.3217513195707));
      Complex complex1 = complex0.ONE.divide((-2144.76618444444));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-4.662512898854896E-4), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.pow(complex0);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      assertSame(complex2, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      assertTrue(complex1.isInfinite());
      assertNotSame(complex2, complex0);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = new Complex(1720.99646042, 1720.99646042);
      Complex complex1 = complex0.pow(1720.99646042);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.divide(complex2);
      assertEquals(1720.99646042, complex0.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(1720.99646042, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.divide(complex0);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.conjugate();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(0.193811297416687);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.89333199110902E-8));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.add(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals((-1.89333199110902E-8), complex0.getReal(), 0.01);
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.multiply(complex1);
      assertNotSame(complex2, complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1428));
      Complex complex2 = complex1.cos();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-1428.0), complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.2690813162, 19.2690813162);
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals("(19.2690813162, 19.2690813162)", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = new Complex((-1039.3217513195707));
      complex0.getField();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1039.3217513195707), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.2690813162, 19.2690813162);
      List<Complex> list0 = complex0.nthRoot(17);
      assertEquals(17, list0.size());
      assertEquals(19.2690813162, complex0.getImaginary(), 0.01);
      assertEquals(19.2690813162, complex0.getReal(), 0.01);
  }
}
