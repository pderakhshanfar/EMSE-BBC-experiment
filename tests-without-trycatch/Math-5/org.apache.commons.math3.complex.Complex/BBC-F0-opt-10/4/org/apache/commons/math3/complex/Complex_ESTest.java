/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:01:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(1350, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(1350);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt();
      complex2.INF.reciprocal();
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.NaN;
      complex4.ONE.readResolve();
      complex3.I.pow(complex4);
      Complex complex5 = complex0.INF.createComplex(1043.9932012269396, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf((-705.94404));
      Complex complex7 = complex3.divide(42.01547334018742);
      Complex complex8 = complex1.atan();
      complex8.ONE.multiply(complex5);
      Complex complex9 = complex7.conjugate();
      complex9.readResolve();
      complex7.exp();
      complex6.toString();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-1.043079666926483E-86));
      complex2.ZERO.getArgument();
      Complex complex4 = new Complex(0.0, 2.0);
      complex2.ZERO.divide(2.0);
      complex0.reciprocal();
      complex3.NaN.hashCode();
      complex2.nthRoot(1);
      complex3.pow((-1.5707963267948966));
      complex1.ZERO.toString();
      complex1.ZERO.asin();
      Complex complex5 = Complex.valueOf((-1.5707963267948966));
      Complex complex6 = complex5.I.sqrt();
      complex6.I.nthRoot(1);
      complex5.INF.hashCode();
      Complex complex7 = complex4.multiply(17);
      complex7.getField();
      complex6.sin();
      complex1.tan();
      complex5.asin();
      Complex complex8 = new Complex(20.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.multiply(1286.6221304350972);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(941.2, (-20.0));
      Complex complex1 = complex0.multiply((-3020));
      complex0.tan();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 4180.6651);
      Complex.valueOf(4180.6651);
      complex1.exp();
      complex0.hashCode();
      complex0.nthRoot(2516);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      complex0.sqrt1z();
      complex3.multiply((-1531));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.add(complex1);
      Complex complex2 = complex0.createComplex((-3961.8844), Double.POSITIVE_INFINITY);
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2833.664184109834));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.I.conjugate();
      complex4.ZERO.nthRoot(516);
      Complex complex5 = complex2.INF.conjugate();
      complex5.INF.abs();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.add((-2833.664184109834));
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex1.createComplex(53.409199, (-2833.664184109834));
      complex0.toString();
      Complex complex10 = complex1.pow(complex6);
      complex10.hashCode();
      complex8.acos();
      complex3.toString();
      complex1.atan();
      Complex complex11 = complex2.multiply((-2833.664184109834));
      complex6.getField();
      complex9.multiply((-899));
      complex6.pow(complex0);
      complex7.subtract(complex11);
      Complex.valueOf((double) 516);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(1435.9, Double.POSITIVE_INFINITY);
      complex0.createComplex(Double.POSITIVE_INFINITY, 1435.9);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(20, 20);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow(761.7);
      complex1.INF.multiply(complex0);
      complex1.ZERO.tanh();
      Complex complex2 = complex0.tan();
      complex2.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.tanh();
      complex4.ONE.multiply((-3.2244113258340395E-127));
      Complex complex5 = complex3.createComplex(20.0, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(74.860471852);
      Complex complex7 = complex5.multiply(complex6);
      complex7.sin();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-2073583019));
      complex0.nthRoot(17);
      Complex complex1 = new Complex(17, 17);
      complex0.INF.createComplex(Double.NaN, (-2073583019));
      complex1.divide((-2630.27025));
      Complex complex2 = complex0.divide((-1945.22839914));
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(953);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.ZERO.reciprocal();
      complex2.hashCode();
      Complex.valueOf(285.932566886, (double) 953);
      Complex complex5 = complex0.multiply(complex3);
      complex5.NaN.multiply(Double.POSITIVE_INFINITY);
      complex5.I.getArgument();
      complex2.atan();
      Complex complex6 = complex3.atan();
      complex6.multiply(complex4);
      complex0.nthRoot(365);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(1581.176297836318);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide(1581.176297836318);
      Complex complex3 = complex2.divide(complex1);
      complex1.abs();
      complex1.abs();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex2.subtract(20.0);
      complex1.exp();
      Complex complex6 = Complex.valueOf(8.210726720784228, 8.210726720784228);
      complex2.multiply(complex0);
      Complex complex7 = complex5.subtract((-4.740494808228372E-43));
      complex4.negate();
      complex7.tan();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = Complex.I;
      complex8.INF.subtract(complex9);
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex10.tan();
      complex11.multiply((-1142));
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = (-1505.6);
      Complex complex0 = Complex.valueOf((-1505.6));
      complex0.I.getArgument();
      complex0.I.exp();
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(1.328167263606087E161);
      Complex complex1 = new Complex(1.328167263606087E161);
      Complex complex2 = complex1.I.add(1.328167263606087E161);
      Complex complex3 = complex2.I.subtract(1.328167263606087E161);
      complex0.INF.asin();
      complex1.NaN.abs();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex2.pow(complex1);
      complex5.NaN.pow(complex4);
      complex5.ZERO.multiply(37);
      complex4.INF.hashCode();
      complex2.I.getField();
      Complex complex6 = complex3.log();
      complex6.ONE.exp();
      complex1.ONE.readResolve();
      complex1.I.cos();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex1.pow(1.328167263606087E161);
      complex8.ZERO.tan();
      Complex complex9 = complex0.asin();
      complex3.sinh();
      Complex complex10 = complex7.sqrt1z();
      complex10.I.toString();
      complex8.NaN.exp();
      complex9.negate();
      Complex.valueOf((-2780.84), Double.NaN);
      complex8.conjugate();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.NaN);
      complex0.getField();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.sin();
      complex3.getField();
      complex3.atan();
      Complex complex4 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 868.7237);
      Complex complex1 = new Complex((-5612.538), 1.3069802481237792E-8);
      Complex complex2 = complex0.log();
      complex0.hashCode();
      complex2.readResolve();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.multiply(complex3);
      complex3.cosh();
//      try { 
        complex4.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1.4999452522236406E230);
      complex0.negate();
      Complex complex2 = Complex.valueOf(0.0, 1.4999452522236406E230);
      complex2.NaN.hashCode();
      complex0.equals(complex2);
      complex1.pow(1.4999452522236406E230);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(1.4999452522236406E230, 1.4999452522236406E230);
      Complex complex1 = new Complex(729.6732369, (-2934.05480940594));
      Complex complex2 = complex0.divide(1720.552617);
      complex2.getField();
      Complex complex3 = Complex.I;
      complex2.sin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.hashCode();
      complex1.readResolve();
      Complex complex2 = new Complex(1.207746682843556E-303);
      complex2.tan();
      complex1.multiply(complex2);
      complex0.cosh();
      Complex complex3 = Complex.INF;
      complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.log();
      complex0.multiply((-286.04125718832665));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.isNaN();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.negate();
      complex1.equals(complex3);
      Complex.valueOf(3668.62044421, Double.POSITIVE_INFINITY);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.ONE.sin();
      complex1.subtract((-2139.563898038));
      Complex complex2 = Complex.valueOf((-2139.563898038), (-2139.563898038));
      Complex complex3 = Complex.valueOf((-2139.563898038), Double.NaN);
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.sqrt1z();
      Complex complex1 = complex0.ZERO.subtract(Double.NaN);
      complex0.multiply((-286.04125718832665));
      complex1.divide((-286.04125718832665));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-286.04125718832665), (-286.04125718832665));
      complex0.INF.cosh();
      complex0.pow((-2671.2));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf(1534.04);
      complex4.tanh();
      Complex complex5 = Complex.NaN;
      complex0.subtract(complex2);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.multiply(complex7);
      Complex complex9 = complex1.sinh();
      complex1.tanh();
      Complex complex10 = Complex.ONE;
      complex8.sqrt1z();
      complex3.add(complex9);
      Complex complex11 = new Complex(1.0);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 3045.298319);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.log();
      complex1.hashCode();
      complex2.readResolve();
      Complex complex4 = complex3.tan();
      complex4.nthRoot(2144880504);
      Complex complex5 = complex3.conjugate();
      complex5.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1534.04);
      complex0.toString();
      complex0.INF.cosh();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1.4999452522236406E230, 1.4999452522236406E230);
      Complex complex1 = new Complex(729.6732369, (-2964.68753125692));
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.I.log();
      complex2.ONE.hashCode();
      complex0.readResolve();
      Complex complex3 = complex2.tan();
      // Undeclared exception!
      complex3.nthRoot(2144880504);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.createComplex(2.0, 2.0);
      Complex complex2 = complex0.NaN.tan();
      complex2.I.divide(2027.293);
      Complex.valueOf(2027.293, 2.0);
      Complex complex3 = complex0.divide(complex1);
      complex1.ZERO.readResolve();
      complex3.I.createComplex(2.0, 2.0);
      Complex complex4 = complex1.multiply(1915.4201748258313);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.subtract(complex4);
      Complex complex7 = complex0.asin();
      complex0.INF.cosh();
      complex7.add(complex5);
      complex6.tan();
      complex7.sin();
      complex0.multiply(0.0);
      complex7.cosh();
      complex7.nthRoot(1484);
      complex4.readResolve();
      complex2.exp();
      Complex.valueOf(1.0, 1.0972476870931676E-268);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-3446.1007354469502));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(1534.04, 1534.04);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ONE;
      complex1.NaN.getField();
      complex0.cosh();
      complex2.sin();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1313228444765414E-138);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.createComplex(2.1313228444765414E-138, 2.1313228444765414E-138);
      Complex.valueOf((-5263.7470492479615), (-2741.5682492434275));
      complex2.hashCode();
      Complex complex4 = complex1.INF.divide(complex2);
      complex4.ZERO.conjugate();
      complex1.NaN.tanh();
      complex4.I.sin();
      complex1.getField();
      Complex complex5 = complex0.add(2.1313228444765414E-138);
      Complex complex6 = complex5.divide(3202.70389187674);
      complex6.NaN.multiply(17);
      complex5.log();
      complex0.pow((-1.0965324942770584E171));
      Complex.valueOf((-1.0965324942770584E171));
      Complex complex7 = complex1.subtract(complex3);
      complex7.I.acos();
      int int0 = (-1167);
//      try { 
        complex5.nthRoot((-1167));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,167
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-639.61156);
      Complex complex0 = new Complex((-639.61156), 2004.1566996);
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, (-1.043079666926483E-86));
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = Complex.valueOf((-2705.9945350020753));
      complex5.sinh();
      complex5.reciprocal();
      Complex complex6 = complex1.tanh();
      complex0.readResolve();
      complex4.createComplex((-1044.8074967991438), 2.414213562373095);
      complex6.sinh();
      complex0.subtract(complex1);
      Complex complex7 = Complex.INF;
      complex7.sqrt();
      complex5.add((-1.043079666926483E-86));
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3439.431);
      Complex complex2 = new Complex(1301.645);
      Complex complex3 = complex0.conjugate();
      complex3.reciprocal();
      Complex complex4 = new Complex(1.121383042095528E-83, 186.42677825);
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(730.3412705731303);
      complex1.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.log();
      complex3.getImaginary();
      complex0.subtract(complex2);
      complex2.getArgument();
      complex2.isNaN();
      complex1.ONE.atan();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(730.3412705731303);
      complex1.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.log();
      complex0.getImaginary();
      complex0.subtract(complex3);
      complex3.getArgument();
      complex2.isNaN();
      complex1.atan();
      Complex complex4 = complex3.tanh();
      complex1.negate();
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1301.08682223294));
      Complex complex2 = complex1.subtract((-0.7065107892485476));
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-0.7065107892485476));
      complex3.nthRoot(2421);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.subtract(2.0);
      Complex complex6 = complex2.multiply(0.9999999999999998);
      Complex complex7 = Complex.I;
      complex1.sqrt1z();
      complex6.add(complex5);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.getArgument();
      complex0.isNaN();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.negate();
      complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-5415.16032612));
      Complex complex1 = Complex.ONE;
      complex0.I.divide(complex1);
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sinh();
      complex0.isInfinite();
      Complex complex4 = complex2.ZERO.pow(complex0);
      Complex complex5 = complex0.multiply((-1964.6813084213506));
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex6 = complex4.subtract(complex5);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex0.log();
      complex2.getImaginary();
      complex0.subtract(complex1);
      complex1.cos();
      complex0.tan();
      complex1.sqrt1z();
      Complex complex3 = Complex.NaN;
      complex3.getReal();
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.ZERO;
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.tanh();
      complex1.ONE.readResolve();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.log();
      complex2.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.multiply(complex0);
      complex4.ONE.getArgument();
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex2.ONE.multiply(4292.08323724913);
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex0.divide(2233.1);
      complex3.ZERO.asin();
      Complex.valueOf(Double.NaN, 2233.1);
      complex5.multiply((-20.0));
      Complex complex6 = complex0.INF.acos();
      complex5.ONE.readResolve();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.ZERO.asin();
      complex3.readResolve();
      complex6.nthRoot(1682);
      Complex complex9 = complex6.add(4292.08323724913);
      complex9.INF.tan();
      complex8.toString();
      complex4.tan();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(730.3412705731303);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = new Complex(730.3412705731303, 730.3412705731303);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex4.tanh();
      complex1.readResolve();
      Complex complex7 = complex5.createComplex(2760.714487926, (-466.273903007923));
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex5.subtract(complex3);
      complex7.sqrt();
      Complex complex10 = complex1.negate();
      complex9.asin();
      Complex complex11 = complex6.subtract(1.1752011936438014);
      complex9.cos();
      complex10.tan();
      complex11.sqrt1z();
      Complex complex12 = new Complex(730.3412705731303, 1.1752011936438014);
      Complex complex13 = Complex.INF;
      complex12.subtract(complex13);
      complex9.getReal();
      complex12.acos();
      Complex complex14 = Complex.valueOf(5415.16023378663);
      Complex.valueOf(1.1752011936438014);
      complex9.pow(complex13);
      complex14.multiply(1.1752011936438014);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(3933.0533213428);
      complex0.NaN.add(0.3416208028793335);
      complex0.negate();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.INF.getArgument();
      Complex complex4 = complex0.sqrt1z();
      complex4.ZERO.add(0.0);
      Complex.valueOf((double) (-475), (-1.0));
      Complex complex5 = complex4.negate();
      complex5.isInfinite();
      complex0.sin();
      complex1.tan();
      complex2.add(0.3416208028793335);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(657.0);
      Complex complex2 = complex1.sqrt();
      complex1.tanh();
      Complex complex3 = Complex.NaN;
      complex2.subtract(complex3);
      complex2.sinh();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex1.tanh();
      complex2.readResolve();
      Complex complex6 = complex0.createComplex(5415.16023378663, 1.1752011936438014);
      Complex complex7 = complex1.sinh();
      complex1.I.subtract(complex4);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex7.negate();
      complex8.asin();
      complex0.subtract(7.6609019700024525);
      complex6.cos();
      Complex complex10 = complex5.tan();
      complex10.sqrt1z();
      Complex complex11 = complex9.subtract(complex8);
      complex11.acos();
      Complex.valueOf((-4842.43535564597));
      complex3.pow(complex11);
      complex9.multiply(2085.20381802);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1248.689328535783);
      complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-5218.7996636), (-5.002774317612589E-8));
      Complex complex4 = complex3.log();
      complex3.getImaginary();
      Complex complex5 = complex2.subtract(complex1);
      complex1.getArgument();
      complex5.isNaN();
      complex4.atan();
      complex2.tanh();
      complex5.negate();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(657.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.log();
      complex1.tanh();
      Complex complex4 = Complex.NaN;
      complex3.subtract(complex4);
      complex2.sinh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex3.tanh();
      complex2.readResolve();
      Complex complex7 = complex0.createComplex(5415.16023378663, 1.1752011936438014);
      Complex complex8 = complex3.sinh();
      complex3.I.subtract(complex5);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex8.negate();
      complex9.asin();
      Complex complex11 = complex0.subtract(7.6609019700024525);
      complex7.cos();
      Complex complex12 = complex6.tan();
      complex12.sqrt1z();
      Complex complex13 = complex10.subtract(complex9);
      complex11.getReal();
      Complex complex14 = complex13.acos();
      Complex.valueOf((-7.6609019700024525));
      Complex complex15 = Complex.valueOf((-4842.43535564597));
      complex4.pow(complex13);
      complex10.multiply(2085.20381802);
      complex10.sqrt();
      complex14.createComplex((-7.6609019700024525), (-4842.43535564597));
      complex12.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.asin();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(729.6732369);
      Complex complex3 = new Complex(Double.NaN, 4291.69964708);
      complex3.getField();
      complex0.cosh();
      complex3.nthRoot(2146813295);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2017.6710905993195, 2017.6710905993195);
      Complex complex2 = complex0.multiply(complex1);
      complex2.ONE.multiply(complex0);
      Complex complex3 = Complex.valueOf(6.283185307179586, (-1.043079666926483E-86));
      complex3.getArgument();
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.valueOf(1.920871394985668E173, (-1.043079666926483E-86));
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex0.reciprocal();
      complex4.hashCode();
      complex3.nthRoot(1);
      complex7.nthRoot(1);
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.ZERO;
      complex1.divide(complex9);
      complex9.subtract((-8.220283439582378E-249));
      complex0.cosh();
      Complex complex10 = complex4.multiply(1006);
      complex6.pow((-1.6601128502999756E-87));
      complex10.multiply((-2386.14221));
      Complex complex11 = Complex.ONE;
      complex11.readResolve();
      Complex complex12 = Complex.I;
      complex5.sqrt1z();
      complex0.add(complex11);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, (-1.043079666926483E-86));
      Complex complex2 = complex0.subtract(2.0);
      complex1.NaN.hashCode();
      complex1.nthRoot(1);
      Complex complex3 = Complex.NaN;
      complex1.subtract((double) 1);
      complex1.multiply(2.0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt1z();
      complex0.add(complex2);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.isNaN();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.ONE.createComplex((-2654.09049565665), 3401.748989528);
      Complex complex4 = complex2.multiply(1133);
      complex1.ZERO.hashCode();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.valueOf(3401.748989528);
      Complex.valueOf((-2654.09049565665), (-762.2062942410483));
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex9.ONE.negate();
      complex10.ZERO.add((-3258.73592860149));
      complex7.pow(3401.748989528);
      complex7.ZERO.multiply((-2654.09049565665));
      complex7.add((-1.0));
      complex3.isInfinite();
      complex5.subtract(complex2);
      complex4.hashCode();
      complex7.cosh();
      Complex complex11 = Complex.valueOf((double) 1133);
      complex6.multiply(complex11);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(730.3412705731303);
      complex1.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.log();
      complex3.getImaginary();
      Complex complex4 = complex0.subtract(complex2);
      complex2.getArgument();
      complex2.isNaN();
      complex1.ONE.atan();
      complex3.tanh();
      Complex complex5 = complex4.negate();
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-1.043079666926483E-86));
      complex2.ZERO.getArgument();
      complex2.INF.cos();
      complex1.subtract(2.0);
      Complex complex4 = complex0.reciprocal();
      complex3.NaN.hashCode();
      complex2.nthRoot(1);
      complex3.nthRoot(1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.divide(complex5);
      complex3.subtract((double) 1);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.multiply(7);
      Complex complex9 = complex4.pow(1132.909946776125);
      complex3.multiply(2.0);
      complex9.readResolve();
      Complex complex10 = Complex.I;
      complex10.sqrt1z();
      complex1.add(complex8);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(1248.689328535783);
      Complex complex1 = complex0.asin();
      complex0.divide(0.0);
      complex0.getField();
      Complex complex2 = Complex.valueOf(1924.2436068, 1248.689328535783);
      complex2.cosh();
      complex1.nthRoot(36);
      complex2.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1534.04);
      Complex complex1 = new Complex(1.3541112064618357E-272);
      Complex complex2 = complex1.conjugate();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(9.848636053777669E237);
      complex1.INF.abs();
      Complex complex2 = complex1.subtract(complex0);
      complex2.log();
      complex0.getImaginary();
      Complex complex3 = new Complex((-1477.6646296164326));
      complex3.subtract(complex0);
      complex1.getArgument();
      complex3.NaN.sqrt1z();
      Complex complex4 = new Complex(2.0, 1.5699662797241143);
      complex4.isNaN();
      Complex complex5 = new Complex(1.5699662797241143);
      Complex.valueOf((-1477.6646296164326));
      complex3.negate();
      complex3.equals(complex0);
      complex2.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.abs();
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.getImaginary();
      Complex complex3 = complex2.subtract(complex1);
      complex0.getArgument();
      complex3.isNaN();
      Complex complex4 = complex3.tanh();
      complex1.NaN.atan();
      Complex complex5 = complex0.negate();
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(9.848636053777669E237);
      complex1.INF.abs();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.log();
      complex0.getImaginary();
      complex3.subtract(complex1);
      complex1.getArgument();
      complex3.isNaN();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.ONE.createComplex(Double.POSITIVE_INFINITY, (-2076.7380159));
      Complex complex5 = Complex.valueOf((-4.7088233509384736E-4));
      complex3.pow(complex5);
      complex1.multiply((-20.0));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.negate();
      Complex complex2 = Complex.NaN;
      complex2.negate();
      Complex complex3 = complex0.divide(complex2);
      complex3.ONE.asin();
      Complex complex4 = complex3.INF.divide((-3366.74475145));
      Complex complex5 = complex4.NaN.multiply(0.0);
      complex0.toString();
      complex0.getArgument();
      Complex complex6 = new Complex((-1734.5194828), (-1734.5194828));
      complex6.isNaN();
      complex4.tanh();
      complex5.negate();
      complex5.equals(complex2);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = new Complex((-5415.16032612));
      complex4.sinh();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.tanh();
      complex1.readResolve();
      complex5.createComplex((-5415.16032612), (-1.0));
      Complex complex7 = complex1.sinh();
      complex3.sqrt();
      complex6.negate();
      complex6.asin();
      Complex complex8 = complex6.subtract((-193.4));
      Complex complex9 = complex8.cos();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex6.subtract(complex8);
      complex4.getReal();
      complex5.acos();
      Complex.valueOf((-1.2074097381167957E265));
      Complex.valueOf(1.037806510925293);
      complex6.pow(complex12);
      complex10.multiply((-2436.18));
      complex7.sqrt();
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(563.440490591, 1.528388084444653E68);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.createComplex(4666.397, 0.0);
      Complex complex3 = complex2.I.divide((-264.054893));
      complex3.ZERO.exp();
      Complex complex4 = complex2.ZERO.multiply((-579));
      Complex complex5 = complex4.INF.multiply(2.303190374523956E-168);
      complex5.I.getArgument();
      complex0.getArgument();
      Complex complex6 = complex1.add(complex0);
      complex6.INF.subtract(2.303190374523956E-168);
      Complex complex7 = Complex.valueOf(129.2145437242815, (-643.195203787));
      Complex complex8 = complex7.ZERO.tan();
      complex1.abs();
      complex6.add(complex0);
      complex4.sinh();
      complex7.getImaginary();
      complex5.negate();
      complex8.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.sqrt();
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(3933.0533213428);
      complex0.NaN.add(0.3416208028793335);
      complex0.negate();
      complex0.multiply(complex1);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.tanh();
      complex3.INF.getArgument();
      int int0 = (-475);
//      try { 
        complex0.nthRoot((-475));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -475
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3098.3462418723557);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.subtract(complex3);
      complex0.INF.log();
      complex3.ONE.cos();
      Complex complex5 = new Complex(3098.3462418723557, 3098.3462418723557);
      Complex complex6 = complex1.pow(complex5);
      complex3.log();
      Complex complex7 = complex4.pow(3098.3462418723557);
      Complex complex8 = complex7.ZERO.negate();
      Complex.valueOf(3098.3462418723557, 3098.3462418723557);
      Complex complex9 = Complex.valueOf(3098.3462418723557, (-3.514601201473235E-136));
      complex9.INF.divide(complex6);
      complex6.getImaginary();
      complex1.multiply(909.5483945);
      complex2.createComplex(4.43247726423679E-115, 678.0);
      complex8.cos();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2261.8693553473, 2261.8693553473);
      Complex complex2 = complex0.I.multiply(37);
      Complex complex3 = complex2.ONE.exp();
      complex3.INF.add(complex2);
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = Complex.valueOf(2261.8693553473, 2261.8693553473);
      complex4.ZERO.pow(complex5);
      Complex complex6 = complex1.ONE.cosh();
      complex6.ZERO.add(0.0);
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex0.subtract(complex1);
      complex8.ZERO.nthRoot(37);
      complex0.isInfinite();
      complex0.abs();
      Complex complex9 = complex8.cos();
      complex0.getReal();
      Complex complex10 = complex9.add((double) 37);
      complex0.isInfinite();
      complex1.ONE.sqrt();
      Complex complex11 = complex7.sqrt1z();
      complex11.I.hashCode();
      complex7.atan();
      complex11.subtract(complex7);
      complex3.divide(complex10);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-576.974));
      Complex complex1 = Complex.INF;
      complex1.ZERO.abs();
      Complex complex2 = complex0.add(complex1);
      complex0.NaN.conjugate();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.hashCode();
      int int0 = 37;
//      try { 
        complex2.I.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.acos();
      complex2.NaN.abs();
      Complex complex3 = complex0.divide(complex1);
      complex0.INF.tan();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex3.ZERO.negate();
      complex4.ONE.getField();
      complex3.ZERO.add(complex4);
      Complex complex6 = Complex.valueOf(0.5421652793884277, 0.5421652793884277);
      Complex complex7 = complex3.ONE.atan();
      Complex complex8 = complex0.cos();
      Complex.valueOf(Double.NaN);
      Complex complex9 = complex8.multiply(Double.NaN);
      complex7.getField();
      complex7.cosh();
      Complex complex10 = complex2.createComplex(0.0, 0.0);
      Complex complex11 = complex3.log();
      complex11.I.conjugate();
      Complex complex12 = complex10.sinh();
      complex12.I.add(complex2);
      Complex complex13 = complex3.acos();
      complex13.INF.cos();
      complex13.NaN.add(Double.NaN);
      complex1.equals(complex6);
      complex7.multiply(complex8);
      complex5.hashCode();
      complex3.multiply(0.0);
      complex9.subtract(853.97858);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.isNaN();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.ONE.createComplex((-2654.09049565665), 3401.748989528);
      Complex complex4 = complex2.multiply(1133);
      complex1.ZERO.hashCode();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.valueOf(3401.748989528);
      Complex.valueOf((-2654.09049565665), (-762.2062942410483));
      Complex complex9 = complex8.NaN.negate();
      complex9.ONE.negate();
      complex7.pow(3401.748989528);
      complex7.ZERO.multiply((-2654.09049565665));
      complex7.add((-1.0));
      complex3.isInfinite();
      complex5.subtract(complex2);
      complex4.hashCode();
      complex7.cosh();
      Complex complex10 = Complex.valueOf((double) 1133);
      complex6.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.NaN.divide(complex1);
      Complex complex2 = complex0.cos();
      complex2.ZERO.getArgument();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.ONE.log();
      complex4.atan();
      Complex complex5 = complex0.I.reciprocal();
      complex2.INF.conjugate();
//      try { 
        complex5.ZERO.nthRoot((-2035));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,035
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1626.7964784552803));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.acos();
      Complex.valueOf((-1626.7964784552803));
      Complex complex3 = complex0.subtract(complex1);
      complex3.ONE.negate();
      complex3.NaN.readResolve();
      Complex complex4 = complex2.log();
      complex4.log();
      Complex.valueOf((-1626.7964784552803), 1.0);
      complex2.readResolve();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(9.848636053777669E237);
      complex1.INF.abs();
      complex1.subtract(complex0);
      Complex complex2 = complex0.log();
      complex0.getImaginary();
      Complex complex3 = complex2.subtract(complex1);
      complex1.getArgument();
      complex2.isNaN();
      complex1.tanh();
      complex0.negate();
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.sinh();
      complex2.I.reciprocal();
      Complex complex3 = complex1.I.log();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.ZERO.subtract(complex1);
      Complex complex5 = complex1.ZERO.add(complex0);
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex3.INF.negate();
      complex7.ONE.getField();
      complex6.INF.sqrt1z();
      complex3.ZERO.negate();
      Complex complex8 = complex6.ONE.createComplex((-2431.28531850985), 0.0);
      Complex complex9 = complex5.NaN.multiply(1);
      complex5.NaN.subtract((-726.07016));
      complex9.ZERO.add(20.0);
      complex1.I.add((-64.1));
      Complex complex10 = complex1.ONE.sinh();
      complex8.NaN.multiply(3211.5968);
      complex3.getImaginary();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex5.subtract(1.5707963267948966);
      complex11.exp();
      complex12.add(1.0);
      complex10.divide(complex7);
      complex7.toString();
      complex9.tan();
      complex0.asin();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.INF.readResolve();
      Complex complex3 = complex2.INF.tanh();
      complex0.sinh();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      double double1 = 4945.073004;
      Complex complex1 = complex0.INF.createComplex(4945.073004, 5333.8890153625);
      complex1.ONE.toString();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.NaN.reciprocal();
      complex4.ZERO.sqrt1z();
      Complex complex5 = Complex.valueOf(5333.8890153625, 4945.073004);
      complex0.ONE.abs();
      Complex complex6 = complex3.INF.asin();
      Complex complex7 = complex6.ONE.atan();
      complex7.toString();
      complex6.INF.tan();
      Complex.valueOf(1561.713, 1561.713);
      complex0.getImaginary();
      complex7.getField();
      Complex complex8 = complex0.conjugate();
      complex2.asin();
      complex8.sinh();
      complex8.abs();
      Complex.valueOf(2185.9278558923, 2185.9278558923);
//      try { 
        complex5.nthRoot((-1962));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,962
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex3.ONE.acos();
      complex4.ONE.pow(complex2);
      Complex complex5 = Complex.valueOf((-1060.2651));
      Complex complex6 = complex5.subtract(complex1);
      complex1.exp();
      Complex complex7 = complex6.asin();
      complex7.ONE.abs();
      complex7.abs();
      Complex.valueOf(7.820115927111199, (-1097.854));
      complex5.toString();
      complex0.multiply(129);
      complex5.getField();
      int int0 = 0;
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.isNaN();
      Complex complex1 = Complex.valueOf(2259.14402892236, 2259.14402892236);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.cosh();
      complex2.ZERO.hashCode();
      Complex complex4 = complex1.divide(complex3);
      complex1.isNaN();
      complex3.NaN.getField();
      Complex complex5 = complex2.multiply(2259.14402892236);
      complex1.ZERO.abs();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex3.sin();
      complex7.NaN.tanh();
      complex6.I.exp();
      Complex complex8 = Complex.valueOf(1410.9010682739);
      Complex complex9 = complex5.add(complex8);
      complex0.readResolve();
      Complex complex10 = complex0.divide(complex6);
      complex10.NaN.nthRoot(1);
      Complex.valueOf(0.0, (-9.036933434595339E-8));
      complex1.nthRoot(587);
      complex9.subtract(complex2);
      Complex.valueOf((-1522.093999038562), (-1454.207878881));
      complex4.divide((-2683.694065));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      complex1.I.log();
      Complex complex2 = complex1.ZERO.tanh();
      complex0.NaN.subtract(complex2);
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex3.ONE.reciprocal();
      complex4.I.tanh();
      complex0.readResolve();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      complex5.INF.sinh();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.negate();
      complex7.INF.asin();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex2.subtract(complex3);
      complex6.getReal();
      Complex complex13 = complex12.acos();
      Complex.valueOf((-2436.18));
      Complex.valueOf(0.0);
      complex9.pow(complex7);
      complex13.multiply(3879.710579);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-292.556));
      complex0.tanh();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex2.I.multiply((-2952));
      complex4.I.toString();
      Complex complex5 = complex4.cosh();
      complex0.INF.conjugate();
      complex5.asin();
      complex0.getField();
      complex2.isNaN();
      Complex complex6 = complex4.I.subtract(complex3);
      Complex complex7 = complex6.ZERO.multiply((-2952));
      complex1.ZERO.cos();
      complex0.readResolve();
      complex4.readResolve();
      complex4.NaN.readResolve();
      complex5.sqrt1z();
      complex6.hashCode();
      Complex.valueOf(2669.852881506027);
      complex0.getImaginary();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(734.4);
      Complex complex1 = Complex.ZERO;
      complex0.add(complex1);
      complex1.ONE.asin();
      complex1.NaN.add(complex0);
      complex0.cosh();
      complex1.hashCode();
      Complex.valueOf((-726.2), (-555.8743702527823));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(1534.04);
      Complex complex1 = complex0.asin();
      complex1.ONE.divide(729.6732369);
      complex1.NaN.getField();
      Complex complex2 = complex0.cosh();
//      try { 
        complex2.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.multiply((-963.31035218));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.cos();
      Complex complex1 = complex0.createComplex(1650.292780116706, 1650.292780116706);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.pow(1650.292780116706);
      complex3.sin();
      complex3.NaN.tanh();
      complex2.multiply(complex3);
      complex1.equals("");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.createComplex((-3905.988247), (-20.0));
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.ONE.subtract((-3905.988247));
      Complex complex4 = complex2.ONE.tanh();
      Complex complex5 = complex4.INF.tan();
      complex5.abs();
      Complex complex6 = complex4.I.asin();
      complex6.ZERO.subtract((-3905.988247));
      complex4.ONE.readResolve();
      Complex complex7 = complex2.INF.tanh();
      Complex complex8 = complex0.tanh();
      complex2.INF.exp();
      Complex complex9 = complex8.sin();
      complex9.INF.atan();
      complex1.add(complex2);
      Complex.valueOf((-3905.988247));
      complex7.isInfinite();
      complex3.hashCode();
      Complex complex10 = complex1.subtract((-3905.988247));
      complex10.getArgument();
      complex10.tanh();
      complex7.pow((-1.5707963267948966));
      Complex complex11 = complex3.conjugate();
      complex0.add((-20.0));
      complex10.add(Double.NaN);
//      try { 
        complex11.nthRoot((-1487));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,487
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(1.0386032577072378E209);
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.tanh();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.pow(0.0);
      Complex complex4 = complex3.ZERO.divide(complex1);
      complex1.pow(6.283185307179586);
      complex2.sinh();
      complex0.isInfinite();
      complex4.multiply(0.0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.sin();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.reciprocal();
      complex4.multiply(1);
      complex5.ONE.tan();
      Complex complex6 = complex3.multiply(1);
      complex5.INF.sin();
      complex0.I.negate();
      complex5.sqrt1z();
      complex2.getArgument();
      complex6.cos();
      complex0.exp();
      Complex.valueOf(Double.NaN);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(715);
      Complex complex2 = complex1.asin();
      complex1.INF.asin();
      Complex complex3 = complex0.ONE.multiply(2266);
      complex3.I.cos();
      complex3.ZERO.nthRoot(2266);
      Complex complex4 = complex2.I.pow(2.057887077331543);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex2.ZERO.sqrt();
      complex6.abs();
      complex0.sin();
      complex6.subtract(2.057887077331543);
      complex4.ONE.getField();
      complex1.divide(complex0);
      complex6.sqrt();
      complex5.add((-863.4390358));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1615.0);
      Complex complex1 = complex0.divide(1.4450790882110596);
      Complex complex2 = Complex.I;
      complex0.ONE.tan();
      complex0.ZERO.divide(1615.0);
      Complex.valueOf(1615.0);
      Complex complex3 = complex1.NaN.divide((-1.0571553019207106E-8));
      complex3.I.sinh();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.exp();
      complex0.hashCode();
      complex1.getReal();
      complex1.hashCode();
      complex2.getReal();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.5562618970870972, 0.5562618970870972);
      Complex complex1 = complex0.negate();
      complex1.pow(1657.2910277462197);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.I.log();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.ZERO.multiply(612);
      complex2.nthRoot(1002);
      complex3.divide(0.0);
      complex1.atan();
      complex3.nthRoot(1002);
      complex3.add((-707.9389381));
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.subtract(0.0);
      complex0.divide(0.0);
      complex2.sin();
      Complex complex3 = complex0.sqrt1z();
      complex0.acos();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex0.tan();
      complex6.INF.tanh();
      complex6.I.pow(complex5);
      complex3.ONE.pow(complex4);
      Complex complex7 = complex3.add(complex2);
      Complex complex8 = complex6.acos();
      complex8.divide(complex7);
      complex0.createComplex(0.0, 0.0);
      Complex.valueOf(0.0, 3674.5210395);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
      Complex complex2 = Complex.I;
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.NaN.multiply(2007);
      Complex complex5 = complex4.ONE.createComplex(2007, 2007);
      complex5.INF.asin();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.INF.multiply(1085.2);
      complex0.ONE.subtract(complex6);
      complex0.equals("Cumulative probability function returned NaN for argument {0} p = {1}");
      complex2.getReal();
      complex6.readResolve();
      complex7.readResolve();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.INF.divide(complex1);
      complex2.I.abs();
      Complex complex5 = complex3.ZERO.divide(complex0);
      complex0.isInfinite();
      complex5.sin();
      complex3.tan();
      complex4.add(1.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-1.043079666926483E-86));
      complex2.ZERO.getArgument();
      Complex complex4 = complex1.subtract(2.0);
      Complex complex5 = complex0.reciprocal();
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      
      complex3.NaN.hashCode();
      complex2.nthRoot(1);
      Complex complex6 = complex3.pow((-1.5707963267948966));
      Complex complex7 = Complex.valueOf((-1.5707963267948966));
      Complex complex8 = complex7.I.sqrt();
      complex8.I.nthRoot(1);
      complex7.INF.hashCode();
      Complex complex9 = complex4.multiply(17);
      Complex complex10 = complex9.ONE.pow(0.0);
      complex10.INF.readResolve();
      Complex complex11 = complex3.tan();
      complex11.nthRoot(1);
      complex2.getField();
      Complex complex12 = complex2.atan();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = Complex.valueOf(2.0, 0.0);
      complex6.ONE.multiply(917);
      Complex complex14 = complex13.asin();
      assertEquals((-1.3169578969248166), complex14.getImaginary(), 0.01);
      
      Complex complex15 = (Complex)complex8.readResolve();
      assertEquals(0.7071067811865476, complex8.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex6.exp();
      assertTrue(complex16.equals((Object)complex12));
      assertTrue(complex3.equals((Object)complex11));
      
      Complex complex17 = complex9.acos();
      Complex complex18 = complex17.cos();
      assertEquals((-34.0), complex18.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.I;
//      try { 
        complex1.I.nthRoot((-1606));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,606
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.ONE.asin();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.equals((Object)complex1));
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.INF.divide((-3366.74475145));
      Complex complex7 = complex6.NaN.multiply(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      
      complex0.toString();
      Complex complex8 = complex4.INF.asin();
      Complex complex9 = complex8.cosh();
      complex0.log();
      Complex complex10 = complex2.sinh();
      complex10.ONE.multiply(complex2);
      assertSame(complex10, complex7);
      
      Complex complex11 = complex3.multiply(2324);
      boolean boolean0 = complex11.equals(complex0);
      assertSame(complex11, complex9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      List<Complex> list0 = complex1.nthRoot(1);
      assertTrue(list0.contains(complex1));
      
      Complex complex2 = complex0.divide((-1090.2355));
      complex2.I.getField();
      Complex complex3 = complex2.subtract(complex0);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = Complex.valueOf(586.817075656558, (-1090.2355));
      complex1.isInfinite();
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = complex5.cos();
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(921.7701069418442, complex5.getReal(), 0.01);
      
      Complex complex7 = complex2.sin();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      double double0 = complex2.getArgument();
      assertEquals((-3.141592653589793), double0, 0.01);
  }
}
