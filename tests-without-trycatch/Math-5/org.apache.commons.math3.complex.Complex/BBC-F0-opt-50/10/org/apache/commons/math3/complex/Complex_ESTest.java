/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:26:37 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(1.0011435778056492, (-2448.0));
      complex0.divide(complex1);
      complex0.tan();
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.41421356237309515, Double.POSITIVE_INFINITY);
      complex1.multiply(4.90619214611028E-256);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      complex2.toString();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf((-926.0782044839));
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = Complex.valueOf(1.121383042095528E-83, Double.POSITIVE_INFINITY);
      complex1.pow(complex7);
      Complex complex8 = complex6.add(complex5);
      complex7.log();
      Complex complex9 = complex7.multiply(1740);
      complex5.isInfinite();
      complex0.toString();
      complex5.pow(1.842017538449391E179);
      complex8.asin();
      Complex complex10 = Complex.I;
      complex9.nthRoot(1426);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(2.2714377019996263E7, 20.0);
      complex0.ZERO.hashCode();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-379.79641565893));
      complex0.divide(Double.NaN);
      Complex complex2 = complex1.pow(Double.NaN);
      complex2.nthRoot(1395);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1258);
      complex0.abs();
      complex0.conjugate();
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(863.0, 863.0);
      Complex complex1 = complex0.subtract(863.0);
      Complex complex2 = complex1.divide(4.747229597770176E-177);
      complex2.pow((-1.4255188208147591));
      Complex complex3 = complex2.divide(4.747229597770176E-177);
      complex3.INF.getArgument();
      Complex complex4 = complex3.asin();
      complex2.getField();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1489538.0), 1.817902383329764E179);
      Complex complex1 = Complex.valueOf((-1489538.0), 20.0);
      complex1.I.cos();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex2.I.pow((-140.8371));
      Complex complex7 = complex3.ZERO.negate();
      Complex complex8 = complex7.I.pow(complex3);
      complex0.nthRoot(233);
      Complex complex9 = complex0.add(1.817902383329764E179);
      complex9.ONE.getArgument();
      Complex complex10 = complex5.subtract(complex6);
      complex10.ONE.acos();
      complex9.ONE.pow(4133.7805945171);
      complex9.I.nthRoot(1027);
      Complex complex11 = complex9.cosh();
      complex11.nthRoot(233);
      complex9.getField();
      complex2.nthRoot(233);
      complex5.exp();
      complex7.toString();
      Complex complex12 = complex8.acos();
      complex12.ONE.cosh();
      complex0.tanh();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
//      try { 
        complex0.ZERO.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = (Complex)complex0.ZERO.readResolve();
      Complex complex3 = complex2.pow(complex1);
      complex3.add(complex1);
      Complex.valueOf(1017.0086692078664);
      Complex complex4 = new Complex(1.148747205734253);
      complex2.multiply(1017.0086692078664);
      Complex complex5 = complex0.subtract(Double.NaN);
      Complex complex6 = Complex.ZERO;
      complex5.tan();
      complex4.tan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex(Double.NaN);
      complex8.ONE.tanh();
      Complex complex9 = Complex.ZERO;
      complex6.pow(complex9);
      Complex.valueOf(2090.056, 1.148747205734253);
      Complex.valueOf(1929.9377898);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(863.0, 863.0);
      complex0.subtract(863.0);
      Complex complex1 = Complex.ZERO;
      complex1.isNaN();
      Complex complex2 = complex1.acos();
      complex2.exp();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.ONE;
      complex5.pow(complex2);
      complex0.log();
      complex0.multiply((-1840));
      complex0.isInfinite();
      complex4.toString();
      complex3.pow(4.747229597770176E-177);
      Complex complex6 = complex2.createComplex(666.9257324872, 863.0);
      Complex complex7 = complex0.tanh();
      complex7.sin();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = complex0.pow(1766.442813700708);
      complex1.INF.divide(complex0);
      complex1.ONE.conjugate();
      complex1.createComplex(7.039346342900042, (-20.0));
      Complex complex2 = complex1.tanh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.ZERO.readResolve();
      complex1.NaN.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.negate();
      complex4.NaN.exp();
      Complex complex5 = complex3.ZERO.log();
      Complex complex6 = Complex.ONE;
      complex3.ZERO.pow(complex6);
      Complex complex7 = Complex.I;
      complex1.sqrt();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = (Complex)complex0.ZERO.readResolve();
      complex2.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.sinh();
      complex0.negate();
      complex1.exp();
      Complex complex5 = complex3.log();
      Complex complex6 = Complex.ONE;
      complex0.pow(complex6);
      Complex complex7 = complex0.log();
      complex1.multiply((-1837));
      complex4.isInfinite();
      complex5.toString();
      Complex complex8 = complex7.pow(1805.4348413);
      complex8.createComplex(0.9989951451397616, 1805.4348413);
      Complex complex9 = Complex.valueOf((-20.0), (-410.4620638494611));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      complex2.sqrt();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-20.0));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.pow(complex2);
      complex0.add(complex1);
      Complex.valueOf((-20.0));
      Complex complex4 = new Complex((-20.0));
      Complex complex5 = complex4.multiply((-20.0));
      complex2.subtract(1.0);
      complex0.tan();
      complex3.tan();
      complex5.pow(complex2);
      Complex.valueOf(1017.0086692078664, 1.0);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(863.0, 863.0);
      Complex complex1 = complex0.subtract(863.0);
      Complex complex2 = Complex.ZERO;
      complex2.isNaN();
      complex2.acos();
      Complex complex3 = complex1.divide(4.747229597770176E-177);
      Complex complex4 = Complex.ZERO;
      complex0.pow((-7.952636967837795E-8));
      complex3.asin();
      Complex.valueOf((-7.952636967837795E-8));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.divide(complex0);
      Complex complex2 = Complex.INF;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(863.0, 863.0);
      Complex complex1 = complex0.subtract(863.0);
      Complex complex2 = Complex.ZERO;
      complex2.isNaN();
      complex1.acos();
      Complex complex3 = new Complex(863.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1205.8415375264058), (-1205.8415375264058));
      complex1.getField();
      Complex complex2 = Complex.INF;
      complex1.sin();
      Complex complex3 = complex1.tan();
      Complex.valueOf(1131.59753371, 216.96);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1601.59068063089), 2.667695552814763E162);
      Complex complex2 = complex1.I.pow((-1601.59068063089));
      complex2.INF.divide((-1365.24166716789));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex0.I.divide(complex1);
      complex5.I.subtract(complex0);
      Complex complex6 = complex0.pow(0.06983080311819467);
      complex4.I.abs();
      complex6.ONE.sinh();
      complex4.toString();
      Complex complex7 = Complex.valueOf((-1103.54));
      complex7.cos();
      complex5.toString();
      Complex complex8 = complex3.divide(complex6);
      complex8.I.asin();
      complex4.toString();
      Complex.valueOf(2455.079759);
      complex8.multiply(7.464291220240453);
      Complex complex9 = complex5.reciprocal();
      complex5.add(complex3);
      complex9.multiply(0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2144998134);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-5.772862039728412E-9), 3286.11509870269);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.tanh();
      complex3.sinh();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex5.log();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.pow(complex3);
      complex6.log();
      Complex complex10 = complex7.multiply(17);
      complex6.isInfinite();
      complex9.toString();
      Complex complex11 = new Complex(1383.560484800131);
      Complex complex12 = complex11.pow((double) 2144998134);
      complex4.asin();
      complex4.divide(complex5);
      complex10.createComplex(0.9989951451397616, 0.9989951451397616);
      complex12.sinh();
      Complex complex13 = Complex.valueOf((-1725.9994206255296));
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(863.0, 863.0);
      Complex complex1 = complex0.subtract(863.0);
      Complex complex2 = Complex.ZERO;
      complex2.isNaN();
      complex1.acos();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow((-1.4255188208147591));
      Complex complex4 = complex0.negate();
      complex1.exp();
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.pow(complex1);
      complex8.add(complex2);
      Complex complex9 = complex0.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.isInfinite();
      complex5.toString();
      complex3.pow((-1.4255188208147591));
      complex9.asin();
      complex7.conjugate();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.divide(0.0);
      complex2.ZERO.sinh();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex3.multiply(complex1);
      complex4.pow(0.0);
      Complex complex6 = Complex.I;
      complex6.getField();
      Complex.valueOf(0.0);
      complex6.toString();
      Complex complex7 = complex6.conjugate();
      Complex.valueOf(0.0);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.reciprocal();
      complex7.atan();
      Complex complex10 = Complex.I;
      complex10.nthRoot(257);
      Complex.valueOf(0.0);
      complex5.multiply((double) 257);
      complex0.subtract(0.0);
      complex6.conjugate();
      complex1.tan();
      complex5.pow(complex10);
      complex0.atan();
      complex9.cosh();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(863.0, 863.0);
      Complex complex1 = complex0.subtract(863.0);
      Complex complex2 = Complex.ZERO;
      complex2.isNaN();
      complex1.acos();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow((-1.4255188208147591));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.valueOf(1017.0086692078664);
      complex8.pow(complex1);
      Complex complex9 = complex0.log();
      Complex complex10 = complex5.multiply(1740);
      complex8.isInfinite();
      complex6.toString();
      complex3.pow((-1.4255188208147591));
      Complex complex11 = complex9.asin();
      complex11.divide(complex1);
      complex9.createComplex(Double.POSITIVE_INFINITY, (-1725.9994206255296));
      complex10.sinh();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.ZERO.readResolve();
      Complex complex2 = complex1.NaN.acos();
      Complex.valueOf(3286.11509870269, 3286.11509870269);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex3.INF.sinh();
      Complex complex6 = complex0.negate();
      complex6.NaN.exp();
      Complex complex7 = complex5.ZERO.log();
      Complex complex8 = Complex.ONE;
      complex5.ZERO.pow(complex8);
      complex4.ZERO.log();
      Complex complex9 = complex2.multiply((-1837));
      complex0.isInfinite();
      complex5.toString();
      Complex complex10 = complex8.pow((double) (-1837));
      Complex complex11 = complex10.asin();
      complex11.ZERO.divide(complex9);
      complex2.createComplex(0.9989951451397616, (-1725.9994206255296));
      complex4.sinh();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(863.0);
      Complex complex2 = Complex.ZERO;
      complex2.isNaN();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.pow((-1.4255188208147591));
      complex2.hashCode();
      complex3.sin();
      Complex complex6 = new Complex(863.0, (-346.0020361965501));
      Complex complex7 = complex2.add(complex6);
      complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.tanh();
      complex5.pow((-3544998.87455802));
      complex8.sinh();
      Complex complex9 = Complex.valueOf((-1383.8972947578782), 16.94849682170384);
      complex9.negate();
      Complex complex10 = complex8.reciprocal();
      complex3.conjugate();
      complex1.getArgument();
      complex2.getArgument();
      complex9.getField();
      complex1.exp();
      complex10.add(complex6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1270.8244133));
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
      complex0.negate();
      Complex complex2 = new Complex(0.0, 0.0);
      complex2.toString();
      Complex.valueOf((-504.1580840752));
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cos();
      Complex complex1 = Complex.NaN;
      complex1.multiply(48);
      complex1.exp();
      Complex complex2 = Complex.valueOf((double) 48, Double.NaN);
      complex0.conjugate();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(863.0);
      Complex complex2 = Complex.ZERO;
      complex2.isNaN();
      Complex complex3 = complex1.acos();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.pow((-1.4255188208147591));
      complex2.hashCode();
      Complex complex5 = complex3.sin();
      Complex complex6 = new Complex(863.0, (-346.0020361965501));
      Complex complex7 = complex2.add(complex6);
      Complex complex8 = Complex.valueOf((-346.0020361965501), 1448.55774541);
      complex8.multiply(0.31845372915267944);
      Complex complex9 = complex6.tanh();
      Complex.valueOf((-4.6010169948634819E18));
      complex3.multiply((-6.878666975101243E-97));
      complex7.subtract(3.003777734030334E-116);
      Complex complex10 = complex3.conjugate();
      complex9.tan();
      complex8.pow(complex10);
      complex5.atan();
      complex2.cosh();
      complex8.sinh();
      complex4.pow(0.31845372915267944);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.NaN.exp();
      Complex complex6 = complex4.multiply(complex1);
      complex5.pow(0.0);
      Complex complex7 = Complex.I;
      complex7.getField();
      Complex complex8 = Complex.valueOf(0.0);
      complex7.toString();
      Complex complex9 = complex7.conjugate();
      Complex.valueOf(0.0);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.reciprocal();
      complex6.atan();
      complex8.nthRoot(1782);
      complex3.pow(1.2300209999084473);
      Complex complex12 = complex9.sinh();
      Complex complex13 = Complex.NaN;
      complex13.negate();
      complex12.reciprocal();
      complex5.conjugate();
      complex0.getArgument();
      complex10.getArgument();
      Complex complex14 = Complex.ONE;
      complex11.getField();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(2.425402115319395E-188);
      complex0.reciprocal();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.multiply(2.425402115319395E-188);
      Complex complex3 = Complex.valueOf(2.425402115319395E-188, (-2043.519));
      complex1.multiply(1448.55774541);
      complex3.tanh();
      Complex complex4 = complex2.pow(1448.55774541);
      complex1.sinh();
      complex2.negate();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.conjugate();
      complex5.getArgument();
      complex6.getArgument();
      Complex complex7 = Complex.ONE;
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-822.32207), Double.NaN);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.reciprocal();
      double double0 = 0.5063233375549316;
      Complex complex3 = complex1.INF.divide(0.5063233375549316);
      complex3.ZERO.acos();
      double double1 = 1842.65093777;
      Complex complex4 = complex2.ONE.createComplex(Double.NaN, 1842.65093777);
      complex4.NaN.tanh();
      complex4.I.sqrt1z();
      complex0.ONE.cosh();
      complex0.conjugate();
//      try { 
        complex0.ONE.nthRoot((-2147483647));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,147,483,647
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(863.0, 0.0);
      complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      complex0.conjugate();
      Complex complex3 = new Complex(0.0, Double.NaN);
      Complex complex4 = Complex.valueOf(863.0);
      complex4.add(0.0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2759.851312527), (-2759.851312527));
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.atan();
      Complex complex2 = Complex.INF;
      complex2.nthRoot(1766);
      Complex.valueOf((double) 1766);
      complex0.multiply((double) 1766);
      Complex complex3 = Complex.valueOf((-565.2782922800167));
      complex3.subtract((-531.659931936364));
      Complex complex4 = Complex.NaN;
      complex4.conjugate();
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.valueOf(558.7, 1990.462627889263);
      Complex complex7 = complex6.pow(complex4);
      complex5.atan();
      complex1.cosh();
      complex5.getImaginary();
      complex7.cosh();
      complex7.multiply(1766);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-558.7));
      complex1.toString();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.valueOf((-3490.059443237347));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.reciprocal();
      complex1.atan();
      complex3.nthRoot(1782);
      Complex.valueOf((-2560.29898514899));
      Complex complex6 = complex0.multiply((-1034.062722934));
      Complex complex7 = complex5.subtract((-558.7));
      complex5.conjugate();
      Complex complex8 = complex5.tan();
      Complex complex9 = new Complex(0.9171523356672743);
      complex2.pow(complex9);
      complex6.atan();
      Complex complex10 = new Complex((-3944.28091483453), (-1.1030897183911054E-8));
      complex10.cosh();
      complex7.getImaginary();
      complex8.cosh();
      complex1.multiply(1782);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(863.0);
      Complex complex2 = Complex.ZERO;
      complex2.isNaN();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.pow((-1.4255188208147591));
      complex2.hashCode();
      Complex complex6 = complex3.sin();
      Complex complex7 = new Complex(863.0, (-346.0020361965501));
      Complex complex8 = complex2.add(complex7);
      Complex complex9 = Complex.valueOf((-346.0020361965501), 1448.55774541);
      complex9.multiply(0.31845372915267944);
      complex7.tanh();
      complex5.pow((-323.418202606));
      complex1.sinh();
      complex6.negate();
      complex7.reciprocal();
      complex4.conjugate();
      complex9.getArgument();
      complex8.getArgument();
      Complex complex10 = Complex.ONE;
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = new Complex((-1923.0), (-1923.0));
      Complex complex2 = complex1.divide((-20.0));
      complex2.acos();
      Complex complex3 = Complex.INF;
      complex3.sin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.multiply((-1923.0));
      complex6.tan();
      complex4.subtract(complex1);
      complex5.acos();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.sin();
      complex0.tan();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.I.getField();
      complex1.ZERO.subtract(1.4450790882110596);
      Complex complex2 = complex0.tan();
      complex2.I.acos();
      complex0.ONE.atan();
      complex0.subtract(3257.404);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.sqrt1z();
      complex1.NaN.exp();
      Complex complex5 = complex4.multiply(complex1);
      complex5.ZERO.pow(0.0);
      complex5.I.getField();
      Complex complex6 = Complex.valueOf(0.0);
      complex5.ONE.toString();
      Complex complex7 = complex5.I.conjugate();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex7.ZERO.reciprocal();
      Complex complex10 = complex7.NaN.atan();
      complex1.sinh();
      complex8.negate();
      complex10.reciprocal();
      Complex complex11 = new Complex((-85.082942579004));
      Object object0 = new Object();
      complex5.equals(complex0);
      complex5.getImaginary();
      complex2.getReal();
      Object object1 = complex3.readResolve();
      complex9.equals(object1);
      Complex complex12 = Complex.ONE;
      complex6.reciprocal();
      complex12.conjugate();
      complex9.multiply(5.198297833430843E-5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(863.0, 0.0);
      Complex.valueOf(0.0);
//      try { 
        complex0.ZERO.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(2.425402115319395E-188);
      Complex complex1 = complex0.reciprocal();
      complex0.asin();
      complex0.INF.multiply(2.425402115319395E-188);
      Complex complex2 = complex1.negate();
      complex2.toString();
      Complex.valueOf(2.425402115319395E-188);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(863.0, 0.0);
      Complex complex1 = Complex.INF;
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.negate();
      complex2.I.toString();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-766.412219), (-766.412219));
      complex0.add((-766.412219));
      complex0.reciprocal();
      Complex complex1 = new Complex((-2604.68315), (-766.412219));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.multiply(7);
      Complex complex4 = complex2.subtract((double) 1);
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.divide(2699.9161);
      Complex complex7 = new Complex(2194.14343);
      Complex complex8 = complex7.pow((double) 7);
      complex7.hashCode();
      complex0.sin();
      Complex complex9 = complex2.add(complex3);
      Complex complex10 = complex8.multiply((-1694.3132595));
      complex10.tanh();
      complex0.pow((double) 7);
      complex5.sinh();
      complex6.negate();
      complex5.reciprocal();
      Complex complex11 = new Complex(1294.804050930323, 2699.9161);
      complex0.equals(complex11);
      complex9.getImaginary();
      complex4.getReal();
      Object object0 = new Object();
      complex4.reciprocal();
      complex10.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3.43338934259355E-8));
      Complex.valueOf(308.64142, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(2.0670460065057715E-307);
      Object object0 = new Object();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.INF;
      complex3.equals(complex4);
      complex1.getImaginary();
      complex3.getReal();
      Complex complex5 = Complex.I;
      complex5.equals(complex0);
      Complex complex6 = Complex.ONE;
      complex6.reciprocal();
      complex0.conjugate();
      complex2.multiply((-1978.64575));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.ONE;
      complex3.atan();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex1.divide(0.0);
      Complex complex7 = complex3.subtract(complex0);
      Complex complex8 = complex3.multiply(1);
      Complex complex9 = complex5.subtract(0.0);
      Complex complex10 = complex6.acos();
      Complex complex11 = complex6.divide(3.6637673548790206E194);
      complex2.pow(0.0);
      complex3.hashCode();
      complex5.sin();
      complex2.add(complex8);
      Complex complex12 = complex10.multiply(1.557407724654902);
      Complex complex13 = Complex.INF;
      Complex complex14 = complex13.tanh();
      complex9.pow(0.0);
      complex10.sinh();
      complex12.negate();
      complex7.reciprocal();
      complex11.equals(complex2);
      complex6.getImaginary();
      complex13.getReal();
      complex2.equals(complex4);
      complex14.reciprocal();
      complex5.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1636.5206897));
      Complex complex1 = complex0.cosh();
      complex1.INF.getArgument();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex3.NaN.divide((-6925.7468844318));
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.NaN.divide(254.69814565);
      complex5.I.getArgument();
      complex3.toString();
      Complex complex7 = complex1.ZERO.multiply(17);
      Complex complex8 = complex4.pow((-599.885684807795));
      complex3.reciprocal();
      Complex complex9 = complex2.cos();
      complex1.subtract((-6925.7468844318));
      complex5.getReal();
      complex8.NaN.nthRoot(37);
      complex2.log();
      complex5.abs();
      Complex complex10 = complex2.divide(complex9);
      complex10.NaN.createComplex(0.7853981633974483, 692.574040648);
      complex8.isInfinite();
      complex7.reciprocal();
      complex6.getField();
      complex7.createComplex(426.14164339064024, 1.0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.INF.atan();
      complex2.INF.sqrt();
      Complex complex4 = Complex.I;
      complex2.divide(0.0);
      Complex complex5 = complex3.ZERO.subtract(complex1);
      complex1.I.multiply(1);
      complex3.ZERO.subtract(3.6637673548790206E194);
      complex0.isNaN();
      complex0.acos();
      Complex complex6 = Complex.valueOf(0.0, 3.6637673548790206E194);
      Complex complex7 = complex6.ZERO.pow(0.0);
      complex7.I.hashCode();
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex6.acos();
      complex2.multiply(1);
      complex6.divide(2.712977886199951);
      complex5.isNaN();
      complex4.getImaginary();
      complex9.getReal();
      complex8.sinh();
      complex9.sqrt();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-427.39466));
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-116.1659753835), 3083.578);
      Complex complex2 = complex1.multiply((-2697));
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = new Complex(696.253312134639);
      complex6.multiply((-449.0));
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex3.pow((-4028.500578729643));
      complex7.sinh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.negate();
      complex0.reciprocal();
      Complex complex11 = (Complex)complex7.readResolve();
      complex10.tanh();
      complex10.equals(complex11);
      Complex complex12 = new Complex((-3.43338934259355E-8));
      complex12.getImaginary();
      complex10.getReal();
      complex4.equals(complex3);
      Complex complex13 = complex7.reciprocal();
      complex13.conjugate();
      complex5.multiply(0.0);
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-3875.263330989));
      complex0.INF.abs();
      int int0 = 4779;
      complex0.nthRoot(4779);
      Complex complex1 = null;
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex2.INF.sqrt();
      complex4.ZERO.asin();
      complex2.divide(0.0);
      complex3.ZERO.subtract(complex1);
      complex1.I.multiply(1);
      Complex complex5 = complex3.ZERO.subtract(3.6637673548790206E194);
      complex0.isNaN();
      complex0.acos();
      Complex complex6 = complex2.divide(276.7);
      Complex complex7 = complex6.ZERO.pow(0.0);
      complex7.I.hashCode();
      complex7.ONE.sin();
      complex3.getField();
      complex5.sqrt1z();
      Complex complex8 = Complex.valueOf((-2.6437112632041807E-8), (-1961.9473239751646));
      complex8.negate();
      complex2.add((-3877.0797865565214));
      complex6.reciprocal();
      Complex complex9 = Complex.valueOf(0.0, (-2.6437112632041807E-8));
      complex2.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex2.INF.sqrt();
      complex4.ZERO.asin();
      complex2.divide(0.0);
      complex3.ZERO.subtract(complex1);
      Complex complex5 = new Complex(1, (-4236.6));
      Complex complex6 = Complex.valueOf((-4236.6));
      Complex complex7 = complex0.divide(complex6);
      complex7.negate();
      complex4.toString();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(2144998134);
      complex0.subtract(2.3296151161193848);
      complex1.isNaN();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.divide((double) 2144998134);
      Complex complex4 = complex2.pow((double) 2144998134);
      complex0.hashCode();
      complex4.sin();
      Complex complex5 = new Complex(2144998134, 1624.8947988063562);
      complex0.add(complex5);
      complex3.multiply(1624.8947988063562);
      Complex complex6 = complex2.tanh();
      complex6.pow(6167.156161919493);
      Complex complex7 = complex6.sinh();
      complex6.negate();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = new Complex(276.7);
      Object object0 = new Object();
      complex9.equals(object0);
      complex7.getImaginary();
      complex8.getReal();
      complex7.equals((Object) null);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.reciprocal();
      complex6.conjugate();
      complex11.multiply((-1393.547031444733));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(863.0, 0.0);
      Complex complex1 = Complex.valueOf(863.0, 863.0);
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.negate();
      complex2.I.toString();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3.00901028043488E-38), (-1626.07));
      Complex complex2 = Complex.ZERO;
      complex0.NaN.subtract(complex2);
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex1.ZERO.pow(complex0);
      complex4.divide((-1.6059226011778748E112));
      complex4.getField();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.add(complex1);
      complex0.exp();
      Complex complex7 = complex0.divide((-1626.07));
      complex6.reciprocal();
      complex7.readResolve();
      complex2.tanh();
      Complex.valueOf((-1058.3736440357));
      complex3.multiply(2197);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-3875.263330989));
      complex0.INF.abs();
      complex0.nthRoot(4779);
      complex0.getField();
      complex0.NaN.tan();
      Complex complex1 = complex0.sqrt1z();
      complex1.I.negate();
      Complex complex2 = complex1.I.add((double) 4779);
      complex1.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.INF.atan();
      complex0.ZERO.asin();
      complex2.divide(0.0);
      complex3.ZERO.subtract(complex1);
      complex1.I.multiply(1);
      complex3.ZERO.subtract(3.6637673548790206E194);
      complex0.isNaN();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.divide(276.7);
      Complex complex6 = complex5.ZERO.pow(0.0);
      complex6.I.hashCode();
      Complex complex7 = complex6.ONE.sin();
      complex7.ZERO.add(complex6);
      Complex complex8 = complex0.multiply(276.7);
      Complex complex9 = complex8.INF.tanh();
      complex2.multiply((-1332.965));
      Complex complex10 = complex8.subtract(20.0);
      Complex complex11 = complex10.conjugate();
      complex11.tan();
      Complex complex12 = Complex.INF;
      complex12.pow(complex2);
      Complex complex13 = Complex.I;
      complex13.atan();
      complex8.cosh();
      complex4.getImaginary();
      complex9.cosh();
      complex8.multiply((-3987));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.nthRoot(378);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.add(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.NaN.subtract(0.0);
//      try { 
        complex3.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.createComplex((-803.5389913), 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.conjugate();
      complex0.multiply(409);
      Complex complex3 = complex0.subtract(0.0);
      complex3.getArgument();
      Complex complex4 = complex3.multiply(3036.8715);
      complex1.sin();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.log();
      complex4.getImaginary();
      complex1.getImaginary();
      complex6.hashCode();
      Complex complex7 = complex5.tanh();
      complex7.I.exp();
      complex2.pow(0.0);
      Complex.valueOf(2.0014700145557332E-75);
      complex4.tan();
      complex4.readResolve();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-3875.263330989));
      complex0.INF.abs();
      complex0.nthRoot(4779);
      complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      complex1.I.negate();
      complex1.I.add((double) 4779);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 147.0);
      complex0.ZERO.cosh();
      complex0.ONE.nthRoot(1);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.I.pow(0.0);
      complex2.nthRoot(1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.log();
      complex0.INF.exp();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.NaN.cos();
      complex6.I.multiply(1);
      Complex complex8 = complex0.sin();
      complex8.INF.divide(1.0);
      Complex complex9 = complex5.subtract(529.62960194);
      Complex complex10 = complex2.sqrt();
      complex10.ZERO.getField();
      complex5.readResolve();
      complex4.cos();
      complex7.hashCode();
      complex1.subtract(0.0);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.I.subtract(complex0);
      complex0.ZERO.add(complex1);
      Complex complex2 = Complex.valueOf(2758.0);
      complex0.atan();
      complex2.asin();
      complex0.cos();
      complex2.NaN.divide(2758.0);
      complex1.asin();
      complex2.isNaN();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex((-1750.5402786046));
      complex1.ZERO.subtract(complex2);
      Complex complex3 = complex0.ZERO.negate();
      complex3.ONE.createComplex(337.45, (-600.463604608709));
      Complex complex4 = complex0.multiply(1836);
      Complex complex5 = complex4.NaN.add((double) 1836);
      Complex.valueOf((double) 1836);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex4.INF.log();
      complex8.I.readResolve();
      Complex.valueOf(0.006812678650021553);
      complex6.ONE.hashCode();
      complex4.createComplex(1836, (-2268.9971));
      complex8.NaN.abs();
      Complex complex9 = complex7.add(complex5);
      Complex complex10 = complex9.divide(complex2);
      Complex complex11 = complex2.INF.subtract(complex0);
      complex11.ZERO.subtract((-600.463604608709));
      complex6.reciprocal();
      complex2.tan();
      complex8.sin();
      complex10.sin();
      Complex.valueOf(1172.517177, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-427.39466));
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-116.1659753835), 3083.578);
      Complex complex2 = complex1.multiply((-2697));
      complex0.readResolve();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.multiply((-2697));
      Complex complex6 = complex5.ZERO.divide((-116.1659753835));
      complex3.isNaN();
      complex5.getImaginary();
      complex4.getReal();
      Complex complex7 = complex6.sinh();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex4.ZERO.asin();
      complex2.divide(0.0);
      complex3.ZERO.subtract(complex1);
      complex1.I.multiply(1);
      complex3.ZERO.subtract(3.6637673548790206E194);
      complex0.isNaN();
      complex0.acos();
      Complex complex6 = complex2.divide(276.7);
      Complex complex7 = complex6.ZERO.pow(0.0);
      complex7.I.hashCode();
      Complex complex8 = complex7.ONE.sin();
      complex8.ZERO.add(complex7);
      Complex complex9 = complex0.multiply(276.7);
      Complex complex10 = complex9.INF.tanh();
      complex6.ONE.pow(0.0);
      complex10.NaN.sinh();
      Complex complex11 = complex6.negate();
      Complex complex12 = complex6.reciprocal();
      complex0.equals(complex2);
      complex0.getImaginary();
      complex12.getReal();
      complex5.equals(complex1);
      complex3.reciprocal();
      complex11.conjugate();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(863.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.negate();
      complex2.I.toString();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2759.851312527), (-2759.851312527));
      complex0.ZERO.sqrt1z();
      complex0.I.subtract((-2759.851312527));
      Complex complex1 = complex0.sqrt();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.NaN.pow(complex1);
      complex0.exp();
      Complex.valueOf((-1044.06736), (-6786.61));
//      try { 
        complex1.nthRoot((-1850));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,850
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(1.7078641226055994E-91);
      complex0.ZERO.toString();
      complex1.nthRoot(740);
      Complex complex2 = complex0.subtract(complex1);
      complex2.abs();
      Complex complex3 = complex0.sqrt1z();
      complex0.ONE.acos();
      complex2.multiply(2.2221434720602702E-8);
      complex0.ZERO.sin();
      complex3.divide((-318.3649835451596));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-3083.375023));
      complex0.readResolve();
      complex1.I.sinh();
      Complex complex2 = complex0.I.add((-1166.3483));
      complex2.multiply(0.0);
      Complex complex3 = Complex.valueOf(5079.7);
      Complex complex4 = complex3.I.createComplex((-709.5956551), (-361.07579307));
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex0.divide(complex5);
      complex6.ONE.sinh();
      complex6.negate();
      Complex.valueOf((-3907.5595));
      complex5.I.sqrt1z();
      Complex.valueOf(0.0);
      complex1.conjugate();
      complex5.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(4330.8);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex0.divide(4330.8);
      complex4.divide(1626.2907);
      complex2.isInfinite();
      Complex complex5 = complex3.multiply(2.003926370146842E-8);
      Complex complex6 = complex5.INF.multiply(2.003926370146842E-8);
      complex3.log();
      complex0.getArgument();
      complex4.cos();
      complex6.multiply(2.003926370146842E-8);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1.132042407989502);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex2.INF.multiply((-451.2251603215684));
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex0.ZERO.sqrt();
      complex0.INF.toString();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.INF.divide(0.0);
      Complex complex9 = complex8.ONE.asin();
      Complex complex10 = complex3.add(complex4);
      Complex complex11 = complex7.NaN.cos();
      complex11.ZERO.asin();
      complex11.NaN.toString();
      Complex complex12 = complex11.I.pow(0.0);
      Complex complex13 = complex10.acos();
      complex6.hashCode();
      complex13.ZERO.hashCode();
      complex7.cos();
      complex5.pow((-182.02551575));
      complex3.subtract(0.0);
      Complex complex14 = complex10.add(complex8);
      complex14.NaN.nthRoot(4397);
      complex9.conjugate();
      complex12.equals(complex13);
      complex0.multiply(0.0);
      complex3.createComplex((-2458.7172975583744), (-3175.3882885530065));
      complex8.pow(1.132042407989502);
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      int int0 = 3705;
      complex0.nthRoot(3705);
      Complex complex1 = complex0.cosh();
      int int1 = 617;
      // Undeclared exception!
      complex1.nthRoot(617);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2752.381669053998), (-2752.381669053998));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.INF.asin();
      complex2.ONE.tan();
      complex1.add(complex2);
      Complex complex4 = complex1.pow((-2752.381669053998));
      complex1.ZERO.getArgument();
      complex1.equals(complex2);
      complex2.getArgument();
      Complex complex5 = complex0.sqrt();
      complex5.NaN.multiply(0.0);
      complex0.log();
      complex4.INF.acos();
      complex3.ONE.add(complex0);
      complex4.getArgument();
      complex1.subtract(complex3);
      complex0.hashCode();
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.ZERO.subtract(3.198658219194836E-179);
      // Undeclared exception!
      complex1.nthRoot(4785);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.subtract(1.1968433856964111);
      complex2.I.exp();
      Complex complex3 = complex2.I.asin();
      complex3.INF.cos();
      complex2.asin();
      Complex complex4 = complex0.createComplex(0.0, 746.839);
      complex4.NaN.getArgument();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.I.multiply(complex5);
      Complex complex7 = complex0.sin();
      complex7.NaN.getField();
      Complex complex8 = complex3.divide(0.0);
      complex2.hashCode();
      complex6.INF.sin();
      Complex complex9 = complex1.asin();
      complex9.pow(complex8);
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.pow(975.3);
      Complex complex2 = complex0.log();
      int int0 = (-1549);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = new Complex((-1549.91873951), (-1549));
      complex2.I.sinh();
      Complex complex5 = complex3.I.multiply(complex4);
      complex5.conjugate();
//      try { 
        complex2.INF.nthRoot((-1549));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,549
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-186.6844), (-2.7609457648450225E-8));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.ZERO.exp();
      Complex complex4 = complex3.INF.sqrt1z();
      complex4.NaN.log();
      Complex complex5 = complex2.INF.negate();
      complex0.ONE.nthRoot(1);
      complex5.I.getField();
      complex0.isInfinite();
      complex1.equals("");
      Complex complex6 = complex0.negate();
      complex6.I.toString();
      complex6.tanh();
      complex0.hashCode();
      Complex complex7 = complex1.NaN.divide((-3217.7127317114105));
      Complex complex8 = Complex.valueOf(0.0);
      complex5.reciprocal();
      complex6.exp();
      complex8.add(2.3472546699189522E-8);
      complex0.sqrt1z();
      complex7.reciprocal();
      complex0.hashCode();
      complex1.equals("MAP_MODIFIED_WHILE_ITERATING");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(2.425402115319395E-188);
      complex0.reciprocal();
      Complex complex1 = complex0.asin();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-511.4710923890077));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      Complex complex1 = complex0.divide((-1923.0));
      complex1.I.acos();
      complex1.NaN.sin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.multiply((-1923.0));
      complex2.I.tan();
      complex0.subtract(complex3);
      complex0.acos();
      complex2.log();
      complex1.divide((-1923.0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(1.030593104122615E-64, (-686.196759633126));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = Complex.valueOf(2427.091893043, 1.030593104122615E-64);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.multiply(complex3);
      complex2.nthRoot(945);
      complex4.ONE.hashCode();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.pow(complex5);
      Complex.valueOf((double) 945);
      complex6.divide(0.0);
      Complex complex7 = complex5.multiply(complex0);
      complex7.ONE.add(complex2);
      Complex complex8 = complex7.sin();
      Complex complex9 = complex1.add(complex8);
      complex9.ZERO.multiply(7);
      complex9.createComplex(1.030593104122615E-64, (-4667.3940929947));
      complex1.getField();
      Complex complex10 = complex7.exp();
      complex10.NaN.add((double) 945);
      complex5.getReal();
      complex5.createComplex(0.0, 1.0);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex0.isNaN();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.pow((-606.398383));
      Complex complex4 = complex3.tan();
      complex4.ONE.abs();
      Complex complex5 = complex4.I.exp();
      complex5.ONE.getField();
      complex0.hashCode();
      complex1.abs();
      Complex complex6 = complex0.cosh();
      complex6.ONE.toString();
      complex3.toString();
      complex5.getReal();
      complex2.sin();
      Complex complex7 = complex6.tan();
      complex7.multiply(1);
      Complex complex8 = complex0.pow(complex5);
      complex8.I.divide((-20.0));
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5903874635696411, 0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.ONE.divide(0.0);
      Complex complex4 = complex0.tan();
      complex3.I.readResolve();
      complex0.divide((-525.6462465));
      complex0.INF.atan();
      complex3.INF.sqrt();
      Complex complex5 = complex2.ZERO.negate();
      complex1.pow(complex5);
      Complex complex6 = complex3.I.pow(0.0);
      complex4.toString();
      complex6.cosh();
      complex0.ONE.sqrt1z();
      complex0.tan();
      Complex complex7 = Complex.valueOf((-696.371878032653), (-525.6462465));
      Complex complex8 = complex7.divide(0.0);
      Complex complex9 = complex4.pow(complex0);
      complex9.INF.divide(0.0);
      complex2.NaN.hashCode();
      complex3.negate();
      Complex complex10 = complex4.subtract(complex2);
      complex10.ONE.reciprocal();
      complex10.ONE.getField();
      complex0.sqrt();
      complex0.exp();
      complex6.add(complex8);
      complex6.multiply(497);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.8339009284973145);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf((-712.818));
      Complex complex4 = complex2.cosh();
      complex4.getField();
      complex2.INF.createComplex(0.0, 3650.4497773);
      complex0.NaN.hashCode();
      Complex complex5 = complex3.NaN.createComplex(4173.22038, 1.8339009284973145);
      Complex complex6 = complex3.asin();
      complex6.getArgument();
      complex4.add(complex6);
      Complex complex7 = complex5.exp();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.sqrt1z();
      complex1.NaN.exp();
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = complex5.ZERO.pow(0.0);
      complex5.I.getField();
      complex5.acos();
      complex5.ONE.toString();
      Complex complex7 = complex5.I.conjugate();
      Complex.valueOf(0.0);
      complex7.ZERO.reciprocal();
      complex7.NaN.atan();
      complex4.nthRoot(1782);
      Complex.valueOf(0.0);
      complex5.ZERO.multiply(0.0);
      Complex complex8 = complex4.subtract((-935.8));
      complex8.conjugate();
      complex5.tan();
      complex6.pow(complex5);
      Complex complex9 = complex3.atan();
      complex9.cosh();
      complex5.getImaginary();
      complex0.cosh();
      complex4.multiply((-3987));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      complex0.NaN.readResolve();
      double double0 = 0.0;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.ONE.getField();
      complex1.ONE.subtract(complex2);
//      try { 
        complex1.nthRoot((-2151));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,151
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 1;
      complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.NaN.multiply(1);
      complex1.NaN.conjugate();
      Complex complex2 = complex0.INF.reciprocal();
      complex2.ONE.pow((double) 0);
//      try { 
        complex0.ONE.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(242.2748188, 242.2748188);
      int int0 = 4483;
      Complex complex1 = complex0.INF.pow(1346.46);
      complex1.toString();
      complex1.ONE.createComplex(0.0, 242.2748188);
      Complex complex2 = complex0.INF.multiply(4483);
      complex2.ONE.log();
      complex0.getImaginary();
      Complex complex3 = Complex.valueOf(2.0, 2.0);
      int int1 = 0;
      Complex complex4 = complex3.multiply(0);
//      try { 
        complex4.NaN.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.NaN.getArgument();
      complex1.ZERO.multiply(complex0);
      complex0.multiply(complex1);
      Complex.valueOf((-47.230342));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-1435.74), 940.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.negate();
      Complex.valueOf(0.0, 0.0);
      complex3.ZERO.conjugate();
      complex0.getField();
      complex2.isNaN();
      complex3.isNaN();
      complex1.reciprocal();
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.asin();
      complex1.ONE.pow(0.0);
      complex5.ZERO.log();
      complex1.equals(complex4);
      complex4.getImaginary();
      complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-553.3006337257074));
      Complex complex1 = complex0.sinh();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = complex0.log();
      complex2.ONE.exp();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.NaN.sinh();
      Complex complex6 = complex3.atan();
      complex6.I.multiply(1620);
      complex4.subtract(complex0);
      complex4.getField();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3.00901028043488E-38), (-1626.07));
      Complex complex2 = Complex.ZERO;
      complex0.NaN.subtract(complex2);
      complex0.INF.add(complex1);
      Complex complex3 = complex1.ZERO.pow(complex0);
      complex3.divide((-866.0619));
      complex1.I.getField();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex1.exp();
      complex6.divide(1650.670300546215);
      complex0.reciprocal();
      complex6.readResolve();
      complex4.tanh();
      Complex.valueOf(1650.670300546215);
      complex5.multiply(2197);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add(7.462678536479685E-9);
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.NaN.toString();
      Complex complex3 = complex1.INF.tan();
      complex3.INF.hashCode();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ZERO.pow(complex0);
      complex0.ONE.exp();
      Complex complex6 = Complex.valueOf((-2247.6390424353885));
      complex4.toString();
      complex0.sinh();
      complex4.ONE.add(complex5);
      complex4.getField();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = Complex.valueOf((-20.0), 792.75);
      complex8.NaN.reciprocal();
      complex4.log();
      complex6.getArgument();
      complex3.acos();
      Complex complex9 = Complex.valueOf(792.75);
      complex9.getArgument();
      complex6.abs();
      Complex complex10 = complex2.tanh();
      complex10.ZERO.multiply((-1887.614827993));
      complex2.conjugate();
      Complex complex11 = complex8.negate();
      complex11.NaN.pow((-2247.6390424353885));
      complex5.getField();
      complex7.multiply(complex1);
      complex11.multiply((-215.45937465605));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2223.9206884825094, 2223.9206884825094);
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.getReal();
      complex1.ZERO.getField();
      Complex complex2 = complex1.I.multiply(2223.9206884825094);
      Complex complex3 = complex2.NaN.multiply(complex0);
      String string0 = complex0.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex0.pow(4.344234755347641E-104);
      Complex complex6 = complex5.ONE.createComplex(5293.36923, 5293.36923);
      Complex complex7 = complex4.ZERO.createComplex(0.0, 0.0);
      Complex complex8 = complex7.INF.add(complex6);
      complex8.INF.createComplex(2223.9206884825094, 432.151);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex1.log();
      Complex complex10 = complex4.negate();
      Complex complex11 = complex10.ONE.asin();
      Object object0 = complex11.readResolve();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex10.log();
      Complex complex13 = complex12.I.tanh();
      Complex complex14 = complex13.INF.reciprocal();
      Complex complex15 = complex6.divide((-1453.1207271018));
      complex15.multiply(complex4);
      complex15.I.sqrt1z();
      assertEquals((-3.642759428913691), complex15.getImaginary(), 0.01);
      assertEquals((-3.642759428913691), complex15.getReal(), 0.01);
      
      complex1.abs();
      Complex complex16 = complex9.sin();
      Complex complex17 = complex9.ONE.sqrt();
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex5.add((-4512.54853));
      assertEquals((-4511.54853), complex18.getReal(), 0.01);
      
      Complex complex19 = complex9.pow(0.0);
      Complex complex20 = complex3.multiply(1179.4338034047032);
      assertNotSame(complex20, complex19);
      assertTrue(complex20.equals((Object)complex19));
      
      complex16.equals(complex13);
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex1.equals((Object)object0));
      assertEquals(1.557407724654902, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Complex complex21 = complex5.cosh();
      assertEquals(4.0097324113628293E-104, complex21.getImaginary(), 0.01);
      assertFalse(complex5.equals((Object)complex18));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }
}
