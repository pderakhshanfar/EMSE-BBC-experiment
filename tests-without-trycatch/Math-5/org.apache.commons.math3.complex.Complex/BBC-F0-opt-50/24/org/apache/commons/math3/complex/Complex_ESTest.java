/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:00:18 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-9.684925795536813E116));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.ZERO.multiply(295);
      complex1.NaN.nthRoot(295);
      Complex.valueOf((-9.684925795536813E116));
      Complex complex4 = complex0.INF.subtract((-9.684925795536813E116));
      complex4.NaN.sin();
      Complex complex5 = complex0.asin();
      complex3.abs();
      Complex complex6 = complex0.cosh();
      complex6.I.hashCode();
      Complex complex7 = complex2.sinh();
      complex7.ONE.sinh();
      complex5.sqrt();
      complex2.nthRoot(295);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1309.0701095471));
      Complex complex1 = Complex.valueOf((-1309.0701095471), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.negate();
      complex5.INF.nthRoot(2147481360);
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.ONE.subtract(4.390523815859274E124);
      Complex complex9 = complex7.I.createComplex(2147481360, 0.46608972549438477);
      complex9.acos();
      complex8.INF.subtract((double) 2147481360);
      Complex complex10 = complex7.createComplex((-3721.4), (-3721.4));
      Complex complex11 = complex1.add(complex3);
      complex0.sqrt();
      complex11.getField();
      complex7.atan();
      Complex complex12 = complex10.reciprocal();
      complex7.negate();
      complex12.multiply(102.76079515);
      complex4.reciprocal();
      complex1.nthRoot(322);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3.11611905696257E-10, 3.11611905696257E-10);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex3.divide(complex2);
      Complex complex4 = Complex.valueOf(2169.4);
      Complex complex5 = Complex.valueOf(5.166420404109835E-55);
      complex5.log();
      Complex complex6 = complex0.tanh();
      complex4.readResolve();
      Complex complex7 = complex3.reciprocal();
      complex6.hashCode();
      complex2.asin();
      complex7.atan();
      Complex complex8 = complex7.sin();
      complex6.sqrt();
      Complex complex9 = complex8.cosh();
      complex7.getArgument();
      Complex.valueOf(5856.90024, (-1.0));
      complex5.conjugate();
      complex9.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.log();
      complex0.tanh();
      complex2.readResolve();
      complex3.reciprocal();
      complex2.hashCode();
      complex1.asin();
      complex1.atan();
      complex0.sin();
      Complex complex4 = complex3.sqrt();
      complex4.cosh();
      complex4.getArgument();
      Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex2.pow(3322.811055480145);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = complex0.asin();
      complex1.ONE.toString();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex2.NaN.tan();
      complex1.I.hashCode();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.INF.divide(complex4);
      Complex complex7 = complex0.NaN.log();
      complex5.INF.nthRoot(1467);
      Complex complex8 = complex1.cos();
      complex8.ONE.pow(complex7);
      complex8.INF.pow(Double.NaN);
      Complex complex9 = complex8.ONE.sqrt1z();
      complex9.I.add(complex7);
      complex1.divide(0.0);
      Complex complex10 = complex2.multiply(1445.443245344);
      complex10.add(Double.NaN);
      complex3.subtract(0.0);
      complex6.subtract(921.992);
      complex1.abs();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(695.110771, Double.NaN);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 20.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.cos();
      complex4.NaN.cosh();
      complex0.conjugate();
      complex0.getField();
      Complex complex5 = complex3.tan();
      complex5.ZERO.asin();
      complex1.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 20.0);
      complex0.abs();
      Complex complex1 = complex0.pow(20.0);
      complex1.NaN.conjugate();
      complex0.acos();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1.6997387217850427E171, 1.6997387217850427E171);
      Complex complex1 = complex0.ZERO.createComplex(1.6997387217850427E171, (-594.029));
      complex0.NaN.tan();
      complex0.NaN.sin();
      Complex complex2 = complex0.INF.multiply((-971));
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex2.negate();
      complex0.INF.negate();
      complex0.multiply((-594.029));
      Complex complex6 = complex5.subtract((-594.029));
      Complex complex7 = complex2.subtract(1.708073418273571);
      Complex complex8 = complex1.acos();
      complex8.add(1647.97075059);
      Complex complex9 = complex7.multiply((-71.6748));
      complex6.toString();
      complex6.divide(complex4);
      complex8.subtract(complex9);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1392.154915836, Double.POSITIVE_INFINITY);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.7615941559557649, Double.NaN);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-1693.43339));
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.pow((-72.186519461));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.I;
      complex0.subtract(complex2);
      Complex complex6 = Complex.valueOf((-615.35));
      complex6.cos();
      complex4.conjugate();
      complex0.getArgument();
      complex0.tan();
      complex1.acos();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(256.5);
      Complex complex2 = Complex.I;
      complex1.add(Double.NaN);
      Complex complex3 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      complex0.abs();
      Complex complex1 = complex0.pow((-4386.297218));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.I;
      complex1.subtract(complex4);
      complex4.cos();
      Complex complex5 = complex4.conjugate();
      complex2.getArgument();
      complex2.getField();
      complex3.tan();
      Complex complex6 = complex0.acos();
      complex6.cosh();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 20.0);
      complex0.abs();
      complex0.INF.subtract(Double.NaN);
      Complex complex1 = complex0.pow(20.0);
      complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.subtract(complex0);
      complex2.cos();
      complex1.conjugate();
      complex2.getArgument();
      complex0.getField();
      complex4.tan();
      Complex.valueOf(1125.0);
      Complex complex5 = complex0.negate();
      complex1.sqrt();
      Complex.valueOf((-1454.07953), (-3847.217204));
      complex4.getImaginary();
      complex2.readResolve();
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 20.0);
      complex0.abs();
      Complex complex1 = complex0.pow(20.0);
      complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex2.cos();
      complex1.conjugate();
      complex2.getArgument();
      complex0.getField();
      Complex complex6 = complex4.tan();
      complex6.INF.createComplex(1125.0, 1125.0);
      Complex.valueOf(1125.0);
      complex5.hashCode();
      complex5.I.multiply((-1775));
      Complex complex7 = complex5.tan();
      complex7.subtract(1956.604);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(2194853.2487602965, 2194853.2487602965);
      Complex complex1 = complex0.ONE.sin();
      complex0.INF.multiply(4.31880454864738E-203);
      complex1.NaN.add(complex0);
      Complex complex2 = Complex.valueOf((-1696.6079), (-1696.6079));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.ONE.multiply(complex2);
      complex4.I.divide(complex2);
      complex3.ZERO.readResolve();
      complex3.tan();
      complex0.equals(complex3);
      Complex complex5 = complex4.tanh();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 20.0);
      complex0.abs();
      Complex complex1 = complex0.pow(20.0);
      complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.subtract(complex0);
      complex2.cos();
      complex4.conjugate();
      complex3.acos();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 2249.999555555468);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.sin();
      complex1.asin();
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.reciprocal();
      complex1.multiply(complex0);
      Complex complex2 = complex0.multiply(5.1090893668503945E-12);
      complex0.add(5.1090893668503945E-12);
      Complex complex3 = new Complex(5.1090893668503945E-12);
      complex2.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
      Object object0 = new Object();
      Complex complex1 = Complex.NaN;
      complex1.tanh();
//      try { 
        complex1.ZERO.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.asin();
      Complex complex1 = Complex.NaN;
      complex0.readResolve();
      Complex complex2 = complex0.log();
      complex1.abs();
      Complex complex3 = new Complex(Double.NaN, 222.0);
      complex3.conjugate();
      complex3.tanh();
      Complex complex4 = Complex.ZERO;
      complex2.subtract(complex4);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 20.0);
      complex0.abs();
      Complex complex1 = complex0.pow(20.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex3.cos();
      complex1.conjugate();
      complex3.getArgument();
      complex0.getField();
      complex5.tan();
      Complex.valueOf(1125.0);
      complex6.hashCode();
      complex6.tan();
      complex3.pow(complex4);
      Complex complex7 = new Complex(20.0, 0.0);
      complex7.I.add(complex3);
      Complex complex8 = complex2.conjugate();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 20.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex0.multiply(1.3606464059428694E-8);
      Complex complex3 = complex0.add(5.1090893668503945E-12);
      complex2.readResolve();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex0.sqrt1z();
      Complex.valueOf(6.283185307179586);
      complex3.readResolve();
      Complex complex7 = Complex.I;
      complex4.readResolve();
      Complex complex8 = complex3.log();
      complex8.abs();
      complex6.conjugate();
      complex5.tanh();
      complex6.subtract(complex8);
      complex6.pow(3187.3234593178);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.getArgument();
      complex1.getField();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(1.5707963267948966);
      Complex complex4 = complex2.tan();
      complex4.pow(complex3);
      Complex complex5 = new Complex(0.0, 1125.0);
      complex5.subtract(complex2);
      Complex.valueOf(1125.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.sqrt1z();
      Complex.valueOf((-3234.1499421285));
      complex3.readResolve();
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex(0.0, (-3234.1499421285));
      complex4.equals(complex3);
      Complex complex6 = complex4.exp();
      complex2.getArgument();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex5.log();
      Complex complex9 = complex7.multiply(0.0);
      Complex complex10 = complex0.tanh();
      Complex complex11 = Complex.ONE;
      complex3.atan();
      Complex complex12 = Complex.I;
      complex8.isInfinite();
      Complex complex13 = complex8.negate();
      Complex complex14 = new Complex((-3234.1499421285));
      complex12.acos();
      Complex.valueOf(1.3130352854993315, 1.3130352854993315);
      Complex complex15 = complex9.cosh();
      complex10.subtract(complex6);
      complex13.sqrt();
      complex15.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex((-1657.174813), (-1657.174813));
      complex2.abs();
      Complex complex4 = complex3.pow((-1657.174813));
      complex3.sqrt();
      complex1.tanh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.subtract(complex2);
      complex4.cos();
      Complex complex7 = complex6.conjugate();
      complex6.getArgument();
      Complex complex8 = Complex.valueOf((-1657.174813), (-1897.57846763));
      complex4.getField();
      Complex complex9 = complex4.tan();
      Complex.valueOf((-65.5084542748));
      Complex complex10 = Complex.NaN;
      complex10.hashCode();
      complex7.tan();
      complex9.pow(complex4);
      Complex complex11 = new Complex(1.3130352854993315, (-0.9999998942560641));
      complex11.subtract(complex5);
      complex11.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.reciprocal();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.multiply(5.1090893668503945E-12);
      complex0.add(5.1090893668503945E-12);
      Complex complex4 = (Complex)complex1.readResolve();
      complex2.exp();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = Complex.valueOf(3187.3234593178);
      complex7.readResolve();
      Complex complex8 = Complex.I;
      Complex complex9 = new Complex(3187.3234593178, 5.1090893668503945E-12);
      Complex complex10 = Complex.I;
      Complex complex11 = Complex.NaN;
      complex10.equals(complex11);
      complex6.exp();
      complex10.getArgument();
      Complex complex12 = complex4.asin();
      Complex complex13 = complex11.log();
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex4.tanh();
      Complex complex14 = Complex.ONE;
      complex8.atan();
      Complex complex15 = Complex.I;
      complex3.isInfinite();
      Complex complex16 = complex11.negate();
      Complex complex17 = new Complex(Double.POSITIVE_INFINITY);
      complex12.acos();
      Complex.valueOf(3187.3234593178);
      complex16.cosh();
      complex13.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.reciprocal();
      complex1.multiply(complex0);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.asin();
      complex0.multiply(2639);
      Complex complex4 = new Complex((-2344.54363));
      complex4.log();
      complex0.acos();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add(20.0);
      complex2.readResolve();
      Complex complex3 = complex2.exp();
      complex1.subtract(complex3);
      complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(5.1090893668503945E-12);
      complex0.readResolve();
      Complex complex5 = Complex.I;
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 5.1090893668503945E-12);
      complex3.equals(complex6);
      Complex complex7 = Complex.valueOf(2994.99555);
      complex7.exp();
      Complex complex8 = new Complex(5.1090893668503945E-12);
      complex8.getArgument();
      complex3.asin();
      complex6.log();
      complex0.multiply((-20.0));
      complex1.tanh();
      Complex complex9 = Complex.ONE;
      complex0.atan();
      Complex complex10 = Complex.I;
      complex6.isInfinite();
      complex1.negate();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.valueOf(20.0);
      complex7.cosh();
      complex4.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 1125.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.reciprocal();
      complex0.NaN.add(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.negate();
      Complex complex5 = new Complex(1125.0, 1125.0);
      complex5.add(complex0);
      complex2.isInfinite();
      complex1.atan();
      complex3.subtract(0.0);
      Complex complex6 = Complex.INF;
      complex6.negate();
      Complex complex7 = new Complex(1.185064946717304E-27, (-811.20483702));
      complex7.cos();
      complex2.cos();
      complex7.createComplex(1125.0, 1.0187183636134904E-106);
      complex0.subtract(complex4);
      complex5.reciprocal();
      Complex complex8 = Complex.valueOf(1.185064946717304E-27);
      complex8.readResolve();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.abs();
      Complex complex1 = complex0.subtract(28.284271247461902);
      complex0.hashCode();
      complex0.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.ZERO;
      complex3.negate();
      Object object0 = new Object();
      complex2.equals(object0);
      complex4.negate();
      Complex complex5 = complex1.add(4.332335454045836E52);
      complex5.sqrt();
      int int0 = 2147483534;
      // Undeclared exception!
      complex0.nthRoot(2147483534);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 1125.0);
      complex0.abs();
      Complex complex1 = complex0.pow((-1870.05));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.I;
      complex2.subtract(complex5);
      complex5.cos();
      Complex complex6 = complex5.conjugate();
      complex4.getArgument();
      complex4.getField();
      complex0.tan();
      Complex complex7 = Complex.valueOf(0.3831497249319151);
      complex1.hashCode();
      Complex complex8 = complex6.tan();
      complex0.pow(complex8);
      Complex complex9 = new Complex(0.3831497249319151, 20.0);
      complex9.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2795.3509778426));
      complex0.INF.sin();
      complex0.ZERO.pow((-2795.3509778426));
      Complex.valueOf((-2795.3509778426), (-2795.3509778426));
      Complex complex1 = complex0.conjugate();
      complex1.I.asin();
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-4.332335454045836E52), 1726.97297712732);
      Complex complex1 = complex0.NaN.pow(6.44741641521183E-102);
      Complex complex2 = Complex.valueOf(1269.0, (-1575.2578947123377));
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.sinh();
      complex5.I.abs();
      Complex complex6 = complex1.divide(6.44741641521183E-102);
      Complex complex7 = complex6.INF.pow(complex2);
      complex3.cos();
      Complex complex8 = Complex.valueOf((-4.332335454045836E52));
      complex8.NaN.negate();
      complex3.NaN.hashCode();
      complex2.ONE.asin();
      Complex complex9 = complex2.multiply((-4.332335454045836E52));
      complex9.ONE.negate();
      complex3.tan();
      Complex complex10 = complex9.acos();
      complex9.divide(complex0);
      Complex.valueOf(6.44741641521183E-102, (-1204.0));
      complex7.toString();
      Complex complex11 = complex10.tan();
      complex11.createComplex(1.0, 1.3810978455418157);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ZERO.subtract(0.0);
      complex1.hashCode();
      complex2.createComplex(1734.5602, 0.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.NaN;
      complex2.readResolve();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.log();
      Complex complex7 = Complex.valueOf((-20.0), (-4.332335454045836E52));
      complex7.abs();
      complex6.conjugate();
      complex7.tanh();
      complex1.subtract(complex3);
      complex0.pow(4.332335454045836E52);
      Complex complex8 = Complex.INF;
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1125.0, 20.0);
      complex0.abs();
      Complex complex1 = complex0.subtract(1125.1777637333578);
      complex0.hashCode();
      complex0.toString();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.negate();
      Object object0 = new Object();
      complex4.equals(object0);
      complex2.negate();
      complex5.add(1125.0);
      complex3.nthRoot(11);
      Complex complex6 = complex4.tan();
      complex2.pow(0.9060367009005804);
      complex4.atan();
      complex6.divide(1125.0);
      Complex.valueOf((-1.6359148543545704E7));
      Complex complex7 = Complex.ONE;
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.reciprocal();
      complex1.multiply(complex0);
      Complex complex3 = complex0.multiply(5.1090893668503945E-12);
      Complex complex4 = complex0.add(5.1090893668503945E-12);
      complex1.readResolve();
      complex4.exp();
      complex0.subtract(complex2);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = Complex.valueOf(3187.3234593178);
      complex5.readResolve();
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex(5.1090893668503945E-12, 3187.3234593178);
      complex7.equals(complex8);
      complex0.exp();
      complex4.getArgument();
      complex8.asin();
      complex2.log();
      complex1.multiply((-2767.3674315633));
      complex5.tanh();
      Complex complex9 = Complex.ONE;
      complex7.atan();
      Complex complex10 = Complex.I;
      complex10.isInfinite();
      Complex complex11 = complex3.negate();
      Complex complex12 = new Complex(3638.55796338318);
      complex6.acos();
      Complex.valueOf(0.9999995908413779);
      complex11.cosh();
//      try { 
        complex11.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sinh();
      complex0.abs();
      complex0.reciprocal();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.add((-2210.9));
      complex0.readResolve();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.valueOf((-2034.7566286));
      complex2.readResolve();
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      complex3.exp();
      complex1.getArgument();
      Complex complex6 = complex4.asin();
      complex1.log();
      Complex complex7 = complex5.tanh();
      Complex complex8 = Complex.ONE;
      complex5.INF.getField();
      complex2.atan();
      complex7.isInfinite();
      complex6.negate();
      Complex complex9 = new Complex(3187.3234593178);
      complex2.acos();
      Complex.valueOf((-2034.7566286));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(5.672812341879918E178);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.negate();
      complex1.getField();
      Complex complex3 = complex1.ZERO.log();
      complex1.INF.sqrt1z();
      Complex complex4 = complex0.add(complex2);
      complex4.ZERO.log();
      Complex complex5 = complex0.NaN.multiply(complex2);
      Complex complex6 = complex5.NaN.pow(2974.814770505);
      complex3.ONE.multiply(complex1);
      Complex complex7 = complex0.tan();
      complex6.ONE.pow(complex0);
      complex0.NaN.divide(1321.6);
      Complex complex8 = complex7.ONE.divide(5.672812341879918E178);
      complex0.equals((Object) null);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex2.INF.exp();
      Object object0 = new Object();
      complex5.asin();
      complex2.multiply(0.3499138355255127);
      complex9.equals(object0);
      Complex complex11 = complex7.log();
      complex11.NaN.sqrt();
      complex6.readResolve();
      complex7.subtract(1321.6);
      complex8.abs();
      complex10.equals(complex2);
      Complex complex12 = Complex.valueOf(5.672812341879918E178, 1.7627940776701407E-179);
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(48.4481901);
      Complex complex3 = complex1.multiply((-2062));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.pow(6.283185307179586);
      complex5.I.sqrt();
      complex1.ZERO.hashCode();
      Complex complex6 = complex3.ONE.multiply(complex0);
      Complex complex7 = complex6.ONE.subtract((-4.9202842786896806E14));
      complex6.I.pow(48.4481901);
      complex3.NaN.sqrt1z();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.ZERO.tanh();
      complex9.ONE.getArgument();
      Complex complex10 = complex0.pow((double) (-2062));
      complex10.conjugate();
      Complex complex11 = complex6.ZERO.sin();
      Complex complex12 = complex3.subtract((double) (-2062));
      Complex complex13 = complex7.acos();
      Complex complex14 = complex10.subtract(complex2);
      Complex.valueOf(2.4801413921885483E-274, (-2107.83478281525));
      Complex complex15 = complex6.INF.createComplex((-20.0), 26.2309279672581);
      complex14.NaN.add(0.0);
      Complex complex16 = complex5.pow(complex13);
      complex16.pow(complex10);
      Complex complex17 = complex11.add(264.5698872532);
      Complex complex18 = complex10.sqrt1z();
      complex17.multiply(complex18);
      Complex complex19 = complex12.conjugate();
      complex15.pow(complex5);
      complex19.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(1159.49054135686, (-20.0));
      complex0.I.sinh();
      Complex complex1 = complex0.reciprocal();
      complex0.ONE.abs();
      complex1.I.exp();
      Complex complex2 = complex0.createComplex((-20.0), 1159.49054135686);
      Complex complex3 = complex0.conjugate();
      complex3.ZERO.abs();
      Complex complex4 = complex0.pow(complex3);
      complex4.INF.add(complex2);
      complex4.tan();
      complex1.nthRoot(3008);
      complex4.multiply(1.0);
      Complex complex5 = complex3.pow(0.0);
      complex5.NaN.exp();
      complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.nthRoot(557);
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex(557, (-4125.5131988));
      Complex complex3 = complex2.add((-4125.5131988));
      complex0.getReal();
      complex1.exp();
      Complex complex4 = Complex.valueOf((-1321.6), (-4125.5131988));
      complex4.negate();
      Complex complex5 = complex1.cos();
      complex1.sqrt1z();
      complex5.sqrt();
      complex0.atan();
      complex3.sin();
      Complex complex6 = Complex.ZERO;
      complex6.asin();
      complex2.divide(complex4);
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-654.0), 3460.69672558);
      complex0.abs();
      Complex complex1 = complex0.ZERO.pow(3460.69672558);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.I.subtract(complex4);
      complex0.I.cos();
      Complex complex6 = complex0.conjugate();
      complex2.getArgument();
      complex6.I.getField();
      Complex complex7 = complex6.tan();
      complex3.isInfinite();
      complex4.atan();
      Complex complex8 = complex1.subtract(0.8787864700772927);
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.cos();
      complex6.cos();
      complex2.createComplex((-654.0), 3460.69672558);
      complex10.subtract(complex8);
      complex8.reciprocal();
      complex5.readResolve();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-4348.978404648321));
      Complex complex2 = complex1.ONE.asin();
      complex0.I.hashCode();
      complex1.NaN.getArgument();
      Complex complex3 = complex0.add(complex1);
      complex0.ONE.abs();
      complex3.divide(2.0);
      complex0.isInfinite();
      complex3.I.readResolve();
      complex0.getField();
      complex0.negate();
      Complex complex4 = complex1.INF.pow(complex0);
      complex0.I.hashCode();
      complex4.NaN.tanh();
      Complex complex5 = complex0.multiply(970);
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex5.ONE.reciprocal();
      complex5.ONE.divide(Double.NaN);
      complex1.negate();
      Complex complex8 = complex0.add(complex6);
      Complex.valueOf(1034321.7247990331);
      complex7.negate();
      Complex complex9 = complex3.sqrt();
      complex2.getImaginary();
      complex4.readResolve();
      complex8.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex1);
      Complex.valueOf(1050.0);
      complex1.getImaginary();
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.679598331451416, (-1159.49054135686));
      Complex complex2 = complex1.subtract(complex0);
      complex1.tan();
      Complex complex3 = Complex.valueOf(673.00797810173);
      complex3.asin();
      Complex complex4 = complex2.exp();
      complex0.pow((-495.22906));
      Complex complex5 = complex4.pow(0.0);
      complex5.divide(0.0);
      complex0.toString();
      Complex complex6 = complex1.createComplex(673.00797810173, 1.679598331451416);
      Complex.valueOf(631.499, (-1660.4));
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.reciprocal();
      complex0.multiply(complex2);
      Complex complex6 = complex0.multiply((-1.0));
      complex5.add(3187.3234593178);
      complex1.readResolve();
      complex6.exp();
      complex1.subtract(complex3);
      complex1.sqrt1z();
      Complex.valueOf(3187.3234593178);
      Object object0 = complex5.readResolve();
      complex6.equals(object0);
      complex2.exp();
      complex4.getArgument();
      complex6.asin();
      Complex complex7 = complex5.log();
      complex7.multiply(3187.3234593178);
      complex2.tanh();
      Complex complex8 = Complex.ONE;
      complex8.atan();
      complex2.isInfinite();
      complex1.negate();
      Complex complex9 = new Complex(4044.644550952);
      complex9.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-214.7678), 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.multiply((-214.7678));
      Complex complex2 = complex0.multiply(2408);
      complex2.exp();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.log();
      complex1.exp();
      Complex complex5 = complex4.multiply(495.89620918068);
      Complex complex6 = complex3.tan();
      complex2.acos();
      Complex complex7 = complex6.tanh();
      complex4.multiply(complex6);
      complex7.add(495.89620918068);
      complex5.getField();
      complex5.getImaginary();
      complex0.nthRoot(1566);
      Complex complex8 = new Complex(1557.9038877050516);
      complex8.multiply((double) 2408);
      complex3.divide(1557.9038877050516);
      Complex complex9 = new Complex(1.5430806348152437, 377.1638301);
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.add(3991.5045227);
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.add(1.0);
      complex2.pow(complex3);
      Complex.valueOf(1.0);
      Complex complex5 = complex0.pow(1.0);
      complex0.cosh();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.pow(complex7);
      complex7.I.cosh();
      Complex complex9 = complex2.exp();
      complex9.toString();
      Complex complex10 = complex8.cosh();
      complex5.isNaN();
      complex6.readResolve();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(406.1826244972789, (-2015.146113884));
      Complex complex1 = complex0.INF.tan();
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex1.NaN.acos();
      complex2.INF.readResolve();
      complex2.INF.hashCode();
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex3 = complex0.pow(406.1826244972789);
      Complex complex4 = complex3.NaN.multiply(0.0);
      Complex complex5 = complex4.NaN.cos();
      complex5.I.readResolve();
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.I.multiply(complex6);
      Complex complex9 = complex8.INF.conjugate();
      complex9.hashCode();
      complex8.getField();
      Complex complex10 = complex7.cosh();
      complex10.multiply(2.0);
      Complex complex11 = complex0.pow(4537.0);
      complex11.multiply(1002);
      complex4.divide(4537.0);
      complex8.conjugate();
      complex0.abs();
      complex7.conjugate();
      Complex.valueOf((-2847.3360578735574), 406.1826244972789);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-4348.978404648321));
      Complex complex2 = complex1.ONE.asin();
      complex0.I.hashCode();
      complex1.NaN.getArgument();
      Complex complex3 = complex0.add(complex1);
      complex0.ONE.abs();
      Complex complex4 = complex3.divide(2.0);
      complex0.isInfinite();
      Complex complex5 = (Complex)complex3.I.readResolve();
      complex0.getField();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex5.sqrt1z();
      complex8.add(0.0);
      Complex complex9 = new Complex((-535.5506827339489), 1264.6);
      complex9.log();
      Complex complex10 = complex1.add((-4348.978404648321));
      complex4.pow(complex10);
      Complex.valueOf(2.0);
      Complex complex11 = complex7.pow(2.3088023E7);
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex9.conjugate();
      complex12.pow(complex13);
      Complex complex14 = complex5.exp();
      complex11.toString();
      complex14.cosh();
      complex14.isNaN();
      complex2.readResolve();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-654.0), 3460.69672558);
      Complex complex1 = new Complex(3460.69672558, 1.126326877851684E-7);
      Complex complex2 = Complex.I;
      complex1.ONE.tan();
      complex1.reciprocal();
      Complex complex3 = complex2.add(complex1);
      complex3.NaN.reciprocal();
      complex3.INF.exp();
      complex3.getReal();
      complex2.nthRoot(1);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-654.0), 9610.0);
      Complex complex1 = Complex.I;
      complex0.reciprocal();
      complex1.add(complex0);
      complex0.getReal();
      complex1.nthRoot(1194);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(3005.7455448);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.ZERO.cosh();
      complex0.nthRoot(4269);
      complex1.NaN.readResolve();
      Complex complex4 = complex0.NaN.log();
      complex0.getArgument();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.exp();
      complex7.divide((double) 4269);
      Complex complex8 = complex7.INF.cos();
      complex6.hashCode();
      complex0.toString();
      complex1.sinh();
      Complex complex9 = complex7.asin();
      complex8.NaN.cosh();
      Complex complex10 = complex8.divide(3005.7455448);
      complex10.negate();
      complex10.ZERO.getArgument();
      complex9.conjugate();
      complex0.getReal();
      complex3.negate();
      complex4.reciprocal();
      complex2.multiply(0.0);
      complex3.acos();
      Complex.valueOf((-1587.518));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.sqrt();
      complex3.NaN.getArgument();
      complex3.getArgument();
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex4.NaN.createComplex(Double.NaN, Double.NaN);
      complex4.INF.multiply(Double.NaN);
      complex5.ONE.multiply(0);
      complex5.NaN.readResolve();
      Complex.valueOf(Double.NaN);
      complex0.getArgument();
      complex1.multiply(Double.NaN);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex3.ONE.pow(complex2);
      complex0.nthRoot(1);
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex8.exp();
      complex1.reciprocal();
      complex9.multiply((double) 1);
      complex6.multiply(complex1);
      complex3.readResolve();
      Complex.valueOf(Double.NaN, (double) 1);
      complex7.add(444.881018);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(3.3058299602856804E-8, 3.947457923821984E-183);
      Complex complex1 = complex0.add(3.3058299602856804E-8);
      complex1.getReal();
      complex0.NaN.exp();
      Complex complex2 = complex1.INF.negate();
      complex2.ZERO.cos();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.sqrt();
      complex4.atan();
      complex3.NaN.sin();
      Complex complex5 = complex3.ONE.asin();
      complex5.divide(complex0);
      complex1.subtract((-1376.304628453886));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-4348.978404648321));
      complex1.ONE.asin();
      complex0.I.hashCode();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.add(complex1);
      complex0.ONE.abs();
      Complex complex3 = complex2.divide(2.0);
      complex0.isInfinite();
      complex2.I.readResolve();
      complex0.getField();
      complex0.negate();
      Complex complex4 = complex1.INF.pow(complex0);
      complex0.I.hashCode();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex0.multiply(970);
      Complex complex7 = complex2.sinh();
      complex6.ONE.reciprocal();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex0.add(complex7);
      complex6.isInfinite();
      complex9.atan();
      complex2.I.subtract(0.0);
      Complex complex10 = complex4.negate();
      complex10.cos();
      complex6.cos();
      Complex complex11 = complex3.createComplex(0.0, (-2503.15));
      complex11.INF.subtract(complex8);
      Complex complex12 = complex5.reciprocal();
      complex12.NaN.readResolve();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-2924.758117193613), (-2924.758117193613));
      Complex complex1 = complex0.divide((-2924.758117193613));
      Complex complex2 = complex1.divide(complex0);
      Complex.valueOf((-2924.758117193613), (-2924.758117193613));
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex3.INF.divide(complex1);
      Complex complex5 = complex0.divide((-2924.758117193613));
      Complex complex6 = complex5.acos();
      complex0.NaN.add((-2924.758117193613));
      Complex complex7 = complex0.pow(4805.0);
      complex0.readResolve();
      Complex complex8 = complex7.I.subtract(4805.0);
      complex0.getReal();
      complex4.getReal();
      complex1.toString();
      complex0.isInfinite();
      complex3.getArgument();
      Complex complex9 = complex4.subtract((-1905.844341035728));
      complex9.log();
      Complex complex10 = complex5.ONE.log();
      complex1.divide(complex6);
      Complex complex11 = complex2.multiply(complex1);
      Complex.valueOf((-1905.844341035728));
      complex8.subtract(complex6);
      complex5.add(complex0);
      complex11.cos();
      complex8.acos();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      complex0.readResolve();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex0.ONE.multiply(2408);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex3.INF.log();
      complex7.I.exp();
      Complex complex8 = complex7.ONE.multiply(1012.1);
      Complex complex9 = complex8.ONE.tan();
      complex2.acos();
      complex1.I.tanh();
      complex0.I.multiply(complex5);
      complex7.I.add(0.0);
      complex0.getField();
      complex4.getImaginary();
      complex7.nthRoot(2408);
      complex6.multiply(1012.1);
      complex9.divide(0.0);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.negate();
      complex0.NaN.hashCode();
      Complex complex1 = Complex.valueOf((-2034.7566286));
      complex1.NaN.cosh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-2034.7566286));
      complex2.INF.divide(complex3);
      complex1.cos();
      complex1.pow((-602.969491931));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 1897;
      complex0.nthRoot(1897);
      Complex complex1 = complex0.INF.atan();
//      try { 
        complex1.ZERO.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.add(2385.7769746794784);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.ZERO.createComplex((-131.207668132387), 0.0);
      complex4.ONE.conjugate();
      complex1.INF.getField();
      complex0.ONE.multiply(0);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex1.NaN.divide(complex3);
      Complex complex8 = new Complex(57.0, 0.0);
      complex6.ZERO.divide(complex8);
      Complex complex9 = Complex.valueOf((-131.207668132387));
      complex9.ONE.log();
      complex9.INF.tanh();
      complex0.readResolve();
      Complex complex10 = complex1.reciprocal();
      complex6.hashCode();
      Complex complex11 = complex5.asin();
      complex11.ZERO.atan();
      Complex complex12 = complex10.sin();
      complex12.INF.sqrt();
      complex10.cosh();
      complex6.getArgument();
      Complex.valueOf((double) 0, 0.0);
      complex7.pow(2385.7769746794784);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-214.7678), 0.0);
      Complex complex1 = complex0.I.asin();
      complex0.readResolve();
      Complex complex2 = complex1.log();
      complex0.abs();
      Complex complex3 = complex1.conjugate();
      complex3.tanh();
      complex3.subtract(complex0);
      complex1.pow((-1125.5601617657));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      complex1.ZERO.subtract(0.0);
      complex1.hashCode();
      complex1.I.toString();
      complex0.NaN.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.ZERO;
      complex3.INF.negate();
      complex2.equals(complex3);
      Complex complex4 = complex3.negate();
//      try { 
        complex4.NaN.nthRoot((-2409));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,409
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(5.856589221771548E-8);
      Complex complex1 = Complex.valueOf(5.856589221771548E-8);
      complex0.ONE.atan();
      complex1.I.divide(5.856589221771548E-8);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex1.I.negate();
      complex1.INF.toString();
      Complex complex4 = complex2.INF.pow(5.856589221771548E-8);
      Complex complex5 = complex2.I.cosh();
      complex0.isInfinite();
      complex2.getReal();
      complex1.getReal();
      Complex complex6 = complex4.createComplex(5.856589221771548E-8, 5.856589221771548E-8);
      Complex complex7 = complex6.divide(complex4);
      complex3.getArgument();
      complex7.pow((-1.5707963267948966));
      Complex complex8 = complex2.subtract(0.0);
      complex2.add(complex8);
      complex5.cos();
      Complex complex9 = complex1.pow(complex7);
      complex2.ZERO.abs();
      complex9.ZERO.multiply(1);
      complex2.getField();
      Complex complex10 = complex2.exp();
      complex8.INF.cosh();
      complex10.INF.cos();
      Complex complex11 = complex8.multiply(0.0);
      complex11.I.abs();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      Complex complex13 = complex12.sqrt1z();
      complex13.ZERO.subtract(complex6);
      complex13.getField();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.I.atan();
      complex3.I.pow(complex1);
      Complex complex4 = Complex.valueOf(250.4010009);
      complex4.ZERO.sinh();
      complex1.getField();
      complex0.toString();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.INF.multiply(complex5);
      complex6.NaN.readResolve();
      complex5.I.add(3527.691359526);
      Complex complex7 = complex5.reciprocal();
      complex7.ONE.log();
      Complex complex8 = complex1.sqrt1z();
      complex8.ONE.asin();
      complex7.tanh();
      Complex complex9 = complex8.multiply(250.4010009);
      complex9.readResolve();
      complex6.tanh();
      complex6.readResolve();
      complex9.reciprocal();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2.6501317024230957);
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ZERO.log();
      complex1.hashCode();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2643.18202);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.pow(complex1);
      Complex.valueOf(0.0);
      Complex complex3 = complex0.pow(2643.18202);
      complex3.ZERO.abs();
      complex3.INF.getArgument();
      complex1.I.getField();
      Complex complex4 = complex1.INF.atan();
      complex1.isInfinite();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.pow(complex5);
      complex1.ONE.abs();
      complex0.add((-1185.25596856));
      complex3.asin();
      complex2.readResolve();
      complex6.tanh();
      complex6.tan();
      complex4.createComplex((-215.12179417492), 1834.958832712404);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.sqrt();
      complex3.INF.cos();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.INF.sinh();
      complex5.I.getArgument();
      Complex complex7 = complex5.multiply(complex4);
      complex2.nthRoot(1);
      complex7.NaN.multiply((-816));
      complex0.abs();
      complex0.sqrt();
      complex6.tan();
//      try { 
        complex0.nthRoot((-945));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -945
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2545.0), (-765.81454960299));
      complex0.ONE.cos();
      complex0.INF.tan();
      complex0.ONE.sin();
      complex0.NaN.toString();
      complex0.I.getField();
      complex0.nthRoot(1834);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.divide((-1.0));
      complex0.asin();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex2.ZERO.multiply((-1.0));
      complex5.ONE.add((-1.0));
      complex4.ZERO.readResolve();
      Complex complex6 = complex4.ZERO.exp();
      Complex complex7 = complex2.ONE.subtract(complex0);
      complex1.sqrt1z();
      Complex.valueOf((-3806.381655422044));
      complex4.equals(complex2);
      complex6.NaN.exp();
      complex1.getArgument();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.log();
      complex6.multiply(0.0);
      complex1.tanh();
      complex4.atan();
      complex7.isInfinite();
      complex3.negate();
      complex9.acos();
      Complex.valueOf((-1675.7307492055108), 1.0);
      Complex.valueOf(0.14095008373260498);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.asin();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.pow(0.0);
      complex3.NaN.acos();
      complex1.cos();
      Complex complex4 = complex2.I.subtract(0.0);
      complex4.ONE.cos();
      complex1.log();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(3632.61608423);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.pow(3632.61608423);
      double double0 = 0.0;
      Complex complex3 = complex2.ONE.divide(0.0);
      complex2.NaN.multiply(0);
      Complex complex4 = complex3.ONE.acos();
      complex4.ZERO.sin();
      Complex complex5 = complex0.multiply(complex1);
      complex5.INF.divide((-1725.5375054656379));
      complex1.NaN.multiply(1575);
//      try { 
        complex5.ONE.nthRoot((-1609));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,609
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getArgument();
      Complex complex1 = Complex.valueOf((-2163.771749273));
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.atan();
      complex2.NaN.exp();
      Complex complex4 = Complex.valueOf(1.5707963267948966, 0.0);
      complex3.conjugate();
      complex1.add(complex2);
      Complex complex5 = complex1.ONE.reciprocal();
      Complex complex6 = complex0.ONE.add(complex1);
      complex3.ZERO.getArgument();
      complex6.INF.readResolve();
      complex0.abs();
      complex5.I.toString();
      complex0.readResolve();
      complex0.abs();
      complex5.exp();
      Complex complex7 = complex3.log();
      complex3.getReal();
      complex7.exp();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.INF.tan();
      complex0.INF.divide(complex1);
      Complex complex2 = complex0.atan();
      complex0.hashCode();
      Complex complex3 = complex0.subtract(0.0);
      complex0.NaN.sqrt1z();
      complex2.INF.asin();
      Complex complex4 = complex3.ONE.pow(2.623848491704216E-9);
      Complex complex5 = complex4.pow(complex3);
      complex2.ZERO.nthRoot(408);
      Complex complex6 = complex5.ZERO.tan();
      Complex.valueOf(2.623848491704216E-9);
      Complex complex7 = new Complex(1788.0);
      complex6.INF.subtract(complex7);
      complex0.acos();
      complex2.exp();
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(87.6, 1484.0909705137);
      Complex complex2 = complex0.add(complex1);
      complex1.ONE.sin();
      Complex complex3 = complex2.asin();
      complex0.pow(complex3);
      Complex complex4 = complex1.multiply(complex0);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.nthRoot(557);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.multiply(557);
      Complex complex3 = complex1.ONE.sqrt1z();
      complex1.isInfinite();
      Complex complex4 = complex0.reciprocal();
      complex4.ZERO.conjugate();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.ZERO.reciprocal();
      complex6.ONE.acos();
      Complex complex7 = complex2.I.negate();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex2.cosh();
      complex7.cos();
      Complex.valueOf((double) 557, 0.0);
      Complex complex10 = complex3.INF.cosh();
      Complex.valueOf(0.0, (-2585.77941241));
      complex9.getImaginary();
      complex3.multiply(-0.0);
      Complex complex11 = complex8.cos();
      complex0.cosh();
      complex8.abs();
      complex0.nthRoot(557);
      complex11.getArgument();
      complex10.createComplex(1.8537070751190186, 0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.679598331451416, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.asin();
      complex0.ONE.exp();
      complex2.I.pow(0.0);
      Complex complex5 = complex2.pow(1.679598331451416);
      complex3.divide(1.679598331451416);
      complex5.I.toString();
      complex4.createComplex(1.679598331451416, (-1660.4));
      Complex complex6 = Complex.valueOf(6.443805025317327E169, 6.443805025317327E169);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2858.710193), 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.divide((-2858.710193));
      Complex complex3 = complex2.ZERO.subtract(916.756);
      Complex complex4 = Complex.ZERO;
      complex4.NaN.abs();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.NaN.add(complex2);
      complex6.ZERO.sqrt();
      Complex complex7 = complex5.conjugate();
      complex5.divide(0.0);
      complex2.conjugate();
      Complex complex8 = complex0.exp();
      complex8.getArgument();
      complex5.sin();
      complex3.getImaginary();
      complex8.conjugate();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ONE.multiply((-1843.267431764));
      complex1.ZERO.getField();
      complex3.I.cosh();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex1.subtract(0.0);
      complex5.getReal();
      Complex complex6 = complex3.INF.sqrt();
      complex6.add(0.0);
      complex4.pow((-1843.267431764));
      Complex complex7 = complex5.pow(936.02983299);
      Complex complex8 = complex7.divide(complex3);
      complex7.ZERO.subtract((-2578.112097));
      Complex.valueOf((-1249.391459966));
      complex8.toString();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.atan();
      complex2.INF.add(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.valueOf(Double.NaN, 2661.3);
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      complex3.subtract(4622.27817114059);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(719.13134038834);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.INF.divide(complex1);
      complex0.getField();
      Complex complex5 = complex4.ZERO.pow(complex3);
      complex0.nthRoot(2148);
      complex0.getField();
      Complex complex6 = complex0.add(0.0);
      complex6.INF.divide(complex3);
      complex4.cosh();
      complex1.isInfinite();
      complex5.multiply(719.13134038834);
      Complex complex7 = complex4.multiply(719.13134038834);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-111.845064112));
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.I.add(266.97568274958);
      Complex complex4 = complex2.NaN.pow(complex1);
      complex4.ONE.readResolve();
      complex0.I.abs();
      complex0.NaN.hashCode();
      Complex complex5 = complex0.NaN.subtract(1995.06931208);
      Complex complex6 = complex0.log();
      Complex complex7 = Complex.valueOf(1.0, 2.7856896414497757E128);
      complex6.toString();
      complex0.getReal();
      complex6.NaN.add(complex5);
      Complex complex8 = Complex.valueOf(1015.24197624481);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.add(complex9);
      complex10.ONE.pow(0.0);
      complex6.abs();
      complex7.createComplex(2.7856896414497757E128, Double.POSITIVE_INFINITY);
      complex5.toString();
      complex2.add(complex0);
      Complex complex11 = complex3.tanh();
      complex6.sqrt1z();
      Complex complex12 = Complex.INF;
      complex8.subtract(complex12);
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-654.0), 3460.69672558);
      complex0.abs();
      complex0.ZERO.pow(3460.69672558);
      Complex complex1 = complex0.sqrt();
      complex1.tanh();
      Complex complex2 = Complex.I;
      complex1.I.subtract(complex2);
      complex0.I.cos();
      Complex complex3 = complex0.conjugate();
      complex1.getArgument();
      complex3.I.getField();
      complex3.tan();
      Complex complex4 = Complex.valueOf(1159.49054135686);
      Complex complex5 = complex4.negate();
      complex0.sqrt();
      complex1.getImaginary();
      complex0.readResolve();
      complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sin();
      Complex complex1 = null;
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.NaN.conjugate();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex3.ZERO.multiply(complex1);
      Complex complex7 = complex6.ONE.multiply(complex5);
      complex7.ZERO.multiply(complex3);
      complex5.pow((-1655.6296354));
      Complex complex8 = complex5.sqrt1z();
      complex8.NaN.sqrt1z();
      complex8.ONE.divide(complex0);
      complex2.isNaN();
      complex4.ZERO.sqrt();
      complex2.subtract(1.61949812578045E-182);
      Complex.valueOf(338.0);
      Complex complex9 = complex4.reciprocal();
      complex9.getReal();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf(1732.616);
      complex0.subtract(complex2);
      Complex complex3 = complex1.createComplex(1732.616, 1732.616);
      complex1.INF.toString();
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = complex4.INF.multiply(1732.616);
      Complex complex6 = complex4.sinh();
      complex4.INF.readResolve();
      complex0.readResolve();
      complex0.sqrt1z();
      complex0.I.negate();
      complex3.conjugate();
      complex5.cos();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(927.96);
      Complex complex1 = Complex.I;
      complex1.NaN.multiply((-43.538));
      Complex complex2 = complex1.NaN.negate();
      complex0.add(complex1);
      complex2.add(complex1);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(1582);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex.valueOf(0.0);
      Complex complex4 = complex1.ONE.log();
      complex3.NaN.multiply((double) 1582);
      Complex complex5 = complex1.INF.pow(complex0);
      complex5.NaN.tan();
      complex5.NaN.tan();
      Complex complex6 = complex1.NaN.atan();
      complex0.NaN.readResolve();
      complex0.hashCode();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex7.NaN.multiply(complex0);
      complex8.ONE.add((double) 1582);
      complex4.NaN.multiply(1582);
      complex0.sinh();
      complex2.abs();
      complex6.log();
      Complex.valueOf((-3212.840700167896));
      complex4.abs();
      Complex.valueOf(1388.9078484538265);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cos();
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-5198.13402867311));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(3809.336, 0.0);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex1.multiply(complex3);
      complex2.conjugate();
      complex5.multiply(complex1);
      Complex complex6 = complex1.createComplex((-5198.13402867311), (-5198.13402867311));
      complex6.ONE.toString();
      complex1.toString();
      complex0.tan();
      Complex complex7 = complex1.tanh();
      complex7.negate();
      Complex complex8 = Complex.valueOf(3809.336, 0.0);
      complex4.add((-785.07891));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.NaN;
      complex2.equals(complex9);
      complex8.getImaginary();
      complex1.multiply(31);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(406.1826244972789, (-2015.146113884));
      Complex complex1 = complex0.INF.tan();
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex1.NaN.acos();
      complex2.INF.readResolve();
      complex2.INF.hashCode();
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex3 = complex0.pow(406.1826244972789);
      Complex complex4 = complex3.NaN.multiply(0.0);
      Complex complex5 = complex4.NaN.cos();
      complex5.I.readResolve();
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.I.multiply(complex6);
      Complex complex9 = complex8.INF.conjugate();
      complex9.hashCode();
      complex8.getField();
      Complex complex10 = complex7.cosh();
      complex10.multiply(2.0);
      complex0.pow(4537.0);
      complex4.divide(4537.0);
      complex8.conjugate();
      complex0.abs();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1293.68506));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.NaN.acos();
      complex3.I.getArgument();
      Complex complex4 = complex2.tanh();
      complex4.ZERO.divide((-1293.68506));
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex0.ZERO.sqrt();
      Complex complex7 = complex0.tanh();
      assertEquals((-1.0), complex7.getReal(), 0.01);
      
      Complex complex8 = Complex.valueOf((-1293.68506), 0.0);
      Complex complex9 = complex0.add(0.0);
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex10.NaN.log();
      complex9.multiply((-1293.68506));
      Complex complex12 = complex2.add(1102.5001522);
      Complex complex13 = complex6.divide(complex8);
      assertEquals(-0.0, complex13.getReal(), 0.01);
      
      Complex complex14 = complex5.asin();
      Complex complex15 = complex9.I.multiply(1102.5001522);
      assertEquals(1102.5001522, complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      
      double double0 = complex14.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = complex10.toString();
      assertEquals("(0.7071067811865475, -0.0)", string0);
      
      complex14.ZERO.readResolve();
      Complex complex16 = complex12.atan();
      assertSame(complex12, complex4);
      
      Complex complex17 = complex9.pow(complex11);
      assertSame(complex17, complex14);
      
      complex2.hashCode();
      assertTrue(complex0.equals((Object)complex9));
      
      Complex complex18 = Complex.valueOf(1747.6, 0.0);
      assertFalse(complex18.equals((Object)complex16));
  }
}
