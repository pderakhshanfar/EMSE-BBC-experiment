/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:08:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(7.752519943329177E-294);
      Complex complex2 = new Complex(7.752519943329177E-294, 7.752519943329177E-294);
      complex0.add((-20.0));
      Complex complex3 = complex1.multiply(1);
      complex0.sqrt();
      complex1.nthRoot(504);
      Complex complex4 = complex3.acos();
      complex4.nthRoot(512);
      Complex complex5 = complex2.cos();
      complex1.getArgument();
      complex0.toString();
      complex0.multiply(complex3);
      Complex complex6 = complex0.subtract((-1942.02972));
      complex6.sqrt();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = Complex.ONE;
      complex8.nthRoot(839);
      complex5.multiply(complex7);
      complex5.log();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.divide(complex1);
      complex4.ZERO.subtract(complex1);
      complex4.ZERO.createComplex(1.244950238958056E-7, 2441.505396059793);
      complex4.ONE.reciprocal();
      Complex complex5 = complex0.exp();
      complex5.ONE.abs();
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex5.add(complex1);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.I.pow(1.0);
      complex9.NaN.subtract(2440.231045281);
      Complex complex10 = complex8.add(5.7354523);
      complex0.INF.getField();
      Complex complex11 = complex10.divide(5.795621295524984E-9);
      Complex complex12 = complex2.add(complex6);
      Complex complex13 = complex2.sqrt1z();
      complex13.ONE.cosh();
      complex3.createComplex(0.5403023058681398, 0.5403023058681398);
      Complex complex14 = complex12.sqrt();
      Complex complex15 = complex14.acos();
      complex15.I.readResolve();
      complex2.atan();
      complex6.add(complex2);
      complex10.tan();
      Complex complex16 = complex11.divide(46.968);
      complex16.reciprocal();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(8.593554223894477E135, 3136.306211);
      Complex complex2 = complex0.divide(3136.306211);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.add(2.414213562373095);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex4.multiply(1);
      complex0.sqrt();
      complex5.nthRoot(1);
      complex6.acos();
      complex4.nthRoot(1);
      complex6.cos();
      Complex complex7 = Complex.valueOf((double) 1, (-143.86));
      complex7.toString();
      Complex complex8 = complex3.multiply(complex5);
      complex4.subtract(391.57);
      complex8.readResolve();
      Complex complex9 = complex6.sqrt();
      complex2.multiply(20.0);
      Complex complex10 = complex4.subtract(complex1);
      Complex complex11 = complex10.tan();
      complex11.divide(1.0);
      complex9.cos();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(3136.306, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(3136.306);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(792.20635, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      complex2.sqrt1z();
      complex0.multiply((-1725));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = Complex.valueOf(2.5066452026367188, (-20.0));
      complex0.acos();
      complex0.tan();
      Complex complex1 = Complex.valueOf(1905.0);
//      try { 
        complex1.nthRoot((-342305));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -342,305
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3772334.950724676), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), 20.0);
      complex1.acos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(792.20635, Double.POSITIVE_INFINITY);
      complex1.acos();
      Complex complex2 = Complex.valueOf(792.20635);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-5789.28652486), Double.NaN);
      complex0.divide(7.415557606805398E-8);
      Complex complex1 = complex0.negate();
      complex1.NaN.divide(1.9672833298314355E7);
      complex0.acos();
      complex0.createComplex((-5789.28652486), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(7.752519943329177E-294, 7.752519943329177E-294);
      complex0.I.sqrt1z();
      Complex complex1 = complex0.add(Double.NaN);
      complex1.multiply(7.752519943329177E-294);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2967.769005);
      Complex complex2 = new Complex(2967.769005, 2967.769005);
      complex2.pow(complex1);
      complex1.pow((-21.9));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.divide(Double.NaN);
      complex0.nthRoot(1995);
      Complex complex2 = complex0.negate();
      complex2.acos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(7.752519943329177E-294, 1902.24965527);
      complex0.divide(Double.NaN);
      Complex complex1 = complex0.negate();
      complex0.acos();
      complex1.subtract(1902.24965527);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0762251933089556E165);
      complex0.ZERO.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.exp();
      complex2.divide(complex1);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = Complex.valueOf(4.3418021646459346E167, 0.17090985586643725);
      complex3.NaN.getArgument();
      complex2.acos();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.asin();
      complex5.acos();
      Complex complex7 = Complex.valueOf(545.6867602435775);
      Complex complex8 = complex4.add(complex7);
      Complex.valueOf((-729.597033352), (-2424.6));
      Complex complex9 = complex8.INF.log();
      complex9.ZERO.acos();
      complex9.NaN.hashCode();
      complex6.createComplex(545.6867602435775, 4.3418021646459346E167);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2436.3895811952675), (-2436.3895811952675));
      Complex complex2 = complex0.divide(7.752519943329177E-294);
      complex2.negate();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.NaN.pow(complex2);
      complex3.ONE.tanh();
      complex3.I.pow((-207.02));
      Complex complex4 = complex0.ONE.multiply(335.46808460130234);
      Complex complex5 = complex0.log();
      complex5.INF.getField();
      complex0.readResolve();
      complex2.exp();
      Complex complex6 = complex5.sin();
      complex6.ONE.abs();
      Complex.valueOf(20.0, 20.0);
      Complex.valueOf(335.46808460130234, 881.310737201);
      Complex complex7 = complex1.INF.pow(5.705842978547001E100);
      Complex complex8 = complex1.atan();
      Complex complex9 = complex8.ZERO.sinh();
      complex9.ONE.multiply(881.310737201);
      complex9.I.pow((-207.02));
      complex0.ONE.divide(complex2);
      Complex complex10 = complex0.ONE.sin();
      Complex complex11 = Complex.valueOf(20.0, 335.46808460130234);
      Complex complex12 = complex11.NaN.pow(complex10);
      complex12.ZERO.createComplex((-2049.553), 1.0);
      Complex complex13 = Complex.valueOf(335.46808460130234, (-2602.7400305424726));
      Complex.valueOf(20.0);
      complex4.equals(complex13);
      complex7.toString();
      complex10.sinh();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.cosh();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.ZERO;
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
      Complex.valueOf((double) 88, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex.valueOf(1977.6656942);
      Complex complex2 = new Complex((-1203.0), (-1203.0));
      Complex complex3 = Complex.INF;
      complex3.multiply((-2045222521));
      complex1.multiply((-295.4));
      Complex complex4 = Complex.ZERO;
      complex4.isInfinite();
      Complex complex5 = Complex.valueOf((double) (-2045222521), (-1203.0));
      complex5.acos();
      complex1.sinh();
      Complex.valueOf(1977.6656942, 0.32683377086145027);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 5.914537964556077E-8);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tanh();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0), 1728.87629);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.add(complex2);
      complex3.pow((-20.0));
      complex2.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex((-1175.99082), (-20.0));
      Complex complex5 = new Complex((-20.0), (-1924.947669497));
      complex5.multiply((-1825));
      complex0.multiply(1669.1198);
      Complex complex6 = new Complex(53.90674145855971, (-1202.6082925167889));
      complex6.isInfinite();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2905.93677468), (-2905.93677468));
      Complex complex1 = complex0.tan();
      complex0.atan();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.ZERO.divide((-1429.94953403975));
      Complex complex4 = complex0.tanh();
      Complex complex5 = new Complex(6456.66);
      complex5.I.pow(complex4);
      complex5.getImaginary();
      Complex complex6 = complex1.cosh();
      complex6.multiply((-1.0065901934522996E229));
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-12.358497968865327));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.tanh();
      complex2.INF.add((-1305.43));
      complex0.getImaginary();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.multiply((-1616));
      complex0.multiply(3429);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-2019.0));
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf((-2019.0), 3640.3912235694);
      Complex complex4 = complex2.log();
      complex1.atan();
      Complex complex5 = new Complex(2340.67702, (-2019.0));
      Complex complex6 = complex5.exp();
      complex6.acos();
      Complex complex7 = complex1.sinh();
      complex4.abs();
      complex4.divide(complex5);
      Complex complex8 = Complex.valueOf((-12.358497968865327));
      Complex complex9 = complex8.asin();
      complex9.subtract(Double.NaN);
      complex4.sin();
      complex1.acos();
      Complex complex10 = Complex.INF;
      complex7.tanh();
      complex1.multiply(complex5);
      Complex.valueOf((-12.358497968865327), 2340.67702);
      complex3.asin();
      Complex.valueOf((-871.3657), (-871.3657));
      Complex complex11 = new Complex((-871.3657));
      complex11.sqrt();
      complex11.sqrt1z();
      complex9.multiply(131);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
      complex0.divide(1.0);
      Complex complex1 = new Complex(2519.67835, (-2519.371745));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      complex2.tan();
      complex3.getField();
      complex2.getReal();
      complex1.acos();
      Complex complex4 = Complex.valueOf(339.9657644, Double.NaN);
      complex4.isInfinite();
      complex3.sinh();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(2865.156);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.sinh();
      complex4.abs();
      Complex complex7 = complex1.divide(complex6);
      complex5.asin();
      complex7.subtract(796.4426);
      complex2.multiply(Double.NaN);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.acos();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex6.multiply(complex4);
      Complex.valueOf((-1508.2), 0.0);
      complex12.asin();
      complex7.reciprocal();
      complex11.sqrt();
      complex9.sqrt1z();
      complex6.multiply(131);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-7.752519943329177E-294), (-7.752519943329177E-294));
      complex0.abs();
      Complex complex1 = Complex.NaN;
      complex1.ZERO.add(complex1);
      Complex complex2 = complex0.pow(2340.67702);
      complex2.ONE.log();
      Complex complex3 = complex1.divide(339.3788028233);
      complex3.atan();
      complex3.multiply(3272);
      complex0.tan();
      complex3.log();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2905.93677468));
      Complex complex1 = complex0.sqrt();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-7.752519943329177E-294), (-7.752519943329177E-294));
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.add(complex1);
      Complex complex3 = complex0.pow(2340.67702);
      complex3.ONE.log();
      complex1.getReal();
      Complex complex4 = complex0.log();
      complex4.ZERO.atan();
      Complex complex5 = complex4.exp();
      complex5.acos();
      Complex complex6 = complex1.sinh();
      complex2.NaN.abs();
      Complex complex7 = complex6.I.divide(complex2);
      complex2.asin();
      complex2.NaN.subtract(2340.67702);
      complex2.multiply((-871.3657));
      complex6.conjugate();
      complex6.ONE.sin();
      complex1.acos();
      Complex complex8 = Complex.INF;
      complex7.sqrt();
      complex3.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-590.219709565), (-590.219709565));
      Complex complex2 = complex1.multiply((-958.222799));
      Complex complex3 = complex2.tan();
      complex3.tanh();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex3.INF.add(0.0);
      complex0.getReal();
      complex0.toString();
      Complex complex5 = complex4.I.acos();
      complex5.ZERO.toString();
      Complex complex6 = complex5.I.subtract((-343.91937579864026));
      complex0.getField();
      complex5.isInfinite();
      complex0.toString();
      complex0.getReal();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.asin();
      complex2.sinh();
      complex1.cosh();
      Complex complex9 = complex6.multiply((-343.91937579864026));
      complex9.add(1.0);
      Complex complex10 = Complex.valueOf(20.0, 456.07174734719);
      complex10.acos();
      complex8.cosh();
      complex2.readResolve();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = Complex.INF;
      complex11.isNaN();
      Complex complex13 = complex9.negate();
      complex13.I.cosh();
      Complex complex14 = complex1.createComplex(20.0, 20.0);
      complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt();
      complex1.nthRoot(1212);
      complex0.negate();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-7.752519943329177E-294), (-7.752519943329177E-294));
      complex0.abs();
      Complex complex1 = complex0.add(1.0963718846424021E-293);
      complex1.reciprocal();
      complex0.pow(4660.9);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex0.divide(complex1);
      complex1.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.INF;
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex3.INF.add(0.0);
      complex0.getReal();
      complex0.toString();
      Complex complex5 = complex4.I.acos();
      complex5.ZERO.toString();
      Complex complex6 = complex5.I.subtract((-343.91937579864026));
      complex0.getField();
      complex0.isInfinite();
      complex3.toString();
      Complex complex7 = complex3.asin();
      complex7.sinh();
      complex4.getArgument();
      complex2.multiply(1523);
      Complex complex8 = Complex.ONE;
      Complex complex9 = new Complex(1523, 1.0);
      complex8.divide(complex9);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.4977047507315718E290);
      complex10.sqrt();
      complex6.nthRoot(1523);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.conjugate();
      Complex.valueOf(Double.NaN);
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex2.cosh();
      complex4.ONE.abs();
      Complex complex5 = complex0.asin();
      complex5.divide(complex2);
      Complex complex6 = complex5.atan();
      Complex.valueOf(925.72956534, 179.0);
      complex6.getField();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex5.subtract(complex0);
      complex3.conjugate();
      complex8.getImaginary();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.ZERO.sin();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.INF.add(0.0);
      complex0.getReal();
      complex3.getArgument();
      complex3.multiply(1523);
      complex2.divide(complex3);
      complex2.sqrt();
      complex2.nthRoot(1523);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2905.93677468));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.multiply(1);
      complex1.ZERO.divide(complex0);
      complex0.sqrt();
      Complex complex2 = Complex.valueOf((double) 1, 4.075086712873599E-5);
      complex1.equals(complex2);
      complex0.negate();
      complex1.tan();
      complex0.createComplex((-2905.93677468), (-2635.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9305076599121094);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-440.035764760166), 2.0);
      complex2.ZERO.acos();
      Complex complex3 = complex1.multiply(0.9305076599121094);
      Complex complex4 = complex0.divide((-2.851965258161176E-142));
      Complex complex5 = complex3.I.subtract((-440.035764760166));
      complex0.tan();
      complex3.tanh();
      complex4.getImaginary();
      complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.sqrt();
      Complex complex4 = new Complex((-12.0011249302), (-12.0011249302));
      Complex complex5 = complex4.sin();
      complex5.I.sin();
      complex4.getArgument();
      complex3.asin();
      Complex.valueOf((-5.848862070736576E-9));
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      complex0.NaN.sqrt1z();
      double double0 = 3294198.0;
      Complex complex1 = Complex.I;
      Complex.valueOf(Double.NaN, (-1643.6924398));
//      try { 
        complex0.I.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      Complex complex1 = complex0.sinh();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.NaN;
      complex3.ZERO.readResolve();
      complex0.ZERO.pow(complex3);
      complex1.readResolve();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex5.I.acos();
      complex6.INF.subtract(complex5);
      complex0.NaN.sin();
      Complex complex7 = complex4.ZERO.subtract(20.0);
      ComplexField complexField0 = complex2.getField();
      complex4.equals(complexField0);
      complex1.sqrt();
      complex1.reciprocal();
      complex7.sinh();
      complex5.createComplex(Double.POSITIVE_INFINITY, 20.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.conjugate();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex2.cosh();
      complex4.ONE.abs();
      Complex complex5 = complex0.asin();
      complex5.divide(complex2);
      Complex complex6 = complex5.atan();
      Complex.valueOf(925.72956534, 179.0);
      complex6.getField();
      complex6.reciprocal();
      Complex complex7 = complex5.subtract(complex0);
      complex3.conjugate();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.sin();
      complex0.ONE.cosh();
      complex0.getReal();
      complex0.toString();
      Complex complex3 = complex2.I.acos();
      complex3.ZERO.toString();
      complex3.I.subtract((-343.91937579864026));
      complex0.getField();
      complex0.isInfinite();
      Complex complex4 = Complex.I;
      complex2.divide(complex4);
      complex1.atan();
      Complex.valueOf((-20.0), (-20.0));
      complex2.getField();
      Complex complex5 = Complex.I;
      complex4.subtract(complex5);
      complex0.conjugate();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-12.0011249302), 1.2020197881056114);
      Complex complex1 = complex0.multiply((-2.851965258161176E-142));
      Complex complex2 = complex1.divide((-440.035764760166));
      Complex complex3 = complex2.ONE.tan();
      complex0.tanh();
      complex2.divide(complex1);
      complex1.ZERO.pow(1.2020197881056114);
      complex3.getImaginary();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex3.INF.add(0.0);
      complex0.getReal();
      complex0.toString();
      Complex complex5 = complex4.I.acos();
      complex5.ZERO.toString();
      complex5.I.subtract((-343.91937579864026));
      complex0.getField();
      complex0.isInfinite();
      complex3.toString();
      complex4.getReal();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.sinh();
      complex7.ONE.cosh();
      Complex complex8 = complex6.multiply(Double.POSITIVE_INFINITY);
      complex8.I.add(Double.POSITIVE_INFINITY);
      complex6.acos();
      complex2.cosh();
      complex4.readResolve();
      Complex complex9 = Complex.valueOf(3151.523017827408, (-343.91937579864026));
      complex2.asin();
      Complex complex10 = complex6.reciprocal();
      complex3.sqrt();
      Complex complex11 = Complex.INF;
      complex11.sqrt1z();
      complex9.multiply(131);
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-7.752519943329177E-294), (-7.752519943329177E-294));
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.pow(2340.67702);
      Complex complex4 = complex3.ONE.log();
      complex1.getReal();
      Complex complex5 = complex0.log();
      complex5.ZERO.atan();
      Complex complex6 = complex5.exp();
      complex6.acos();
      Complex complex7 = complex2.sinh();
      complex1.NaN.abs();
      complex7.I.divide(complex1);
      Complex complex8 = complex0.asin();
      complex8.INF.add(365.099466);
      complex0.NaN.subtract(2340.67702);
      complex2.multiply((-871.3657));
      complex7.ONE.sin();
      complex1.acos();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex3.tanh();
      complex8.multiply(complex5);
      complex4.conjugate();
      complex2.equals((Object) null);
      complex2.negate();
      complex10.tan();
      complex0.createComplex((-915.0095594280442), (-1560.528458748212));
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-9.179458802504127E-9));
      Complex complex1 = Complex.valueOf(5460184.558104029);
      Complex complex2 = complex1.I.divide(complex0);
      complex1.ONE.cosh();
      Complex.valueOf((-9.179458802504127E-9));
      Complex complex3 = complex0.multiply(complex1);
      complex1.ZERO.conjugate();
      complex3.ZERO.toString();
      complex3.toString();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.INF.createComplex(2571.217299, 0.6538093090057373);
      complex6.ZERO.log();
      Complex complex7 = complex3.ZERO.add(2571.217299);
      complex7.sqrt1z();
      complex4.I.nthRoot(4985);
      Complex.valueOf(1159.839493193);
      Complex complex8 = complex0.ZERO.cos();
      complex4.subtract(2.0);
      complex8.getArgument();
      Complex complex9 = complex4.sqrt1z();
      complex1.conjugate();
      Complex complex10 = complex3.negate();
      complex2.add((-9.179458802504127E-9));
      complex0.log();
      complex9.cos();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-576.134024973991));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.negate();
      complex2.I.pow(complex0);
      complex2.INF.createComplex(2.0, (-280.10626));
      Complex complex3 = complex0.subtract((-576.134024973991));
      Complex complex4 = complex3.ONE.sin();
      complex3.readResolve();
      complex4.INF.tan();
      Complex complex5 = complex3.reciprocal();
      complex5.ZERO.getArgument();
      Complex complex6 = complex3.conjugate();
      complex3.acos();
      complex6.ZERO.cos();
      Complex complex7 = complex6.asin();
      complex7.NaN.cos();
      complex4.NaN.atan();
      complex4.cos();
      Complex complex8 = complex4.add((-20.0));
      complex0.getReal();
      Complex complex9 = complex2.tanh();
      complex8.multiply(complex9);
      Complex complex10 = complex4.asin();
      Complex complex11 = complex10.ONE.reciprocal();
      complex11.NaN.sqrt();
      // Undeclared exception!
      complex6.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-7.752519943329177E-294), (-7.752519943329177E-294));
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex0.pow(2340.67702);
      complex4.ONE.log();
      complex1.getReal();
      Complex complex5 = complex0.log();
      complex5.ZERO.atan();
      Complex complex6 = complex5.exp();
      complex6.acos();
      Complex complex7 = complex2.sinh();
      complex3.NaN.abs();
      complex7.I.divide(complex3);
      Complex complex8 = complex3.asin();
      complex8.INF.add(365.099466);
      complex3.NaN.subtract(2340.67702);
      complex3.multiply((-871.3657));
      complex7.ONE.sin();
      Complex complex9 = complex1.acos();
      Complex complex10 = Complex.INF;
      complex4.tanh();
      Complex complex11 = Complex.I;
      Complex complex12 = complex8.multiply(complex11);
      Complex complex13 = Complex.valueOf(3923.3, 3151.523017827408);
      complex13.asin();
      complex4.reciprocal();
      complex12.sqrt();
      complex5.sqrt1z();
      complex10.multiply(131);
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-12.0011249302), 0.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.sinh();
      complex0.abs();
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.add(2105.3336658082);
      Complex complex9 = complex6.subtract(2211.4912421663907);
      complex8.multiply(3013.74458);
      Complex complex10 = new Complex((-12.0011249302), (-12.0011249302));
      complex10.sin();
      complex3.acos();
      Complex complex11 = Complex.INF;
      complex11.multiply(complex3);
      complex2.getArgument();
      complex1.multiply(2305.95303093);
      complex8.toString();
      complex3.isNaN();
      complex9.pow(0.0);
      Complex complex12 = complex11.sin();
      complex12.add(complex7);
      complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getArgument();
      complex0.NaN.abs();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.multiply(0.1930064558982849);
      complex0.equals(complex3);
      complex0.atan();
      Complex complex4 = complex3.divide(complex2);
      complex4.readResolve();
      Complex complex5 = complex3.cosh();
      complex4.add(complex0);
      Complex complex6 = Complex.valueOf(1.5707963267948966, 0.1930064558982849);
      complex6.pow(complex0);
      complex2.pow(complex5);
      complex2.createComplex(554.417639251, 1.0);
      complex5.divide(2202.8);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6456.66);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.multiply((-651));
      complex0.ZERO.readResolve();
      complex1.readResolve();
      ((Complex) object0).NaN.divide(complex0);
      Complex complex2 = complex1.ONE.add(6456.66);
      complex0.I.pow(708.56554);
      complex2.I.negate();
      complex0.readResolve();
      complex1.pow(6456.66);
      Complex complex3 = complex0.INF.multiply((-651));
      Complex complex4 = complex3.INF.atan();
      complex4.abs();
      Complex complex5 = complex0.exp();
      complex5.subtract((-1737.0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-576.134024973991));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex2.INF.createComplex(2.0, (-280.10626));
      Complex complex5 = complex0.subtract((-576.134024973991));
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = (Complex)complex5.readResolve();
      complex6.INF.tan();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex1.reciprocal();
      complex8.getArgument();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.conjugate();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.acos();
      Complex complex14 = complex4.cos();
      complex14.cosh();
      complex12.asin();
      complex3.cos();
      complex8.atan();
      complex11.cos();
      complex8.add((-750.35443));
      complex2.getReal();
      complex13.tanh();
      complex11.multiply(complex0);
      complex1.asin();
      complex7.reciprocal();
      Complex complex15 = complex7.sqrt();
      complex15.hashCode();
      complex9.sqrt1z();
      Complex complex16 = Complex.INF;
      complex16.multiply(1);
      complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-12.0011249302), 0.0);
      complex1.isInfinite();
      complex0.toString();
      complex1.getReal();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.sinh();
      complex3.cosh();
      Complex complex5 = Complex.I;
      complex5.multiply(1.0);
      Complex complex6 = complex3.add((-2.851965258161176E-142));
      Complex complex7 = complex3.acos();
      complex7.cosh();
      complex5.readResolve();
      complex1.conjugate();
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
      Complex complex8 = complex3.negate();
      complex6.tan();
      complex1.createComplex(Double.NaN, (-4.16884573556E7));
      Complex complex9 = Complex.valueOf(0.0);
      complex2.multiply(complex9);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      complex0.sin();
      Complex complex1 = Complex.valueOf(1302.0006480699324, 3136.04844499);
      Complex complex2 = complex0.multiply((-2.851965258161176E-142));
      Complex complex3 = Complex.valueOf(3136.04844499);
      complex0.divide(complex3);
      complex3.divide(1854.25617493);
      Complex complex4 = complex1.sin();
      Complex complex5 = new Complex((-2.6666773668536665));
      Complex complex6 = complex5.multiply(complex4);
      complex3.tan();
      complex1.tanh();
      complex6.divide(complex0);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6456.66);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.multiply((-651));
      Complex complex3 = complex0.createComplex((-280.10626), (-651));
      Complex complex4 = complex0.subtract((double) (-651));
      Complex complex5 = complex1.sin();
      complex2.readResolve();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf((-280.10626));
      complex1.reciprocal();
      Complex complex8 = Complex.valueOf(2754.0, 2754.0);
      complex8.getArgument();
      complex6.conjugate();
      Complex complex9 = Complex.INF;
      complex9.acos();
      Complex complex10 = complex5.cos();
      complex3.asin();
      Complex complex11 = complex5.cos();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex1.cos();
      complex9.add(2754.0);
      complex0.getReal();
      complex10.tanh();
      complex10.multiply(complex12);
      Complex complex14 = Complex.valueOf(6456.66);
      complex14.asin();
      complex4.reciprocal();
      complex4.sqrt();
      complex13.sqrt1z();
      complex11.multiply((-850));
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex3.INF.add(0.0);
      complex0.getReal();
      complex0.toString();
      Complex complex5 = complex4.I.acos();
      complex5.ZERO.toString();
      complex5.I.subtract((-332.7091600803));
      complex0.getField();
      complex0.isInfinite();
      complex3.toString();
      complex4.getReal();
      Complex complex6 = complex3.asin();
      complex2.ONE.cosh();
      Complex complex7 = complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.acos();
      complex2.cosh();
      complex4.readResolve();
      complex6.conjugate();
      complex3.equals((Object) null);
      complex4.negate();
      complex7.tanh();
      complex8.divide(complex2);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.sinh();
      Complex complex4 = (Complex)complex3.ONE.readResolve();
      complex3.INF.hashCode();
      Complex complex5 = complex3.pow(complex0);
      complex0.isInfinite();
      complex0.NaN.toString();
      complex0.isInfinite();
      Complex complex6 = complex2.INF.acos();
      Complex complex7 = complex6.ZERO.pow(0.0);
      complex5.toString();
      Complex complex8 = complex4.acos();
      Complex complex9 = Complex.INF;
      complex4.multiply(complex5);
      complex7.getArgument();
      complex9.multiply(1835.1040544576285);
      complex9.toString();
      complex8.isNaN();
      complex1.pow((-651.0));
      complex7.sin();
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.INF.sqrt();
      complex0.multiply(1205.00222087374);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.valueOf((-20.0));
      Complex complex6 = complex5.atan();
      complex6.sqrt();
      complex6.acos();
      complex3.reciprocal();
      complex4.toString();
      Complex complex7 = Complex.I;
      complex5.equals(complex7);
      Complex complex8 = Complex.ONE;
      complex8.reciprocal();
      complex8.asin();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-7.752519943329177E-294), (-7.752519943329177E-294));
      complex0.abs();
      Complex complex1 = Complex.NaN;
      complex0.ONE.divide(complex1);
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf(20.0, (-3310.58930788));
      complex2.multiply(1.0963718846424021E-293);
      complex1.divide(complex2);
      complex2.divide((-7.752519943329177E-294));
      complex1.sin();
      Complex complex4 = Complex.ONE;
      complex4.I.acos();
      complex4.tan();
      Complex complex5 = complex0.tanh();
      complex3.divide(complex5);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-7.752519943329177E-294), (-7.752519943329177E-294));
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = new Complex(1.0963718846424021E-293, (-7.752519943329177E-294));
      complex2.ONE.log();
      complex1.getReal();
      Complex complex4 = complex0.log();
      complex4.ZERO.atan();
      complex1.acos();
      Complex complex5 = complex2.sinh();
      complex3.NaN.abs();
      complex5.I.divide(complex3);
      Complex complex6 = complex3.asin();
      complex6.INF.add(365.099466);
      complex3.NaN.subtract(2340.67702);
      Complex complex7 = complex3.multiply((-871.3657));
      Complex complex8 = complex5.ONE.sin();
      complex1.acos();
      complex7.getReal();
      Complex complex9 = Complex.valueOf(Double.NaN, (-7.752519943329177E-294));
      complex9.tanh();
      complex6.multiply(complex3);
      Complex complex10 = complex9.asin();
      complex1.reciprocal();
      complex10.sqrt();
      Complex complex11 = complex3.sqrt1z();
      complex9.multiply(229);
      complex11.hashCode();
      complex8.pow(5619.787177467261);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-2914.3783723));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.I.pow(177.8480543);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = Complex.valueOf(177.8480543);
      complex6.ONE.add(complex8);
      complex0.acos();
      complex2.ZERO.sin();
      complex4.NaN.asin();
      Complex complex9 = complex1.ZERO.createComplex(2029.3128239494, (-842.03834));
      Complex complex10 = complex0.NaN.exp();
      complex2.isInfinite();
      Complex complex11 = complex0.multiply(0.0);
      Complex complex12 = complex11.INF.log();
      complex11.ZERO.toString();
      complex1.acos();
      complex3.add(complex4);
      complex2.multiply(1);
      complex7.reciprocal();
      complex9.divide((-2914.3783723));
      complex12.add(112.0596514001206);
      complex10.getReal();
      complex8.sqrt();
      Complex.valueOf((-572.9));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.NaN.add(540.0);
      complex1.ZERO.getArgument();
      Complex complex3 = complex0.asin();
      complex0.INF.conjugate();
      complex3.getArgument();
      complex2.atan();
      Complex complex4 = Complex.valueOf(0.0, (-1128.70743));
      complex4.add(1.5707963267948966);
      Complex.valueOf(540.0);
      complex2.pow((-1302.47));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex.valueOf((-1.0));
      Complex complex0 = Complex.ONE;
//      try { 
        complex0.I.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2905.93677468));
      complex0.ONE.multiply(1);
      Complex complex1 = complex0.sqrt();
//      try { 
        complex1.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = new Complex(2.0, 2636.99747039284);
//      try { 
        complex0.NaN.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.I.hashCode();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex1.I.cosh();
      Complex complex5 = complex4.INF.divide((-318.7525017727698));
      Complex.valueOf(20.0);
      complex2.isInfinite();
      Complex complex6 = complex3.sinh();
      complex6.acos();
      complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.20501139760017395);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex1.ONE.conjugate();
      complex0.getImaginary();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.NaN.sin();
      complex4.ONE.sqrt();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.log();
      complex3.log();
      complex5.multiply(0.0);
      complex6.exp();
      complex5.log();
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.conjugate();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex2.cosh();
      complex4.ONE.abs();
      Complex complex5 = complex0.asin();
      complex5.divide(complex2);
      Complex complex6 = complex5.atan();
      Complex.valueOf(925.72956534, 179.0);
      complex6.getField();
      complex6.reciprocal();
      complex5.subtract(complex0);
      complex3.conjugate();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2297.9646229949653));
      Complex complex1 = new Complex(208.379);
      complex1.ZERO.multiply(complex0);
      complex1.NaN.negate();
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.sqrt1z();
      complex2.ZERO.add((-2297.9646229949653));
      complex2.atan();
      Complex complex3 = complex2.sinh();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.multiply(1205.00222087374);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ZERO.atan();
      complex6.sqrt();
      complex5.ONE.acos();
      complex2.INF.reciprocal();
      complex4.toString();
      complex2.equals(complex4);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.sqrt();
      complex3.conjugate();
      complex0.I.add(complex1);
      Complex complex4 = complex0.divide(0.0);
      complex4.getField();
      Complex complex5 = complex0.subtract(complex4);
      complex4.sinh();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.INF.pow((-2.5113270522478854E-277));
      complex1.conjugate();
      Complex complex8 = complex6.ONE.negate();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex5.tan();
      Complex complex11 = complex5.NaN.sqrt1z();
      complex11.cosh();
      complex7.pow(complex6);
      Complex complex12 = complex8.add(complex10);
      complex12.ONE.getField();
      Complex.valueOf((-2.5113270522478854E-277));
      complex11.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-585.73122005);
      Complex complex0 = new Complex(0.0, (-585.73122005));
      double double2 = (-695.274207);
      double double3 = 0.0;
      complex0.NaN.atan();
      Complex complex1 = null;
//      try { 
        complex0.ZERO.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.ONE.divide(complex2);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex2.ZERO.negate();
      complex3.INF.getArgument();
      Complex complex7 = complex2.createComplex(103.331634, 103.331634);
      complex7.I.tanh();
      Complex complex8 = complex2.pow(complex3);
      complex7.equals("");
      Complex complex9 = complex2.add(0.7853981633974483);
      Complex complex10 = complex8.atan();
      complex9.INF.readResolve();
      complex10.ONE.divide(103.331634);
      Complex complex11 = complex9.ZERO.sqrt1z();
      Complex complex12 = Complex.valueOf(0.7853981633974483, 0.0);
      complex12.ONE.subtract(103.331634);
      complex1.sqrt();
      Complex complex13 = complex7.exp();
      Complex complex14 = complex13.subtract(complex9);
      complex6.divide(complex13);
      Complex complex15 = complex11.divide(103.331634);
      complex14.sin();
      Complex complex16 = complex15.pow(2010.718975807283);
      complex16.NaN.multiply(complex5);
      complex8.readResolve();
      complex2.getImaginary();
      Complex complex17 = Complex.valueOf(0.0, 6.283185307179586);
      complex13.add(complex17);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.NaN.asin();
      complex5.ONE.divide(6.283185307179586);
      Complex complex6 = complex4.I.atan();
      Complex complex7 = complex6.I.sqrt1z();
      complex7.NaN.subtract(complex2);
      complex2.getField();
      Complex complex8 = Complex.valueOf(121.574478, 121.574478);
      Complex complex9 = complex8.multiply(121.574478);
      complex9.multiply(0.0);
      complex1.pow(complex9);
      complex4.INF.conjugate();
      complex1.log();
      Complex complex10 = complex2.INF.pow(complex6);
      complex0.multiply((-1634));
      Complex complex11 = complex2.subtract(0.0);
      complex11.INF.cos();
      complex0.abs();
      complex4.createComplex(0.0, (-945.3283432578803));
      Complex complex12 = complex1.pow(0.0);
      Complex complex13 = complex12.ONE.add(6.283185307179586);
      Complex complex14 = complex12.ONE.multiply((double) (-1634));
      Complex complex15 = complex3.tan();
      complex15.INF.multiply(complex3);
      complex15.I.tanh();
      complex3.pow(complex4);
      complex14.sin();
      complex10.readResolve();
      complex13.add(complex1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 0;
      Complex complex1 = complex0.ONE.multiply(0);
      complex1.INF.pow((double) 0);
      Complex complex2 = complex1.sqrt1z();
      complex2.I.conjugate();
      complex1.NaN.pow(20.0);
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.INF.sin();
      complex1.NaN.hashCode();
      complex3.NaN.pow(complex2);
      complex2.ZERO.acos();
      complex2.ZERO.sqrt1z();
      Complex complex4 = complex0.createComplex(146.336104135, 0.0);
      Complex complex5 = complex4.ZERO.tanh();
      complex5.INF.add(0.0);
      Complex complex6 = complex3.ONE.subtract(complex1);
      complex2.ZERO.hashCode();
      Complex complex7 = Complex.valueOf(146.336104135);
      Complex complex8 = complex4.sinh();
      complex7.ONE.toString();
      Complex complex9 = complex8.pow((-3554.70669));
      complex9.readResolve();
      Complex complex10 = complex9.add(0.0);
      complex10.ONE.sqrt1z();
      Complex complex11 = complex3.subtract((-989.26352016));
      complex11.ONE.subtract(complex1);
      complex11.I.reciprocal();
      complex11.createComplex(0.0, (-989.26352016));
      complex3.ONE.subtract(complex6);
      Object object0 = complex7.readResolve();
      complex0.equals(object0);
//      try { 
        complex2.nthRoot((-4244));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -4,244
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.5534584522247314);
      Complex complex1 = complex0.ZERO.add(1784.861065664033);
      complex1.ONE.getArgument();
      complex0.hashCode();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-12.0011249302), 0.0);
      Complex complex3 = complex2.multiply((-2.851965258161176E-142));
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex3.divide((-440.035764760166));
      complex4.ONE.sin();
      Complex complex6 = complex3.multiply(complex4);
      Complex complex7 = complex5.ONE.tan();
      complex2.tanh();
      complex5.divide(complex6);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.pow((-1273.54599198292));
      complex1.NaN.tanh();
      Complex complex2 = complex0.createComplex((-1273.54599198292), (-659.080110002778));
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf((-581.0321), (-659.080110002778));
      complex4.I.subtract((-2923.398738974176));
      Complex complex5 = complex0.add(complex3);
      complex5.INF.tanh();
      complex0.hashCode();
      complex2.exp();
      Complex complex6 = complex0.asin();
      Complex.valueOf((-2688.131));
      Complex complex7 = complex6.ONE.add(complex3);
      complex0.tan();
      complex3.I.reciprocal();
      Complex complex8 = complex7.ZERO.exp();
      complex3.acos();
      Complex complex9 = complex0.pow(complex7);
      complex9.I.createComplex(6.636396724067746E-8, (-2583.0));
      complex9.tanh();
      Complex.valueOf(0.0);
      complex6.toString();
      complex8.getImaginary();
      Complex.valueOf((-2.077077172525637E-5), (-2.077077172525637E-5));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6456.66);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.multiply((-651));
      complex0.ZERO.readResolve();
      complex1.readResolve();
      Complex complex2 = complex1.I.createComplex((-651), 0.0);
      complex2.NaN.divide(complex0);
      Complex complex3 = complex1.ONE.add(6456.66);
      complex0.I.pow(708.56554);
      complex3.I.negate();
      Object object1 = complex0.readResolve();
      Complex complex4 = complex1.I.pow((double) (-651));
      complex4.pow(6456.66);
      Complex complex5 = complex0.INF.multiply((-651));
      Complex complex6 = complex5.INF.atan();
      complex1.equals(object1);
      complex0.atan();
      Complex complex7 = complex1.divide(complex0);
      complex0.readResolve();
      Complex complex8 = complex5.cosh();
      complex7.add(complex3);
      complex7.pow(complex6);
      complex3.pow(complex6);
      complex8.createComplex(6456.66, (-3794.281145808379));
      complex1.divide((double) (-651));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.abs();
      Complex complex1 = complex0.multiply(347);
      Complex complex2 = complex1.NaN.subtract((double) 347);
      Complex complex3 = complex2.ONE.createComplex(347, 347);
      complex3.I.cosh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.INF.pow(complex5);
      Complex complex7 = complex5.sin();
      complex5.getField();
      Complex complex8 = complex5.subtract(complex7);
      Complex complex9 = complex8.log();
      Complex complex10 = complex9.I.sqrt();
      complex8.INF.subtract((-2.2555535676499395E-7));
      complex2.INF.toString();
      complex9.INF.divide((-1015.753437));
      Complex complex11 = Complex.valueOf(1.0);
      complex6.hashCode();
      complex11.ZERO.tan();
      Complex.valueOf((-2325.0), (double) 347);
      complex11.getImaginary();
      complex8.abs();
      complex1.subtract((-522.0));
      complex2.divide(complex8);
      complex2.tanh();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      complex1.I.subtract(1416.97892);
      complex1.NaN.add(0.0);
      complex0.INF.reciprocal();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.NaN.add(complex0);
      complex0.ZERO.pow(complex1);
      Complex complex2 = complex0.reciprocal();
      complex2.getImaginary();
      complex0.hashCode();
      complex2.reciprocal();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-576.134024973991));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.negate();
      complex2.I.pow(complex0);
      complex2.INF.createComplex(2.0, (-280.10626));
      Complex complex3 = complex0.subtract((-576.134024973991));
      Complex complex4 = complex3.ONE.sin();
      complex3.readResolve();
      complex4.INF.tan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.reciprocal();
      complex6.ZERO.getArgument();
      Complex complex7 = complex5.conjugate();
      complex3.acos();
      Complex complex8 = complex7.ZERO.cos();
      Complex complex9 = complex7.asin();
      complex9.NaN.cos();
      Complex complex10 = complex5.NaN.atan();
      complex4.cos();
      Complex complex11 = complex4.add((-20.0));
      complex0.getReal();
      Complex complex12 = complex2.tanh();
      complex11.multiply(complex12);
      Complex complex13 = complex4.asin();
      Complex complex14 = complex13.ONE.reciprocal();
      complex14.NaN.sqrt();
      complex7.sqrt1z();
      complex8.multiply(1);
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = Complex.valueOf(2267.22840960667);
      Complex complex3 = complex0.pow(3718.41);
      complex3.ZERO.createComplex(6.714184569587689E-79, 0);
      complex3.ZERO.multiply(0);
      Complex complex4 = complex3.acos();
      complex2.sqrt1z();
      complex1.subtract(0.0);
      complex3.INF.pow(378.774);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex5.multiply(2267.22840960667);
      Complex complex8 = complex7.ZERO.sqrt1z();
      complex2.abs();
      complex4.getImaginary();
      complex8.ONE.cosh();
      Complex complex9 = complex3.negate();
      complex6.abs();
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex8.tan();
      complex11.hashCode();
      complex9.pow(complex6);
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      complex0.acos();
//      try { 
        complex1.I.nthRoot((-3237));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,237
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex3.INF.add(0.0);
      complex0.getReal();
      complex0.toString();
      Complex complex5 = complex4.I.acos();
      complex5.ZERO.toString();
      complex5.I.subtract((-332.7091600803));
      complex0.getField();
      complex0.isInfinite();
      complex3.toString();
      complex4.getReal();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.sinh();
      complex7.ONE.cosh();
      Complex complex8 = complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.I.add(Double.POSITIVE_INFINITY);
      complex6.acos();
      Complex complex10 = complex2.cosh();
      complex4.readResolve();
      Complex complex11 = complex9.conjugate();
      complex3.equals((Object) null);
      complex4.negate();
      Complex complex12 = complex3.tan();
      complex0.createComplex(1.0, 0.0);
      complex11.multiply(complex10);
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.createComplex(2.0, 2.0);
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.ZERO.log();
      Complex complex3 = complex1.createComplex(1332.0, 65.331685588);
      complex2.ZERO.add(786.7520634);
      Complex complex4 = complex1.ONE.createComplex(0.0, 3110.330325);
      complex1.ZERO.createComplex(0.0, 20.0);
      complex2.NaN.abs();
      Complex complex5 = complex2.I.divide(0.5860490798950195);
      complex5.ONE.cos();
      complex0.readResolve();
      Complex complex6 = complex0.sqrt1z();
      complex0.getArgument();
      complex6.abs();
      complex4.abs();
      complex3.cosh();
      complex6.acos();
      Complex complex7 = Complex.valueOf(20.0);
      complex4.multiply(complex7);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 339.9657644);
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(3781);
      Complex complex3 = complex1.ONE.subtract(0.0);
      complex0.sin();
      Complex complex4 = complex0.exp();
      complex4.ONE.tanh();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ONE.cos();
      complex2.nthRoot(37);
      Complex complex7 = complex3.acos();
      complex7.NaN.subtract(complex3);
      complex5.I.getField();
      complex7.ZERO.readResolve();
      Complex complex8 = complex6.divide(complex3);
      complex8.ONE.nthRoot(37);
      Complex complex9 = complex8.add(0.0);
      complex1.sin();
      Complex complex10 = complex9.sin();
      complex3.multiply(1);
      complex1.subtract(complex10);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.I.tan();
      complex2.getField();
      complex0.getReal();
      complex0.I.acos();
      complex0.isInfinite();
      complex0.add(1.0);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-7.752519943329177E-294), (-7.752519943329177E-294));
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex0.pow(2340.67702);
      complex4.ONE.log();
      complex1.getReal();
      Complex complex5 = complex0.log();
      complex5.ZERO.atan();
      Complex complex6 = complex5.exp();
      complex6.acos();
      Complex complex7 = complex2.sinh();
      complex3.NaN.abs();
      complex7.I.divide(complex3);
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.INF.add(365.099466);
      complex3.NaN.subtract(2340.67702);
      Complex complex10 = complex3.multiply((-871.3657));
      complex7.ONE.sin();
      Complex complex11 = complex1.acos();
      Complex complex12 = Complex.INF;
      complex11.NaN.multiply(complex12);
      complex2.NaN.getArgument();
      Complex complex13 = complex7.multiply(Double.NaN);
      complex13.ONE.toString();
      complex10.isNaN();
      complex7.pow(579.181937012548);
      complex7.sin();
      complex13.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.pow(1156.9030411359);
      Complex.valueOf(1156.9030411359);
      Complex complex4 = Complex.valueOf((-1112.2543));
      Complex complex5 = complex3.INF.atan();
      complex5.ZERO.sqrt();
      Complex complex6 = complex0.add(1156.9030411359);
      Complex complex7 = complex1.exp();
      complex7.ONE.tan();
      Complex complex8 = complex1.cosh();
      complex1.INF.abs();
      complex6.pow(complex4);
      Complex complex9 = complex8.I.conjugate();
      complex6.toString();
      complex0.multiply(0.0);
      Complex complex10 = complex2.sqrt();
      complex8.getReal();
      complex2.getReal();
      complex10.tanh();
      complex10.hashCode();
      complex9.asin();
      complex0.pow(complex5);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1631.90463399), 322.8);
      Complex complex1 = complex0.sin();
      complex0.I.tan();
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.exp();
      complex3.ONE.hashCode();
      complex0.INF.divide(322.8);
      Complex complex4 = complex2.ZERO.asin();
      complex0.getReal();
      Complex complex5 = complex2.ZERO.sinh();
      complex5.NaN.pow(2557.819);
      complex4.INF.cosh();
      Complex complex6 = complex2.divide(322.8);
      Complex complex7 = complex4.subtract(0.0);
      complex4.cos();
      complex6.log();
      Complex.valueOf(82.268978, (-1631.90463399));
      complex5.isNaN();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      List<Complex> list0 = complex0.nthRoot(2757);
      assertTrue(list0.contains(complex0));
      
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.INF.pow(complex1);
      Complex complex5 = complex4.NaN.log();
      complex2.ONE.readResolve();
      complex0.isInfinite();
      Complex complex6 = complex2.ONE.pow(complex4);
      Complex complex7 = complex0.reciprocal();
      complex7.ONE.asin();
      Complex complex8 = complex0.NaN.createComplex(2757, 2346.10927);
      complex2.NaN.sin();
      complex3.ONE.abs();
      Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex7.atan();
      Complex complex10 = complex7.negate();
      complex8.getField();
      Complex complex11 = complex10.ZERO.subtract(Double.NaN);
      complex5.getField();
      complex10.readResolve();
      complex11.I.exp();
      Complex complex12 = complex3.pow(0.0);
      Complex complex13 = complex12.NaN.multiply(complex8);
      Complex complex14 = complex13.ZERO.atan();
      Complex complex15 = complex13.ZERO.sin();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      complex5.nthRoot(2757);
      assertTrue(complex1.equals((Object)complex14));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex16 = complex11.cos();
      assertNotSame(complex16, complex4);
      assertSame(complex16, complex6);
      
      Complex complex17 = Complex.valueOf((-6.997545435826076E-8), 2346.10927);
      Complex complex18 = complex9.subtract(complex17);
      assertTrue(complex7.equals((Object)complex12));
      assertFalse(complex18.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide(0.0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.exp();
      String string0 = complex2.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex3 = (Complex)complex2.readResolve();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      complex2.getField();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex3));
      
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
  }
}
