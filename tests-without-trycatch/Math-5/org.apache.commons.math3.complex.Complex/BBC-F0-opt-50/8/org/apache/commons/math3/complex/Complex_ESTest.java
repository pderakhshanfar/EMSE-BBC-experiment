/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:14:30 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
//      try { 
        complex0.nthRoot((-398));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -398
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-4935.7), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(4.3724191002977524E-119);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.11427661731900361, 0.11427661731900361);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.947324902121021, 2805.72330382884);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.createComplex(530.9, 530.9);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex.valueOf(0.0, (-918.491319841));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex.valueOf((-1070.751248923), (-1070.751248923));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex.valueOf(2.3713798664443718E-8, 0.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.divide((double) (-667));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      Complex complex1 = new Complex(1160.316402, (-3.016329994276181E-8));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.acos();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-1358.1270805954762), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.sin();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.subtract((-4.392309439525734E-8));
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1241179396053055E261, (-0.7071067811865476));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1317.2));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.sinh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(2908.8, 2908.8);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(882.47);
      Complex complex1 = Complex.valueOf((-3099.488097968549));
      Complex complex2 = complex0.I.multiply(complex1);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-490.34997334284));
      Complex complex2 = complex0.pow(complex0);
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1618.87931571);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      complex0.pow(4138.999900023369);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.20421552658081055, 0.20421552658081055);
      Complex complex2 = complex0.divide(complex1);
      complex2.pow((-2980.66725479072));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow((-490.34997334284));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-919.65));
      complex0.ZERO.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-210.42956456915732));
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1.1901862840583523E-7, 882.22);
      complex0.INF.negate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-490.34997334284));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(154);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.multiply((-640.787018));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.multiply((-1405.321430342));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-1358.1270805954762), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.pow(Double.POSITIVE_INFINITY);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 848.4617);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(1.1901862840583523E-7, 882.22);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.subtract(complex0);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1414.100426), (-4.392309439525734E-8));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1358.1270805954762));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.947324902121021, 2805.72330382884);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2805.299737258403, 5.070274654122399E107);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.20421552658081055, 0.20421552658081055);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1160.316402);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      Complex complex1 = Complex.valueOf(1327.895952, 1.4736818914204564E-150);
      Complex complex2 = complex1.divide(complex0);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(557.979);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(1.4736818914204564E-150, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(0.0, 2348.32217);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex(1099.73097217, 0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(791.62073886444, Double.POSITIVE_INFINITY);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1064.3, (-279.84327178924));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.cosh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      Complex complex1 = complex0.tan();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-2356.0));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1160.316402, (-3.016329994276181E-8));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-490.34997334284), (-490.34997334284));
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.conjugate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(996.4717098496);
      Complex complex1 = complex0.I.conjugate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(5.275183961165903E212, 0.5403023058681398);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.asin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add((-490.34997334284));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.add(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      complex1.add((-490.34997334284));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(1.5411775738825048E25, (-339.91339262741053));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(1.4651798238108897, 1.4651798238108897);
//      try { 
        complex0.NaN.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), 2.0);
      // Undeclared exception!
      complex0.nthRoot(1073286070);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
//      try { 
        complex0.INF.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(2805.72330382884);
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-919.65));
//      try { 
        complex0.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(2805.72330382884);
      Complex complex1 = complex0.pow(880.7205497002);
      Complex complex2 = complex1.log();
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(complex0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      Complex complex1 = complex0.negate();
      assertEquals(3.016329994276181E-8, complex1.getImaginary(), 0.01);
      assertEquals((-3.016329994276181E-8), complex0.getReal(), 0.01);
      assertEquals((-3.016329994276181E-8), complex0.getImaginary(), 0.01);
      assertEquals(3.016329994276181E-8, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1.3336148713971936E-34);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide(complex0);
      Complex complex2 = complex1.multiply(0.0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(2805.299737258403);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(2805.299737258403, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-1358.1270805954762), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals((-1358.1270805954762), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.divide(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(996.4717098496);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(448.41434408187615);
      Complex complex1 = complex0.add(complex0);
      assertEquals(896.8286881637523, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(448.41434408187615, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      double double0 = complex1.abs();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-3.0118152047565877E-9), Double.NaN);
      assertTrue(complex0.isNaN());
      assertEquals((-3.0118152047565877E-9), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.getArgument();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      boolean boolean0 = complex0.isInfinite();
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals((-210.42956456915732), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      double double0 = complex0.getReal();
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals((-210.42956456915732), double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.1152847602082673E102, Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex((-1358.0), Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex0.nthRoot(1139);
      assertEquals(1, list0.size());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals((-1358.0), complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1160.316402);
      Complex complex2 = complex0.pow(complex1);
      List<Complex> list0 = complex2.nthRoot(3735);
      assertEquals(1, list0.size());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(list0.contains(complex2));
      assertTrue(complex1.isInfinite());
      assertEquals(1160.316402, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 484.48607912671594);
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      Complex complex1 = complex0.tanh();
      assertEquals((-210.42956456915732), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(1160.316402, (-3.016329994276181E-8));
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1160.316402, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      Complex complex1 = complex0.tanh();
      assertEquals((-3.016329994276181E-8), complex0.getImaginary(), 0.01);
      assertEquals((-3.016329994276179E-8), complex1.getImaginary(), 0.01);
      assertEquals((-3.016329994276183E-8), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.016329994276181E-8), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      assertFalse(complex1.isInfinite());
      assertNotSame(complex2, complex1);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(5.840341313300675E-10, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-37.603191353926334), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex((-1358.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      assertFalse(complex1.isInfinite());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.sinh();
      assertEquals((-4.392309439525734E-8), complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.cos();
      assertEquals((-1414.0), complex0.getReal(), 0.01);
      assertEquals((-4.392309439525734E-8), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = new Complex((-1358.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.atan();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals((-1358.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      Complex complex1 = complex0.asin();
      assertEquals((-6.042303813585423), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.sqrt1z();
      assertSame(complex2, complex1);
      assertEquals((-4.392309439525734E-8), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1414.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.subtract(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = new Complex(5.275183961165903E212, 0.5403023058681398);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.negate();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = new Complex((-1358.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-2535.833468015567));
      assertEquals((-1358.0), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.NaN);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = new Complex(5.275183961165903E212, 0.5403023058681398);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.multiply(3782);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex3, complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      Complex complex1 = complex0.multiply(340);
      assertEquals((-1.0255521980539015E-5), complex1.getImaginary(), 0.01);
      assertEquals((-3.016329994276181E-8), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0255521980539015E-5), complex1.getReal(), 0.01);
      assertEquals((-3.016329994276181E-8), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = new Complex((-1358.1270805954762), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex0.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex1.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals((-4.392309439525734E-8), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5332752658571312E182, (-1347.34028414884));
      Complex complex1 = complex0.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(2.5332752658571312E182, complex0.getReal(), 0.01);
      assertEquals((-1347.34028414884), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(0.0);
      complex1.hashCode();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      complex0.hashCode();
      assertEquals((-4.392309439525734E-8), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1414.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.INF.acos();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-1414.0), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-4.392309439525734E-8), complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = new Complex(1201.3469701098, (-2440.9601814));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-2440.9601814), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1201.3469701098, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.INF.acos();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(boolean0);
      assertEquals((-1414.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4.392309439525734E-8), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = new Complex(0.6773988008499146, 0.6773988008499146);
      Complex complex1 = complex0.INF.reciprocal();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.6773988008499146, complex0.getReal(), 0.01);
      assertEquals(0.6773988008499146, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-706.0));
      Complex complex1 = complex0.ZERO.reciprocal();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-706.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      Complex complex1 = complex0.subtract((-3.016329994276181E-8));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.atan();
      assertEquals((-3.016329994276181E-8), complex1.getImaginary(), 0.01);
      assertEquals(3.0163299947208764E-8, complex3.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex3.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = new Complex((-1358.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.reciprocal();
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertEquals((-1358.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      Complex complex1 = complex0.reciprocal();
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals((-210.42956456915732), complex0.getReal(), 0.01);
      assertEquals(2.258274233218069E-5, complex1.getImaginary(), 0.01);
      assertEquals((-0.004752076635738259), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 848.4617);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(848.4617, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      Complex complex1 = complex0.divide(4138.999900023369);
      assertEquals((-0.050840678823879465), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals((-2.4160425807073682E-4), complex1.getImaginary(), 0.01);
      assertEquals((-210.42956456915732), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-706.0));
      Complex complex1 = complex0.divide(Double.NaN);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-706.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.divide((-257.1328));
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = new Complex(5.275183961165903E212, 0.5403023058681398);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.multiply(complex2);
      assertSame(complex3, complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals((-210.42956456915732), complex0.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.divide(complex1);
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = new Complex(1.5411775738825048E25, (-339.91339262741053));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.divide(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.valueOf(448.41434408187615);
      Complex complex1 = complex0.I.add(Double.NaN);
      assertEquals(448.41434408187615, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-2356.0));
      Complex complex1 = complex0.add(2.2844135610697528E222);
      assertFalse(complex1.isInfinite());
      assertEquals(2.2844135610697528E222, complex1.getReal(), 0.01);
      assertEquals((-2356.0), complex1.getImaginary(), 0.01);
      assertEquals((-2356.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.041666663879186654);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = new Complex((-1414.0), (-4.392309439525734E-8));
      Complex complex1 = complex0.NaN.add(complex0);
      assertEquals((-4.392309439525734E-8), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-1414.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = new Complex(0.007356178315368042, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-2228));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(0.007356178315368042, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = new Complex((-210.42956456915732), (-1.0));
      String string0 = complex0.toString();
      assertEquals("(-210.42956456915732, -1.0)", string0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.997578865943365E12);
      Complex complex1 = complex0.multiply(340);
      assertEquals(3.997578865943365E12, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.3591768144207442E15, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-2356.0));
      complex0.getField();
      assertEquals((-2356.0), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-3.016329994276181E-8), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-3.016329994276181E-8));
      List<Complex> list0 = complex0.nthRoot(340);
      assertEquals((-3.016329994276181E-8), complex0.getImaginary(), 0.01);
      assertEquals((-3.016329994276181E-8), complex0.getReal(), 0.01);
      assertEquals(340, list0.size());
  }
}
