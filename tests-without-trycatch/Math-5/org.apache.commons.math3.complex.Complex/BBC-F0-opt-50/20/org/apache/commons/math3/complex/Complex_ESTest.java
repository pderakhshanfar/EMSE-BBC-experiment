/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:58:39 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3376711.825075484), (-3376711.825075484));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.multiply(complex1);
      complex1.multiply((-601));
      Complex complex3 = complex1.sinh();
      complex3.pow(668.5442608758891);
      Complex complex4 = complex2.subtract(1688355.9125378865);
      complex4.sqrt1z();
      Complex complex5 = Complex.valueOf(20.0);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(2231.0, (-20.0));
      complex0.I.multiply(2231.0);
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.ONE.asin();
      complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.ONE.cosh();
      complex0.INF.readResolve();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex3.multiply(3376711.825075632);
      complex4.I.nthRoot(1);
      complex4.I.toString();
      complex0.INF.hashCode();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.pow(complex2);
      complex6.createComplex((-20.0), 3376711.825075632);
      complex6.NaN.hashCode();
      Complex complex7 = Complex.ZERO;
      complex2.multiply(complex7);
      Complex complex8 = complex0.pow(2231.0);
      complex8.toString();
      complex7.negate();
      complex4.atan();
      Complex.valueOf(2231.0, (-18.430862426757812));
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(105705.86247539999, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(2518);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(105705.86247539999, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.I.atan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(105705.86247539999, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(complex0);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-1688364.8012265866), (-1688364.8012265866));
      Complex complex1 = Complex.valueOf(105705.86247539999, Double.POSITIVE_INFINITY);
      complex1.multiply(105705.86247539999);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(1113.1343327, (-2853.1264));
      Complex complex1 = Complex.valueOf(0.505145430565, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex2.ZERO.subtract(303.86721200406);
      Complex complex3 = new Complex((-2853.1264));
      complex1.nthRoot(417);
      Complex complex4 = complex1.multiply(complex3);
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = 8.720743087611513E168;
      Complex complex0 = Complex.valueOf(8.720743087611513E168, 0.943845754802216);
      Complex complex1 = complex0.sqrt1z();
      complex1.divide(complex0);
      Complex.valueOf(0.943845754802216);
//      try { 
        complex0.nthRoot((-2147483173));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,147,483,173
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-1299.3678896055137));
      complex0.toString();
      complex0.tan();
      Complex complex1 = Complex.valueOf(2.8407720200442806E99, (-1.0894001590268427E-8));
      complex1.sinh();
      Complex.valueOf(20.0);
      Complex.valueOf(0.6027565002441406);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.atan();
      complex0.ONE.nthRoot(37);
      Complex complex1 = complex0.acos();
      complex1.INF.cos();
      Complex complex2 = complex0.log();
      complex2.NaN.readResolve();
      complex0.nthRoot(17);
      complex0.createComplex(37, 2583.4028087);
      Complex complex3 = complex1.sinh();
      complex3.sinh();
      complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.divide(988.701);
      complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.NaN.exp();
      complex3.abs();
      complex4.ONE.hashCode();
      Complex complex5 = complex2.multiply(complex3);
      Complex complex6 = complex5.INF.cosh();
      complex6.ONE.sin();
//      try { 
        complex1.INF.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.657863974571228);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(0.657863974571228, 2396.7);
      Complex complex4 = complex3.add(complex2);
      complex4.equals(complex1);
      Complex.valueOf(0.657863974571228);
      Complex complex5 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.valueOf((-4587.93903137304));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tan();
      complex3.cosh();
      complex2.subtract(complex3);
      Complex.valueOf((-3951.8443578), (-4587.93903137304));
//      try { 
        complex1.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(869);
      complex0.getReal();
      complex1.createComplex(3.84802547387153E-4, 869);
      complex1.asin();
      Complex complex2 = Complex.valueOf(3.84802547387153E-4);
      Complex complex3 = Complex.valueOf((-495.716287547));
      complex2.equals(complex3);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-1299.3678896055137));
      Complex complex1 = complex0.multiply(40);
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf((-20.0), (double) 40);
      complex3.sin();
      complex2.exp();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf((-20.0));
      Complex complex6 = complex5.sqrt();
      complex6.log();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = Complex.I;
      complex1.multiply((-379.6832450297));
      complex0.abs();
      Complex.valueOf((-379.6832450297), (-379.6832450297));
      Complex complex2 = new Complex(3.3576783010266685E-8);
      complex2.readResolve();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex.valueOf(0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(861.350908770178, 144158.3665562832);
      complex5.atan();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply((-3078.133));
      complex1.abs();
      Complex complex3 = Complex.valueOf((-896.308434));
      Complex complex4 = complex3.negate();
      complex0.toString();
      complex3.asin();
      complex2.sin();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex5.cosh();
      Complex.valueOf((-896.308434), 2.8407720200442806E99);
      complex6.equals(complex7);
      Complex.valueOf(2.8407720200442806E99);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex1.ZERO.sqrt();
      complex0.hashCode();
      complex1.sqrt1z();
      complex1.sqrt();
      complex2.multiply(1555);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex.valueOf(827.217477, (-3333.0439));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.asin();
      complex0.toString();
      Complex.valueOf(6.283185307179586, 0.8813735870195429);
      Complex complex3 = new Complex(1435.35005486, Double.NaN);
      complex3.equals(complex2);
      Complex complex4 = Complex.valueOf((-3333.0439));
      Complex complex5 = complex4.tan();
      complex5.sin();
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(2.0527342305586606E186);
      Complex complex1 = Complex.valueOf(2.0527342305586606E186);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.NaN;
      complex3.toString();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.sin();
      Complex.valueOf(972.457861199633, (-1838.439342217631));
      complex1.exp();
      Complex.valueOf((-963.0), 1506.833);
      complex5.exp();
      complex4.readResolve();
      Complex complex6 = complex2.tan();
      complex3.cosh();
      complex2.abs();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.asin();
      complex8.multiply((-1150.1));
      complex1.pow(3619.08698669);
      complex7.tan();
      complex1.acos();
      Complex complex9 = Complex.NaN;
      complex3.log();
      Complex.valueOf(2.459332651786466);
      Complex.valueOf(972.457861199633);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ONE.multiply((-379.6832450297));
      complex0.abs();
      Complex complex2 = Complex.valueOf(3.3576783010266685E-8, 861.350908770178);
      Complex complex3 = (Complex)complex1.readResolve();
      complex1.equals(complex3);
      Complex.valueOf(3.3576783010266685E-8);
      complex3.tan();
      complex0.atan();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1299.3678896055137));
      complex0.abs();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.0655345916748047);
      complex2.readResolve();
      complex2.equals(complex1);
      Complex.valueOf(1.0655345916748047);
      Complex complex3 = complex1.tan();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      complex1.abs();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex0.negate();
      complex4.toString();
      complex1.asin();
      Complex complex5 = complex3.sin();
      Complex complex6 = Complex.valueOf((-9.684925795536813E116), (-3078.133));
      Complex complex7 = complex3.exp();
      complex7.readResolve();
      Complex complex8 = complex6.tan();
      Complex complex9 = Complex.valueOf((-529.534));
      complex9.cosh();
      complex8.abs();
      Complex complex10 = Complex.ZERO;
      complex5.asin();
      complex5.multiply((-311.184));
      Complex complex11 = Complex.ZERO;
      complex1.pow((-2441.7369228526786));
      complex7.tan();
      Complex complex12 = complex10.acos();
      Complex complex13 = Complex.NaN;
      complex4.log();
      complex2.sqrt1z();
      complex12.sqrt();
      complex7.multiply(1);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 827.217477;
      Complex complex1 = Complex.valueOf(827.217477, 0.0);
      Complex complex2 = Complex.ONE;
      complex2.asin();
      complex1.ZERO.toString();
      Complex complex3 = Complex.valueOf((-1211.9590595366), 0.0);
      Complex.valueOf(827.217477);
      // Undeclared exception!
      complex3.ONE.nthRoot(6446);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.multiply(0.23957195317984703);
      complex2.abs();
      Complex complex3 = Complex.NaN;
      complex3.negate();
      complex0.toString();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.valueOf(937.3912507259952, 484.25036119603);
      complex6.exp();
      complex2.readResolve();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex5.cosh();
      complex2.abs();
      Complex complex9 = Complex.ZERO;
      complex2.asin();
      complex2.multiply(Double.NaN);
      Complex complex10 = Complex.ZERO;
      complex10.INF.acos();
      Complex complex11 = complex6.pow(Double.NaN);
      complex11.tan();
      complex9.acos();
      complex1.log();
      complex8.sqrt1z();
      complex7.sqrt();
      Complex complex12 = complex11.multiply(1);
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.multiply((-3078.133));
      complex1.abs();
      Complex complex3 = Complex.valueOf((-896.308434));
      Complex complex4 = complex3.negate();
      complex0.toString();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex2.sin();
      Complex complex7 = Complex.valueOf(2.8407720200442806E99, 1.8011719796199461);
      Complex complex8 = complex1.exp();
      complex1.readResolve();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex8.cosh();
      complex9.abs();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex6.asin();
      complex7.multiply((-1751.19262848772));
      Complex complex13 = Complex.ZERO;
      complex9.pow(2.459332651786466);
      complex10.tan();
      complex4.acos();
      Complex complex14 = Complex.NaN;
      complex14.log();
      complex12.sqrt1z();
      complex2.sqrt();
      complex5.multiply(1);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.multiply((-3078.133));
      complex2.abs();
      Complex complex3 = complex0.negate();
      complex3.toString();
      Complex complex4 = complex1.asin();
      complex2.sin();
      Complex.valueOf(877.65900687, (-3078.133));
      complex2.exp();
      Complex complex5 = complex2.cosh();
      complex4.abs();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.asin();
      Complex complex9 = Complex.valueOf((-3078.133));
      complex9.ZERO.sqrt1z();
      complex8.multiply(5544.246909143483);
      Complex complex10 = Complex.ZERO;
      complex10.pow((-3078.133));
      complex3.tan();
      Complex complex11 = Complex.I;
      complex11.multiply(1.5898257595955996);
      complex1.acos();
      Complex complex12 = Complex.INF;
      complex12.sqrt1z();
      complex1.sqrt();
      complex5.multiply((-2374));
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(517.7529327253, 517.7529327253);
      complex1.nthRoot(1234);
      complex1.pow((-6.038239639506472E-32));
      complex1.tan();
      Complex complex2 = complex0.multiply(517.7529327253);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.log();
      complex4.ONE.negate();
      Complex complex5 = Complex.ZERO;
      complex5.sqrt1z();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = Complex.I;
      complex7.multiply(1);
      complex3.reciprocal();
      complex2.cos();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      complex0.INF.nthRoot(1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add(complex0);
      Complex.valueOf((double) 1, 827.217477);
      complex2.pow(complex3);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex6.asin();
      complex7.multiply(complex1);
      Complex.valueOf(827.217477, 827.217477);
      complex6.multiply((double) 1);
      complex5.equals("+9r!uQ{srGaR#T8o");
      Complex complex8 = Complex.NaN;
      complex8.negate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(1.583242159278334);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-1299.3678896055137));
      Complex complex1 = complex0.multiply(1);
      complex1.getReal();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.createComplex((-1299.3678896055137), 0.0);
      Complex complex4 = complex1.asin();
      complex1.add(complex4);
      Complex.valueOf((double) 1, (-524.6669929));
      Complex complex5 = complex4.add((-3248.0));
      Complex complex6 = complex1.tanh();
      complex3.cos();
      complex4.sqrt1z();
      complex2.divide(complex5);
      Complex complex7 = Complex.valueOf((-2534.48238001), (-2943.2));
      complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1299.3678896055137));
      Complex complex1 = complex0.multiply(1);
      complex1.getReal();
      Complex complex2 = new Complex(1);
      Complex complex3 = complex0.createComplex((-1299.3678896055137), 0.0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = Complex.valueOf(621.9535520478, 621.9535520478);
      Complex complex7 = complex6.cosh();
      complex7.cos();
      Complex complex8 = Complex.ONE;
      complex8.sqrt1z();
      complex3.divide(complex1);
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 1;
      complex0.ONE.getField();
      complex0.INF.nthRoot(1);
      Complex complex1 = Complex.INF;
      complex0.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.conjugate();
      complex0.toString();
      double double0 = 1.1220467571570283E-7;
      double double1 = 23.213871396;
      Complex.valueOf(1.1220467571570283E-7, 23.213871396);
      complex1.pow(complex3);
      Complex complex4 = new Complex(1299.3678896055137);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.sqrt1z();
      complex5.multiply(complex6);
      complex2.asin();
//      try { 
        complex2.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1299.3678896055137));
      Complex complex1 = complex0.negate();
      complex0.toString();
      complex0.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf(877.65900687, (-1299.3678896055137));
      Complex complex5 = complex2.exp();
      complex3.readResolve();
      Complex complex6 = complex4.tan();
      complex1.cosh();
      Complex complex7 = Complex.INF;
      complex7.abs();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.asin();
      complex6.multiply(984.2094267);
      Complex complex10 = Complex.ZERO;
      complex9.pow(2219.73147);
      complex2.acos();
      Complex complex11 = complex8.log();
      complex9.sqrt1z();
      complex11.sqrt();
      complex7.multiply(1232);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1299.3678896055137));
      Complex complex1 = Complex.INF;
      complex1.getReal();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex1.asin();
      complex1.add(complex4);
      Complex.valueOf(621.9535520478, 621.9535520478);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.tanh();
      complex6.exp();
      complex6.cos();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex2.divide(complex6);
      complex8.pow(complex5);
      complex3.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.multiply(1);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.cosh();
      complex2.INF.exp();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      complex3.ONE.hashCode();
      complex1.I.tan();
      Complex complex4 = complex0.conjugate();
      complex4.toString();
      Complex complex5 = Complex.valueOf(270.871673, (double) 1);
      complex4.add(0.0);
      Complex complex6 = complex2.tanh();
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.ONE;
      complex6.divide(complex8);
      complex8.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.getField();
//      try { 
        complex1.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(1);
      complex1.pow((-1.5335923091350053E243));
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex0.ZERO.subtract(complex2);
      complex5.ONE.hashCode();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.exp();
      Complex complex8 = new Complex(1, 1);
      complex8.readResolve();
      Complex complex9 = complex4.tan();
      complex4.INF.subtract(0.0);
      Complex complex10 = complex3.cosh();
      complex6.abs();
      Complex complex11 = Complex.ZERO;
      complex9.asin();
      complex7.multiply(2.459332651786466);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex3.pow((-1033.732617129598));
      complex4.tan();
      complex4.acos();
      Complex complex14 = complex2.log();
      complex10.sqrt1z();
      complex13.sqrt();
      complex14.multiply(1);
      complex3.reciprocal();
      Complex complex15 = new Complex(1, (-20.0));
      complex10.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.multiply((-3078.133));
      complex2.abs();
      Complex complex3 = complex0.negate();
      complex3.toString();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.sin();
      Complex complex6 = Complex.valueOf(877.65900687, 1666.7106849283998);
      Complex complex7 = complex3.tan();
      Complex complex8 = complex2.conjugate();
      complex2.toString();
      Complex complex9 = Complex.valueOf(1666.7106849283998, (-710.71993045));
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.pow(complex5);
      Complex complex12 = complex6.cos();
      complex12.sqrt1z();
      complex9.multiply(complex0);
      complex4.asin();
      Complex complex13 = Complex.valueOf(124.6, 1666.7106849283998);
      Complex complex14 = complex11.multiply(complex13);
      Complex.valueOf(1260.042, 1666.7106849283998);
      Complex complex15 = new Complex(8959.5, 1666.7106849283998);
      complex15.multiply((-710.71993045));
      complex7.equals(complex14);
      complex8.negate();
      Complex.valueOf((-1.6018096228521869E7));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.multiply((-3078.133));
      complex2.abs();
      Complex complex3 = complex0.negate();
      complex3.toString();
      Complex complex4 = complex1.asin();
      complex2.sin();
      Complex complex5 = Complex.valueOf((-2083.82424584755));
      Complex complex6 = new Complex(5544.246909143483, 5544.246909143483);
      complex6.tanh();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex4.sqrt1z();
      complex4.divide(complex7);
      complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      complex0.nthRoot(1577695624);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.multiply(complex0);
      complex0.add(complex3);
      Complex complex4 = Complex.valueOf(0.0, 827.217477);
      Complex.valueOf((-1.0));
      Complex complex5 = complex4.add(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.cos();
      complex2.divide(complex0);
      complex5.pow(complex4);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1.0228640168035614));
      Complex complex2 = Complex.valueOf(334.5945904);
      Complex complex3 = complex1.tanh();
      complex2.cos();
      Complex.valueOf(423.55931, 334.5945904);
      Complex complex4 = complex0.multiply(0.0);
      complex3.equals(complex4);
      complex2.negate();
      Complex.valueOf(2342.441845);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      complex0.INF.nthRoot(1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(1016.9421578351509, 692.914);
      Complex complex4 = Complex.ZERO;
      complex4.add(3322.00093456049);
      Complex complex5 = complex3.tanh();
      complex2.cosh();
      complex5.cos();
      complex5.sqrt1z();
      complex3.divide(complex4);
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      complex0.INF.nthRoot(1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex2.add(complex0);
      Complex complex3 = Complex.valueOf(827.217477, 0.0);
      Complex complex4 = complex1.add(827.217477);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.cos();
      complex6.ONE.divide(complex2);
      complex4.pow(complex2);
      Complex complex7 = Complex.INF;
      complex2.divide(complex7);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.sqrt();
      complex3.hashCode();
      Complex complex4 = complex2.atan();
      complex4.toString();
      Complex.valueOf((-2287.43));
      Complex complex5 = Complex.valueOf(0.0, 2536.8959397902895);
      complex5.divide((-2287.43));
      Complex complex6 = complex1.reciprocal();
      complex3.equals(complex6);
      complex3.exp();
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-42.621000913407016));
      Complex complex1 = Complex.valueOf(1928.1834, (-42.621000913407016));
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.NaN.multiply(1);
      complex0.atan();
      complex3.ONE.getArgument();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.I.multiply((-884));
      complex3.nthRoot(57);
      Complex complex6 = complex1.NaN.multiply(147);
      complex1.toString();
      complex3.NaN.divide((double) (-884));
      complex3.multiply(3536);
      Complex complex7 = complex0.divide(3.3730714236579374E186);
      complex7.INF.sinh();
      complex4.getImaginary();
      complex1.add(complex5);
      complex6.acos();
      Complex complex8 = complex2.multiply((-884));
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-42.621000913407016), (-42.621000913407016));
      complex0.abs();
      Complex complex1 = complex0.multiply(882.5);
      complex0.tan();
      complex1.atan();
      complex0.subtract(complex1);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex1.ONE.tan();
      Complex complex4 = complex3.ZERO.sqrt();
      complex0.hashCode();
      complex0.atan();
      Complex complex5 = Complex.valueOf(0.0, (-2938.506));
      complex4.add(0.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.cos();
      Complex complex8 = complex5.divide(complex7);
      complex8.ONE.add(complex3);
      Complex complex9 = new Complex(2572.1983439193, (-584.01708));
      complex9.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      complex0.INF.nthRoot(1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add(complex0);
      complex2.toString();
      complex2.cos();
      complex3.abs();
      complex0.isInfinite();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.sqrt();
      complex0.hashCode();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex4.tanh();
      complex7.NaN.cosh();
      complex1.cos();
      complex5.sqrt1z();
      complex5.divide(complex7);
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = new Complex(Double.NaN);
      complex1.tanh();
      Complex complex2 = complex0.acos();
      complex0.createComplex(Double.NaN, Double.NaN);
      complex1.reciprocal();
      complex2.multiply(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.valueOf(6.283185307179586);
      complex3.add(complex4);
      Complex complex5 = Complex.valueOf((-5211.2383398964));
      Complex complex6 = complex2.divide(0.0);
      complex5.reciprocal();
      Complex complex7 = Complex.I;
      complex2.equals(complex7);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      complex0.nthRoot(1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(complex0);
      complex0.add(complex1);
      Complex complex3 = Complex.valueOf((double) 1, (double) 1);
      Complex complex4 = complex3.add((double) 1);
      complex2.tanh();
      complex3.cos();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex4.divide(complex5);
      complex6.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = complex0.ZERO.tanh();
      complex1.INF.acos();
      complex1.NaN.createComplex((-5211.2383398964), 6.283185307179586);
      Complex complex2 = complex1.reciprocal();
      complex2.ONE.subtract(Double.NaN);
      complex2.I.multiply(complex1);
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex0.add(complex4);
      Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.divide(Double.NaN);
      complex6.INF.reciprocal();
      complex0.equals("(Infinity, Infinity)");
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      complex1.getField();
      complex0.toString();
      Complex complex2 = Complex.valueOf((-1565.36), 9.15109220707761E72);
      complex2.INF.abs();
      Complex complex3 = Complex.valueOf(492.8493017367731);
      complex0.toString();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.pow(complex1);
      complex3.sqrt();
      Complex complex6 = complex0.pow(9.15109220707761E72);
      complex5.getReal();
      Complex complex7 = complex1.tanh();
      complex5.subtract(complex7);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1135.63), (-1135.63));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.atan();
      Complex.valueOf((-1135.63), (-1135.63));
      complex4.hashCode();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex5.NaN.multiply(4174.793062);
      complex6.I.abs();
      complex4.NaN.negate();
      complex0.toString();
      Complex complex7 = complex4.asin();
      complex7.ONE.sin();
      Complex.valueOf(492.8493017367731, 1667.66);
      Complex complex8 = complex1.exp();
      complex8.ZERO.readResolve();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.INF.cosh();
      complex10.NaN.abs();
      complex2.INF.tanh();
      Complex complex11 = complex1.asin();
      complex4.multiply(242.5774);
      Complex complex12 = complex2.ZERO.pow(1154.7968676954);
      complex11.tan();
      complex2.multiply(177.672134);
      complex9.ONE.sinh();
      Complex complex13 = Complex.I;
      complex13.divide(Double.NaN);
      complex12.reciprocal();
      complex11.isNaN();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.multiply((-3078.133));
      complex2.abs();
      Complex complex3 = complex0.negate();
      complex3.toString();
      Complex complex4 = complex1.asin();
      complex2.sin();
      Complex.valueOf(877.65900687, 1667.66);
      Complex complex5 = complex2.exp();
      complex4.readResolve();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.cosh();
      complex0.abs();
      Complex complex8 = Complex.ZERO;
      complex8.asin();
      Complex complex9 = complex0.multiply(1363.5197120951);
      Complex complex10 = Complex.ZERO;
      complex10.pow((-446.92936897122286));
      Complex complex11 = complex7.tan();
      Complex complex12 = complex5.multiply(167.572200947297);
      complex12.acos();
      complex11.log();
      Complex complex13 = complex11.sqrt1z();
      complex13.sqrt();
      complex9.multiply(1);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1135.63), (-1135.63));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.I.exp();
      Complex complex3 = complex0.atan();
      complex1.ZERO.readResolve();
      complex3.hashCode();
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex4.NaN.multiply(4174.793062);
      complex5.I.abs();
      complex3.NaN.negate();
      complex0.toString();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.ONE.sin();
      complex7.I.pow(4174.793062);
      Complex complex8 = Complex.valueOf(492.8493017367731, 1667.66);
      Complex complex9 = complex1.exp();
      complex9.ZERO.readResolve();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex10.INF.cosh();
      complex11.NaN.abs();
      Complex complex12 = complex1.asin();
      complex3.multiply(242.5774);
      complex2.ZERO.pow(1154.7968676954);
      complex12.tan();
      complex2.multiply(177.672134);
      Complex complex13 = complex2.acos();
      complex13.I.log();
      complex8.reciprocal();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1299.3678896055137));
      Complex complex1 = complex0.multiply(1);
      complex1.getReal();
      complex0.NaN.tanh();
      Complex complex2 = complex0.createComplex((-1299.3678896055137), 0.0);
      complex1.asin();
      complex2.readResolve();
      Complex complex3 = complex2.pow(938.382);
      complex2.toString();
      Complex complex4 = Complex.valueOf((-1299.3678896055137), 1.0);
      complex1.NaN.nthRoot(1199);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.cos();
      complex6.isNaN();
      Complex complex8 = complex7.INF.pow(938.382);
      Complex complex9 = complex2.sinh();
      complex9.conjugate();
      Complex complex10 = Complex.valueOf(1.3485799924445315E-77);
      complex1.ZERO.toString();
      Complex complex11 = complex6.pow(complex5);
      Complex complex12 = complex7.sqrt();
      complex12.NaN.pow((-230.75));
      complex3.getReal();
      complex1.tanh();
      complex3.subtract(complex11);
      complex8.log();
      complex10.multiply(Double.POSITIVE_INFINITY);
      complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      complex1.getField();
      complex0.toString();
      Complex complex2 = Complex.valueOf((-1565.36), 9.15109220707761E72);
      complex2.INF.abs();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.subtract(complex2);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      complex1.getField();
      complex0.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.cosh();
      complex3.subtract((-1565.36));
      Complex complex4 = complex2.sinh();
      complex4.hashCode();
      complex4.divide((-1565.36));
      complex1.getArgument();
      Complex complex5 = complex1.multiply(151);
      complex5.reciprocal();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1158.1019184410657), 564.6);
      Complex complex1 = complex0.sqrt();
      complex1.I.nthRoot(1);
      Complex complex2 = Complex.valueOf(554.9989, (-1446.8663467371084));
      complex2.abs();
      Complex.valueOf((-1446.8663467371084));
      complex0.multiply((-269.74403356));
      complex1.sin();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.sqrt();
      complex0.hashCode();
      Complex complex5 = complex0.subtract(0.0);
      complex0.atan();
      complex0.NaN.subtract(0.0);
      complex5.cos();
      complex5.abs();
      complex0.isInfinite();
      complex1.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1135.63), (-1135.63));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.I.exp();
      complex0.atan();
      Complex complex4 = (Complex)complex1.ZERO.readResolve();
      Complex complex5 = Complex.I;
      complex5.sqrt1z();
      Complex complex6 = new Complex(4005.06615881);
      complex6.sqrt1z();
      Complex complex7 = complex1.sqrt();
      complex4.hashCode();
      complex1.I.hashCode();
      Complex complex8 = complex3.subtract(16.0);
      Complex complex9 = Complex.NaN;
      complex9.atan();
      complex7.toString();
      complex8.cos();
      complex2.abs();
      complex9.isInfinite();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(4905.72339, 890.0376819355245);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(4905.72339);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.INF.multiply(17);
      Complex complex5 = complex1.add(Double.NaN);
      Complex complex6 = complex5.ONE.multiply(complex3);
      Complex complex7 = complex6.NaN.negate();
      complex7.ONE.sin();
      Complex complex8 = complex5.I.tanh();
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex3.NaN.log();
      complex11.ONE.add(complex5);
      Complex complex12 = complex5.subtract(complex1);
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex13 = complex12.INF.pow(890.0376819355245);
      Complex complex14 = Complex.valueOf(4964.84214);
      Complex complex15 = complex2.tan();
      Object object0 = complex14.readResolve();
      complex1.equals(object0);
      complex15.getArgument();
      Complex.valueOf(1336.63192131);
      complex4.createComplex(0.0, 4905.72339);
      Complex complex16 = complex13.sin();
      complex2.conjugate();
      complex16.cosh();
      complex10.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      complex1.I.pow((-671.2239212845565));
      complex1.add(complex0);
      complex0.ONE.toString();
      complex0.ONE.getArgument();
      Complex complex2 = complex0.I.reciprocal();
      complex0.INF.getArgument();
      complex0.abs();
      complex2.ZERO.sin();
      Complex complex3 = complex0.sin();
      complex3.add((-2972.780249078504));
      complex3.I.negate();
      complex3.I.negate();
      complex3.divide(complex0);
      Complex complex4 = Complex.valueOf((-241.8992598));
      complex4.ONE.exp();
      complex4.ZERO.createComplex(1.0297303199768066, 2287.36291375);
      Complex complex5 = Complex.ONE;
      complex4.ZERO.divide(complex5);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.INF.getField();
      complex0.subtract(complex1);
      Complex complex2 = complex0.conjugate();
      complex1.nthRoot(1234);
      Complex complex3 = complex2.subtract((double) 1234);
      complex0.getField();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1279.621351296), 1809.2545793324828);
      complex0.INF.divide(6.942757623821567E-208);
      Complex complex1 = complex0.NaN.pow((-1279.621351296));
      complex1.getArgument();
      Complex complex2 = complex0.NaN.pow((-1807.067145672001));
      complex0.getArgument();
      Complex complex3 = complex1.INF.multiply(complex2);
      complex1.NaN.conjugate();
      Complex complex4 = complex3.multiply(Double.NaN);
      complex4.I.nthRoot(17);
      complex3.multiply(Double.NaN);
      complex4.I.tanh();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex1.negate();
      complex5.NaN.atan();
      Complex complex6 = complex3.asin();
      complex0.equals(complexField0);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = complex0.ZERO.tanh();
      complex1.INF.acos();
      complex1.NaN.createComplex((-5211.2383398964), 6.283185307179586);
      Complex complex2 = complex1.reciprocal();
      complex2.I.multiply(complex1);
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex0.add(complex4);
      Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.divide(0.0);
      complex6.INF.reciprocal();
      complex0.equals("(Infinity, Infinity)");
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.I.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 1175.8325904566118;
      Complex complex0 = new Complex(1175.8325904566118, Double.POSITIVE_INFINITY);
      complex0.exp();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex1.abs();
      Complex complex3 = complex2.INF.reciprocal();
      int int0 = (-1813);
//      try { 
        complex3.NaN.nthRoot((-1813));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,813
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.asin();
      complex4.ZERO.tanh();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.exp();
      complex7.INF.exp();
      complex0.isNaN();
      complex7.I.add(0.0);
      Complex complex8 = Complex.valueOf((-396.4943341378), 1.092935562133789);
      complex5.divide(complex8);
      Complex complex9 = complex7.log();
      complex9.abs();
      Complex.valueOf(1.0, 1.0);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      complex0.INF.nthRoot(1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex2.add(complex0);
      Complex.valueOf(827.217477, 0.0);
      Complex complex3 = complex1.add(827.217477);
      complex0.ONE.tanh();
      Complex complex4 = complex2.cos();
      complex2.sqrt1z();
      complex4.ONE.divide(complex2);
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.INF.conjugate();
      int int0 = 0;
      double double0 = 0.0;
      Complex.valueOf(0.0);
      Complex.valueOf((double) 0);
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.I.cos();
      complex1.nthRoot(2751);
      complex0.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex3.ZERO.sqrt1z();
      Complex complex6 = complex1.ONE.exp();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex3.INF.asin();
      complex7.INF.divide((double) (-4221));
      complex3.ONE.abs();
      Complex complex9 = complex3.ONE.multiply((-4221));
      complex1.subtract(complex3);
      complex2.INF.multiply(complex6);
      Complex.valueOf((double) 2751);
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.NaN.multiply(complex2);
      Complex complex12 = complex4.subtract((double) (-4221));
      complex4.readResolve();
      complex5.getReal();
      complex12.subtract(complex1);
      complex1.isInfinite();
      complex12.divide(0.0);
      complex11.getImaginary();
      complex11.cos();
      complex8.exp();
      complex7.sqrt();
      complex1.isNaN();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(810.2751783660159);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.createComplex(810.2751783660159, 810.2751783660159);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.ONE.pow(complex2);
      complex4.ZERO.sin();
      complex1.INF.sinh();
      complex3.INF.sinh();
      Complex complex5 = complex2.ONE.tan();
      complex5.NaN.sinh();
      Complex complex6 = complex5.ONE.multiply(0);
      complex6.sinh();
      complex2.toString();
      Complex complex7 = complex1.divide(complex2);
      complex7.pow((double) 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.ZERO.tanh();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex1.isInfinite();
      Complex complex4 = complex2.I.sin();
      complex4.ZERO.cos();
      complex4.I.getField();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex0.createComplex(1.0, 1.0);
      Complex complex8 = complex3.asin();
      Complex complex9 = complex3.conjugate();
      complex7.getArgument();
      complex2.reciprocal();
      complex3.ONE.exp();
      complex1.getField();
      complex5.INF.sqrt();
      Complex complex10 = complex9.cos();
      complex1.cosh();
      complex8.abs();
      complex7.divide(0.0);
      Complex.valueOf(791.682553127694);
      complex6.cosh();
      Complex complex11 = complex6.cos();
      complex10.cos();
      complex11.subtract(0.0);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.conjugate();
      complex3.I.multiply(0.0);
      complex2.I.divide(0.0);
      Complex complex4 = complex0.tanh();
      complex1.I.getField();
      Complex complex5 = complex4.INF.conjugate();
      complex5.ZERO.toString();
      complex1.isNaN();
      complex5.getReal();
      complex5.nthRoot(1);
      complex5.multiply(0.0);
      Complex complex6 = complex1.sqrt1z();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.ZERO.sqrt();
      complex0.hashCode();
      Complex complex4 = complex0.subtract(0.0);
      complex0.atan();
      complex4.toString();
      complex4.cos();
      complex4.abs();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(1371.550041);
      complex0.ZERO.cosh();
      Complex complex1 = complex0.ZERO.pow(1.1521174907684326);
      Complex complex2 = complex1.INF.reciprocal();
      complex1.INF.abs();
      Complex complex3 = complex1.NaN.asin();
      complex3.NaN.sqrt();
      complex3.ONE.subtract(complex1);
      Complex complex4 = Complex.valueOf(1371.550041, (-1.0));
      Complex complex5 = complex0.add(complex4);
      complex5.nthRoot(4386);
      Complex complex6 = complex0.multiply(4386);
      complex6.I.readResolve();
      Complex complex7 = complex5.divide((-1.0));
      complex7.INF.add((-1190.634));
      Complex complex8 = complex0.exp();
      complex0.isNaN();
      complex8.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5134.0934409349);
      Complex complex1 = new Complex(0.0);
      complex1.INF.hashCode();
      complex1.hashCode();
      complex0.getField();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.sin();
      complex3.I.createComplex((-3982.3029), 2676.6);
      Complex complex4 = complex2.INF.asin();
      complex4.NaN.divide(5134.0934409349);
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = Complex.valueOf(5134.0934409349);
      complex4.INF.readResolve();
      complex6.ONE.exp();
      complex0.isNaN();
      complex0.getArgument();
      complex0.readResolve();
      Complex complex7 = complex4.sqrt();
      complex4.I.getArgument();
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex7.INF.atan();
      complex8.I.add(complex5);
      complex3.readResolve();
      complex2.log();
      complex8.getField();
      complex7.getArgument();
      complex5.cos();
      complex5.getImaginary();
      Complex complex10 = complex7.pow(0.0);
      complex4.subtract(complex0);
      complex4.subtract(complex2);
      complex1.acos();
      complex9.readResolve();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.atan();
      complex1.NaN.tan();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1299.3678896055137));
      Complex complex1 = complex0.multiply(1);
      complex1.getReal();
      complex0.NaN.tanh();
      Complex complex2 = complex0.createComplex((-1299.3678896055137), 0.0);
      complex1.asin();
      complex2.readResolve();
      Complex complex3 = complex2.pow(938.382018176);
      complex2.toString();
      Complex complex4 = Complex.valueOf((-1299.3678896055137), 1.0);
      complex1.NaN.nthRoot(1199);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.cos();
      complex6.isNaN();
      Complex complex8 = complex7.INF.pow(938.382018176);
      complex2.sinh();
      Complex.valueOf(1.3485799924445315E-77);
      complex1.ZERO.toString();
      Complex complex9 = complex6.pow(complex5);
      Complex complex10 = complex7.sqrt();
      complex10.NaN.pow((-230.75));
      complex3.getReal();
      complex1.tanh();
      complex3.subtract(complex9);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-379.6832450297));
      complex0.abs();
      complex0.reciprocal();
      complex1.tanh();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.ONE.toString();
      Complex complex2 = Complex.valueOf(20.0);
      complex1.ZERO.multiply(105.6749661324);
      Complex complex3 = complex1.ONE.multiply(105.6749661324);
      Complex complex4 = complex2.sin();
      complex0.equals(complex1);
      complex4.toString();
      Complex complex5 = Complex.valueOf(20.0);
      complex2.getArgument();
      complex4.nthRoot(1356);
      Complex complex6 = complex2.conjugate();
      complex6.ZERO.readResolve();
      Complex complex7 = complex0.sin();
      complex6.ONE.add((double) 1356);
      Complex complex8 = complex7.ZERO.multiply(105.6749661324);
      complex5.reciprocal();
      complex3.conjugate();
      Complex complex9 = complex6.reciprocal();
      complex8.add(complex9);
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      complex1.createComplex((-907.8), 0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1135.63), (-1135.63));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.atan();
      complex1.ZERO.readResolve();
      complex4.hashCode();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex5.NaN.multiply(4174.793062);
      complex6.I.abs();
      complex4.NaN.negate();
      complex0.toString();
      Complex complex7 = complex4.asin();
      complex7.ONE.sin();
      Complex.valueOf(492.8493017367731, 1667.66);
      Complex complex8 = complex1.exp();
      complex8.ZERO.readResolve();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.INF.cosh();
      complex10.NaN.abs();
      Complex complex11 = complex1.asin();
      complex4.multiply(242.5774);
      Complex complex12 = complex2.ZERO.pow(1154.7968676954);
      complex11.tan();
      Complex complex13 = complex2.multiply(177.672134);
      Complex complex14 = complex2.acos();
      complex14.I.log();
      complex12.sqrt1z();
      complex3.sqrt();
      complex13.multiply(1);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(830.0, 830.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.createComplex(830.0, 830.0);
      complex3.INF.divide(complex2);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-123.73));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.tan();
      complex2.getArgument();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex1.NaN.log();
      complex5.NaN.readResolve();
      Complex complex6 = complex1.divide((-123.73));
      complex6.ONE.asin();
      Complex complex7 = complex0.conjugate();
      complex7.NaN.subtract(complex6);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex1.exp();
      complex1.getField();
      complex9.I.log();
      complex2.multiply(2060.0);
      Complex complex10 = complex9.conjugate();
      complex10.ZERO.divide(complex8);
      complex1.isNaN();
      complex2.multiply(1359.74);
      complex3.readResolve();
      complex4.acos();
      Complex complex11 = new Complex(1359.74, 3.141592653589793);
      complex11.I.divide(complex0);
      complex0.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-1158.1019184410657), 564.6);
      Complex complex1 = complex0.sqrt();
      complex1.I.nthRoot(1);
      complex1.I.tan();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.I.subtract(3512.662);
      complex3.INF.sinh();
      complex0.INF.hashCode();
      complex0.divide((-1158.1019184410657));
      complex3.getArgument();
      Complex complex4 = complex0.multiply(1);
      complex4.reciprocal();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1.986264756071962E44, 0.44566190242767334);
      Complex complex1 = Complex.valueOf(0.44566190242767334);
      complex1.NaN.hashCode();
      Complex complex2 = complex0.divide(complex1);
      complex0.asin();
      Complex complex3 = complex0.acos();
      complex2.reciprocal();
      complex3.divide(991.17415);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      complex0.INF.readResolve();
      complex0.INF.toString();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.INF.acos();
      complex4.I.add(complex3);
      complex0.getReal();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.valueOf(2052.67244870023, 1624.372784);
      Complex complex7 = complex5.multiply(complex6);
      complex7.INF.sinh();
      complex5.getArgument();
      complex5.readResolve();
      complex5.nthRoot(331);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.ZERO.createComplex(0.0, (-3683.30814921));
      complex1.NaN.sinh();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex1.ZERO.divide((-1654.675998628193));
      complex3.add((-3683.30814921));
      Complex complex4 = complex0.multiply(0);
      complex4.abs();
      complex1.ONE.getField();
      complex4.INF.toString();
      complex2.isInfinite();
      Complex complex5 = complex0.asin();
      complex1.multiply(complex5);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2433348713144506E-8, 2.2433348713144506E-8);
      Complex complex1 = complex0.conjugate();
      complex1.negate();
      complex1.NaN.negate();
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = Complex.valueOf(0.0);
      complex0.ZERO.multiply(complex3);
      complex3.ZERO.toString();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.NaN.multiply(complex2);
      Complex complex6 = complex3.cos();
      Complex complex7 = complex5.cos();
      complex5.abs();
      Complex complex8 = new Complex(1911.9, 0.0);
      Complex complex9 = complex6.subtract(complex8);
      Complex complex10 = complex9.multiply(17);
      Complex complex11 = complex0.atan();
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex12.INF.add(complex4);
      complex7.abs();
      Complex.valueOf(0.0, (double) 17);
      complex6.divide(complex11);
      Object object0 = new Object();
      complex13.equals(object0);
      Complex.valueOf((-1190.71544626023), Double.NaN);
      complex12.NaN.sin();
      complex10.getArgument();
      Complex complex14 = complex0.exp();
      complex14.getArgument();
      complex12.isNaN();
      Complex.valueOf((double) 17, 0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-906.1548972296), (-906.1548972296));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.NaN.conjugate();
      complex1.I.multiply(complex2);
      complex4.INF.hashCode();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.ZERO.createComplex(1.716531820904728E50, 0.0);
      Complex complex8 = complex6.INF.conjugate();
      Complex complex9 = complex0.conjugate();
      Object object0 = new Object();
      Complex complex10 = complex7.ZERO.acos();
      complex10.ZERO.add(complex9);
      complex10.NaN.add(complex8);
      complex7.ONE.acos();
      complex6.equals(object0);
      complex7.getArgument();
      complex5.multiply(1.716531820904728E50);
      complex8.acos();
      Complex complex11 = complex3.acos();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex0.ZERO.subtract(complex2);
      complex6.ONE.hashCode();
      Complex complex7 = complex2.I.tan();
      Complex complex8 = complex0.conjugate();
      complex8.toString();
      Complex complex9 = Complex.valueOf(0.0, (-469.9637992));
      complex9.ZERO.pow(complex0);
      Complex complex10 = complex9.ONE.cos();
      complex10.INF.sqrt1z();
      Complex complex11 = complex2.multiply(complex9);
      Complex complex12 = complex8.asin();
      complex7.ZERO.multiply(complex12);
      Complex complex13 = Complex.valueOf((-469.9637992), 0.0);
      complex1.ONE.multiply((-469.9637992));
      complex6.equals(complex3);
      Complex complex14 = complex8.negate();
      Complex complex15 = complex14.asin();
      complex11.reciprocal();
      Complex complex16 = complex13.cos();
      complex16.INF.pow(0.0);
      Complex complex17 = complex7.multiply((-1041));
      complex1.cos();
      complex17.pow(complex15);
      complex11.add((double) 1);
      complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = Complex.NaN;
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = Complex.valueOf(511.91301239, 1.1815196363705356E-8);
      assertEquals(1.1815196363705356E-8, complex2.getImaginary(), 0.01);
      assertEquals(511.91301239, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      
      Complex complex3 = complex2.I.sin();
      assertEquals(1.1815196363705356E-8, complex2.getImaginary(), 0.01);
      assertEquals(511.91301239, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.1752011936438014, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      
      Complex complex4 = complex0.ONE.add(complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertNotNull(complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      
      Complex complex5 = complex4.createComplex(511.91301239, 2.0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(2.0, complex5.getImaginary(), 0.01);
      assertEquals(511.91301239, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertNotNull(complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      
      Complex complex6 = complex5.INF.pow(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(2.0, complex5.getImaginary(), 0.01);
      assertEquals(511.91301239, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertNotNull(complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      
      Complex complex7 = complex0.INF.reciprocal();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertNotNull(complex7);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      
      Complex complex8 = complex7.ONE.tanh();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertNotNull(complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      
      Complex complex9 = complex0.asin();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.8813735870195428, complex9.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertNotNull(complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      
      Complex complex10 = complex2.negate();
      assertEquals(1.1815196363705356E-8, complex2.getImaginary(), 0.01);
      assertEquals(511.91301239, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertFalse(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals((-511.91301239), complex10.getReal(), 0.01);
      assertEquals((-1.1815196363705356E-8), complex10.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertNotNull(complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      
      Complex complex11 = complex10.ONE.multiply(complex5);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(1.1815196363705356E-8, complex2.getImaginary(), 0.01);
      assertEquals(511.91301239, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(2.0, complex5.getImaginary(), 0.01);
      assertEquals(511.91301239, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals((-511.91301239), complex10.getReal(), 0.01);
      assertEquals((-1.1815196363705356E-8), complex10.getImaginary(), 0.01);
      assertEquals(511.91301239, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(2.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex1));
      assertNotNull(complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex1);
      
      Complex complex12 = complex10.I.conjugate();
      assertEquals(1.1815196363705356E-8, complex2.getImaginary(), 0.01);
      assertEquals(511.91301239, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertFalse(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals((-511.91301239), complex10.getReal(), 0.01);
      assertEquals((-1.1815196363705356E-8), complex10.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals((-1.0), complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertNotNull(complex12);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex11);
      
      Complex complex13 = complex3.createComplex(511.91301239, 1.1815196363705356E-8);
      assertEquals(1.1815196363705356E-8, complex2.getImaginary(), 0.01);
      assertEquals(511.91301239, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.1752011936438014, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(511.91301239, complex13.getReal(), 0.01);
      assertEquals(1.1815196363705356E-8, complex13.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex12));
      assertTrue(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex9));
      assertNotNull(complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex13);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex5);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex9);
      
      Complex complex14 = complex6.exp();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(2.0, complex5.getImaginary(), 0.01);
      assertEquals(511.91301239, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex9));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex11));
      assertTrue(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex3));
      assertNotNull(complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertSame(complex1, complex14);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertSame(complex4, complex14);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex8);
      assertSame(complex14, complex1);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex12);
      assertSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex0);
      
      ComplexField complexField0 = complex14.getField();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(2.0, complex5.getImaginary(), 0.01);
      assertEquals(511.91301239, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex14));
      assertTrue(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex9));
      assertTrue(complex6.equals((Object)complex14));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex11));
      assertTrue(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex3));
      assertNotNull(complexField0);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertSame(complex1, complex14);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertSame(complex4, complex14);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex8);
      assertSame(complex14, complex1);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex12);
      assertSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex0);
      
      complex9.hashCode();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.8813735870195428, complex9.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex11));
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex11);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.multiply((-3018.3227074));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex0.reciprocal();
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      
      Complex complex3 = complex1.ZERO.exp();
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      
      ComplexField complexField0 = complex0.getField();
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertNotNull(complexField0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      
      Complex complex4 = complex1.cos();
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex2));
      assertNotNull(complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      double double0 = complex0.abs();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, double0, 0.01);
      
      Complex complex1 = complex0.multiply(882.5036692522821);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex1.atan();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      Complex complex3 = complex0.subtract(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      
      Complex complex4 = complex2.exp();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex4.isInfinite());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.ZERO.readResolve();
      complex2.NaN.toString();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ZERO.conjugate();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      complex0.getArgument();
      complex2.isInfinite();
      complex2.getReal();
      Complex complex6 = complex1.exp();
      complex6.NaN.divide(0.0);
      complex6.hashCode();
      complex3.sqrt();
      Complex complex7 = complex2.createComplex(2604.7329951461024, Double.NaN);
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex2.subtract(complex8);
      complex9.multiply(complex8);
      String string0 = complex9.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex10 = complex7.INF.sin();
      Complex complex11 = complex10.ONE.sqrt1z();
      complex3.negate();
      complex7.ZERO.getArgument();
      Complex complex12 = new Complex(2942.37, (-818.7189654078234));
      Complex complex13 = complex7.divide(complex12);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex14.reciprocal();
      assertTrue(complex14.equals((Object)complex11));
      assertFalse(complex14.isInfinite());
      
      boolean boolean0 = complex10.isInfinite();
      assertSame(complex1, complex13);
      assertSame(complex2, complex9);
      assertSame(complex2, complex15);
      assertFalse(boolean0);
  }
}
