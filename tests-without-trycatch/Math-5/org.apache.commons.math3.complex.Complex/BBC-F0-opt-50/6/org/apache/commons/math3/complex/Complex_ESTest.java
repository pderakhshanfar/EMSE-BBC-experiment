/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:13:40 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3200.986055304629));
      Complex complex1 = complex0.acos();
      complex1.I.multiply(2487);
      complex1.I.toString();
      Complex complex2 = complex0.acos();
      complex2.nthRoot(3499);
      Complex complex3 = complex0.add(4.521448560089285E190);
      Complex complex4 = complex2.log();
      complex3.sqrt1z();
      Complex complex5 = complex4.multiply(complex2);
      complex5.readResolve();
      complex4.ONE.pow((double) 3499);
      complex5.acos();
      Complex.valueOf((-1.0));
//      try { 
        complex5.nthRoot((-2868));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,868
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(212.64920905, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      Complex complex2 = complex0.sqrt1z();
      complex2.INF.atan();
      complex2.NaN.sinh();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.negate();
      complex0.NaN.log();
      Complex complex1 = Complex.valueOf((-0.9995060924110656), 9.15109220707761E72);
      complex1.asin();
      Complex complex2 = complex0.INF.add(complex1);
      complex2.divide((-1829.579609556));
      Complex complex3 = complex0.pow(1.4926639277002605E-10);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.sin();
      complex3.divide(complex1);
      Complex complex6 = complex2.ZERO.add((-526.248071871));
      complex1.multiply(9.15109220707761E72);
      complex6.INF.sin();
      Complex complex7 = Complex.valueOf((-526.248071871), 1.4926639277002605E-10);
      complex7.pow(complex3);
      Complex complex8 = complex2.sinh();
      complex1.ONE.toString();
      complex8.INF.abs();
      complex2.multiply((-1214.4913674));
      Complex complex9 = complex5.cos();
      complex9.I.negate();
      Complex complex10 = complex3.cosh();
      complex5.divide((-1281.3350385122337));
      complex10.multiply((-526.248071871));
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(7.90594243412116E-12, 2.0);
      Complex complex2 = complex0.add(complex1);
      complex2.divide(2456.88229);
      complex2.multiply(1021);
      Complex complex3 = new Complex((-963.56533746238), 20.0);
      Complex complex4 = complex3.log();
      Complex complex5 = new Complex((-538.76774));
      Complex complex6 = complex5.pow(complex4);
      complex3.abs();
      complex6.conjugate();
      complex3.tan();
      Complex complex7 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-2716.4));
      Complex complex2 = new Complex((-2715.4), Double.POSITIVE_INFINITY);
      complex0.add(complex2);
      complex1.divide((-2.130447095555397E-31));
      Complex complex3 = complex2.multiply(17);
      complex2.log();
      Complex complex4 = new Complex(242.39);
      complex4.pow(complex2);
      complex0.abs();
      complex0.conjugate();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex0.readResolve();
      complex1.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = new Complex((-2716.4), Double.POSITIVE_INFINITY);
      complex0.ZERO.multiply(complex1);
      Complex complex2 = new Complex((-2716.4), (-2.130447095555397E-31));
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex1.divide((-2.130447095555397E-31));
      complex4.I.multiply(1021);
      Complex complex5 = complex3.log();
      Complex complex6 = new Complex(1195.6687695117);
      complex6.ONE.pow(complex0);
      complex0.abs();
      Complex complex7 = complex4.conjugate();
      complex7.tan();
      complex5.createComplex(2007.814477086127, 2788.3793);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = Complex.valueOf((-20.0), 2265.9);
      complex2.log();
      complex1.abs();
      complex2.conjugate();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(9.860939269906055E-8, 9.860939269906055E-8);
      Complex complex1 = Complex.valueOf((-1.0), 660.62688906);
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.pow(661.2115024084161);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.asin();
      complex2.I.toString();
      Complex complex3 = complex1.add((-20.0));
      Complex complex4 = complex3.ONE.pow(376.0124962682347);
      Complex complex5 = complex4.INF.multiply(376.0124962682347);
      Complex complex6 = complex0.NaN.add(complex2);
      complex2.add(complex6);
      complex6.sqrt1z();
      complex5.NaN.sin();
      complex6.NaN.acos();
      Complex complex7 = complex0.reciprocal();
      complex5.I.sqrt();
      complex7.INF.log();
      complex3.multiply((-1755.34));
      complex7.ZERO.cosh();
      complex3.reciprocal();
      Complex complex8 = complex5.subtract(complex4);
      Complex complex9 = complex8.asin();
      complex9.NaN.toString();
      complex2.nthRoot(2013);
      Complex complex10 = complex1.sqrt1z();
      complex10.ZERO.asin();
      complex10.ONE.abs();
      complex7.pow(complex10);
      complex6.divide(complex1);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex.valueOf(240.1223166938511);
      Complex complex2 = complex1.ZERO.atan();
      complex2.I.pow(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.INF.add(240.1223166938511);
      complex3.tan();
      Complex complex6 = complex1.add(2849.461697476);
      complex3.asin();
      complex4.sqrt();
      complex6.toString();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = Complex.valueOf((-1.0), (-1261.910201835));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.multiply(20.0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex4.sinh();
      complex4.add(complex6);
      complex5.getArgument();
      Complex.valueOf(739.6602633702, 2.0);
      complex6.multiply(0);
      Complex.valueOf((-1261.910201835));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = new Complex((-626.57422398479), Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(650.23822469, (-241.0));
      complex2.divide(complex4);
      Complex complex5 = Complex.ZERO;
      complex5.log();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.INF;
      complex7.abs();
      complex2.multiply(Double.NaN);
      Complex.valueOf(5.482208065983983E-194);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex.valueOf(1112.1561326);
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1112.1561326, 1112.1561326);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.pow((-241.0));
      complex2.sqrt1z();
      double double0 = (-20.0);
      Complex complex4 = Complex.valueOf((-20.0), (-20.0));
      Complex complex5 = complex0.atan();
      complex3.abs();
      complex5.tanh();
      complex4.sinh();
//      try { 
        complex3.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-1090.39508), (-1090.39508));
      Complex complex1 = complex0.divide(complex0);
      complex1.sin();
      Complex complex2 = complex1.asin();
      complex2.multiply(1573);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      complex2.nthRoot(3848);
      Complex complex3 = Complex.ZERO;
      complex1.tanh();
      complex1.subtract(Double.NaN);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.pow(1.5430806348152437);
      Complex complex4 = Complex.I;
      complex4.sqrt1z();
      Complex.valueOf((-2291.433), 613.838804737);
      Complex complex5 = complex2.atan();
      complex1.abs();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex4.sinh();
      complex5.add(complex6);
      Complex complex8 = Complex.NaN;
      complex8.getArgument();
      Complex complex9 = Complex.ZERO;
      complex6.readResolve();
      Complex.valueOf((-2291.433), 1.3810978455418157);
      Complex.valueOf(0.0, 0.0);
      complex2.multiply(0);
      Complex complex10 = complex1.negate();
      Complex complex11 = complex3.tan();
      complex7.pow(complex10);
      Complex complex12 = complex6.atan();
      Complex complex13 = complex12.add(2.0);
      complex11.equals(complex0);
      complex2.negate();
      complex13.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.createComplex((-4545.87525), (-6.56250013356227E-149));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.sin();
      complex3.sin();
      complex4.abs();
      complex5.multiply(0.9168228100300472);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-166344.61945400998), (-4160.067093072));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.I.add(complex2);
      complex0.createComplex((-407.8549), (-4160.067093072));
      Complex complex4 = complex0.conjugate();
      complex4.cos();
      complex3.ZERO.acos();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.divide(17.755);
      complex3.NaN.abs();
      complex3.NaN.log();
      complex6.I.createComplex((-2029.370166874098), 17.755);
      complex4.acos();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = Complex.ZERO;
      complex5.subtract(complex8);
      Complex complex9 = complex7.sin();
      complex9.divide(complex5);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.pow(1.5430806348152437);
      Complex complex4 = Complex.I;
      complex4.sqrt1z();
      Complex.valueOf((-2291.433), 613.838804737);
      Complex complex5 = complex2.atan();
      complex1.abs();
      Complex complex6 = complex4.tanh();
      complex4.sinh();
      complex5.add(complex6);
      Complex complex7 = Complex.NaN;
      complex7.getArgument();
      Complex complex8 = Complex.ZERO;
      complex6.readResolve();
      Complex complex9 = Complex.valueOf((-2291.433), 1.3810978455418157);
      Complex complex10 = new Complex(345.719238267086, Double.NaN);
      Complex complex11 = complex10.multiply(0);
      Complex complex12 = complex9.negate();
      complex11.tan();
      complex10.INF.subtract(613.838804737);
      complex0.pow(complex4);
      complex1.add(complex11);
      Complex complex13 = new Complex((-4369.82894217), Double.NaN);
      complex12.tan();
      complex12.negate();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-5285.616356409), (-5285.616356409));
      Complex complex2 = complex1.add(9.860939269906055E-8);
      Complex complex3 = complex2.multiply((-1));
      complex3.INF.reciprocal();
      Complex complex4 = complex1.sqrt1z();
      complex1.acos();
      Complex complex5 = Complex.ONE;
      complex5.multiply(1090.39508);
      Complex complex6 = complex1.conjugate();
      complex4.getArgument();
      complex6.sin();
      Complex complex7 = Complex.valueOf(9.860939269906023E-8, (-0.7853981544489794));
      complex7.divide(0.6296497583389282);
      complex7.pow(2.0);
      complex6.tanh();
      complex0.nthRoot(2684);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-3765.855095838);
      Complex complex1 = complex0.createComplex((-3765.855095838), (-3765.855095838));
      Complex complex2 = complex1.ZERO.reciprocal();
      // Undeclared exception!
      complex2.I.nthRoot(981305269);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.NaN.pow((-241.0));
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex1.atan();
      complex0.abs();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.sinh();
      complex0.add(complex3);
      complex4.getArgument();
      complex5.readResolve();
      Complex complex8 = Complex.valueOf(3106.139, (-583.739));
      complex8.multiply(0);
      complex8.negate();
      complex6.tan();
      complex7.pow(complex8);
      complex0.add(complex5);
      complex8.subtract(3106.139);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.3810978455418157);
      complex1.subtract(complex0);
      Complex complex2 = Complex.INF;
      complex2.sinh();
      Complex complex3 = Complex.valueOf(0.36787944117144233, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      complex3.equals(complex4);
      complex3.asin();
      complex1.toString();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.add(1.3810978455418157);
      Complex complex8 = Complex.I;
      complex6.getImaginary();
      complex2.negate();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.divide((-312.6414602674713));
      Complex complex11 = complex10.pow(1456.46853);
      complex11.tanh();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.INF.subtract(complex0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.I.sinh();
      complex4.equals(complex1);
      complex6.asin();
      complex0.ONE.toString();
      Complex complex7 = complex5.cosh();
      complex3.add(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.I;
      complex8.getImaginary();
      complex6.negate();
      complex7.divide(1.0);
      Complex complex9 = Complex.ONE;
      complex2.add(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.3810978455418157));
      complex3.equals(complex10);
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      complex1.INF.log();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = Complex.INF;
      complex4.I.sinh();
      complex3.equals(complex1);
      Complex complex5 = Complex.ONE;
      complex0.ONE.toString();
      complex4.cosh();
      complex2.add(Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.negate();
      Complex complex7 = Complex.NaN;
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      complex1.INF.log();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.I.sinh();
      complex3.equals(complex1);
      Complex complex6 = complex5.asin();
      complex0.ONE.toString();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex2.add(Double.POSITIVE_INFINITY);
      complex7.subtract((-131.0));
      complex7.isInfinite();
      Complex complex9 = complex6.pow((-4.6753408714233723E244));
      complex8.atan();
      Complex complex10 = Complex.ONE;
      complex9.add((-131.0));
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.NaN.pow((-241.0));
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = Complex.valueOf((-241.0), (-241.0));
      Complex complex6 = complex5.atan();
      complex0.abs();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex5.sinh();
      complex5.add(complex3);
      complex4.getArgument();
      complex6.readResolve();
      Complex complex9 = Complex.valueOf(3106.139, (-583.739));
      complex9.multiply(0);
      complex9.negate();
      complex7.tan();
      complex8.pow(complex9);
      complex0.add(complex6);
      Complex complex10 = new Complex(Double.NaN, (-241.0));
      complex10.tan();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.log();
      complex1.pow(1184.15);
      complex2.sqrt1z();
      Complex complex3 = Complex.valueOf(1184.15, 129.209118);
      Complex complex4 = complex2.atan();
      complex2.abs();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.sinh();
      complex5.add(0.4794255495071411);
      Complex complex7 = complex4.negate();
      Complex complex8 = Complex.NaN;
      complex8.multiply(0);
      Complex complex9 = complex6.sqrt();
      complex0.pow(2.591899541396432E-175);
      Complex complex10 = Complex.valueOf(0.4794255495071411);
      complex10.exp();
      Complex complex11 = complex3.subtract((-472.118656635));
      complex10.multiply((-2137448677));
      complex11.exp();
      complex4.tan();
      Complex.valueOf(129.209118);
      complex1.sinh();
      complex2.sinh();
      complex9.log();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-1090.39508), (-1090.39508));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.log();
      complex5.multiply(complex4);
      Complex complex6 = complex2.negate();
      complex1.divide(complex3);
      complex6.readResolve();
      Complex.valueOf((-1.315295870404327E-8), 2172.43828);
      Complex complex7 = Complex.I;
      complex5.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.subtract(complex3);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.sinh();
      complex2.equals(complex3);
      complex0.asin();
      Complex complex6 = Complex.valueOf((-1379.0));
      complex6.toString();
      complex6.cosh();
      complex1.add((-2746.0));
      Complex complex7 = Complex.I;
      complex5.getImaginary();
      Complex complex8 = complex2.negate();
      complex8.divide(Double.POSITIVE_INFINITY);
      complex3.pow((-1784.52867373));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.tanh();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2292), (-714.165019509));
      complex0.nthRoot(3104);
      complex0.exp();
      Complex complex1 = Complex.valueOf(0.7080734182735711);
      Complex complex2 = Complex.NaN;
      complex0.subtract(complex2);
      Complex complex3 = new Complex(2.5641927558519502E-8);
      complex3.INF.divide(complex0);
      complex1.multiply(782.141);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(9.860939269906055E-8);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.reciprocal();
      complex1.getField();
      complex3.pow(complex0);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = Complex.INF;
      complex5.negate();
      Complex complex6 = complex5.pow(complex3);
      complex5.getArgument();
      Complex complex7 = Complex.ONE;
      complex7.subtract((-1912.6749));
      complex6.isInfinite();
      complex4.ONE.hashCode();
      complex2.pow(3127.473);
      complex7.atan();
      complex4.add(1.4672790944499144E-8);
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.conjugate();
      Complex complex2 = complex0.multiply(0.8813735870195429);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.conjugate();
      complex5.getArgument();
      Complex complex6 = complex0.sin();
      Complex.valueOf(Double.NaN, 249.230019077);
      complex2.divide(Double.NaN);
      complex6.pow((-1211.8320175822419));
      complex1.tanh();
      complex6.getImaginary();
      complex0.add((-1211.8320175822419));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(9.860939269906055E-8);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.add(complex3);
      complex3.getField();
      Complex complex5 = complex1.atan();
      complex5.abs();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex3.sinh();
      complex7.add(9.860939269906055E-8);
      Complex complex8 = complex7.negate();
      complex6.negate();
      Complex complex9 = complex1.multiply(829);
      complex1.INF.multiply(829);
      complex0.sqrt();
      Complex complex10 = complex8.pow(0.0);
      complex10.exp();
      Complex complex11 = new Complex(0.0, (-4685.3366452953));
      Complex complex12 = complex11.subtract(0.0);
      Complex complex13 = complex9.multiply((-2145516372));
      Complex complex14 = Complex.I;
      complex11.exp();
      complex12.tan();
      Complex.valueOf((double) (-2145516372));
      complex2.sinh();
      Complex complex15 = Complex.NaN;
      complex15.sinh();
      complex9.log();
      complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.I.sinh();
      complex4.equals(complex3);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.cosh();
      complex4.add(Double.POSITIVE_INFINITY);
      complex6.getImaginary();
      Complex complex8 = Complex.ZERO;
      complex8.negate();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex5.pow(1357.36299722);
      Complex complex9 = Complex.INF;
      complex9.tanh();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.NaN.pow((-241.0));
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = Complex.valueOf((-241.0), (-241.0));
      Complex complex6 = complex5.atan();
      complex0.abs();
      Complex complex7 = complex6.tanh();
      complex5.sinh();
      complex4.add(3106.139);
      Complex complex8 = complex3.negate();
      complex4.multiply(0);
      Complex complex9 = complex4.sqrt();
      complex4.pow(2605.0);
      complex1.exp();
      complex9.subtract((double) 1158);
      complex7.multiply((-3699));
      Complex complex10 = complex8.exp();
      complex8.tan();
      Complex complex11 = Complex.valueOf((double) 0);
      complex4.sinh();
      complex10.sinh();
      complex11.log();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.NaN.pow((-241.0));
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.readResolve();
      complex3.multiply(complex1);
      complex1.sqrt1z();
      complex4.atan();
      Complex complex6 = Complex.valueOf((-4538.42), (-241.0));
      complex6.getArgument();
      complex5.cos();
      Complex complex7 = Complex.NaN;
      complex7.toString();
      Complex complex8 = complex5.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = new Complex(0.0);
      Complex complex10 = complex9.atan();
      complex6.readResolve();
      complex6.tan();
      complex5.hashCode();
      complex7.pow(complex10);
      complex3.readResolve();
      Complex complex11 = new Complex(1592.97025394494);
      complex11.asin();
      complex5.toString();
      Complex complex12 = complex8.multiply(complex4);
      Complex complex13 = Complex.valueOf(0.0, 20.0);
      complex13.log();
      complex12.multiply(1);
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(9.860939269906055E-8, 1.4672790944499144E-8);
      Complex complex1 = complex0.NaN.sin();
      complex0.ZERO.exp();
      Complex complex2 = Complex.valueOf(0.0, 9.860939269906055E-8);
      complex2.INF.exp();
      Complex complex3 = complex2.pow(complex0);
      Complex.valueOf(9.860939269906055E-8);
      complex3.negate();
      Complex complex4 = complex1.divide(9.860939269906055E-8);
      complex0.pow(complex1);
      complex4.getArgument();
      complex4.subtract((-1020.0890011537));
      complex3.isInfinite();
      complex2.pow((-1087.6510485));
      complex1.atan();
      Complex complex5 = Complex.ONE;
      complex5.add((-1636.1444774202616));
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(2605);
      Complex complex1 = new Complex(0.0, 0.0);
      complex1.readResolve();
      Complex complex2 = complex1.add(complex0);
      complex2.getArgument();
      Complex complex3 = complex1.add(0.0);
      complex3.readResolve();
      Complex complex4 = complex0.multiply(17);
      complex3.negate();
      Complex complex5 = complex1.tan();
      complex5.pow(complex4);
      Complex complex6 = new Complex((-2357.848), 2605);
      complex5.add(complex6);
      complex6.tan();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.INF.subtract(complex0);
      complex2.getField();
      Complex complex4 = complex0.atan();
      complex4.abs();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.add(Double.NaN);
      complex7.negate();
      Complex complex8 = complex1.negate();
      complex7.multiply(3089);
      Complex complex9 = complex7.sqrt();
      complex1.pow((-20.0));
      complex4.exp();
      complex8.subtract((-1603.57));
      Complex complex10 = complex9.multiply(3089);
      complex10.reciprocal();
      complex6.exp();
      complex10.tan();
      Complex complex11 = Complex.I;
      complex11.sinh();
      complex5.sinh();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-1090.39508), (-1090.39508));
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.add((-1090.39508));
      Complex complex5 = complex3.negate();
      complex4.negate();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.multiply((-1303041825));
      complex4.sqrt();
      Complex complex8 = complex0.pow(5467.65578);
      complex2.exp();
      complex8.subtract((-4867.846178708));
      Complex complex9 = complex0.multiply((-1303041825));
      complex5.reciprocal();
      complex5.exp();
      complex9.tan();
      Complex complex10 = Complex.valueOf(1.69742947894444E-8, Double.NaN);
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex7.sinh();
      complex7.log();
      complex11.getArgument();
      complex2.cos();
      complex12.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply(1432);
      complex0.createComplex(2.0, 0.004115917427878901);
      Complex complex2 = Complex.valueOf((-455.0), 1.037806510925293);
      Complex complex3 = complex0.multiply((-686));
      Complex complex4 = complex0.createComplex(1432, 1432);
      Complex complex5 = complex2.multiply((double) 1432);
      complex4.hashCode();
      complex1.toString();
      Complex complex6 = complex5.reciprocal();
      complex6.add(complex3);
      complex5.createComplex(2.3832096207000712E160, 0.0);
      complex1.conjugate();
      complex6.tanh();
      complex5.createComplex(2.3832096207000712E160, 2.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = Complex.INF;
      complex4.I.sinh();
      Complex complex5 = complex3.reciprocal();
      complex5.log();
      complex4.add(1.1339665711932977E-126);
      Complex complex6 = Complex.valueOf(1.1339665711932977E-126);
      complex6.isInfinite();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.multiply(complex1);
      complex8.log();
      Complex complex9 = Complex.ZERO;
      complex9.multiply(1);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.I.tan();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.cos();
      complex0.INF.exp();
      Complex complex5 = complex3.INF.add(complex0);
      complex3.equals(complex0);
      complex3.asin();
      complex3.cosh();
      complex2.add(0.0);
      Complex.valueOf((-1564.0));
      complex4.getImaginary();
      complex5.negate();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.exp();
      complex7.abs();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.INF.abs();
      complex2.INF.exp();
      Complex complex3 = complex1.conjugate();
      complex3.ONE.atan();
      complex2.getReal();
      complex3.add(complex1);
      complex3.subtract(Double.POSITIVE_INFINITY);
      complex3.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-833.5861637603883));
      complex1.ZERO.toString();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = Complex.ZERO;
      complex0.subtract(complex3);
      Complex complex4 = complex3.ZERO.multiply((-833.5861637603883));
      Complex complex5 = complex3.NaN.multiply(complex0);
      complex5.INF.subtract(complex0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.tan();
      complex7.toString();
      complex3.divide((-833.5861637603883));
      complex2.getReal();
      complex3.subtract(complex4);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-2673.6611853));
      Complex complex1 = complex0.createComplex(0.0, (-2673.6611853));
      Complex complex2 = Complex.valueOf((-2673.6611853));
      complex1.readResolve();
      Complex complex3 = new Complex((-2292), (-714.165019509));
      complex3.nthRoot(3073);
      Complex complex4 = complex2.divide(2.5641927558519502E-8);
      Complex complex5 = complex2.tan();
      complex3.exp();
      complex4.sqrt1z();
      Complex complex6 = Complex.valueOf(0.7080734182735711);
      Complex complex7 = Complex.NaN;
      complex1.add(complex7);
      complex1.reciprocal();
      complex3.subtract(complex7);
      complex5.subtract(complex4);
      complex6.conjugate();
      complex6.multiply(782.141);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.I.sinh();
      complex0.equals(complex4);
      Complex complex6 = complex0.asin();
      complex2.INF.cosh();
      Complex complex7 = complex6.ZERO.add(0.0);
      complex4.getImaginary();
      Complex complex8 = complex3.negate();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex7.pow(0.0);
      complex5.tanh();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(9.860939269906055E-8);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.add(complex3);
      complex3.getField();
      Complex complex5 = complex1.atan();
      complex5.abs();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex3.sinh();
      complex7.add(9.860939269906055E-8);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex6.negate();
      complex5.multiply(1158);
      complex0.sqrt();
      Complex complex10 = complex5.pow(1338.070694985269);
      Complex complex11 = complex2.exp();
      complex8.subtract(0.0);
      complex9.multiply(1158);
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex10.exp();
      complex13.tan();
      Complex complex14 = Complex.valueOf(1.0);
      complex14.sinh();
      complex11.sinh();
      complex12.log();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.nthRoot(3093);
      Complex complex1 = new Complex(42.0, 0.0);
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.add(complex1);
      complex3.ONE.getArgument();
      Complex complex4 = complex3.add(42.0);
      complex0.INF.readResolve();
      complex2.pow(Double.NaN);
      complex3.abs();
      complex4.createComplex((-6.456588023278983E-253), Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.pow(Double.POSITIVE_INFINITY);
      complex5.exp();
      Complex complex6 = Complex.ZERO;
      complex6.toString();
      Complex.valueOf(20.0, 0.0);
      complex5.sqrt();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      complex1.NaN.pow((-241.0));
      complex2.INF.sqrt1z();
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = Complex.valueOf((-600.1244756));
      complex4.INF.negate();
      Complex complex5 = complex3.INF.divide((-1494.8126794186));
      Complex complex6 = complex5.I.pow(complex0);
      complex2.NaN.getArgument();
      complex2.INF.subtract(1007.6301266);
      complex0.isInfinite();
      complex1.ZERO.pow(230.78963980813);
      Complex complex7 = complex0.atan();
      complex7.sinh();
      complex6.sinh();
      Complex complex8 = Complex.valueOf(1.0000001972188048, (-241.0));
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(9.860939269906055E-8, 1.4672790944499144E-8);
      Complex complex1 = complex0.NaN.sin();
      complex0.ZERO.exp();
      Complex complex2 = Complex.valueOf(0.0, 9.860939269906055E-8);
      Complex complex3 = complex2.INF.exp();
      complex3.ZERO.readResolve();
      Complex complex4 = complex0.multiply(complex2);
      complex4.INF.sqrt1z();
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.valueOf(0.0, 9.860939269906055E-8);
      complex2.getArgument();
      Complex complex7 = complex2.cos();
      complex7.ZERO.toString();
      Complex complex8 = complex6.createComplex(0.0, 1.5707963267948966);
      Complex complex9 = complex7.atan();
      complex2.ZERO.readResolve();
      complex5.tan();
      complex9.hashCode();
      Complex complex10 = complex6.pow(complex1);
      complex2.readResolve();
      complex10.asin();
      complex3.ZERO.toString();
      complex9.multiply(complex3);
      Complex complex11 = complex0.log();
      complex8.multiply(1490);
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-1624));
      Complex complex2 = complex0.multiply(762.588838168689);
      complex2.INF.cos();
      complex2.toString();
      complex2.ONE.pow(0.0);
      complex2.equals((Object) null);
      Complex complex3 = complex1.tan();
      complex3.I.cosh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(753.6074213905);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = Complex.valueOf(753.6074213905);
      Complex complex3 = complex0.ONE.multiply(complex2);
      Complex complex4 = complex1.ZERO.sqrt();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.asin();
      complex2.I.negate();
      complex2.isInfinite();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex6.divide(complex7);
      complex8.ONE.add(1.9483680725097656);
      complex8.reciprocal();
      Complex complex9 = complex5.NaN.multiply(complex8);
      complex3.tan();
      Complex complex10 = complex7.conjugate();
      complex1.sin();
      complex10.readResolve();
      complex10.readResolve();
      complex4.divide(complex10);
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.subtract((-3902.2848));
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.ZERO.divide((-3902.2848));
      Complex complex5 = complex2.ZERO.multiply(11);
      Complex complex6 = Complex.valueOf((-3902.2848), (-3902.2848));
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex5.ONE.createComplex((-3902.2848), 11);
      Complex complex9 = complex1.INF.multiply(complex8);
      complex0.abs();
      Complex complex10 = complex1.NaN.cosh();
      complex10.I.subtract((-290.68219548));
      Complex complex11 = complex0.conjugate();
      complex11.add(746.3158);
      Complex complex12 = complex2.acos();
      Complex complex13 = complex12.tanh();
      complex12.I.sqrt1z();
      Complex complex14 = complex0.sin();
      Complex complex15 = complex3.sin();
      complex9.NaN.multiply(11);
      complex4.sin();
      complex14.cos();
      complex9.tan();
      complex15.toString();
      complex11.multiply(264);
      complex11.abs();
      complex7.readResolve();
      complex13.isNaN();
      Complex.valueOf(2899.8, 1.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-2673.6611853));
      Complex complex1 = complex0.createComplex(0.0, (-2673.6611853));
      Complex complex2 = Complex.valueOf((-2673.6611853));
      Complex complex3 = complex2.NaN.tan();
      complex2.I.toString();
      complex3.I.divide(0.0);
      complex0.getReal();
      complex1.subtract(complex0);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-3765.855095838), (-3765.855095838));
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex3.ONE.negate();
      complex3.I.pow(complex0);
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex5.I.createComplex(0.0, 0.0);
      Complex complex7 = Complex.valueOf(0.0, (-455.0));
      complex7.ONE.multiply((-1850));
      complex1.createComplex(0.0, 0.0);
      Complex complex8 = complex6.I.multiply(623.8449547846851);
      complex2.hashCode();
      complex1.toString();
      Complex complex9 = complex4.reciprocal();
      complex8.add(complex9);
      complex7.createComplex((-1850), (-3765.855095838));
      complex4.conjugate();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.I.multiply(complex1);
      complex3.I.getField();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.INF.divide(complex0);
      complex5.ONE.log();
      complex4.conjugate();
      complex0.getField();
      complex2.isNaN();
      complex1.divide(complex2);
      Complex.valueOf((-2.2728753031387152E-10), (-2.2728753031387152E-10));
      complex1.exp();
      Complex.valueOf((-2.2728753031387152E-10));
      Complex complex6 = Complex.ZERO;
      complex6.INF.subtract((-4080.165580442075));
      Complex complex7 = complex4.ONE.subtract(complex6);
      complex7.ONE.getField();
      complex7.ZERO.sin();
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(9.860939269906055E-8, 1.4672790944499144E-8);
      Complex complex1 = complex0.NaN.sin();
      complex0.ZERO.exp();
      Complex complex2 = Complex.valueOf(0.0, 9.860939269906055E-8);
      Complex complex3 = complex2.INF.exp();
      complex3.ZERO.readResolve();
      Complex complex4 = complex0.multiply(complex2);
      complex4.INF.sqrt1z();
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.valueOf(0.0, 9.860939269906055E-8);
      complex2.getArgument();
      Complex complex7 = complex2.cos();
      complex7.ZERO.toString();
      Complex complex8 = complex6.createComplex(0.0, 1.5707963267948966);
      Complex complex9 = complex7.atan();
      complex2.ZERO.readResolve();
      complex5.tan();
      complex9.hashCode();
      Complex complex10 = complex6.pow(complex1);
      complex2.readResolve();
      complex10.asin();
      complex3.ZERO.toString();
      complex3.nthRoot(1);
      Complex complex11 = complex3.atan();
      complex10.log();
      Complex complex12 = complex11.cos();
      complex11.INF.pow(0.0);
      complex8.isNaN();
      complex12.subtract(0.0);
      complex2.pow((double) 1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7990934773848504E-8));
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(2896.310447506);
      Complex complex4 = complex3.I.sinh();
      complex4.asin();
      complex3.NaN.sqrt1z();
      Complex complex5 = complex2.pow(Double.NaN);
      complex5.ONE.divide(1246.772);
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = complex2.tan();
      Complex complex8 = new Complex(2896.310447506, 2896.310447506);
      complex7.I.pow(complex8);
      Complex complex9 = Complex.valueOf(2.0);
      complex9.NaN.nthRoot(1435);
      Complex.valueOf((-1.7990934773848504E-8));
      complex6.hashCode();
      complex8.multiply(17);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.atan();
      complex1.INF.add(complex2);
      Complex complex3 = complex2.ZERO.divide(0.5540198087692261);
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex2.NaN.divide(complex1);
      Complex complex6 = complex1.NaN.asin();
      complex4.NaN.sqrt1z();
      Complex complex7 = complex6.NaN.cos();
      complex7.I.cos();
      complex7.ZERO.pow(complex6);
      Complex complex8 = complex0.subtract(complex1);
      complex0.sqrt1z();
      Complex complex9 = complex1.NaN.multiply((-1496.39058811));
      complex9.I.atan();
      complex5.pow((-1496.39058811));
      Complex complex10 = complex8.pow(complex4);
      Complex complex11 = complex10.ONE.sqrt();
      complex11.INF.log();
      complex1.getArgument();
      Complex complex12 = complex10.asin();
      complex10.subtract(3440.035);
      complex5.multiply(0);
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-407.8549));
      Complex complex1 = complex0.pow((-407.8549));
      complex0.asin();
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-610.8516789453319));
      complex0.I.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.NaN.sin();
      complex2.ZERO.divide(462.89544835);
      complex4.ONE.sin();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.I.tan();
      complex0.ONE.abs();
      Complex complex7 = Complex.valueOf((-610.8516789453319));
      Complex complex8 = complex5.INF.asin();
      complex8.I.multiply(3089);
      complex1.ONE.readResolve();
      complex0.getReal();
      Complex complex9 = complex0.negate();
      complex9.readResolve();
      complex9.isNaN();
      complex4.sqrt1z();
      complex9.NaN.add(1.0);
      Complex complex10 = complex4.multiply(1.5234465914578058E-153);
      complex10.getReal();
      complex5.subtract(complex6);
      Complex complex11 = complex9.conjugate();
      complex6.hashCode();
      Complex complex12 = complex11.log();
      Complex complex13 = complex3.log();
      complex13.INF.negate();
      complex7.toString();
      complex12.add(complex8);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-825.54229003));
      complex1.ZERO.toString();
      complex1.INF.reciprocal();
      Complex complex2 = Complex.ZERO;
      complex0.subtract(complex2);
      complex2.ZERO.multiply((-825.54229003));
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex3.INF.subtract(complex0);
      double double0 = (-411.462066405);
      complex4.ZERO.readResolve();
//      try { 
        complex4.NaN.nthRoot((-2292));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,292
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex1 = Complex.valueOf(1.5707963267948966);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.add(complex0);
      complex4.ZERO.getField();
      Complex complex5 = complex4.ONE.atan();
      complex5.ZERO.abs();
      Complex complex6 = complex3.tanh();
      complex6.ONE.sinh();
      Complex complex7 = complex0.add(1.5707963267948966);
      Complex complex8 = complex7.negate();
      complex8.ZERO.negate();
      complex4.INF.multiply(239);
      complex1.INF.sqrt();
      complex4.pow(1.5707963267948966);
      complex0.ZERO.exp();
      complex2.subtract(1.0);
      complex1.multiply((-1038));
      complex4.reciprocal();
      complex2.exp();
      Complex complex9 = complex3.tan();
      complex9.INF.sinh();
      complex4.sinh();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.divide(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex4.INF.add(complex3);
      complex5.ONE.divide(Double.NaN);
      Complex complex6 = complex0.multiply(complex3);
      complex6.ONE.toString();
      Complex complex7 = complex0.cos();
      Complex.valueOf((-118.0));
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.multiply(0.0);
      Complex complex1 = null;
      Complex complex2 = complex0.INF.pow(45.83081333508);
      double double0 = (-1.0894001590268427E-8);
      Complex complex3 = complex2.ZERO.subtract((-1.0894001590268427E-8));
      complex3.ONE.readResolve();
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-343.6));
      Complex complex1 = new Complex(4780.153);
      Complex complex2 = complex1.createComplex(4780.153, (-343.6));
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.ONE.sqrt();
      complex5.NaN.tanh();
      complex5.I.sin();
      complex3.I.sinh();
      complex3.INF.log();
      Complex complex6 = complex3.I.asin();
      complex3.pow(complex0);
      complex1.ZERO.abs();
      Complex complex7 = complex1.ZERO.createComplex(4780.153, 1368.8184658373);
      Complex complex8 = complex2.I.acos();
      complex8.NaN.cos();
      complex0.ONE.multiply(1327);
      complex8.ONE.abs();
      complex0.subtract(complex1);
      Complex complex9 = complex1.tan();
      complex9.I.negate();
      Complex complex10 = Complex.I;
      complex1.equals(complex10);
      Complex complex11 = complex7.multiply(0.450652539730072);
      Complex complex12 = complex11.I.exp();
      complex10.cos();
      complex12.hashCode();
      Complex complex13 = Complex.valueOf(1.0);
      Complex.valueOf(1.0, 1209.81093297774);
      complex13.atan();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.atan();
      complex0.NaN.getArgument();
      complex0.I.sin();
      complex1.I.divide(845.86);
//      try { 
        complex0.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.nthRoot(2984);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.sin();
      complex2.I.getField();
      Complex complex4 = complex0.subtract(745.55059);
      complex0.NaN.sqrt();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.add(745.55059);
      complex6.ZERO.pow(complex5);
      complex5.ZERO.add((double) 2984);
      complex1.NaN.getArgument();
      Complex complex7 = complex2.subtract((-1819.9));
      Complex.valueOf(0.0, 2793.6914507);
      Complex complex8 = complex4.ZERO.add(complex7);
      Complex complex9 = complex8.INF.tanh();
      complex9.ZERO.createComplex(0.0, 214.7703580817);
      complex8.ZERO.toString();
      complex9.INF.hashCode();
      complex2.subtract((double) 2984);
      complex5.asin();
      Complex complex10 = complex3.tan();
      complex7.acos();
      complex10.tanh();
      complex8.readResolve();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(286.5, Double.POSITIVE_INFINITY);
      complex0.INF.nthRoot(1);
      complex0.NaN.nthRoot(76);
      Complex complex1 = complex0.multiply((-1595.89097099));
      complex1.NaN.getField();
      Complex complex2 = complex1.pow((double) 1);
      complex2.abs();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.INF.abs();
      complex2.INF.exp();
      Complex complex3 = complex1.conjugate();
      complex3.ONE.atan();
      complex2.getReal();
      Complex complex4 = complex3.add(complex1);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2261.0);
      Complex complex1 = complex0.reciprocal();
      complex1.I.multiply((-78.7288743859867));
      Complex complex2 = Complex.valueOf(2261.0, 2261.0);
      complex2.NaN.tanh();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex3.ZERO.sin();
      complex4.ZERO.exp();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.subtract(2261.0);
      complex0.cosh();
      complex2.multiply((-1642.3376927525));
      Complex complex7 = complex5.sinh();
      complex7.I.getField();
      complex7.ONE.multiply(0.0);
      complex6.negate();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex0.multiply(37);
      Complex complex10 = complex9.pow(complex5);
      complex5.isNaN();
      complex6.atan();
      complex1.sin();
      complex8.equals(complex10);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-258.536145818588));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.NaN.createComplex((-258.536145818588), (-258.536145818588));
      Complex complex3 = complex0.createComplex((-258.536145818588), (-3395.998));
      Complex complex4 = complex1.add(2.6090455055236816);
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex3.ONE.exp();
      Complex complex7 = complex0.NaN.add(0.0);
      Complex complex8 = complex3.add(complex0);
      complex8.INF.hashCode();
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex9.ZERO.sqrt1z();
      complex11.ONE.cos();
      Complex complex12 = complex9.subtract(complex2);
      complex12.I.multiply(2.6090455055236816);
      Complex complex13 = complex9.divide(complex1);
      Complex complex14 = Complex.ZERO;
      complex13.NaN.subtract(complex14);
      complex8.cosh();
      complex2.sinh();
      complex3.reciprocal();
      Complex complex15 = complex3.cos();
      Complex complex16 = complex10.add(complex12);
      complex16.ONE.add(complex7);
      Complex complex17 = complex6.divide(complex15);
      complex6.getField();
      complex1.sinh();
      complex17.sin();
      complex5.hashCode();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      complex1.ONE.divide(complex0);
      Complex complex2 = Complex.valueOf((-412.87339743064));
      Complex complex3 = complex1.INF.sqrt1z();
      int int0 = (-898);
      Complex complex4 = complex0.multiply((-898));
      complex1.ZERO.getField();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.reciprocal();
      complex6.ONE.abs();
      complex2.INF.conjugate();
      Complex complex7 = complex3.add(0.0);
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex8.INF.negate();
//      try { 
        complex9.I.nthRoot((-1349));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,349
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      complex1.NaN.pow((-241.0));
      complex2.INF.sqrt1z();
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = Complex.valueOf((-600.1244756));
      complex4.INF.negate();
      Complex complex5 = complex3.INF.divide((-1494.8126794186));
      complex5.I.pow(complex0);
      complex2.NaN.getArgument();
      complex2.INF.subtract(1007.6301266);
      complex0.isInfinite();
      complex1.ZERO.pow(230.78963980813);
      complex0.atan();
      Complex complex6 = complex0.add(2704.037592118);
      complex1.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(3335.6528240773, 0.5784112215042114);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = Complex.valueOf(3335.6528240773, (-703.1873516731326));
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex0.conjugate();
      complex0.reciprocal();
      complex1.add(0.5784112215042114);
      Complex complex6 = complex3.multiply(complex2);
      complex5.sin();
      complex6.tanh();
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex0.abs();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.reciprocal();
      complex0.isNaN();
      Complex complex6 = complex2.sinh();
      complex5.I.cos();
      complex1.cosh();
      complex1.INF.subtract(complex6);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.I.exp();
//      try { 
        complex8.ONE.nthRoot((-1212));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,212
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = Complex.INF;
      complex4.I.sinh();
      complex0.equals(complex4);
      Complex complex5 = complex0.asin();
      complex2.INF.cosh();
      complex5.ZERO.add(0.0);
      complex4.getImaginary();
      complex3.negate();
      Complex complex6 = complex3.exp();
      complex2.abs();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex.valueOf((-1090.39508), (-1090.39508));
      Complex complex2 = complex1.divide(complex0);
      complex2.INF.log();
      Complex complex3 = complex2.I.multiply(complex0);
      complex3.negate();
      Complex complex4 = complex0.divide(complex1);
      complex4.INF.add((-714.8354287));
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3616.04554), 0.5168620347976685);
      complex0.ZERO.toString();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.I.subtract(complex2);
      complex0.I.multiply(1497);
      Complex complex4 = complex0.INF.pow(0.5168620347976685);
      complex4.I.divide((-3616.04554));
      complex3.exp();
      Complex complex5 = Complex.valueOf((double) 1497, 0.5168620347976685);
      complex0.toString();
      Complex complex6 = complex3.pow(complex4);
      Complex complex7 = complex6.ZERO.asin();
      complex6.ZERO.toString();
      Complex complex8 = Complex.valueOf((-3616.04554));
      complex8.NaN.multiply(complex7);
      Complex complex9 = complex0.subtract(0.0);
      complex9.abs();
      complex5.getField();
      complex8.cosh();
      Complex.valueOf((double) 1497);
      complex1.readResolve();
      complex0.nthRoot(1497);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      complex1.reciprocal();
      complex0.ONE.getArgument();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.NaN.sinh();
      complex2.ZERO.asin();
      complex0.atan();
      complex0.abs();
      Complex complex3 = Complex.ZERO;
      complex0.equals(complex3);
      complex3.toString();
      complex3.ONE.add((-1028.33686));
      complex0.abs();
      complex1.exp();
      complex3.getField();
      complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.acos();
      complex2.NaN.negate();
      Complex.valueOf((-2086.6096), (-2086.6096));
      Complex complex3 = complex0.atan();
      complex3.ZERO.createComplex(1.0, (-3730.3));
      Complex complex4 = complex0.subtract(8.218407798110846E307);
      Complex complex5 = complex2.cosh();
      complex0.ONE.negate();
      complex5.INF.toString();
      complex2.isInfinite();
      Complex complex6 = complex2.multiply(20.0);
      complex6.I.add((-146.0));
      complex4.subtract(complex6);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ONE.sinh();
      complex1.I.abs();
      complex1.I.atan();
      complex0.NaN.multiply((-2428.05874325));
//      try { 
        complex0.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex1.ZERO.multiply(0.0);
      List<Complex> list0 = complex2.INF.nthRoot(1);
      assertFalse(list0.contains(complex2));
      
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex6.INF.subtract((double) 1);
      complex0.readResolve();
      Complex complex8 = complex1.INF.cosh();
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex11.I.tanh();
      Complex complex13 = complex11.ONE.acos();
      complex10.ZERO.cos();
      Complex complex14 = complex3.asin();
      Complex complex15 = complex10.sqrt();
      assertTrue(complex15.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      
      Complex complex16 = complex0.pow(complex3);
      Complex complex17 = complex16.NaN.divide(complex14);
      Complex complex18 = complex0.pow(0.0);
      double double0 = complex12.abs();
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(1.557407724654902, complex12.getImaginary(), 0.01);
      assertEquals(1.557407724654902, double0, 0.01);
      
      complex11.createComplex((-2746.912643987), 1.557407724654902);
      Complex complex19 = complex1.pow((-3.866609889222889E-9));
      Complex complex20 = complex19.I.exp();
      assertEquals(0.8414709848078965, complex20.getImaginary(), 0.01);
      
      String string0 = complex17.toString();
      assertEquals("(NaN, NaN)", string0);
      assertSame(complex16, complex9);
      
      Complex complex21 = Complex.valueOf(1.557407724654902, 0.0);
      assertEquals(1.557407724654902, complex21.getReal(), 0.01);
      
      complex1.sqrt();
      Complex complex22 = complex13.cos();
      assertFalse(complex11.equals((Object)complex7));
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      assertTrue(complex11.equals((Object)complex18));
      assertTrue(complex13.equals((Object)complex4));
      assertNotSame(complex11, complex6);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex1.ONE.multiply(1432);
      assertEquals(1432.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.NaN.multiply((double) 1432);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex6 = complex3.NaN.conjugate();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex7 = complex0.sin();
      Complex.valueOf(0.0, 1.0);
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex8.pow((double) 1432);
      assertSame(complex9, complex6);
      
      Complex complex10 = complex8.tanh();
      double double1 = complex10.getImaginary();
      assertSame(complex10, complex5);
      assertTrue(complex0.equals((Object)complex7));
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex1 = Complex.valueOf((-122.0));
      boolean boolean0 = complex1.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex1.isNaN());
      assertEquals((-122.0), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex1.isNaN();
      complex2.NaN.getField();
      Complex complex4 = complex2.INF.pow(2001.6005993043);
      Complex complex5 = complex4.I.pow(complex2);
      complex2.getField();
      Complex complex6 = complex0.subtract((-1125.01927));
      complex3.abs();
      Complex complex7 = Complex.valueOf(1.5787194498912167E-8);
      Complex complex8 = complex3.multiply(1.5787194498912167E-8);
      assertTrue(complex8.equals((Object)complex7));
      
      Complex complex9 = complex6.sinh();
      assertTrue(complex9.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      complex5.createComplex(999.234219, 231.4919886616677);
      assertEquals(1.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex4, complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.NaN.sinh();
//      try { 
        complex0.INF.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }
}
