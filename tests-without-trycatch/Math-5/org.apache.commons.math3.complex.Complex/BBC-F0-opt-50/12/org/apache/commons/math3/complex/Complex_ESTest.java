/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:32:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(2.7569686255975333E304);
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex((-1.0), 2.7569686255975333E304);
      Complex complex3 = complex1.acos();
      complex0.asin();
      complex2.sqrt1z();
      complex1.acos();
      complex1.ONE.multiply(0);
      Complex complex4 = Complex.I;
      complex4.nthRoot(2182);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.0510044312916931E14, (-3846.9495779));
      complex1.asin();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.multiply(20.0);
      Complex complex1 = new Complex(7.952287052787358E165, 1.0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.negate();
      complex1.NaN.abs();
      Complex complex3 = complex1.INF.subtract(1.0);
      complex2.ONE.sqrt();
      Complex complex4 = complex3.I.tanh();
      complex3.ZERO.negate();
      Complex complex5 = complex1.sqrt();
      complex1.I.abs();
      complex0.NaN.getArgument();
      Complex complex6 = complex0.cos();
      complex4.ONE.multiply(complex3);
      Complex complex7 = complex2.divide(1.0);
      Complex complex8 = complex3.divide(complex0);
      complex6.subtract(complex3);
      complex8.getReal();
      complex7.nthRoot(4980);
      Complex complex9 = complex5.exp();
      complex9.ZERO.getArgument();
      complex2.acos();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.cosh();
      complex2.ONE.getField();
      complex1.abs();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.createComplex(Double.POSITIVE_INFINITY, 0.41421356237309515);
      complex4.ONE.tanh();
      Complex complex6 = complex0.multiply(870);
      Complex complex7 = complex2.atan();
      complex2.getField();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex9.I.cosh();
      complex10.ONE.multiply((double) 870);
      complex1.nthRoot(870);
      complex9.add(0.41421356237309515);
      complex4.I.acos();
      Complex complex11 = complex1.tan();
      complex11.I.pow(complex6);
      complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex12 = complex1.divide((double) 870);
      complex5.nthRoot(1564);
      complex8.subtract(complex6);
      complex3.multiply((-1031));
      complex7.sin();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.cos();
      Complex complex2 = new Complex((-638.03963182), 1147.219219465);
      Complex complex3 = new Complex((-20.0), (-20.0));
      complex3.I.cosh();
      complex3.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(8.160542326793782E155, 2.0);
      Complex complex1 = Complex.ZERO;
      complex0.INF.tan();
      Complex complex2 = complex1.NaN.divide(2.0);
      complex2.hashCode();
      complex2.ONE.hashCode();
      Complex complex3 = complex1.NaN.add(2.0);
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex0.INF.multiply(complex1);
      complex5.ZERO.conjugate();
      Complex complex6 = complex3.INF.tanh();
      Complex complex7 = complex6.ZERO.subtract(288.47);
      complex7.ZERO.divide((-3782.4069755));
      Complex complex8 = complex0.createComplex(2.0, 2.291259288787842);
      complex8.readResolve();
      Complex complex9 = complex3.conjugate();
      complex9.NaN.multiply(complex2);
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = Complex.valueOf(2.0);
      complex11.INF.subtract(288.47);
      complex10.exp();
      complex10.sinh();
      complex9.log();
      Complex complex12 = complex8.tanh();
      complex12.subtract(complex9);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex2.conjugate();
      Complex complex3 = complex0.reciprocal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sqrt1z();
      complex1.abs();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.log();
      complex2.sqrt();
      complex4.cos();
      complex3.tan();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex3.sqrt1z();
//      try { 
        complex3.nthRoot((-1872));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,872
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2503.9601321281198), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.getReal();
      Complex complex2 = complex0.asin();
      complex0.createComplex((-1046.0163938), (-1046.0163938));
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex1 = complex0.multiply(1823);
      complex1.ONE.log();
      Complex complex2 = new Complex((-1632.927239224), Double.POSITIVE_INFINITY);
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.sqrt();
      complex1.getArgument();
      Complex complex3 = complex1.multiply((-1632.927239224));
      Complex complex4 = complex3.divide(complex1);
      complex4.ONE.atan();
      complex4.INF.sinh();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = new Complex((-1632.927239224), Double.POSITIVE_INFINITY);
      complex5.cos();
      complex6.tan();
      complex6.multiply((-2456));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(3618.9293644);
      Complex complex1 = complex0.multiply((-2828.4132186327));
      complex1.getArgument();
      Complex complex2 = complex1.multiply((-1632.927239224));
      Complex complex3 = complex2.divide(complex0);
      complex3.sinh();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = new Complex((-3.141592653589793), 4.842877388000488E-8);
      complex4.cos();
      complex0.tan();
      Complex complex6 = Complex.ZERO;
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(3618.9293644);
      Complex complex1 = complex0.multiply((-2828.4132186327));
      Complex complex2 = complex1.divide(complex0);
      complex0.getReal();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf((-2828.4132186327));
      Complex complex6 = complex5.log();
      complex2.sqrt();
      complex4.cos();
      Complex complex7 = Complex.ZERO;
      complex3.tan();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), 56.2573237461);
      complex1.isInfinite();
      Complex complex2 = complex1.sqrt1z();
      complex2.divide(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.asin();
      complex3.abs();
      Complex complex5 = complex1.pow(complex4);
      complex3.acos();
      complex5.log();
      complex5.sqrt();
      Complex complex6 = complex4.cos();
      complex6.ONE.negate();
      Complex complex7 = Complex.ZERO;
      complex2.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.sqrt();
      complex2.getArgument();
      Complex complex4 = complex2.multiply((-1632.927239224));
      Complex complex5 = complex4.divide(complex1);
      complex5.INF.sinh();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = new Complex((-1632.927239224), Double.POSITIVE_INFINITY);
      complex6.cos();
      complex7.tan();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sin();
      complex1.conjugate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1158.0);
      Complex complex1 = complex0.asin();
      complex1.I.multiply(1158.0);
      Complex complex2 = complex1.sqrt();
      complex2.ZERO.exp();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = Complex.valueOf(1158.0, 1923.3682);
      Complex complex7 = complex5.I.subtract(complex6);
      complex7.INF.acos();
      complex5.I.sin();
      Complex complex8 = Complex.valueOf(1158.0);
      Complex complex9 = complex8.ONE.pow(complex4);
      complex9.NaN.reciprocal();
      complex4.add(3357.9320043);
      complex3.add(complex8);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(3340.08354959053);
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex1.divide(3340.08354959053);
//      try { 
        complex2.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3618.9293644, (-7524.0));
      Complex complex1 = complex0.acos();
      complex1.multiply(complex0);
      complex1.log();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3075.25666), (-889.7));
      complex0.ONE.getField();
      Complex complex1 = new Complex((-2363990.0247419323), (-889.7));
      complex1.INF.log();
      Complex complex2 = complex1.ZERO.atan();
      complex0.add(complex1);
      Complex complex3 = complex0.tan();
      complex3.toString();
      complex0.getReal();
      complex3.abs();
      complex3.log();
      complex2.divide((-3075.25666));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(3618.9293644);
      Complex complex1 = new Complex((-2828.4132186327), (-2828.4132186327));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.pow((-2828.4132186327));
      complex0.log();
      complex3.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.NaN.toString();
      Complex complex3 = new Complex((-876.5438431));
      complex3.log();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.INF.add(61.70286735155954);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.createComplex(1.4470673509275515E-259, 1.4470673509275515E-259);
      Complex complex5 = complex2.INF.asin();
      Complex complex6 = complex0.multiply(768);
      complex1.ONE.readResolve();
      complex6.INF.nthRoot(1431655765);
      complex2.abs();
      complex1.atan();
      Complex.valueOf(2.0);
      complex4.multiply(2.0);
      complex0.cos();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex5.log();
      complex8.I.pow(complex3);
      Complex.valueOf((-1847.850270053259), 61.70286735155954);
      complex0.exp();
      complex7.multiply(768);
      complex7.getField();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-1280.0));
      Complex complex1 = complex0.ONE.multiply((-832.6584700283008));
      complex0.INF.atan();
      complex1.add(complex0);
      Complex complex2 = new Complex(20.0, 20.0);
//      try { 
        complex2.I.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.INF.multiply((-1611.3));
      Complex complex6 = complex5.I.atan();
      complex6.INF.exp();
      Complex complex7 = complex1.multiply(complex3);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex0.INF.conjugate();
      Complex complex10 = complex7.ONE.asin();
      complex10.NaN.readResolve();
      complex8.ZERO.abs();
      complex7.NaN.readResolve();
      Complex complex11 = complex0.pow(complex1);
      complex8.NaN.acos();
      complex11.I.log();
      Complex complex12 = complex11.INF.createComplex(20.0, (-20.0));
      complex8.asin();
      complex12.isNaN();
      complex9.getReal();
      complex8.atan();
      Complex complex13 = complex7.atan();
      complex13.INF.getField();
      complex7.ONE.getArgument();
      complex1.exp();
      complex13.sqrt();
      complex2.add(complex9);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex(20.0, 20.0);
      complex0.ZERO.getField();
      complex0.exp();
      Complex complex2 = complex1.createComplex(20.0, 1.3924360275268555);
      Complex complex3 = complex0.cosh();
      complex1.INF.hashCode();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex2.subtract(complex0);
      complex5.I.pow(complex0);
      complex0.multiply(1570);
      Complex complex6 = complex5.reciprocal();
      complex1.subtract(complex3);
      Complex complex7 = complex2.tanh();
      Complex.valueOf(1.200354814529419);
      complex7.INF.subtract((double) 1570);
      complex5.add((-2917.7283168));
      complex4.sqrt1z();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.INF.pow((-876.5438431));
      Complex complex3 = complex0.log();
      complex3.readResolve();
      complex3.equals(complex2);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-2357.7233133807));
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      complex1.I.multiply(complex0);
      complex0.divide(1.5707963267948966);
      complex1.conjugate();
      complex0.tanh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(54.6);
      Complex complex2 = complex1.add(complex0);
      complex1.isInfinite();
      Complex complex3 = new Complex(7162.0);
      complex3.sqrt1z();
      Complex complex4 = complex2.divide(complex1);
      complex3.sqrt1z();
      Complex complex5 = complex2.asin();
      complex4.abs();
      complex2.readResolve();
      complex1.pow(complex3);
      complex5.acos();
      Complex complex6 = Complex.INF;
      complex6.log();
      Complex complex7 = Complex.I;
      complex7.sqrt();
      complex2.cos();
      Complex complex8 = Complex.INF;
      complex8.tan();
      Complex complex9 = new Complex(1759.010298812, (-137.24222095));
      complex9.subtract(54.6);
      complex9.getField();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-673.3822), Double.NaN);
      Complex complex1 = complex0.INF.multiply(880);
      Complex.valueOf(6.283185307179586, 0.9974949359893799);
      Complex complex2 = Complex.valueOf((-673.3822), 6.283185307179586);
      complex2.createComplex((-699.6119376586556), 880);
      complex0.NaN.getArgument();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sin();
      complex0.getField();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex0.tanh();
      complex6.NaN.add(3600.335349);
      complex4.getReal();
      complex5.getReal();
      complex1.multiply(0.0);
      Complex.valueOf((-2000.3039));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.NaN.abs();
      complex0.ZERO.add(Double.NaN);
      complex0.I.getField();
      Complex complex2 = complex0.cosh();
      complex0.getField();
      complex2.NaN.acos();
      complex1.multiply(0.0);
      Complex complex3 = Complex.INF;
      complex3.ONE.pow(0.0);
      Complex complex4 = complex1.tan();
      complex4.multiply(Double.NaN);
      Complex complex5 = complex2.sqrt1z();
      // Undeclared exception!
      complex5.ZERO.nthRoot(129006497);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.NaN.abs();
      Complex complex2 = complex0.ZERO.add(Double.NaN);
      complex0.I.getField();
      complex0.cosh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.divide(complex2);
      complex0.createComplex(Double.NaN, 1736.0780014421);
      Complex complex5 = Complex.ONE;
      complex5.tanh();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt();
      complex1.getArgument();
      Complex complex3 = complex1.multiply(2125.33786081);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.divide(complex4);
      complex2.reciprocal();
      complex4.sqrt();
      complex3.cos();
      complex5.tan();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.sqrt();
      complex2.getArgument();
      Complex complex4 = complex2.multiply((-1632.927239224));
      complex4.divide(complex1);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex2.sqrt();
      complex5.cos();
      complex6.tan();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.atan();
      Complex complex1 = Complex.I;
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2022.7543647401353, 2022.7543647401353);
      complex0.sin();
      Complex complex1 = complex0.ZERO.cosh();
      Complex.valueOf((-1631.08268996));
      Complex complex2 = complex0.atan();
      Complex complex3 = new Complex((-3566.8974444), (-1631.08268996));
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex2.asin();
      complex5.conjugate();
      Complex complex6 = complex3.asin();
      complex6.NaN.subtract(5.336891661045229E-6);
      complex4.readResolve();
      complex3.abs();
      Complex complex7 = Complex.I;
      complex7.readResolve();
      Complex complex8 = new Complex(2022.7543647401353);
      complex8.sin();
      complex4.acos();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex0.pow(complex1);
      complex1.ONE.asin();
      complex1.log();
      complex0.equals(complex2);
      Complex complex5 = complex4.multiply(253.809440333829);
      complex5.subtract(complex0);
      complex0.pow(complex4);
      complex3.cosh();
//      try { 
        complex5.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.cosh();
      complex2.equals(complex0);
      Complex complex4 = complex1.multiply(1759.010298812);
      complex1.subtract(complex0);
      Complex complex5 = complex1.pow(complex1);
      Complex complex6 = complex5.cosh();
      complex3.divide(complex5);
      Complex complex7 = Complex.INF;
      complex4.exp();
      complex3.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2022.7543647401353, 2022.7543647401353);
      Complex complex1 = complex0.multiply(2022.7543647401353);
      Complex complex2 = complex0.add(complex1);
      complex0.isInfinite();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex4.asin();
      Object object0 = new Object();
      complex1.abs();
      complex3.readResolve();
      complex3.pow(complex1);
      complex6.acos();
      complex5.log();
      complex4.sqrt();
      complex2.cos();
      Complex complex7 = Complex.INF;
      complex0.tan();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex0.abs();
      Complex complex2 = complex1.add(Double.NaN);
      complex2.getField();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.cosh();
      complex4.getField();
      Complex complex5 = complex3.acos();
      Complex.valueOf(0.0, Double.NaN);
      Complex complex6 = Complex.NaN;
      complex6.exp();
      Complex complex7 = new Complex(Double.NaN, Double.POSITIVE_INFINITY);
      complex5.subtract(complex7);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(2176);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex4.createComplex(2176, 2176);
      complex0.cos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(4202.92879679009, (double) 2176);
      complex6.exp();
      complex4.subtract(complex5);
      Complex complex7 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(3618.9293644);
      Complex complex1 = complex0.multiply((-2828.4132186327));
      Complex complex2 = complex1.divide(complex0);
      complex0.getReal();
      Complex complex3 = complex2.cosh();
      complex3.INF.toString();
      complex1.pow(complex0);
      complex0.acos();
      complex1.log();
      complex1.sqrt();
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex((-870.0));
      Complex complex6 = complex5.tan();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1341.071877192));
      complex0.multiply(5.264388476949737E-217);
      Complex complex2 = complex1.sqrt();
      complex2.NaN.sinh();
      Complex.valueOf(0.9999994034679347, 5.264388476949737E-217);
      Complex complex3 = new Complex(5.264388476949737E-217);
      Complex complex4 = complex2.asin();
      complex4.ZERO.divide((-2565.2107333));
      Complex complex5 = complex4.ZERO.asin();
      complex5.tan();
      complex0.readResolve();
      complex2.readResolve();
      Complex complex6 = new Complex((-3237.4723));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      int int0 = (-1);
      complex0.ONE.multiply((-1));
      complex0.ZERO.createComplex(7.785491934690374E-291, 1.1345690470821692);
      complex0.ZERO.getArgument();
      int int1 = (-1703);
//      try { 
        complex0.nthRoot((-1703));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,703
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.NaN.abs();
      complex0.ZERO.add(Double.NaN);
      complex0.I.getField();
      Complex complex2 = complex0.cosh();
      complex0.getField();
      Complex complex3 = complex2.NaN.acos();
      Complex.valueOf(0.0);
      Complex complex4 = complex2.exp();
      complex4.subtract(complex1);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tan();
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.INF.multiply((-1611.3));
      complex5.I.atan();
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex0.INF.conjugate();
      Complex complex9 = complex6.ONE.asin();
      complex9.NaN.readResolve();
      complex7.ZERO.abs();
      complex6.NaN.readResolve();
      Complex complex10 = new Complex(0.0);
      complex7.NaN.acos();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      complex1.INF.pow(complex0);
      Complex complex2 = complex0.multiply(1759.010298812);
      complex2.NaN.add(complex0);
      complex2.isInfinite();
      complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(1759.010298812, 1759.010298812);
      complex0.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.isInfinite();
      Complex complex5 = complex3.add(0.36334810283119434);
      complex4.tanh();
      complex5.cosh();
      Complex complex6 = Complex.I;
      complex6.sinh();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.NaN.abs();
      complex0.ZERO.add(0.0);
      Complex complex2 = Complex.valueOf(Double.NaN, 0.0);
      complex2.sqrt1z();
      Complex.valueOf(Double.NaN);
      complex0.isInfinite();
      complex1.add(1331.9453692972);
      complex0.tanh();
      Complex complex3 = Complex.ONE;
      complex0.sinh();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.multiply(1759.010298812);
      Complex complex4 = complex3.NaN.add(complex0);
      complex3.isInfinite();
      Complex complex5 = complex0.sqrt1z();
      complex0.INF.divide(complex5);
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex3.asin();
      Object object0 = new Object();
      complex6.abs();
      complex4.readResolve();
      complex7.pow(complex0);
      Complex complex8 = complex7.acos();
      complex2.log();
      complex4.sqrt();
      complex3.cos();
      Complex complex9 = Complex.INF;
      complex8.tan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1104.292507809065), (-1104.292507809065));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.multiply(1759.010298812);
      Complex complex4 = complex1.add(complex2);
      complex0.isInfinite();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex2.divide(complex3);
      complex6.sqrt1z();
      complex6.divide(complex5);
      complex5.nthRoot(1);
      complex0.getField();
      complex5.asin();
      Complex complex7 = complex3.tan();
      complex7.negate();
      Complex complex8 = Complex.valueOf((-1104.292507809065));
      Complex complex9 = complex8.sinh();
      complex9.ZERO.add(complex3);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(3618.9293644);
      complex0.ONE.toString();
      Complex complex1 = complex0.multiply((-2828.4132186327));
      Complex complex2 = complex1.divide(complex0);
      complex0.getReal();
      Complex complex3 = complex2.multiply((-6020.2888018));
      Complex complex4 = complex1.reciprocal();
      complex3.sqrt();
      complex4.cos();
      complex1.tan();
      Complex complex5 = Complex.valueOf(1697.2483662461464, Double.POSITIVE_INFINITY);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex1.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.log();
      complex1.multiply(1834);
      complex1.add((double) 1834);
      Complex complex4 = Complex.NaN;
      complex4.multiply((double) 1834);
      Complex complex5 = complex2.sqrt();
      complex5.readResolve();
      Complex complex6 = Complex.valueOf((double) 1834, (-3.8809601937571554E-8));
      Complex complex7 = complex6.multiply(complex0);
      complex0.divide((-1.0));
      Complex complex8 = complex7.divide(1.1883951057781212);
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex4.add(complex6);
      complex10.asin();
      complex9.atan();
      complex8.multiply(complex3);
      complex7.sin();
      Complex complex11 = new Complex((-1341.071877192), 0.6527930498123169);
      complex11.pow(1.1883951057781212);
      complex7.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2022.7543647401353, 2022.7543647401353);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.cosh();
      complex0.equals(complex1);
      Complex complex3 = complex0.multiply(2022.7543647401353);
      complex3.I.subtract(complex1);
      complex3.INF.pow(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.negate();
      complex3.readResolve();
      Complex complex6 = complex0.pow(2022.7543647401353);
      Complex complex7 = complex3.pow(complex6);
      complex7.reciprocal();
      complex5.cosh();
      Complex complex8 = Complex.I;
      complex8.exp();
      complex1.getField();
      Object object0 = new Object();
      complex1.equals(complex0);
      Complex.valueOf((-1517.075079659444));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0000002780134665, 0.0465959590112823);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      complex1.equals(complex0);
      complex2.multiply(2.0000002780134665);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = new Complex(1275.662256822023, 0.0465959590112823);
      complex3.pow(complex4);
      complex1.cosh();
      Complex complex5 = complex3.divide(complex2);
      complex0.sinh();
      complex3.reciprocal();
      complex1.getImaginary();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-4.392309439525734E-8));
      complex0.I.pow((-4.392309439525734E-8));
      complex0.I.multiply((-4.392309439525734E-8));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.multiply(1759.010298812);
      Complex complex4 = complex3.NaN.add(complex0);
      complex3.isInfinite();
      complex0.sqrt1z();
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex2.sqrt();
      complex2.sqrt1z();
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex6.createComplex(1759.010298812, (-2203.26972399937));
      complex3.nthRoot(198);
      complex7.getField();
      complex2.asin();
      complex3.tan();
      Complex.valueOf((-294.52));
      Complex complex9 = new Complex(1328.94124031512);
      complex9.sinh();
      complex8.asin();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.multiply(1025);
      Complex complex9 = complex4.add((-1341.071877192));
      complex9.multiply((-1341.071877192));
      complex5.sqrt();
      Complex complex10 = Complex.valueOf(906.73623147, Double.POSITIVE_INFINITY);
      complex3.multiply(complex2);
      complex1.divide((-1785.8836092433041));
      complex10.divide((double) 664);
      complex1.sinh();
      Complex complex11 = complex10.add(complex8);
      complex3.asin();
      complex5.atan();
      complex11.multiply(complex6);
      complex6.sin();
      Complex complex12 = Complex.I;
      complex12.pow(1968.0806293177);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(1007);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex2.multiply((-1611.3));
      complex3.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.multiply(complex6);
      Complex complex8 = complex6.asin();
      complex7.conjugate();
      Complex complex9 = complex3.asin();
      complex0.readResolve();
      complex4.abs();
      complex6.readResolve();
      complex3.pow(complex5);
      complex8.acos();
      complex9.log();
      complex4.createComplex(20.0, 1007);
      Complex complex10 = Complex.valueOf((-1611.3), 20.0);
      complex10.asin();
      complex5.isNaN();
      complex6.getReal();
      complex8.atan();
      complex2.atan();
      complex0.getField();
      complex7.exp();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2022.7543647401353, 2022.7543647401353);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = Complex.valueOf(3337.26086524292, (-4474.151582807063));
      complex3.equals(complex0);
      Complex complex4 = complex0.multiply(9.198855229106814E-8);
      Complex complex5 = complex3.subtract(complex0);
      complex0.ONE.getArgument();
      complex5.pow(complex2);
      Complex complex6 = complex3.cosh();
      complex6.divide(complex1);
      complex4.sinh();
      Complex complex7 = Complex.ONE;
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1815.179875995774);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf(805.13473082551, 989.1227683214);
      Complex complex4 = complex1.multiply(complex3);
      complex1.divide((-568.492034));
      Complex complex5 = Complex.valueOf(1815.179875995774, (-568.492034));
      complex5.divide(9.198855229106814E-8);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.add(complex1);
      complex6.asin();
      complex4.atan();
      complex7.multiply(complex3);
      complex5.sin();
      complex0.pow(989.1227683214);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2022.7543647401353, 2022.7543647401353);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.cosh();
      complex0.equals(complex1);
      Complex complex3 = complex0.multiply(2022.7543647401353);
      Complex complex4 = complex3.I.subtract(complex1);
      complex3.INF.pow(complex2);
      Complex complex5 = Complex.INF;
      complex4.divide(complex5);
      Complex.valueOf((-874.1598218), (-360.202));
      Complex complex6 = Complex.valueOf((-360.202), (-360.202));
      complex6.sqrt();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.conjugate();
      complex0.I.createComplex(262.85261856, 0.0);
      Complex complex2 = Complex.valueOf(0.0, 262.85261856);
      complex2.NaN.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0);
      complex1.isInfinite();
      complex2.add(4100.23591794);
      complex0.tanh();
      Complex complex4 = Complex.INF;
      complex3.divide(complex4);
      Complex.valueOf((-360.202), Double.POSITIVE_INFINITY);
      complex3.sqrt();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-395.9720042436));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.exp();
      complex3.ONE.getField();
      complex2.nthRoot(2542);
      Complex complex4 = complex3.I.multiply(1.0);
      Complex complex5 = complex3.sinh();
      Complex complex6 = Complex.I;
      complex6.ZERO.add(1755.963385933017);
      complex6.INF.multiply(complex4);
      complex5.add(complex6);
      complex1.equals("");
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.getField();
      complex1.multiply((-1358));
      Complex complex3 = complex0.ONE.divide(0.0);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex2.ZERO.sin();
      complex2.getImaginary();
      complex3.add(0.0);
      complex2.readResolve();
      complex2.sinh();
      complex3.toString();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex5.NaN.sqrt1z();
      complex7.ONE.add(complex4);
      complex6.NaN.atan();
      Complex complex8 = complex1.conjugate();
      complex2.multiply(0.0);
      complex8.add(complex2);
      complex3.divide(0.0);
      complex1.multiply((-1358));
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.I.pow(complex1);
      complex3.ONE.acos();
      complex3.INF.readResolve();
      Complex complex4 = complex0.multiply(1.5062624834468093E-8);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.INF.acos();
      Complex complex7 = complex4.tanh();
      complex7.ONE.sqrt();
      complex7.INF.hashCode();
      Complex complex8 = complex4.divide(complex0);
      Complex complex9 = complex4.NaN.divide(complex1);
      Complex complex10 = complex8.I.multiply(1160);
      complex7.pow(1.5062624834468093E-8);
      complex10.I.pow(0.0);
      Complex complex11 = complex4.tanh();
      complex11.INF.tan();
      complex2.getImaginary();
      complex1.tan();
      complex9.getField();
      Complex complex12 = complex9.tanh();
      complex11.multiply(complex10);
      complex6.tan();
      complex9.getImaginary();
      complex12.createComplex(0.0, (-1390.4118728747042));
      complex11.cosh();
      complex5.createComplex((-1390.4118728747042), (-2721.90070078));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1221.753013537));
      complex0.hashCode();
      complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex1.INF.log();
      complex0.I.abs();
      complex0.toString();
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex0.cos();
      complex5.I.createComplex(0.0, 4878.0);
      Complex complex6 = complex3.cosh();
      complex2.reciprocal();
      Complex complex7 = complex5.createComplex(1.0, 0.0);
      Complex.valueOf(1.0, 0.0);
      complex3.toString();
      complex4.readResolve();
      complex2.abs();
      complex7.getReal();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.readResolve();
      Complex complex1 = complex0.log();
      complex0.readResolve();
      complex0.multiply(1352.680230711);
      Complex complex2 = new Complex(802.2744604300601);
      complex0.abs();
      Complex complex3 = complex2.INF.createComplex(3079.5, 423.5146);
      Complex complex4 = complex3.NaN.pow((-1348.13546));
      complex0.equals(complex2);
      complex1.reciprocal();
      Complex complex5 = complex2.multiply(0.0);
      complex1.multiply(1723);
      Complex complex6 = new Complex(3079.5, (-1348.13546));
      complex1.ZERO.subtract(complex6);
      Complex complex7 = complex5.pow(complex1);
      complex7.multiply(Double.NaN);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.log();
      complex2.I.pow((double) 1);
      complex2.INF.sin();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.pow(complex2);
      complex3.acos();
      complex4.subtract((-1634.7297));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(2327.615323, 2327.615323);
      Complex complex1 = complex0.NaN.multiply(0);
      complex1.NaN.getField();
      Complex complex2 = complex0.atan();
      complex0.equals(complex1);
      complex2.NaN.pow((double) 0);
      Complex complex3 = Complex.valueOf((double) 0);
      complex2.getReal();
      Complex complex4 = complex0.sin();
      complex3.abs();
      complex0.subtract(complex4);
      Complex complex5 = complex0.sqrt();
      complex5.tanh();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.multiply(0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.ONE.pow(2148.1912841);
      Complex complex5 = complex1.multiply(2148.1912841);
      complex5.I.sin();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex6.INF.atan();
      complex7.NaN.divide(0.0);
      complex6.INF.abs();
      complex0.subtract(2148.1912841);
      complex0.isInfinite();
      Complex complex8 = complex2.cos();
      complex0.NaN.toString();
      complex3.getArgument();
      Complex complex9 = complex8.sin();
      complex0.INF.log();
      Complex complex10 = complex3.tanh();
      complex10.NaN.abs();
      complex6.subtract(2148.1912841);
      complex8.NaN.cosh();
      complex3.getReal();
      Complex complex11 = complex9.tan();
      complex11.conjugate();
      complex11.INF.toString();
      complex11.I.conjugate();
      complex8.log();
      complex4.hashCode();
      complex2.multiply(2148.1912841);
      complex1.sin();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1152.91423));
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex3.sqrt1z();
      complex4.ZERO.subtract(complex2);
      Complex complex5 = Complex.valueOf((-1152.91423), 0.0);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex6.I.tan();
      complex7.NaN.divide(4134.891542513094);
      Complex complex8 = complex7.ZERO.sqrt1z();
      complex5.pow(0.0);
      complex8.ONE.hashCode();
      Complex complex9 = complex8.I.cos();
      complex9.INF.subtract(complex4);
      complex8.NaN.subtract(complex2);
//      try { 
        complex6.nthRoot((-1719));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,719
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.multiply(1759.010298812);
      complex3.NaN.add(complex0);
      complex3.isInfinite();
      Complex complex4 = complex0.sqrt1z();
      complex0.INF.divide(complex4);
      complex0.ONE.sqrt();
      complex4.INF.sqrt1z();
      complex4.I.divide(complex2);
      Complex complex5 = complex4.createComplex(0.0, 136.5197101020447);
      complex5.ZERO.nthRoot(1);
      complex4.getField();
      Complex complex6 = complex4.asin();
      complex6.tan();
      Complex.valueOf(251.6478);
      complex2.sinh();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2022.7543647401353, 2022.7543647401353);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.cosh();
      complex0.equals(complex1);
      Complex complex3 = complex0.multiply(2022.7543647401353);
      complex3.I.subtract(complex1);
      complex3.INF.pow(complex2);
      Complex complex4 = complex1.cosh();
      complex4.divide(complex2);
      complex1.sinh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6533012390136719, 0.6533012390136719);
      Complex complex1 = Complex.valueOf(0.6533012390136719);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.acos();
      complex3.NaN.toString();
      complex3.nthRoot(4127);
      Complex complex4 = complex1.NaN.asin();
      complex4.I.pow(complex0);
      complex4.INF.divide(989.1227683214);
      Complex.valueOf(1.0, 1.0);
      complex0.getReal();
      complex2.subtract(complex3);
      complex2.add(989.1227683214);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex1.NaN.tan();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.pow(0.0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tan();
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.INF.multiply((-1611.3));
      complex5.I.atan();
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex0.INF.conjugate();
      Complex complex9 = complex6.ONE.asin();
      complex9.NaN.readResolve();
      complex7.ZERO.abs();
      complex6.NaN.readResolve();
      Complex complex10 = complex0.pow(complex1);
      complex7.NaN.acos();
      complex10.I.log();
      Complex complex11 = complex10.INF.createComplex(20.0, (-20.0));
      complex7.asin();
      complex11.isNaN();
      complex8.getReal();
      complex7.atan();
      Complex complex12 = complex6.atan();
      complex12.INF.getField();
      complex1.exp();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1270.199, 1270.199);
      Complex complex1 = new Complex(6.283185307179586, 0.0);
      Complex complex2 = complex1.ZERO.sinh();
      complex0.equals(complex1);
      complex1.subtract(complex0);
      complex2.ZERO.abs();
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex3.NaN.add(1.5824658870697021);
      Complex complex5 = complex3.I.reciprocal();
      complex2.cosh();
      complex3.getReal();
      complex1.multiply(0.0);
      complex5.tanh();
      complex4.reciprocal();
      complex0.multiply(1);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.NaN.multiply(complex1);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.115123, 7.115123);
      complex0.ONE.getField();
      complex0.negate();
      Complex complex1 = complex0.subtract(7.115123);
      Complex complex2 = complex1.ZERO.asin();
      complex2.ZERO.log();
      Complex complex3 = Complex.valueOf(7.115123, 0.0);
      Complex complex4 = complex3.ZERO.log();
      complex4.NaN.subtract(7.115123);
      complex4.ONE.sinh();
      complex3.I.asin();
      Complex complex5 = complex0.conjugate();
      complex5.cos();
      complex1.createComplex(3392.44733000297, (-1916.889494761));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(3618.9293644);
      complex0.ONE.toString();
      Complex complex1 = complex0.multiply((-2828.4132186327));
      Complex complex2 = complex1.divide(complex0);
      complex0.getReal();
      Complex complex3 = complex2.cosh();
      complex3.INF.toString();
      complex2.getArgument();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.NaN.sin();
      complex5.INF.conjugate();
      Complex complex6 = complex1.asin();
      complex6.getImaginary();
      complex1.equals("(1.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(1007);
      Complex complex2 = complex1.ONE.sqrt();
      complex1.I.conjugate();
      Complex complex3 = complex2.sinh();
      complex1.ONE.log();
      Complex complex4 = complex3.ONE.multiply(664);
      Complex complex5 = complex0.add((-1341.071877192));
      Complex complex6 = complex0.multiply((double) 1007);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.valueOf((-1341.071877192), (-1.0));
      complex7.I.multiply(complex8);
      Complex complex9 = complex0.ZERO.divide((-568.492034));
      complex6.divide(0.6527930498123169);
      complex5.sinh();
      complex4.add(complex7);
      complex6.ONE.asin();
      Complex complex10 = complex7.atan();
      complex10.multiply(complex1);
      complex9.sin();
      complex6.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.asin();
      complex3.ONE.negate();
      complex0.hashCode();
      complex4.multiply(17);
      complex4.ONE.getArgument();
      complex3.abs();
      Complex complex5 = complex1.atan();
      complex5.I.abs();
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex1.acos();
      complex0.tan();
      complex7.reciprocal();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex0.NaN.multiply(2407.654522564485);
      Complex.valueOf(197.33, 0.0);
      complex7.getArgument();
      complex7.atan();
      Complex complex10 = complex5.tanh();
      complex8.atan();
      complex6.tan();
      Complex complex11 = complex5.createComplex(2.9167986204137332E-182, 197.33);
      complex9.NaN.nthRoot(17);
      Complex complex12 = complex11.sin();
      complex9.getImaginary();
      complex9.getReal();
      complex12.divide(complex4);
      Complex complex13 = Complex.NaN;
      complex12.equals(complex13);
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.I.add(complex0);
      complex3.ONE.hashCode();
      complex0.abs();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.ONE.subtract(complex4);
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex1.multiply(complex0);
      complex7.INF.hashCode();
      Complex complex8 = complex7.ONE.add(complex5);
      Complex complex9 = complex2.I.log();
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex2.ONE.nthRoot(207);
      complex3.equals(complex7);
      complex1.subtract(complex8);
      Complex complex11 = complex7.divide((-681.3309));
      Complex complex12 = complex2.ZERO.multiply(1306.1);
      Complex complex13 = complex2.pow((-169.0));
      complex0.isNaN();
      complex9.getArgument();
      complex13.acos();
      Complex complex14 = complex4.add(complex0);
      complex8.toString();
      complex12.acos();
      complex3.readResolve();
      Complex complex15 = complex3.subtract(1.5707963267948966);
      complex15.sin();
      complex3.add(complex11);
      complex6.tan();
      complex10.toString();
      complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 502.1792652065799;
      Complex complex1 = complex0.ONE.pow(502.1792652065799);
      complex1.multiply(0.0);
      complex0.exp();
//      try { 
        complex1.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(992.3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.sqrt1z();
      complex1.negate();
      complex0.getReal();
      complex2.add(complex0);
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(2770.49982962, 2770.49982962);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(complex1);
      complex0.isInfinite();
      Complex complex4 = complex2.createComplex(2770.49982962, 2770.49982962);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.I.tanh();
      complex6.INF.negate();
      complex5.INF.negate();
      Complex complex7 = complex5.sqrt();
      complex7.ZERO.readResolve();
      Complex complex8 = complex5.ONE.subtract(complex2);
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex7.ONE.multiply(1297);
      Complex complex11 = complex1.cos();
      complex11.ZERO.conjugate();
      complex4.readResolve();
      Complex complex12 = complex10.divide(complex2);
      Complex complex13 = complex12.ZERO.subtract(complex2);
      Complex complex14 = complex3.divide(0.0);
      complex14.ONE.reciprocal();
      complex12.atan();
      Complex complex15 = complex8.exp();
      complex9.multiply(complex15);
      complex14.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-2357.7233133807));
      complex0.ONE.sqrt();
      complex0.getArgument();
      Complex complex1 = complex0.divide(5.874989409410614E-8);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sqrt1z();
      complex2.hashCode();
      complex0.divide(complex3);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-3782.4069755));
      Complex complex1 = Complex.valueOf(1293.902021321);
      Complex complex2 = complex0.cosh();
      complex0.ZERO.exp();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.ONE.multiply(0.0);
      complex4.I.divide(complex1);
      Complex complex5 = complex3.createComplex((-3782.4069755), 0.0);
      Complex complex6 = complex5.NaN.asin();
      complex6.hashCode();
      Complex complex7 = complex6.I.acos();
      complex7.I.add(0.0);
      Complex complex8 = complex2.NaN.atan();
      Complex complex9 = complex5.exp();
      complex9.getField();
      complex2.createComplex((-2167.287570916756), 632.8541133899);
      Complex complex10 = complex2.add(complex8);
      complex2.hashCode();
      complex5.abs();
      complex2.multiply(1);
      complex8.add(complex1);
      complex10.getImaginary();
      complex9.reciprocal();
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.ZERO.cos();
      complex1.ONE.hashCode();
      Complex complex2 = Complex.valueOf(1.0);
      complex2.NaN.asin();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex3.INF.sqrt();
      complex4.INF.toString();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.acos();
      complex6.I.readResolve();
      complex3.getReal();
      Complex complex7 = complex5.ONE.tan();
      complex7.hashCode();
      Complex.valueOf(598.9);
      complex2.INF.add((-3279.683365934504));
      complex7.INF.exp();
      complex5.hashCode();
      complex2.getImaginary();
      Complex complex8 = complex5.subtract(1.0);
      Complex.valueOf(Double.NaN);
      complex0.multiply(0.0);
      Complex complex9 = complex2.multiply(403);
      complex8.sin();
      Complex complex10 = complex2.tan();
      complex10.ZERO.add(complex8);
      complex9.isInfinite();
      complex8.divide(Double.NaN);
      Complex complex11 = complex4.divide(1.0);
      complex4.subtract(1692.396);
      complex11.subtract((-1.0));
      complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(2.1859129781586158E123);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex((-20.0), 2.1859129781586158E123);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.createComplex(0.0, 2.1859129781586158E123);
      Complex complex5 = complex4.sin();
      complex5.getField();
      Complex complex6 = complex1.log();
      Complex complex7 = complex0.add(complex6);
      complex3.conjugate();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 1.784536881359796E-8;
      Complex complex0 = Complex.valueOf(1.784536881359796E-8);
      double double1 = 2137.2999;
      double double2 = 0.0;
      complex0.INF.log();
//      try { 
        complex0.NaN.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(1632.49937413);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.toString();
      Complex complex2 = complex1.NaN.divide(complex0);
      complex0.hashCode();
      Complex complex3 = complex2.log();
      complex2.abs();
      complex3.I.sqrt1z();
      Complex complex4 = complex0.createComplex(1632.49937413, 1632.49937413);
      complex4.ONE.subtract(complex3);
      Complex complex5 = complex4.ZERO.pow(complex2);
      complex5.ONE.abs();
      Complex complex6 = Complex.valueOf(1632.49937413);
      complex6.INF.getArgument();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex2.log();
      complex2.getImaginary();
      Complex complex9 = complex8.divide(complex0);
      complex6.getArgument();
      Complex complex10 = complex7.atan();
      complex4.ZERO.toString();
      Complex complex11 = complex10.INF.add(1.9332630743320287E-8);
      Complex complex12 = complex11.I.multiply(0.0);
      complex12.multiply(complex8);
      Complex complex13 = complex11.ZERO.cosh();
      complex5.asin();
      complex3.sqrt();
      complex7.I.multiply(complex9);
      Object object0 = new Object();
      complex10.equals(object0);
      complex13.cos();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-978));
      Complex complex2 = complex0.NaN.add(complex1);
      double double0 = (-1596.6979);
      complex0.INF.createComplex(0.0, (-1596.6979));
      complex2.ZERO.toString();
//      try { 
        complex1.nthRoot((-806));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -806
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.INF.divide(839.31533473772);
      Complex complex3 = complex0.subtract(5.184023388254773E-130);
      Complex complex4 = complex3.ZERO.add(5.184023388254773E-130);
      complex4.I.exp();
      complex3.isInfinite();
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex0.subtract(5.184023388254773E-130);
      complex6.abs();
      complex1.ZERO.subtract(complex6);
      complex6.equals(complex0);
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex8.I.tanh();
      complex3.acos();
      complex0.getImaginary();
      complex6.getField();
      complex0.sqrt1z();
      complex6.isNaN();
      complex7.negate();
      complex2.multiply(5.184023388254773E-130);
      complex5.getImaginary();
      complex9.reciprocal();
      complex5.cosh();
      complex7.abs();
      Complex complex10 = complex6.log();
      complex10.multiply(0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1789.644238027321, (-429.5811514));
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex3.asin();
      complex1.INF.readResolve();
      complex2.NaN.nthRoot(1);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.NaN.subtract(2665.13832162);
      Complex complex7 = complex2.createComplex(1.0, 1.0);
      complex7.ZERO.tanh();
      Complex complex8 = complex7.ZERO.createComplex(0.0, 1);
      complex8.abs();
      Complex.valueOf((-1881.263366), (-1881.263366));
      complex1.hashCode();
      Complex complex9 = complex0.pow(complex2);
      Complex complex10 = complex9.INF.reciprocal();
      complex10.NaN.cos();
      Complex complex11 = complex0.exp();
      complex11.ONE.negate();
      Complex complex12 = complex0.atan();
      complex5.equals(complex11);
      complex4.hashCode();
      complex6.multiply(0.0);
      complex12.getField();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-4.392309439525734E-8));
      Complex complex1 = complex0.I.pow((-4.392309439525734E-8));
      Complex complex2 = complex0.I.multiply((-4.392309439525734E-8));
      Complex complex3 = complex2.ONE.sin();
      complex2.multiply(2176);
      Complex complex4 = complex3.reciprocal();
      complex2.INF.divide(complex1);
      complex0.createComplex((-4.392309439525734E-8), (-4.392309439525734E-8));
      Complex complex5 = complex0.cos();
      complex5.readResolve();
      complex4.atan();
      complex1.equals("ky#nBg*fbX]K#S :");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isNaN();
      complex0.subtract((-216.9273028242467));
      complex0.add(2.210442148596269E80);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex1.conjugate();
      complex3.I.log();
      Complex complex4 = complex2.reciprocal();
      complex1.isNaN();
      Complex complex5 = complex0.ONE.sqrt();
      Complex complex6 = complex5.ONE.tan();
      assertEquals(1.557407724654902, complex6.getReal(), 0.01);
      
      Complex complex7 = complex5.ZERO.tanh();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex5.I.multiply(complex3);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex5.getReal(), 0.01);
      
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.sqrt();
      double double0 = complex10.I.abs();
      complex2.cos();
      Complex complex11 = complex4.subtract(complex9);
      complex2.getArgument();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex12.NaN.asin();
      Complex complex14 = complex13.log();
      Complex complex15 = Complex.valueOf((-3208.0));
      double double1 = complex15.ONE.abs();
      assertEquals(double1, double0, 0.01);
      
      Complex complex16 = new Complex(1.0, (-1.0));
      Complex complex17 = complex0.I.subtract(complex16);
      assertEquals((-1.0), complex17.getReal(), 0.01);
      assertEquals(2.0, complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex15.sinh();
      Complex complex19 = complex18.ONE.cos();
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertTrue(complex18.equals((Object)complex13));
      
      Complex complex20 = complex3.reciprocal();
      complex0.getReal();
      String string0 = complex11.toString();
      assertSame(complex9, complex8);
      assertEquals("(NaN, NaN)", string0);
      
      complex20.atan();
      assertTrue(complex1.equals((Object)complex14));
  }
}
