/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:30:48 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.cos();
      Complex complex1 = new Complex((-562.034414), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3328680266667662E237));
      Complex complex1 = Complex.I;
      complex0.ZERO.subtract(complex1);
      Complex complex2 = new Complex(642.1831588574707, (-534.2887));
      Complex complex3 = complex0.ZERO.subtract(complex2);
      complex3.I.createComplex(2270.0618237, 1805.0249955);
      complex3.hashCode();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.subtract(933.943380232);
      complex5.pow(complex0);
      Complex complex6 = complex4.multiply(933.943380232);
      Complex.valueOf(642.1831588574707);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1060.4701315763239, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      complex2.nthRoot(299);
      complex1.pow((double) 299);
      complex1.cos();
      complex1.readResolve();
      Complex.valueOf((double) 299, (double) 299);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.ONE.multiply(2.0);
      Complex complex1 = Complex.valueOf((-1206.9508565748), (-20.0));
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex0.subtract(complex1);
      Complex.valueOf((-1206.9508565748), (-1.9648717830943396E-8));
      complex4.toString();
      complex3.atan();
      Complex complex5 = complex1.tan();
      complex2.abs();
      complex3.createComplex((-1206.9508565748), (-1373.9702));
      complex5.exp();
      complex5.atan();
      complex3.multiply(complex5);
      complex0.multiply((-4229.0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-1.2093068629412478E-8));
      Complex complex1 = Complex.valueOf(1416.879625958729, Double.POSITIVE_INFINITY);
      complex1.ONE.getField();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex.valueOf((-1496.420260100957), 1.0);
      Complex complex4 = complex0.ZERO.multiply(1416.879625958729);
      Complex complex5 = complex0.ZERO.sin();
      complex0.getField();
      complex5.I.getArgument();
      Complex complex6 = complex5.multiply(1416.879625958729);
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex0.I.add(complex8);
      complex9.INF.pow(complex4);
      complex0.acos();
      Complex complex10 = complex4.sqrt();
      complex0.multiply(1.0);
      complex9.subtract(1416.879625958729);
      Complex complex11 = complex7.asin();
      complex11.I.readResolve();
      Complex complex12 = complex3.tan();
      complex12.readResolve();
      complex4.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex.valueOf(64.455);
      complex0.readResolve();
      complex1.equals(complex0);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.I.cos();
      double double0 = Double.POSITIVE_INFINITY;
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.ONE.log();
      complex1.ZERO.hashCode();
      complex5.ONE.multiply(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.INF.getArgument();
      complex5.ONE.sin();
      complex0.reciprocal();
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex1.exp();
      double double1 = (-4259.281607354766);
      complex3.I.pow(complex6);
      complex8.pow((-4259.281607354766));
      int int0 = (-308);
//      try { 
        complex7.ONE.nthRoot((-308));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -308
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8401159516008676E283);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.INF.multiply(122);
      Complex complex3 = complex2.INF.log();
      complex3.INF.conjugate();
      Complex complex4 = complex0.sqrt1z();
      complex4.ONE.atan();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex6.cosh();
      complex7.I.log();
      Complex.valueOf(2.8401159516008676E283, 1.0);
      complex0.toString();
      complex2.tan();
      Complex complex8 = complex5.sin();
      complex8.INF.tanh();
      complex0.toString();
      complex0.sinh();
      complex1.createComplex(122, 1.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.negate();
//      try { 
        complex0.ZERO.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      ((Complex) object0).ZERO.divide(Double.POSITIVE_INFINITY);
      complex0.equals(object0);
      Complex complex1 = complex0.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.903174064539538E203));
      Complex complex1 = complex0.NaN.divide((-9.903174064539538E203));
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.multiply((-9.903174064539538E203));
      complex3.I.createComplex((-9.903174064539538E203), (-9.903174064539538E203));
      Complex complex4 = complex3.exp();
      complex4.hashCode();
      Complex complex5 = complex2.I.pow((-2529.39373886));
      double double0 = (-20.0);
      Complex complex6 = complex0.acos();
      complex1.I.toString();
      Complex complex7 = Complex.valueOf((-20.0), (-20.0));
      complex7.ZERO.toString();
      Complex complex8 = complex7.ONE.sin();
      complex8.NaN.sqrt();
      complex6.sqrt1z();
      complex8.ONE.pow((-329.6932574418));
      complex4.tanh();
      Complex complex9 = complex2.multiply((-2726));
      complex9.ZERO.divide(complex5);
      complex9.INF.subtract(complex4);
//      try { 
        complex5.nthRoot((-129));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -129
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-10555.709821578417));
      complex0.asin();
      complex0.conjugate();
      Complex complex1 = new Complex(-0.0, (-10555.709821578417));
      Complex complex2 = complex1.reciprocal();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      complex0.ZERO.negate();
//      try { 
        complex0.NaN.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 2703.716004783074;
      Complex complex0 = Complex.valueOf(662276.5789899649);
      Complex complex1 = Complex.I;
      complex1.multiply(662276.5789899649);
      complex0.log();
      complex0.getReal();
      Complex complex2 = new Complex(2703.716004783074, 2703.716004783074);
      complex2.sqrt1z();
      Complex complex3 = Complex.valueOf(2703.716004783074, 2703.716004783074);
//      try { 
        complex3.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex((-2813.0), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.asin();
      complex4.conjugate();
      complex0.tan();
      Complex complex5 = Complex.valueOf(0.18430934037147045);
      complex2.subtract(complex1);
      Complex complex6 = Complex.ONE;
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-547.0), 5.68253547942899E295);
      complex1.sinh();
      complex1.asin();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      complex1.ONE.subtract((-1544.090434375377));
      complex0.equals(complex1);
      complex0.ZERO.tanh();
      Complex complex2 = complex0.multiply((-1544.090434375377));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2232.84);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.ZERO.divide((-1925.4458486437));
      complex3.INF.abs();
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.ONE;
      complex4.sinh();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.divide(complex2);
      complex4.nthRoot(2080);
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      complex0.ZERO.asin();
      Complex complex3 = complex2.conjugate();
      complex1.ONE.tanh();
      Complex complex4 = complex3.divide((-4289.997987086));
      complex4.asin();
      complex2.reciprocal();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(2632.65763181);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.divide(Double.NaN);
      complex3.abs();
      Complex complex4 = new Complex(385.05805879);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ONE;
      complex6.INF.nthRoot(2054);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.sinh();
      complex3.tan();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.NaN;
      complex10.divide((-3078.313826945371));
      complex7.reciprocal();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.sqrt1z();
      complex13.reciprocal();
      Complex complex14 = Complex.valueOf((-232.98));
      complex8.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      Complex complex1 = complex0.I.sinh();
      complex1.reciprocal();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(2387.911, (-4985573.465600001));
      Complex complex1 = new Complex((-529.0), 2387.911);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex5.ONE.divide(2387.911);
      complex5.readResolve();
      complex5.multiply((-4985573.465600001));
      Complex complex8 = complex5.NaN.negate();
      Complex complex9 = complex8.ZERO.asin();
      complex0.asin();
      Complex complex10 = complex4.multiply(complex5);
      Complex.valueOf((-4985573.465600001), 0.053453370119184385);
      Complex complex11 = complex5.atan();
      Complex complex12 = complex11.pow(complex9);
      complex3.tan();
      Complex.valueOf((-4985573.465600001));
      complex6.subtract(complex2);
      complex12.reciprocal();
      complex11.add(complex7);
      complex10.exp();
      complex4.pow((-4985573.465600001));
      complex10.add(0.053453370119184385);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-2293.36478213319), (-2293.36478213319));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.pow(complex1);
      complex2.ZERO.tan();
      complex0.NaN.divide(complex2);
      Complex complex3 = complex0.INF.cos();
      complex3.ZERO.abs();
      Complex complex4 = complex0.negate();
      complex4.I.sqrt1z();
      complex4.I.getField();
      Complex complex5 = complex4.ONE.sinh();
      complex5.negate();
      complex0.tan();
      complex3.asin();
      complex3.exp();
      Complex complex6 = complex2.sinh();
      Object object0 = new Object();
      complex1.equals(object0);
      complex1.sin();
      complex6.atan();
      Complex.valueOf(858.7926215);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.tanh();
      Complex complex1 = new Complex((-3099.62563), 2232.84);
      Complex complex2 = complex1.multiply(complex0);
      complex2.toString();
      Complex complex3 = complex2.divide(3280.4087103559);
      complex3.abs();
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.ONE;
      complex1.sinh();
      complex5.tan();
      Complex complex6 = Complex.NaN;
      complex4.divide(5.726036941135634E176);
      complex3.reciprocal();
      Complex.valueOf(1921.0508358);
      complex3.getReal();
      Complex complex7 = Complex.valueOf(463.684245, 2.0);
      complex7.subtract((-801.5952355208127));
      Complex.valueOf(5.726036941135634E176, 2.260329438286135E-6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(2232.84);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.toString();
      Complex complex3 = complex1.ZERO.divide(1154.5035837482);
      complex3.INF.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.NaN.multiply(complex1);
      Complex complex6 = complex5.INF.multiply(2232.84);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.I.log();
      complex4.divide(complex6);
      complex3.getReal();
      complex0.INF.sqrt1z();
      Complex complex7 = complex3.multiply(complex0);
      complex7.INF.exp();
      complex5.isInfinite();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1524.48));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.NaN.pow(4573.43);
      Complex.valueOf((-1524.48));
      Complex complex3 = Complex.ZERO;
      complex3.nthRoot(327);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.tanh();
      complex4.subtract((-0.7615941559557649));
      Complex complex6 = complex2.cos();
      Complex complex7 = Complex.valueOf((-620.5267352), (-0.7615941559557649));
      Complex.valueOf((-1994.5853437960961), 3153.4651355);
      complex6.getField();
      complex4.readResolve();
      complex1.equals(complex3);
      Complex.valueOf(590.3967163, (-20.0));
      complex4.add(complex7);
      complex5.createComplex(Double.POSITIVE_INFINITY, (-1994.5853437960961));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1655017260636669E-4));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.acos();
      complex2.sinh();
      Complex complex3 = complex0.atan();
      complex0.tan();
      Complex complex4 = Complex.ZERO;
      complex4.atan();
      Complex complex5 = complex1.add(complex3);
      complex4.asin();
      Complex complex6 = complex4.cos();
      complex5.multiply(629.10747);
      complex6.getReal();
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getField();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.add(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex2.tanh();
      complex4.I.sin();
      Complex.valueOf(Double.NaN);
      Complex complex5 = complex2.reciprocal();
      complex2.INF.toString();
      complex2.NaN.multiply(0.0);
      complex5.getField();
      Complex complex6 = complex2.divide(3786.50263089);
      complex1.ZERO.nthRoot(552);
      complex1.I.multiply(0.0);
      complex6.subtract(3786.50263089);
      complex1.createComplex(3786.50263089, (-1.0));
      Complex complex7 = complex5.divide(complex6);
      complex7.INF.cosh();
      complex7.cosh();
      complex3.I.add(complex7);
      complex5.toString();
      complex0.multiply((-2868.2));
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex8.getReal();
      Complex complex9 = Complex.ZERO;
      complex3.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2703.716004783074);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(4573.43, 4573.43);
      Complex complex3 = complex2.pow(4573.43);
      Complex.valueOf(3.619891246849381E103);
      complex0.exp();
      complex3.nthRoot(1771);
      complex1.conjugate();
      Complex complex4 = complex3.tanh();
      complex2.subtract(0.0);
      complex4.cos();
      Complex.valueOf(4573.43, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ZERO;
      complex5.tan();
      Complex complex6 = Complex.ZERO;
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1524.48));
      Complex complex1 = new Complex((-1524.48), 2232.84);
      Complex complex2 = complex0.multiply(361);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.subtract(complex1);
      complex3.pow(complex0);
      complex4.subtract((-881.252735135));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      complex1.ZERO.add((-1586.0));
      complex1.INF.log();
      Complex complex2 = Complex.valueOf((-471.842), (-471.842));
      Complex complex3 = complex2.ZERO.cosh();
      complex3.ONE.multiply(552);
      complex3.sinh();
      Complex complex4 = complex2.negate();
      complex2.ONE.multiply((-471.842));
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.conjugate();
      complex6.INF.negate();
      Complex complex7 = Complex.valueOf((-471.842), (-365.0861650797));
      Complex complex8 = complex7.ONE.pow(complex4);
      Complex complex9 = complex8.ZERO.tan();
      complex9.NaN.exp();
      complex5.I.multiply((-801));
      complex6.log();
      Complex complex10 = complex2.add((-471.842));
      complex10.INF.negate();
      Complex complex11 = complex6.sinh();
      complex11.ZERO.acos();
      complex11.NaN.cosh();
      complex5.createComplex((-471.842), (-471.842));
      complex6.reciprocal();
      complex4.tan();
      Complex complex12 = Complex.valueOf((double) (-801), 1806.09642365);
      complex12.log();
      complex12.abs();
      Complex complex13 = Complex.valueOf((-1586.0), (-1586.0));
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = new Complex((-20.0), 2.0);
      complex0.equals(complex2);
      Complex complex3 = complex0.asin();
      Complex complex4 = new Complex(863.64564, 2.0);
      Complex complex5 = complex4.asin();
      complex5.nthRoot(1);
      complex3.sinh();
      complex4.tanh();
      Complex complex6 = new Complex(20.0);
      Complex complex7 = complex6.tanh();
      complex1.acos();
      Complex complex8 = Complex.INF;
      complex8.multiply((-6.283185307179586));
      Complex complex9 = Complex.ONE;
      complex9.negate();
      Complex complex10 = new Complex(0.9944647694482901, (-2088.0));
      complex10.asin();
      Complex complex11 = complex7.multiply((-635));
      complex11.divide(complex5);
      complex6.pow((-0.941880086720989));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      Complex complex1 = complex0.I.sinh();
      complex0.equals("/Xfnw|a]q!Y|[W>");
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex3.divide((-1992.706282167));
      Complex complex5 = Complex.NaN;
      complex5.abs();
      Complex complex6 = complex3.log();
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.multiply((-9.057188711519498));
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.log();
      complex3.getReal();
      complex3.sqrt1z();
      Complex complex12 = Complex.NaN;
      complex7.multiply(complex4);
      complex9.exp();
      complex8.isInfinite();
      complex2.divide(complex11);
      complex6.sqrt();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = new Complex(0.6793810129165649, 3292.5802921);
      Complex complex2 = complex1.multiply(361);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = Complex.ONE;
      complex3.subtract(complex4);
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = complex6.pow(complex5);
      complex5.subtract((-1.1655017260636669E-4));
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      Complex complex1 = complex0.I.sinh();
      complex0.equals("/Xfnw|a]q!Y|[W>");
      complex0.asin();
      Complex complex2 = complex0.ZERO.asin();
      complex2.ONE.nthRoot(1);
      complex0.NaN.sinh();
      Complex complex3 = complex2.I.tanh();
      complex3.INF.tanh();
      Complex complex4 = complex0.acos();
      Complex.valueOf(380.1174620503499, (-5.808261186903479E-8));
      complex1.getField();
      complex4.readResolve();
      Object object0 = complex1.readResolve();
      complex4.equals(object0);
      Complex complex5 = Complex.valueOf(969.7130372889042, (-4289.997987086));
      complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      complex0.I.sinh();
      complex0.equals("/Xfnw|a]q!Y|[W>");
      Complex complex1 = complex0.asin();
      complex1.toString();
      Complex complex2 = complex0.divide((-4289.997987086));
      complex0.abs();
      complex0.log();
      Complex complex3 = complex2.multiply(complex1);
      complex0.multiply(4289.997987086);
      Complex complex4 = complex1.log();
      complex1.getReal();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex((-1.5707963267948966), 4289.997987086);
      complex2.multiply(complex8);
      complex1.exp();
      complex3.isInfinite();
      Complex complex9 = Complex.ZERO;
      complex9.divide(complex4);
      complex1.sqrt();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getField();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.add(complex0);
      Complex complex2 = complex0.sinh();
      complex0.ZERO.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.I.sin();
      complex4.NaN.subtract(Double.NaN);
      Complex complex5 = complex2.reciprocal();
      complex2.INF.toString();
      complex5.NaN.getArgument();
      complex2.NaN.multiply(0.0);
      complex5.getField();
      Complex complex6 = complex2.divide(3786.50263089);
      Complex complex7 = Complex.valueOf((-20.0));
      complex7.subtract(0.0);
      complex0.cos();
      Complex complex8 = Complex.valueOf(3.994899417156314E14, (-1.154629885168314E-7));
      Complex complex9 = Complex.valueOf(969.7130372889042, 2.0913091410899236);
      Complex complex10 = Complex.INF;
      complex10.getField();
      complex9.readResolve();
      complex6.equals(complex5);
      Complex.valueOf((-5169.5), (-2464.7353685));
      complex8.add(complex6);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1524.48));
      Complex complex1 = complex0.ONE.atan();
      complex1.NaN.pow(4573.43);
      Complex.valueOf((-1524.48));
      Complex complex2 = complex1.NaN.exp();
      complex2.ZERO.nthRoot(1771);
      Complex complex3 = complex0.conjugate();
      complex3.I.tanh();
      complex0.ONE.subtract((-2.990535475079021E-239));
      complex3.cos();
      Complex complex4 = Complex.valueOf((-1524.48), (-1524.48));
      Complex.valueOf(969.7130372889042, (-1524.48));
      complex4.NaN.getField();
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      Complex.valueOf((-1524.48), 181.47862648267);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      complex0.I.sinh();
      complex0.equals("/Xfnw|a]q!Y|[W>");
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.asin();
      complex2.ONE.nthRoot(1);
      complex0.NaN.sinh();
      Complex complex3 = complex2.I.tanh();
      complex3.INF.tanh();
      Complex complex4 = complex0.acos();
      complex4.ONE.multiply(0.0);
      Complex complex5 = complex1.negate();
      complex0.asin();
      Complex complex6 = complex4.multiply((-2045208767));
      complex2.divide(complex6);
      complex5.pow((double) 1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.002774317612589E-8));
      Complex complex1 = complex0.NaN.add((-5.002774317612589E-8));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.subtract((-1664.4083));
      Complex complex4 = complex0.NaN.multiply(216.52557258692644);
      complex4.INF.subtract((-1664.4083));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.subtract(complex5);
      complex6.ONE.getArgument();
      Complex complex7 = complex5.log();
      Complex complex8 = complex1.multiply(complex7);
      complex8.acos();
      complex7.add((-1664.4083));
      complex3.subtract(complex8);
      complex0.abs();
      complex3.acos();
      Complex complex9 = Complex.valueOf(216.52557258692644);
      complex9.multiply((-806.397896581969));
      complex0.sqrt();
      complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(2703.716004783074, 2703.716004783074);
      complex0.getReal();
      complex0.conjugate();
      Complex complex1 = complex0.tan();
      Complex.valueOf(2703.716004783074);
      complex1.sinh();
      complex0.tan();
      complex1.divide((-1323.647));
      complex0.reciprocal();
      Complex.valueOf(2703.716004783074);
      complex1.getReal();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.divide(3.5561882168622105E-4);
      complex1.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.ZERO;
      complex2.multiply(3.5561882168622105E-4);
      Complex complex4 = complex2.log();
      complex4.getReal();
      Complex complex5 = Complex.INF;
      complex4.ZERO.conjugate();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.multiply(complex4);
      complex1.divide(complex2);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex2.cosh();
      complex4.toString();
      Complex complex10 = complex1.add(2.0913091410899236);
      complex3.abs();
      Complex complex11 = complex5.exp();
      complex11.getField();
      complex8.sqrt();
      complex9.tan();
      complex10.exp();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getField();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.add(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.I.sin();
      complex5.NaN.subtract(Double.NaN);
      Complex complex6 = complex2.reciprocal();
      complex2.INF.toString();
      complex6.NaN.getArgument();
      complex2.NaN.multiply(0.0);
      complex6.getField();
      Complex complex7 = complex2.divide(3786.50263089);
      complex1.ZERO.nthRoot(552);
      Complex complex8 = complex1.I.multiply(0.0);
      Complex complex9 = complex7.subtract(3786.50263089);
      Complex complex10 = complex1.createComplex(3786.50263089, (-1.0));
      Complex complex11 = complex6.divide(complex7);
      complex11.INF.cosh();
      complex11.cosh();
      complex3.I.add(complex11);
      complex6.toString();
      complex3.add(Double.NaN);
      complex8.abs();
      complex9.exp();
      complex7.getField();
      complex10.sqrt();
      complex10.tan();
      complex7.exp();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      complex0.I.sinh();
      complex0.equals("/Xfnw|a]q!Y|[W>");
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.ONE.atan();
      complex3.ONE.nthRoot(1);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.I.tanh();
      complex6.INF.tanh();
      complex4.add(0.0);
      Complex complex7 = complex5.acos();
      complex7.ONE.multiply(0.0);
      Complex complex8 = complex5.subtract((-4289.997987086));
      complex1.multiply(complex4);
      complex1.exp();
      complex0.isInfinite();
      complex8.divide(complex6);
      complex3.sqrt();
      complex5.getField();
      complex3.multiply(108965657);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.002774317612589E-8));
      complex0.NaN.add((-5.002774317612589E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.acos();
      complex0.getField();
      complex0.getReal();
      complex1.conjugate();
      complex0.tan();
      Complex.valueOf((-5.002774317612589E-8));
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.INF;
      complex5.divide((-5.002774317612589E-8));
      Complex.valueOf((-5.002774317612589E-8));
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2703.716004783074);
      complex1.abs();
      complex0.log();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.multiply(3.5561882168622105E-4);
      Complex complex4 = new Complex(Double.NaN, 0.009216074639485816);
      Complex complex5 = complex4.log();
      complex1.getReal();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.valueOf(3713.61514241664, 2703.716004783074);
      Complex complex10 = complex9.multiply(complex5);
      complex10.exp();
      complex4.isInfinite();
      Complex complex11 = Complex.INF;
      complex10.divide(complex11);
      Complex complex12 = new Complex(3713.61514241664);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.INF.divide(complex1);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.pow(complex2);
      complex3.tan();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.ONE.tan();
      complex6.I.atan();
      Complex complex7 = Complex.valueOf((-1662.22503834377), (-1662.22503834377));
      complex7.NaN.asin();
      complex7.ZERO.tanh();
      complex7.I.divide((-1662.22503834377));
      complex4.subtract(complex0);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.divide(3.5561882168622105E-4);
      complex1.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.multiply(3.5561882168622105E-4);
      Complex complex5 = complex2.log();
      complex5.getReal();
      Complex complex6 = Complex.INF;
      complex5.ZERO.conjugate();
      Complex complex7 = complex6.sqrt1z();
      complex7.multiply(complex5);
      complex1.exp();
      complex3.isInfinite();
      complex4.divide(complex3);
      Complex complex8 = new Complex((-992.68309));
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex0.getField();
//      try { 
        complex1.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      complex0.I.sinh();
      complex0.equals("/Xfnw|a]q!Y|[W>");
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.ONE.atan();
      complex3.ONE.nthRoot(1);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.I.tanh();
      complex6.INF.tanh();
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = complex5.acos();
      complex8.ONE.multiply(0.0);
      complex5.subtract((-4289.997987086));
      Complex complex9 = complex1.negate();
      Complex complex10 = complex0.asin();
      complex10.ZERO.divide(complex9);
      Complex complex11 = complex10.ONE.add(complex2);
      complex4.isNaN();
      complex2.abs();
      complex7.getArgument();
      Complex complex12 = complex5.acos();
      complex12.multiply(Double.POSITIVE_INFINITY);
      complex11.sqrt();
      Complex.valueOf(Double.POSITIVE_INFINITY, 914.88626);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.ONE.tanh();
      complex4.acos();
      complex0.ONE.getField();
      complex0.getReal();
      complex0.conjugate();
      complex3.tan();
      Complex complex5 = Complex.valueOf(1.0);
      complex5.INF.sinh();
      Complex complex6 = complex1.INF.tan();
      Complex complex7 = complex2.divide((-620.5267352));
      complex7.ZERO.reciprocal();
      Complex.valueOf(0.0);
      complex1.getReal();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.asin();
      complex0.asin();
      complex0.atan();
      complex2.nthRoot(1);
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.sinh();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.tanh();
      complex5.tanh();
      complex4.pow(20.0);
      complex5.multiply(0.0);
      Complex complex6 = complex2.subtract(0.0);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex2.asin();
      Complex complex9 = Complex.INF;
      complex9.add(complex3);
      complex8.isNaN();
      complex6.abs();
      complex7.getArgument();
      complex9.acos();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1406.0);
      complex0.I.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.I.tanh();
      complex4.ONE.abs();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.tanh();
      Complex.valueOf(1406.0, 1406.0);
      complex2.getField();
      Complex complex7 = Complex.NaN;
      complex7.getReal();
      Complex complex8 = complex5.conjugate();
      complex2.tan();
      Complex.valueOf(2.0000003738601295);
      complex8.sinh();
      complex6.tan();
      Complex complex9 = Complex.ONE;
      Complex.valueOf(0.0);
      Complex complex10 = Complex.valueOf((-620.5267352));
      complex10.getReal();
      complex10.add(2.0000003738601295);
      complex2.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      complex0.I.sinh();
      complex0.equals("/Xfnw|a]q!Y|[W>");
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.ONE.atan();
      complex3.ONE.nthRoot(1);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.I.tanh();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex6.pow(0.0);
      Complex complex9 = complex5.acos();
      Complex complex10 = complex9.ONE.multiply(0.0);
      Complex complex11 = complex3.createComplex(0.0, (-84.90251277012935));
      Complex complex12 = complex0.divide(complex2);
      Complex complex13 = complex1.cosh();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex14.cosh();
      complex10.toString();
      complex12.divide(0.0);
      complex8.add(0.0);
      complex12.abs();
      complex7.exp();
      complex10.getField();
      complex13.sqrt();
      complex15.tan();
      complex4.exp();
      complex3.sqrt1z();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2117.9));
      Complex complex2 = complex0.ONE.add(complex1);
      complex0.INF.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.asin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex6.I.acos();
      complex6.ZERO.nthRoot(1);
      complex7.add((-2117.9));
      complex6.getImaginary();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex4.cosh();
      complex10.ONE.sqrt();
      complex1.getReal();
      Complex.valueOf(1719.72847219305);
      Complex complex11 = complex5.cosh();
      complex11.NaN.nthRoot(242);
      complex2.toString();
      complex11.isNaN();
      complex4.nthRoot(242);
      complex3.getImaginary();
      complex8.subtract(complex4);
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ZERO.atan();
      complex5.INF.reciprocal();
      Complex complex6 = complex3.ONE.tan();
      Object object0 = new Object();
      complex0.equals(object0);
      complex2.acos();
      complex3.I.subtract(1.0);
      complex6.abs();
      complex3.getReal();
      complex6.getArgument();
      complex1.asin();
      complex4.multiply(2452);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = 3322.61237660085;
      Complex complex0 = Complex.valueOf(3322.61237660085, 3322.61237660085);
      Complex complex1 = complex0.exp();
      // Undeclared exception!
      complex1.ONE.nthRoot(5068);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.ONE.tanh();
      complex4.acos();
      complex0.ONE.getField();
      complex0.getReal();
      complex0.conjugate();
      complex3.tan();
      Complex complex5 = Complex.valueOf(1.0);
      complex5.INF.sinh();
      complex1.INF.tan();
      complex2.divide((-620.5267352));
      Complex.valueOf(0.0);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1251.42882383079));
      complex1.NaN.readResolve();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.ONE;
      complex2.add(complex3);
      complex2.I.hashCode();
      Complex complex4 = complex1.add((-1251.42882383079));
      Complex complex5 = complex2.tanh();
      complex0.createComplex((-1251.42882383079), 0.08154398202896118);
      Complex complex6 = complex5.INF.conjugate();
      complex6.sqrt1z();
      Complex complex7 = complex0.createComplex((-1251.42882383079), (-1251.42882383079));
      Complex complex8 = Complex.valueOf((-1251.42882383079));
      Complex complex9 = complex8.I.tan();
      complex8.NaN.pow(complex4);
      Complex complex10 = complex3.I.conjugate();
      complex10.NaN.negate();
      complex0.multiply(Double.NaN);
      Complex.valueOf(Double.NaN);
      Complex complex11 = complex9.tanh();
      complex7.sin();
      complex3.add(1271.54);
      complex7.getArgument();
      Complex complex12 = complex7.multiply(1);
      Complex complex13 = complex9.sqrt1z();
      complex13.negate();
      complex11.asin();
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(2679.0, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.acos();
      complex1.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex0.ONE.add(complex1);
      complex0.I.tanh();
      complex4.NaN.readResolve();
      complex2.ONE.subtract(0.0);
      Complex complex5 = complex0.ZERO.subtract(Double.NaN);
      complex5.divide(complex4);
      Complex complex6 = complex5.ZERO.subtract(complex1);
      complex6.ONE.readResolve();
      complex0.asin();
      Complex complex7 = complex0.asin();
      complex7.NaN.add(complex3);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.NaN.tan();
      complex2.I.conjugate();
      complex2.INF.asin();
      complex2.ONE.toString();
      complex3.ONE.getField();
      complex0.ONE.exp();
      complex0.toString();
      complex1.tanh();
      Complex complex4 = complex1.conjugate();
      complex4.I.acos();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(2703.716004783074, 2703.716004783074);
      Complex complex1 = complex0.multiply(361);
      Complex complex2 = complex1.subtract(complex0);
      complex1.subtract(complex0);
      complex1.pow(complex0);
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.I.add(complex0);
      complex0.getField();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex1.NaN.cos();
      Complex complex8 = Complex.valueOf((-332.5176951379), 0.32129061222076416);
      Complex complex9 = complex8.INF.sqrt1z();
      complex9.ONE.reciprocal();
      complex6.ZERO.abs();
      Complex complex10 = complex8.I.divide(complex5);
      complex10.NaN.negate();
      complex8.I.abs();
      Complex complex11 = complex0.subtract(0.0);
      complex2.readResolve();
      complex10.NaN.reciprocal();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      Complex complex13 = complex12.sin();
      complex3.sqrt();
      complex1.multiply((-3113));
      Complex complex14 = complex13.divide((double) (-3113));
      complex14.INF.multiply(0.32129061222076416);
      complex11.getField();
      complex6.multiply(complex2);
      Complex complex15 = complex2.exp();
      complex15.ZERO.multiply(2);
      complex7.getField();
      complex6.subtract(complex8);
      complex10.getArgument();
      complex15.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1156.459386476104, 1.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.ZERO.cos();
      complex2.I.multiply(complex1);
      complex0.hashCode();
      complex1.isInfinite();
      Complex complex4 = complex0.exp();
      complex3.getArgument();
      Complex complex5 = complex4.tanh();
      complex5.INF.log();
      complex3.INF.tan();
      complex0.reciprocal();
      complex4.subtract(980.490499115);
      complex2.multiply(complex3);
      complex4.getField();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.reciprocal();
      complex0.ONE.tan();
      Complex.valueOf((-2007.2638));
      Complex complex1 = complex0.cosh();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(2232.84);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.toString();
      Complex complex3 = complex1.ZERO.divide(1154.5035837482);
      complex3.INF.abs();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.NaN.multiply(complex1);
      complex5.INF.multiply(2232.84);
      complex5.I.log();
      complex3.getReal();
      complex0.INF.sqrt1z();
      Complex complex6 = complex3.multiply(complex0);
      complex6.INF.exp();
      complex5.isInfinite();
      complex3.divide(complex2);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.exp();
      complex1.I.toString();
      Complex complex2 = complex1.ZERO.add(0.0);
      complex1.ONE.readResolve();
      Complex complex3 = complex1.subtract(complex0);
      complex1.INF.asin();
      Complex.valueOf(0.0, 0.0);
      complex0.toString();
      complex1.ONE.acos();
      complex2.nthRoot(1);
      Complex complex4 = Complex.valueOf(0.0, 3687.579339881715);
      complex4.INF.nthRoot(2320);
      complex4.ONE.cos();
      complex2.readResolve();
      Complex complex5 = complex4.add(0.0);
      complex5.ONE.sqrt1z();
      Complex complex6 = complex1.add(20.0);
      Complex complex7 = complex3.divide((double) 1);
      complex1.readResolve();
      Complex complex8 = complex7.I.createComplex(6.283185307179586, 0.0);
      complex8.acos();
      Complex complex9 = complex6.asin();
      complex7.getArgument();
      complex9.getField();
      Complex.valueOf(0.0, 0.0);
      complex9.isNaN();
      complex0.cos();
      Complex.valueOf((double) 1, 0.0);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getField();
      Complex complex1 = complex0.tan();
//      try { 
        complex1.nthRoot((-1129));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,129
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(1196.0);
      complex1.NaN.reciprocal();
      Complex complex2 = Complex.valueOf(2110.3873);
      complex1.NaN.abs();
      complex1.NaN.log();
      complex0.INF.subtract(799.450065972);
      complex2.INF.getField();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.conjugate();
      complex4.ONE.pow(2110.3873);
      complex4.pow(complex1);
      Complex complex5 = complex4.log();
      complex5.I.createComplex(0.0, (-492.892577));
      complex3.getArgument();
      complex3.isInfinite();
      complex1.getArgument();
      Complex.valueOf(2110.3873);
      complex3.log();
      complex0.subtract(complex1);
      complex1.exp();
      Complex complex6 = Complex.I;
      Complex complex7 = complex3.pow(complex6);
      complex7.ONE.cosh();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-5058.75));
      Complex complex1 = complex0.I.conjugate();
      complex0.NaN.createComplex((-5058.75), (-5058.75));
      complex0.ONE.readResolve();
      complex0.hashCode();
      complex0.abs();
      complex0.isInfinite();
      complex1.exp();
      complex0.getImaginary();
      Complex complex2 = complex0.createComplex(0.0, (-2084.6293572));
      Complex complex3 = complex2.log();
      complex0.divide((-5058.75));
      complex3.getArgument();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0065901934522996E229), 662.6747);
      Complex complex1 = complex0.multiply(1387);
      complex1.NaN.toString();
      Complex complex2 = complex0.I.sinh();
      complex2.I.subtract((-1.0065901934522996E229));
      Complex complex3 = complex1.add(complex0);
      complex1.NaN.conjugate();
      Complex complex4 = complex3.ZERO.cos();
      complex4.INF.sin();
      Complex complex5 = complex1.ZERO.createComplex(0.0, 0.0);
      complex1.I.readResolve();
      complex5.INF.abs();
      Complex complex6 = new Complex(662.6747, 1107.2);
      Complex complex7 = complex5.NaN.multiply(complex6);
      complex5.INF.hashCode();
      complex0.cosh();
      complex1.atan();
      complex0.getImaginary();
      complex5.getArgument();
      complex7.multiply(662.6747);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex0.getImaginary();
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex1.subtract(6.283185307179586);
      Complex.valueOf(6.283185307179586);
      Complex complex5 = complex3.NaN.add(6.283185307179586);
      complex1.I.cosh();
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex6.ONE.sqrt();
      complex7.NaN.abs();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex2.exp();
      complex9.I.tan();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex1.cosh();
      complex5.reciprocal();
      complex10.add(6.283185307179586);
      complex2.abs();
      Complex.valueOf(1.0, Double.NaN);
      Complex.valueOf(0.0, 6.283185307179586);
      complex4.multiply(1367.4698963781);
      complex8.add(complex1);
      complex4.getImaginary();
      Complex complex12 = complex11.createComplex((-3.4631935816990754E-243), 4100.43);
      complex12.INF.divide(complex11);
      complex9.readResolve();
      Complex complex13 = complex8.cosh();
      complex13.sqrt();
      Complex.valueOf(0.0);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.NaN;
      complex2.NaN.readResolve();
      Complex complex3 = complex0.subtract(complex2);
      complex0.readResolve();
      complex0.INF.hashCode();
      Complex complex4 = complex3.multiply(6.283185307179586);
      complex2.getArgument();
      Complex complex5 = complex3.tan();
      complex1.ZERO.nthRoot(3060);
      complex5.NaN.toString();
      Complex complex6 = complex3.divide(complex0);
      complex6.INF.add(complex1);
      complex6.I.toString();
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex7.nthRoot(3060);
      complex0.toString();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex1.divide(Double.NaN);
      complex9.subtract(complex5);
      Complex complex10 = complex2.subtract(6.283185307179586);
      complex10.I.toString();
      complex4.negate();
      Object object0 = complex8.readResolve();
      complex1.equals(object0);
      complex9.INF.toString();
      Complex complex11 = Complex.valueOf(2438.95038662, (-1.0));
      complex9.multiply(complex11);
      complex4.multiply(3060);
      complex4.getField();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double double0 = (-1702.738083);
      Complex complex0 = Complex.valueOf((-1702.738083), (-1702.738083));
      complex0.readResolve();
      complex0.subtract(0.0);
      Complex complex1 = complex0.NaN.multiply((-1702.738083));
      complex1.INF.createComplex((-1702.738083), 4986.9479);
      complex0.atan();
      int int0 = 0;
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.INF.createComplex((-1702.738083), 1309.550471650177);
      Complex complex4 = complex3.NaN.createComplex((-1702.738083), 0.0);
      complex4.getArgument();
//      try { 
        complex0.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.INF.log();
      Complex complex2 = complex1.I.tan();
      complex0.NaN.hashCode();
      complex2.negate();
      Complex complex3 = new Complex(4.471273900208441E233, (-508.8954));
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex0.asin();
      complex5.ZERO.readResolve();
      complex4.I.multiply(720.895642);
      complex5.getField();
      complex4.I.negate();
      Complex complex6 = complex3.ZERO.pow((-2.1141094074221325E-276));
      Complex complex7 = complex5.subtract((-508.8954));
      complex7.ONE.multiply(0);
      Complex complex8 = complex7.atan();
      complex8.NaN.reciprocal();
      complex7.ZERO.tanh();
      Complex complex9 = complex7.ZERO.conjugate();
      Complex complex10 = complex4.asin();
      Complex complex11 = complex10.subtract((-2.1141094074221325E-276));
      complex11.hashCode();
      complex0.sinh();
      Complex complex12 = complex6.conjugate();
      complex7.getReal();
      Complex complex13 = complex7.negate();
      Complex complex14 = complex13.ONE.multiply(1);
      complex9.acos();
      complex12.subtract(complex14);
      complex5.sqrt1z();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(303.480426, 303.480426);
      Complex complex2 = complex1.ZERO.pow((-20.0));
      Complex complex3 = complex2.ONE.cos();
      complex3.hashCode();
      complex1.NaN.reciprocal();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex4.INF.subtract(707.0);
      Complex complex6 = Complex.NaN;
      complex6.ONE.hashCode();
      complex0.equals(complex6);
      Complex complex7 = complex6.tan();
      complex6.ONE.subtract(1.1921772956848145);
      Complex complex8 = Complex.valueOf((-206.93395076777), (-206.93395076777));
      Complex.valueOf(0.0, 1278.811238080089);
      complex8.nthRoot(1260);
      complex7.getField();
      complex0.add(complex5);
      Complex complex9 = complex6.log();
      complex9.NaN.nthRoot(1260);
      complex0.cosh();
      complex0.createComplex((-20.0), 1.1921772956848145);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-4289.997987086));
      complex0.I.sinh();
      complex0.equals("/Xfnw|a]q!Y|[W>");
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.ONE.atan();
      complex3.ONE.nthRoot(1);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.I.tanh();
      complex6.INF.tanh();
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = complex5.acos();
      complex8.ONE.multiply(0.0);
      complex5.subtract((-4289.997987086));
      complex1.negate();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.ONE.add(complex2);
      complex4.isNaN();
      complex2.abs();
      complex7.getArgument();
      Complex complex11 = complex5.acos();
      complex11.multiply(Double.POSITIVE_INFINITY);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.tan();
      Complex complex1 = Complex.valueOf((-837.377228));
      Complex complex2 = complex0.I.multiply(complex1);
      complex2.I.add(2204.61318366941);
      complex2.ZERO.nthRoot(1865);
      Complex complex3 = Complex.valueOf((-1332.42951386), (-1332.42951386));
      complex3.INF.multiply((-1332.42951386));
      Complex complex4 = complex0.ZERO.pow(complex3);
      complex0.NaN.atan();
      complex0.INF.abs();
      Complex complex5 = complex0.log();
      complex2.conjugate();
      complex5.multiply(complex4);
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(222.0);
      complex0.toString();
      complex0.toString();
      Complex complex1 = complex0.divide(222.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.pow(complex2);
      complex1.abs();
      complex3.hashCode();
      complex0.getArgument();
      complex4.hashCode();
//      try { 
        complex3.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, 2223.079872);
      Complex complex2 = complex0.subtract(2223.079872);
      Complex complex3 = complex0.add(complex2);
      complex2.readResolve();
      Complex complex4 = complex3.sqrt1z();
      complex3.getArgument();
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex0.divide(1.3548774719238281);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.ZERO.sin();
      complex8.ONE.divide(complex5);
      Complex complex9 = Complex.valueOf((-2632.00471894107), 2223.079872);
      Complex complex10 = complex0.cosh();
      complex5.getArgument();
      Complex complex11 = complex4.atan();
      complex11.createComplex(0.0, 0.0);
      Complex complex12 = complex6.sin();
      Complex complex13 = Complex.valueOf(31.75);
      complex6.abs();
      Complex.valueOf(0.0);
      complex10.pow(complex9);
      complex0.INF.pow(complex1);
      complex12.isNaN();
      complex2.nthRoot(7);
      complex13.multiply(1);
      complex6.multiply(7);
      complex5.getField();
      Complex.valueOf(0.0, (-20.0));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-248.8605463977878), (-80.2775681494));
      Complex complex1 = complex0.multiply((-248.8605463977878));
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.ONE.exp();
      complex2.ZERO.cosh();
      complex2.getReal();
      complex2.conjugate();
      complex1.subtract((-2390.83696));
      Complex complex4 = complex3.ZERO.exp();
      complex4.toString();
      complex0.ONE.divide((-1883.839798782878));
      complex3.isNaN();
      Complex.valueOf(0.0, 0.4920966625213623);
      Complex complex5 = Complex.valueOf(5.566389017527065, 1661.301);
      Complex complex6 = complex1.acos();
      complex1.reciprocal();
      complex0.isInfinite();
      complex6.readResolve();
      complex5.multiply(5.566389017527065);
      complex2.multiply(1.467662348860426E45);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = Complex.ZERO;
      complex0.ONE.acos();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.INF.atan();
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.asin();
      complex6.I.cos();
      complex6.ZERO.multiply(0.0);
      complex0.getReal();
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(9.676190774054103E-143);
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex1.I.tan();
      complex3.hashCode();
      complex1.NaN.reciprocal();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ZERO.sqrt1z();
      complex1.ZERO.tanh();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex4.I.pow(0.33115679025650024);
      complex7.INF.sinh();
      Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex6.INF.sinh();
      complex8.ZERO.subtract(complex2);
      Complex complex9 = complex0.subtract(1425.405434);
      Complex complex10 = complex9.cosh();
      complex5.I.toString();
      Complex complex11 = complex10.I.multiply(complex8);
      Complex complex12 = Complex.valueOf(5307.554523);
      complex1.cosh();
      complex2.negate();
      complex0.reciprocal();
      Complex complex13 = complex12.sin();
      complex13.I.sqrt();
      Complex complex14 = complex8.exp();
      complex6.getReal();
      complex11.divide(1425.405434);
      complex9.pow(9.676190774054103E-143);
      complex14.log();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.conjugate();
      complex3.I.sin();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex4.cos();
      complex6.INF.negate();
      Complex complex7 = complex1.sqrt();
      complex7.ONE.subtract(complex0);
      Complex complex8 = Complex.valueOf(20.0);
      Complex complex9 = complex8.atan();
      complex1.I.multiply(1);
      complex9.conjugate();
      complex4.hashCode();
      complex1.toString();
      complex9.sqrt1z();
      complex7.tan();
      complex5.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, (double) 1);
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.divide(3280.4087103559);
      Complex complex1 = complex0.subtract((-4824.818223133831));
      complex1.INF.asin();
      complex0.add((-224.34));
      complex1.subtract((-4824.818223133831));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.asin();
      complex0.hashCode();
      Complex complex1 = complex0.log();
      complex0.cosh();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(2182.382);
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex0.NaN.getField();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex3.NaN.sinh();
      complex4.ONE.cos();
      Complex complex5 = complex3.INF.sinh();
      complex5.createComplex(6.283185307179586, 2182.382);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ZERO.divide(complex1);
      complex3.tan();
      Complex complex8 = complex0.exp();
      complex8.hashCode();
      Complex complex9 = complex0.multiply((-1582));
      Complex complex10 = complex9.ONE.log();
      Complex complex11 = complex1.multiply((-6.1370690793508674E296));
      complex11.ONE.sqrt1z();
      Complex complex12 = complex7.exp();
      complex12.ONE.divide(complex2);
      complex2.tan();
      complex10.sqrt();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(480.444, 0.0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.getField();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.add(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.I.sin();
      complex5.NaN.subtract(Double.NaN);
      Complex complex6 = complex2.reciprocal();
      complex2.INF.toString();
      complex6.NaN.getArgument();
      complex2.NaN.multiply(0.0);
      complex6.getField();
      Complex complex7 = complex2.divide(3786.50263089);
      Complex complex8 = complex1.I.multiply(0.0);
      Complex complex9 = complex7.subtract(3786.50263089);
      Complex complex10 = complex1.createComplex(3786.50263089, (-1.0));
      Complex complex11 = complex6.divide(complex7);
      complex11.INF.cosh();
      complex11.cosh();
      complex6.toString();
      complex3.add(Double.NaN);
      complex8.abs();
      complex9.exp();
      complex7.getField();
      complex10.sqrt();
      complex10.tan();
      complex7.exp();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2805.0), (-1043.721027324846));
      Complex complex1 = complex0.add((-2805.0));
      complex0.tanh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1406.0);
      complex0.I.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.asin();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.I.tanh();
      complex4.ONE.abs();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.557407724654902, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.tanh();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      
      Complex complex7 = Complex.valueOf(1406.0, 1406.0);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex5.cos();
      Complex complex10 = complex8.add(1406.0);
      complex10.getField();
      Complex complex11 = complex9.subtract(complex0);
      complex1.getArgument();
      Complex complex12 = complex0.INF.log();
      List<Complex> list0 = complex0.nthRoot(1159);
      assertEquals(1159, list0.size());
      
      Complex complex13 = complex9.add(complex5);
      Complex complex14 = complex13.ONE.log();
      complex5.I.sin();
      complex14.NaN.readResolve();
      complex13.equals(complex0);
      Complex complex15 = complex13.asin();
      complex11.add((double) 1159);
      Complex complex16 = complex7.sqrt1z();
      assertEquals((-1405.999822190623), complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex12.cos();
      Complex complex18 = complex17.ZERO.sin();
      assertTrue(complex18.equals((Object)complex14));
      
      Complex complex19 = complex10.acos();
      assertEquals(7.94165112634891, complex19.getImaginary(), 0.01);
      
      Complex complex20 = complex9.tanh();
      assertTrue(complex9.equals((Object)complex15));
      assertNotSame(complex20, complex17);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
  }
}
