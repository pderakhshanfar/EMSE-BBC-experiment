/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:57:46 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-5.500631513861575E-10));
      complex1.reciprocal();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf((-543.17034));
      complex1.conjugate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.ONE;
      complex3.subtract(complex7);
      complex0.sqrt();
      Complex complex8 = complex7.subtract(complex5);
      complex6.sqrt();
      complex2.atan();
      Complex complex9 = Complex.valueOf(5.5996586041611455E262, 0.0);
      Complex complex10 = Complex.ZERO;
      complex10.atan();
      complex8.nthRoot(132);
      Complex complex11 = Complex.valueOf(1226.584623577354);
      complex11.tanh();
      complex6.atan();
      complex4.acos();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(4.218682431618625E286);
      complex0.I.createComplex((-191.8432), 20.0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.hashCode();
      complex0.readResolve();
      complex1.tan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2204.2020853), 20.0);
      Complex complex1 = Complex.NaN;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(18.713450505224547, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.negate();
      complex0.hashCode();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = Complex.I;
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.38779198301185247, 0.38779198301185247);
      Complex complex1 = new Complex(1623.1575564653017, 1623.1575564653017);
      complex1.INF.hashCode();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex4.I.log();
      complex1.INF.hashCode();
      Complex complex6 = complex0.multiply(complex1);
      complex6.INF.divide(1623.1575564653017);
      complex1.toString();
      Complex complex7 = complex1.reciprocal();
      complex2.INF.add(complex1);
      complex1.exp();
      complex4.ZERO.abs();
      Complex complex8 = complex1.multiply(complex3);
      complex8.I.add(complex4);
      complex5.divide(1623.1575564653017);
      complex5.multiply(0.38779198301185247);
      complex6.negate();
      Complex complex9 = complex0.conjugate();
      complex9.ZERO.add(complex3);
      complex9.ONE.pow(0.8331472312999324);
      complex7.asin();
      complex7.pow(complex0);
      Complex complex10 = complex0.tanh();
      complex10.NaN.createComplex((-156.55), 1479.54242);
      Complex complex11 = complex0.add(complex1);
      Complex complex12 = complex11.conjugate();
      Complex.valueOf((-1411.1842375308931));
      complex12.nthRoot(3982);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.nthRoot(4002);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.atan();
      Complex.valueOf((-265.19551054));
      complex0.tanh();
      Complex complex1 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = 0.4084761543836649;
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(5656.36381009);
      Complex complex2 = complex1.reciprocal();
      complex0.cos();
      double double1 = 0.469759464263916;
      Complex complex3 = Complex.valueOf(0.469759464263916);
      complex2.conjugate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.subtract(complex5);
      complex3.sqrt();
//      try { 
        complex6.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(2.3375763256988976E-7, 2.3375763256988976E-7);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.multiply(2.0);
      Complex complex3 = complex1.exp();
      complex3.ZERO.divide(complex0);
      Complex complex4 = complex0.NaN.multiply((-1855.0557422));
      Complex complex5 = complex3.divide((-2122.2208693073));
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex6.pow(2.0);
      complex5.toString();
      Complex complex8 = complex6.multiply(0.0);
      Complex complex9 = complex6.cos();
      Complex complex10 = complex5.divide(333.3794033310144);
      complex10.I.sin();
      Complex complex11 = complex2.multiply(complex9);
      complex11.INF.sqrt();
      Complex complex12 = complex3.ZERO.subtract(2.0);
      complex12.sin();
      Complex complex13 = complex8.multiply((-298490300));
      Complex complex14 = Complex.valueOf((-2122.2208693073), (-2122.2208693073));
      complex14.I.cosh();
      Complex complex15 = complex13.ZERO.sqrt1z();
      complex7.log();
      Complex complex16 = complex2.reciprocal();
      Complex complex17 = complex13.subtract(complex15);
      complex16.divide(complex13);
      Complex complex18 = complex4.asin();
      complex18.I.pow((-597.3360831419917));
      complex17.cosh();
      complex16.cos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-5.500631513861575E-10));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.valueOf((-5.500631513861575E-10));
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.subtract(complex5);
      Complex complex9 = complex2.sqrt();
      complex8.subtract(complex6);
      Complex complex10 = complex9.sqrt();
      complex4.atan();
      Object object0 = complex8.readResolve();
      complex6.equals(object0);
      complex1.tan();
      complex10.log();
      Complex complex11 = Complex.valueOf((-5.500631513861575E-10), (-3242.0));
      complex4.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(18.713450505224547, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.negate();
      complex0.hashCode();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.subtract(complex4);
      complex5.sqrt();
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex4.atan();
      Complex complex9 = Complex.valueOf((-1.0), 6.283185307179586);
      complex3.ZERO.multiply(complex9);
      complex5.abs();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = new Complex((-1.0), 6.283185307179586);
      complex8.tanh();
      complex0.readResolve();
      complex3.sqrt1z();
      complex7.pow(complex4);
      complex2.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-5.500631513861575E-10));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.valueOf((-5.500631513861575E-10));
      complex3.conjugate();
      complex2.toString();
      complex0.NaN.abs();
      complex4.getArgument();
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.ONE;
      complex3.subtract(complex5);
      complex2.multiply(Double.NaN);
      complex0.multiply(complex5);
      complex5.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(1.0);
      complex0.I.exp();
      complex2.readResolve();
      complex2.equals(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(18.713450505224547, Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.conjugate();
      complex0.toString();
      complex1.abs();
      Complex complex3 = Complex.NaN;
      complex2.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.ONE;
      complex0.subtract(complex2);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2521.24980492));
      Complex complex8 = complex7.sqrt();
      complex1.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.abs();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex(0.19782572984695435, 1.0);
      complex5.tanh();
      Object object0 = new Object();
      complex4.sqrt1z();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.subtract(complex2);
      complex3.multiply((-598.09139795));
      complex2.multiply(complex0);
      complex0.add(0.49531634931280183);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.ZERO.createComplex(2440.4016908103, Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex3 = complex2.divide(423.0829);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.ONE.multiply(complex0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.NaN.pow(complex3);
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex6.ONE.sinh();
      complex7.tan();
      complex0.tan();
      complex1.multiply(2.6527209281921387);
//      try { 
        complex2.I.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.reciprocal();
      complex0.cos();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.conjugate();
      complex1.toString();
      complex2.abs();
      complex2.getArgument();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.subtract(complex3);
      complex4.sqrt();
      complex3.subtract(complex6);
      Complex complex7 = complex3.atan();
      Complex.valueOf(1.0, 2795.88);
      complex3.abs();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = new Complex(1226.584623577354, Double.POSITIVE_INFINITY);
      complex5.tanh();
      complex7.readResolve();
      complex6.sqrt1z();
      complex7.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-5.500631513861575E-10));
      complex1.reciprocal();
      complex0.cos();
      Complex.valueOf((-5.500631513861575E-10));
      Complex complex2 = complex0.conjugate();
      complex1.multiply((-470));
      complex2.reciprocal();
      complex1.isInfinite();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-5.500631513861575E-10));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.valueOf((-5.500631513861575E-10));
      Complex complex5 = complex3.conjugate();
      complex2.toString();
      complex4.getArgument();
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.subtract(complex5);
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex8.subtract(complex6);
      complex9.sqrt();
      Complex complex11 = complex4.atan();
      Complex.valueOf(1226.584623577354, 1226.584623577354);
      complex3.abs();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = new Complex((-1.5430806353653068), 3.141592653589793);
      Complex complex14 = complex10.tanh();
      complex10.readResolve();
      complex14.sqrt1z();
      complex11.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.multiply(788);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.ONE;
      complex4.isInfinite();
      Complex complex5 = Complex.I;
      complex1.subtract(complex4);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      complex1.hashCode();
      complex1.readResolve();
      Complex complex2 = complex0.add(399.980021);
      Complex complex3 = complex0.divide(complex2);
      complex2.cos();
      complex2.acos();
      Complex.valueOf(9.428257290008738E-9, 112529.4415565428);
      Complex complex4 = Complex.valueOf((-3029.6290732533835));
      Complex complex5 = complex3.conjugate();
      complex0.tan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.subtract(complex4);
      Complex complex8 = complex3.cosh();
      complex8.tan();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex3.sqrt1z();
      complex10.ZERO.cos();
      complex7.divide(1.9999904606444503);
      complex10.conjugate();
      complex8.subtract(2.000009539810582);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.conjugate();
      complex1.toString();
      complex3.getArgument();
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.subtract(complex4);
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex7.subtract(complex5);
      complex8.sqrt();
      complex3.atan();
      Complex complex10 = Complex.valueOf(1226.584623577354, 1226.584623577354);
      complex2.abs();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = new Complex((-1.5430806353653068), Double.NaN);
      complex9.tanh();
      complex9.readResolve();
      complex10.asin();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-5.500631513861575E-10));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.valueOf((-5.500631513861575E-10));
      Complex complex5 = complex3.conjugate();
      complex2.toString();
      complex4.getArgument();
      complex2.tan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.negate();
      Complex.valueOf(3.141592653589793);
      complex7.multiply(0.9969280398090082);
      complex0.add(complex3);
      complex3.multiply(4.3201858885130064E-10);
      complex4.multiply(Double.NaN);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.multiply(5.926057457356852E-43);
      complex2.getArgument();
      Complex complex4 = new Complex(70.862072894268);
      complex4.negate();
      complex2.hashCode();
      complex0.readResolve();
      Complex complex5 = complex1.add(1.7211688427961583E-9);
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.acos();
      Complex complex9 = Complex.valueOf((-1627.55319253), 5.926057457356852E-43);
      Complex.valueOf(1.360180139541626);
      complex8.conjugate();
      complex3.tan();
      Complex complex10 = Complex.NaN;
      complex10.subtract(complex7);
      complex9.cosh();
      complex5.tan();
      Complex complex11 = Complex.INF;
      complex0.sqrt1z();
      complex6.divide(4.278478878300888E134);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.negate();
      complex0.hashCode();
      complex2.readResolve();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex1.divide(complex2);
      complex2.INF.cos();
      complex3.acos();
      Complex complex5 = Complex.valueOf(0.0, (-2.0));
      Complex.valueOf(8.999821367768787E-8);
      complex0.conjugate();
      Complex complex6 = complex2.tan();
      complex5.abs();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.atan();
      complex0.tanh();
      complex0.readResolve();
      complex1.asin();
      complex4.sqrt1z();
      Object object0 = complex8.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(2164.849009, 2164.849009);
      complex0.toString();
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = Complex.ZERO;
      complex6.sqrt();
      complex5.atan();
      Complex.valueOf(0.0, 6.283185307179586);
      Complex complex7 = Complex.valueOf(0.7853981633974483);
      Complex complex8 = complex5.atan();
      complex1.atan();
      Complex complex9 = new Complex((-1.5430806353653068), 2164.849009);
      complex9.tanh();
      complex8.readResolve();
      complex3.asin();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.tan();
      complex0.subtract(complex2);
      Complex complex3 = complex1.sin();
      complex3.getField();
      Complex complex4 = complex2.negate();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.I;
      complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.add(complex4);
      Complex complex8 = complex7.multiply(0.9989335277222732);
      complex4.multiply(0.9989335277222732);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(Double.NaN);
      complex0.subtract(complex2);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex5.sqrt();
      complex2.atan();
      Complex.valueOf((-1154.4846557842286), (-1.0));
      Complex complex7 = complex3.sinh();
      Complex complex8 = Complex.I;
      complex4.atan();
      complex7.tanh();
      Complex complex9 = Complex.I;
      complex6.readResolve();
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.ONE;
      complex11.asin();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.negate();
      complex0.hashCode();
      complex2.readResolve();
      Complex complex3 = complex0.add(0.0);
      complex1.divide(complex2);
      complex2.INF.cos();
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.valueOf(0.0, (-2.0));
      Complex.valueOf(8.999821367768787E-8);
      complex0.conjugate();
      complex2.tan();
      Complex complex6 = Complex.NaN;
      complex5.subtract(complex4);
      Complex complex7 = complex3.cosh();
      complex7.tan();
      Complex complex8 = Complex.INF;
      complex8.sqrt1z();
      complex5.divide(1486.09361);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-5.500631513861575E-10));
      complex1.reciprocal();
      Complex complex2 = complex0.cos();
      Complex.valueOf((-5.500631513861575E-10));
      complex0.conjugate();
      complex1.toString();
      complex0.getArgument();
      Complex complex3 = complex2.tan();
      Complex complex4 = new Complex((-5.500631513861575E-10));
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.subtract(complex0);
      Complex complex8 = complex7.sqrt();
      complex5.atan();
      Complex.valueOf(1.5707963267948966, (-1154.4846557842286));
      complex0.sinh();
      Complex complex9 = Complex.I;
      complex9.atan();
      complex3.tanh();
      Complex complex10 = Complex.I;
      complex10.readResolve();
      Complex complex11 = Complex.INF;
      complex11.asin();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-1.4134833918433287E-4));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.sinh();
      complex3.negate();
      complex4.hashCode();
      complex3.readResolve();
      Complex complex6 = complex1.add((-1423.82849));
      complex6.ONE.getField();
      Complex complex7 = complex5.divide(complex3);
      complex6.acos();
      Complex complex8 = Complex.valueOf((-1753.78527), 0.0);
      Complex.valueOf((-1163.1191));
      complex3.conjugate();
      complex8.tan();
      Complex complex9 = Complex.NaN;
      complex2.subtract(complex7);
      complex4.cosh();
      complex0.tan();
      complex2.sqrt1z();
      Complex complex10 = Complex.ONE;
      complex10.divide(Double.POSITIVE_INFINITY);
      complex7.abs();
      Complex.valueOf((-2032.41877385), (-1753.78527));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-3537.360344454614));
      Complex complex2 = complex1.I.reciprocal();
      complex2.NaN.cos();
      Complex complex3 = Complex.valueOf((-3537.360344454614));
      Complex complex4 = complex3.conjugate();
      complex4.INF.toString();
      complex1.hashCode();
      complex2.readResolve();
      Complex complex5 = complex4.add((-3537.360344454614));
      complex5.divide(complex4);
      Complex complex6 = complex4.acos();
      Complex.valueOf(0.0, (-20.0));
      Complex complex7 = Complex.valueOf(2003.36433766115);
      Complex complex8 = complex2.conjugate();
      complex8.divide(0.0);
      complex8.tan();
      Complex complex9 = Complex.NaN;
      complex6.subtract(complex3);
      complex6.cosh();
      Complex complex10 = complex2.tan();
      complex10.I.add(2003.36433766115);
      complex7.sqrt1z();
      complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.cos();
      complex1.negate();
      Complex complex3 = Complex.valueOf(0.41421356237309515);
      complex1.multiply((-1514.7568125340938));
      complex1.add(complex2);
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.valueOf((-3009.1), 1.0015164374160699);
      complex0.divide(complex5);
      complex4.multiply(496.58208638);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      complex1.nthRoot(652);
      Complex complex3 = new Complex(329.7196618313885, 329.7196618313885);
      Complex complex4 = complex3.tan();
      Complex complex5 = new Complex(329.7196618313885, 329.7196618313885);
      complex4.readResolve();
      complex4.readResolve();
      Complex.valueOf((double) 652);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.atan();
      complex2.tanh();
      complex7.readResolve();
      Complex complex8 = complex7.asin();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.multiply(3664.172007);
      complex2.divide(complex0);
      complex2.acos();
      Complex complex3 = Complex.valueOf(0.0, (-919.5));
      Complex.valueOf(3009.1);
      Complex complex4 = complex3.conjugate();
      complex4.tan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = new Complex(3009.1, (-944.65482));
      complex6.NaN.pow(complex7);
      complex3.cosh();
      complex4.tan();
      complex6.sqrt1z();
      complex1.divide(1757.0724483275);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-3537.360344454614));
      Complex complex2 = complex1.I.reciprocal();
      complex2.NaN.cos();
      Complex complex3 = Complex.valueOf((-3537.360344454614));
      Complex complex4 = complex3.conjugate();
      complex4.INF.toString();
      complex4.ONE.getArgument();
      Complex complex5 = complex0.tan();
      complex5.subtract(complex2);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex5.subtract(complex6);
      complex1.sqrt();
      complex3.ZERO.atan();
      Complex complex8 = Complex.valueOf(0.0, (-1.134963954323427E-7));
      complex6.sinh();
      complex8.tanh();
      complex7.readResolve();
      complex4.asin();
      complex3.acos();
      complex4.multiply((-2245));
      Complex complex9 = Complex.valueOf((-4692.059444953));
      complex9.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex0.sin();
      complex4.getField();
      complex0.ONE.getArgument();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex4.createComplex(0.9989335277222732, 0.9989335277222732);
      complex0.I.asin();
      Object object0 = new Object();
      complex5.equals(object0);
      Complex.valueOf(0.9989335277222732);
      complex6.reciprocal();
      complex0.atan();
      complex0.tanh();
      complex4.readResolve();
      complex3.asin();
      Complex complex7 = Complex.valueOf(0.0, 3296.26988);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      complex1.INF.cosh();
      complex1.abs();
      complex1.INF.createComplex(0.0, 3063.920291014324);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex2.ONE.readResolve();
      Complex complex4 = Complex.valueOf(3063.920291014324);
      Complex complex5 = complex3.ZERO.tan();
      complex3.I.acos();
      Complex.valueOf((-1488.69));
      Complex complex6 = Complex.valueOf(3063.920291014324);
      complex1.ONE.add(complex6);
      Complex complex7 = complex4.ZERO.subtract(Double.NaN);
      Complex complex8 = complex7.ONE.reciprocal();
      complex8.divide((-7074.720547560888));
      complex5.conjugate();
      complex2.divide((-1488.69));
      complex2.getReal();
      Complex.valueOf(7074.720547560888);
      complex4.reciprocal();
      complex2.atan();
      complex4.tanh();
      Complex complex9 = new Complex((-1488.69), 20.0);
      complex9.readResolve();
      Complex complex10 = complex9.asin();
      complex9.acos();
      complex1.multiply((-2064));
      complex10.pow(complex0);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.INF.divide(1.0);
      complex1.INF.negate();
      Complex complex2 = complex0.cos();
      complex2.NaN.negate();
      complex2.NaN.sqrt1z();
      complex2.NaN.subtract((-3980.04499008881));
//      try { 
        complex2.nthRoot((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex0.sin();
      complex4.getField();
      complex0.ONE.getArgument();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex4.createComplex(0.9989335277222732, 0.9989335277222732);
      Complex complex7 = complex0.I.asin();
      complex7.INF.conjugate();
      Complex.valueOf(1.1353638172149658);
      complex4.NaN.nthRoot(2068510563);
      Complex complex8 = complex6.negate();
      complex8.ZERO.multiply(0.9989335277222732);
      complex6.readResolve();
      complex5.readResolve();
      complex6.sinh();
      complex0.getImaginary();
      Complex complex9 = complex8.add((double) 2068510563);
      complex9.NaN.acos();
      complex0.sin();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex1.tanh();
      complex1.ONE.getField();
      complex2.ZERO.cos();
      Complex complex3 = complex2.NaN.sin();
      complex3.NaN.toString();
      Complex complex4 = complex0.NaN.pow(complex1);
      complex0.ONE.hashCode();
      complex4.conjugate();
      Complex complex5 = Complex.valueOf(1.1353638172149658);
      int int0 = 2068510563;
      // Undeclared exception!
      complex5.nthRoot(2068510563);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(2.414213562373095, 6.283185307179586);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.createComplex((-482.23705790619), (-482.23705790619));
      complex2.ONE.sqrt1z();
      Complex complex3 = complex0.divide(complex1);
      complex0.I.pow(9.15109220707761E72);
      Complex complex4 = complex3.I.multiply((-1363));
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex1.divide(complex2);
      complex3.sin();
      Complex complex7 = complex0.createComplex((-1795.0), (-1363));
      complex7.I.divide((-659.22173));
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = Complex.ZERO;
      complex0.equals(complex9);
      Complex complex10 = complex6.tan();
      complex10.ZERO.asin();
      Complex complex11 = Complex.valueOf(6.283185307179586);
      Complex complex12 = complex0.asin();
      complex12.I.sinh();
      complex5.subtract(6.283185307179586);
      Complex complex13 = complex8.divide(complex0);
      Complex complex14 = complex13.ONE.negate();
      complex11.divide(1.0);
      complex10.divide(complex14);
      Complex.valueOf(165.506217217282);
      complex6.pow((double) (-1363));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.sin();
      complex2.INF.toString();
      complex0.add((-1372.713745));
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.cosh();
      complex4.NaN.subtract((-1372.713745));
      complex4.ONE.subtract(complex2);
      complex4.ONE.cos();
      Complex complex5 = complex4.ZERO.subtract(2.0);
      complex5.I.getArgument();
      complex1.toString();
      Complex complex6 = complex0.INF.multiply(complex1);
      complex0.INF.nthRoot(173);
      Complex complex7 = complex0.multiply(complex2);
      complex7.cosh();
      Complex.valueOf(1.7454306955949023E94);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.subtract(complex8);
      complex6.ZERO.add(complex1);
      complex9.tan();
      Complex complex10 = complex1.multiply(1.5707963267948966);
      complex10.ZERO.sinh();
      complex2.abs();
      Complex complex11 = complex6.tanh();
      complex11.conjugate();
      complex4.sqrt1z();
      complex9.cos();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9989335277222732, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex0.sin();
      complex4.getField();
      complex0.ONE.getArgument();
      complex3.acos();
      Complex complex5 = complex4.createComplex(0.9989335277222732, 0.9989335277222732);
      Complex complex6 = complex0.I.asin();
      complex6.INF.conjugate();
      Complex.valueOf(1.1353638172149658);
      complex4.NaN.nthRoot(2068510563);
      Complex complex7 = complex5.negate();
      complex7.ZERO.multiply(0.9989335277222732);
      complex3.getField();
      complex5.multiply((-2083));
      complex2.subtract(complex1);
      complex4.divide(complex5);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-3537.360344454614));
      Complex complex2 = complex1.I.reciprocal();
      complex2.NaN.cos();
      Complex complex3 = Complex.valueOf((-3537.360344454614));
      Complex complex4 = complex3.conjugate();
      complex4.INF.toString();
      complex4.ONE.getArgument();
      Complex complex5 = complex0.tan();
      complex5.subtract(complex2);
      Complex complex6 = complex5.sqrt();
      complex5.subtract(complex6);
      complex1.sqrt();
      Complex complex7 = complex3.ZERO.atan();
      Complex complex8 = Complex.valueOf(0.0, (-1.134963954323427E-7));
      Complex complex9 = complex6.sinh();
      complex5.divide(0.0);
      Complex.valueOf((-1.134963954323427E-7));
      Complex complex10 = complex7.conjugate();
      complex5.tan();
      Complex complex11 = complex9.subtract(complex10);
      complex4.cosh();
      complex11.tan();
      complex8.sqrt1z();
      complex5.divide((-1.134963954323427E-7));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(76.38325786902031, 76.38325786902031);
      Complex complex1 = complex0.multiply(76.38325786902031);
      Complex complex2 = complex0.divide((double) (-540));
      Complex complex3 = complex2.atan();
      complex0.acos();
      Complex complex4 = complex3.negate();
      complex0.cos();
      complex3.sqrt1z();
      complex1.negate();
      complex4.acos();
      complex2.multiply(441);
      Complex complex5 = new Complex(441);
      complex5.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3980.04499008881), (-3313.417633505));
      Complex complex1 = complex0.ONE.atan();
      complex0.nthRoot(989);
      Complex complex2 = complex1.atan();
      complex2.ONE.pow(complex0);
      complex0.sinh();
      Complex complex3 = complex0.reciprocal();
      complex0.isInfinite();
      complex2.multiply(complex1);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.tan();
      complex6.ZERO.hashCode();
      complex6.subtract(complex4);
      complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ZERO;
      complex1.abs();
      Complex complex3 = complex1.INF.createComplex(0.0, 3063.920291014324);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ZERO.divide(complex0);
      complex4.ONE.readResolve();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = Complex.valueOf(3063.920291014324);
      complex5.ZERO.tan();
      complex5.I.acos();
      Complex.valueOf((-1488.69));
      Complex complex8 = complex7.INF.add(complex3);
      Complex complex9 = Complex.valueOf(3063.920291014324);
      complex8.ONE.add(complex9);
      Complex complex10 = complex7.ZERO.subtract(Double.NaN);
      Complex complex11 = complex10.ONE.reciprocal();
      complex11.ZERO.add(complex10);
      Complex complex12 = complex2.reciprocal();
      Complex complex13 = complex6.conjugate();
      complex12.tanh();
      complex13.getArgument();
      complex12.NaN.negate();
      complex6.isInfinite();
      complex2.isNaN();
      complex5.divide(3063.920291014324);
      complex4.readResolve();
      complex12.readResolve();
      Complex complex14 = complex2.sinh();
      complex13.getImaginary();
      complex5.add(5.369687677705385E200);
      complex14.sin();
      complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3980.04499008881), (-3313.417633505));
      Complex complex1 = complex0.ONE.atan();
      complex0.nthRoot(989);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ONE.pow(complex0);
      complex0.sinh();
      complex1.nthRoot(989);
      complex0.multiply(989);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.cosh();
      complex1.abs();
      Complex complex3 = complex1.INF.createComplex(0.0, 3063.920291014324);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ZERO.divide(complex0);
      complex4.ONE.readResolve();
      Complex complex6 = Complex.valueOf(3063.920291014324);
      complex5.ZERO.tan();
      complex5.I.acos();
      Complex.valueOf((-1488.69));
      Complex complex7 = complex6.INF.add(complex3);
      Complex complex8 = Complex.valueOf(3063.920291014324);
      complex7.ONE.add(complex8);
      Complex complex9 = complex6.ZERO.subtract(Double.NaN);
      Complex complex10 = complex9.ONE.reciprocal();
      complex10.ZERO.add(complex9);
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex0.conjugate();
      complex11.tanh();
      complex12.getArgument();
      complex11.NaN.negate();
      complex4.isInfinite();
      complex2.isNaN();
      complex5.divide(3063.920291014324);
      complex4.readResolve();
      complex11.readResolve();
      Complex complex13 = complex2.sinh();
      complex12.getImaginary();
      complex5.add(197.1935224);
      complex13.sin();
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = (Complex)complex0.readResolve();
      complex1.I.sin();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex3.NaN.reciprocal();
      complex4.NaN.nthRoot(37);
      Complex complex6 = complex1.tan();
      complex0.add(complex1);
      Complex complex7 = (Complex)complex6.readResolve();
      complex6.equals(complex7);
      Complex.valueOf((double) 37);
      Complex complex8 = complex7.reciprocal();
      complex6.atan();
      complex2.tanh();
      complex5.readResolve();
      complex5.asin();
      Complex complex9 = Complex.valueOf(1969.0074, 3296.26988);
      complex8.pow(complex5);
      complex9.tan();
      complex5.add((double) 37);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(2.0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.NaN.multiply((-2308));
      complex4.NaN.readResolve();
      complex4.NaN.abs();
      complex2.exp();
      complex4.multiply(complex0);
      complex1.abs();
      Complex complex6 = complex3.createComplex(2.0, (-1065.562));
      complex6.ZERO.divide(0.0);
      Complex complex7 = complex6.INF.conjugate();
      complex6.ZERO.divide(Double.NaN);
      complex6.getReal();
      Complex complex8 = Complex.valueOf(2.0, Double.NaN);
      complex8.cos();
      complex5.negate();
      Complex.valueOf((-0.9715162566482856));
      Complex complex9 = complex6.multiply((-413.055643612));
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.add(complex7);
      Complex complex12 = Complex.valueOf(Double.NaN, 0.5);
      complex12.divide(complex11);
      Complex complex13 = Complex.valueOf((-527.3), (-3023.702));
      complex13.tan();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex0.readResolve();
      complex1.I.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex2.NaN.reciprocal();
      complex3.NaN.nthRoot(37);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.add(complex1);
      complex5.readResolve();
      complex0.acos();
      Complex complex7 = complex6.negate();
      complex2.cos();
      complex5.sqrt1z();
      complex4.negate();
      Complex complex8 = complex7.acos();
      complex1.multiply((-3301));
      complex8.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3980.04499008881), (-3313.417633505));
      Complex complex1 = complex0.ONE.atan();
      List<Complex> list0 = complex0.nthRoot(989);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.multiply((-6084.4));
      complex0.divide((-6084.4));
      complex4.atan();
      complex5.equals(list0);
      Complex complex6 = Complex.NaN;
      complex6.cos();
      complex5.negate();
      Complex.valueOf((double) 989);
      Complex complex7 = new Complex(3677.7, (-6084.4));
      Complex complex8 = complex7.multiply((double) 989);
      Complex complex9 = complex1.add(complex2);
      complex3.divide(complex9);
      complex1.tan();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3980.04499008881), (-3313.417633505));
      complex0.nthRoot(989);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.sinh();
      complex3.ONE.multiply((-6084.4));
      Complex complex4 = complex0.divide((-6084.4));
      complex3.atan();
      Complex complex5 = complex0.acos();
      complex5.negate();
      complex0.NaN.cos();
      complex1.sqrt1z();
      complex2.negate();
      Complex complex6 = Complex.valueOf((-3980.04499008881), 2901.331598976579);
      complex5.pow(complex4);
      complex6.tan();
      complex6.add(1141.213320052405);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(2.0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.NaN.multiply((-2308));
      Complex complex6 = (Complex)complex4.NaN.readResolve();
      complex4.NaN.abs();
      Complex complex7 = complex2.exp();
      complex4.multiply(complex0);
      complex1.abs();
      Complex complex8 = complex3.createComplex(2.0, (-1065.562));
      complex8.ZERO.divide(0.0);
      complex8.INF.conjugate();
      complex8.ZERO.divide(Double.NaN);
      complex8.getReal();
      Complex.valueOf((-1980.1));
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex7.conjugate();
      complex11.tan();
      complex10.subtract(complex5);
      complex9.cosh();
      complex6.tan();
      complex4.sqrt1z();
      complex3.divide(1612.09);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-3537.360344454614));
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = Complex.valueOf((-3537.360344454614));
      Complex complex5 = complex4.conjugate();
      complex5.INF.toString();
      complex5.ONE.getArgument();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.subtract(complex2);
      Complex complex8 = complex6.sqrt();
      complex6.subtract(complex8);
      Complex complex9 = complex1.sqrt();
      complex4.ZERO.atan();
      Complex.valueOf(0.0, (-1.134963954323427E-7));
      complex8.sinh();
      complex3.atan();
      complex3.tanh();
      complex0.readResolve();
      Complex complex10 = complex5.asin();
      Complex.valueOf(657.263128, (-2510.90868329672));
      complex9.pow(complex10);
      complex10.tan();
      complex7.add(0.8813735870195428);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(228.936);
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.ZERO.sin();
      complex1.NaN.sinh();
      Complex complex5 = complex0.I.negate();
      complex0.INF.hashCode();
      complex0.readResolve();
      Complex complex6 = complex1.add(228.936);
      complex3.ONE.divide(complex5);
      Complex complex7 = complex1.acos();
      Complex.valueOf(0.0, 0.4425300359725952);
      Complex.valueOf(228.936);
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex7.tan();
      Complex complex10 = Complex.NaN;
      complex6.subtract(complex10);
      complex9.cosh();
      complex10.tan();
      complex4.sqrt1z();
      complex8.divide(1486.09361);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-482.23705790619), (-482.23705790619));
      Complex complex1 = complex0.sinh();
      complex1.I.acos();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.INF.multiply(3664.172007);
      complex1.NaN.acos();
      complex1.I.abs();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      complex0.divide(complex1);
      complex2.readResolve();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(973.68498379, 973.68498379);
      complex0.NaN.nthRoot(1249);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.ZERO.getField();
      complex0.isNaN();
      complex1.I.abs();
      Complex complex3 = complex1.multiply(37);
      Complex complex4 = complex3.INF.sin();
      complex4.I.getField();
      Complex complex5 = complex3.negate();
      complex1.multiply(complex2);
      complex5.multiply(37);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(1934.14128990324, Double.POSITIVE_INFINITY);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.pow(complex0);
      Complex complex2 = new Complex(0.0, 0.0);
      complex2.ONE.getArgument();
      Complex complex3 = complex2.ONE.cosh();
      complex3.ONE.abs();
      complex0.NaN.acos();
      Complex complex4 = Complex.valueOf(0.0, (-642.62641052792));
      complex4.ZERO.cosh();
      Complex complex5 = complex0.divide(complex2);
      complex2.multiply(4015);
      Complex.valueOf((double) 4015);
      complex2.ZERO.add(0.0);
      Complex complex6 = Complex.valueOf(0.0, (-20.0));
      Complex complex7 = complex5.pow(1195.130918719);
      complex7.NaN.nthRoot(4015);
      complex2.acos();
      complex6.getArgument();
      complex4.hashCode();
      Complex complex8 = complex5.add(complex6);
      complex8.cosh();
      complex5.createComplex(0.0, Double.NaN);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-122.9765946), (-600.157));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = Complex.valueOf((-600.157), (-600.157));
      Complex complex3 = complex2.log();
      complex2.INF.pow(complex1);
      Complex complex4 = complex0.cos();
      complex4.NaN.sinh();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex0.ZERO.sqrt1z();
      complex6.subtract(1.0459461212158203);
      complex4.ONE.createComplex(1318.445543, 0.0);
      Complex complex7 = complex0.sqrt();
      complex7.isNaN();
      complex2.getArgument();
      Complex complex8 = complex5.add(complex7);
      complex7.ZERO.asin();
      Complex complex9 = Complex.NaN;
      complex4.ZERO.readResolve();
      complex8.NaN.pow(complex9);
      complex0.ONE.reciprocal();
      complex1.tan();
      Complex complex10 = complex8.multiply(2172);
      complex9.reciprocal();
      complex10.getImaginary();
      complex5.subtract((-1227.1417493));
      complex3.getField();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.168889933128375E-10);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex1.pow(1730.9);
      Complex complex5 = complex1.ZERO.exp();
      complex5.INF.multiply(complex1);
      complex1.divide(1141.213320052405);
      Complex complex6 = complex1.add(0.0);
      Complex complex7 = complex6.multiply((-2831.6566));
      complex7.INF.asin();
      Complex complex8 = complex0.cosh();
      complex4.getImaginary();
      complex8.getField();
      complex0.abs();
      complex8.equals(complex3);
      complex7.isInfinite();
      complex0.pow((-2831.6566));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.I.toString();
      Complex complex5 = complex4.ONE.multiply(0.0);
      complex0.NaN.sin();
      Complex complex6 = complex0.ONE.cos();
      Complex complex7 = complex0.acos();
      complex7.cos();
      Complex complex8 = complex6.asin();
      complex6.ONE.tan();
      complex8.ONE.reciprocal();
      Complex complex9 = complex8.sqrt();
      complex9.ZERO.atan();
      complex9.I.subtract(complex6);
      Complex complex10 = complex6.sqrt1z();
      complex6.getImaginary();
      complex7.isInfinite();
      Complex complex11 = complex10.pow(complex5);
      complex11.NaN.asin();
      complex3.tanh();
      complex11.toString();
      complex9.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex0.readResolve();
      complex1.I.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.divide(0.0);
      complex2.NaN.reciprocal();
      complex3.NaN.nthRoot(37);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.add(complex1);
      Object object0 = complex4.readResolve();
      complex4.equals(object0);
      Complex complex6 = complex5.cos();
      complex6.negate();
      Complex.valueOf((-1.7672547212604003E-8));
      complex5.multiply(0.0);
      Complex complex7 = complex0.add(complex2);
      complex0.NaN.divide(complex3);
      complex7.I.tan();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.abs();
      Complex complex1 = complex0.cos();
      complex0.NaN.asin();
      complex1.hashCode();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = complex3.NaN.add(complex0);
      complex5.INF.sin();
      complex3.NaN.atan();
      Complex complex6 = complex3.multiply(0.0);
      complex6.ZERO.tan();
      Complex complex7 = Complex.valueOf(0.0);
      complex3.ZERO.subtract(complex0);
      complex2.subtract(complex1);
      complex0.getImaginary();
      Complex complex8 = complex7.asin();
      complex8.INF.multiply(complex1);
      complex8.NaN.abs();
      complex4.getField();
      complex7.subtract(complex0);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1);
      Complex complex1 = complex0.pow((-479.0));
      Complex complex2 = Complex.valueOf((double) 1);
      complex2.ZERO.abs();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex0.ZERO.tan();
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex1.divide(complex7);
      complex5.INF.abs();
      complex5.NaN.log();
      complex8.hashCode();
      Complex complex9 = complex0.cosh();
      Complex.valueOf((-479.0));
      complex8.INF.subtract(complex5);
      complex9.sinh();
      complex1.getArgument();
      complex5.ZERO.reciprocal();
      Complex complex10 = complex5.add(complex0);
      Complex complex11 = complex8.multiply(1);
      Complex complex12 = complex0.negate();
      complex12.add(complex5);
      Complex complex13 = complex6.add(complex10);
      complex13.tan();
      Complex complex14 = complex0.multiply(1);
      complex4.add((-1206.6906791698914));
      complex9.tanh();
      complex10.readResolve();
      complex0.add(complex14);
      complex1.acos();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex3.I.subtract(0.0);
      complex0.readResolve();
      complex2.pow(complex3);
      complex3.isInfinite();
      complex3.createComplex(906.7625, 0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
//      try { 
        complex0.NaN.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      complex1.INF.multiply(complex0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex2.NaN.cos();
      complex0.INF.cosh();
      Complex complex5 = complex2.add(0.0);
      complex5.ZERO.conjugate();
      complex5.negate();
      complex3.getArgument();
      complex4.tanh();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3980.04499008881), (-3313.417633505));
      Complex complex1 = complex0.ONE.atan();
      complex0.nthRoot(989);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex0.sinh();
      complex4.ONE.multiply((-6084.4));
      complex0.divide((-6084.4));
      complex4.atan();
      Complex complex5 = complex1.acos();
      complex5.negate();
      complex0.NaN.cos();
      complex2.sqrt1z();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.ONE.acos();
      complex7.ZERO.multiply(1);
      complex5.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.ZERO.subtract(3.953806005373127E-272);
      Complex complex1 = new Complex(1110.48407);
      Complex complex2 = complex1.NaN.negate();
      complex2.ZERO.multiply(complex0);
      complex0.multiply(complex1);
      complex0.getReal();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.tanh();
      complex1.ONE.getField();
      complex3.ZERO.cos();
      Complex complex4 = complex3.NaN.sin();
      complex4.NaN.toString();
      complex0.NaN.pow(complex1);
      complex0.ONE.hashCode();
      complex1.ONE.sinh();
      Complex complex5 = complex0.NaN.sqrt();
      complex5.NaN.getField();
      Complex complex6 = complex0.pow(4.466959125843237E-8);
      complex6.NaN.readResolve();
      Complex complex7 = complex6.I.subtract(complex1);
      complex6.ZERO.nthRoot(1);
      complex7.INF.exp();
      complex2.abs();
      complex0.pow(Double.NaN);
      complex6.multiply((-339.77632173));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
//      try { 
        complex0.ONE.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.ZERO.toString();
      Complex complex2 = complex0.NaN.multiply(0.0);
      complex1.INF.add(0.0);
      Complex.valueOf(2403.4889817939, 0.0);
      Complex complex3 = complex0.ONE.tan();
      complex3.I.negate();
      complex0.NaN.nthRoot(1);
      complex0.readResolve();
      Complex complex4 = complex0.sin();
      complex4.add(complex0);
      complex4.getReal();
      complex4.getArgument();
      Complex complex5 = complex3.pow(1945.371570222);
      complex5.I.cosh();
      complex4.isInfinite();
      complex2.cosh();
      complex2.divide(1945.371570222);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.sinh();
      complex0.log();
      complex0.subtract(2.422974840736314E-181);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1244.7618602), 9.813901863427107E161);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex2.isInfinite();
      complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.add(complex1);
      complex1.I.acos();
      complex3.ZERO.subtract(complex1);
      complex1.isInfinite();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.NaN.log();
      complex2.toString();
      complex1.ONE.tanh();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex2.I.exp();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex4.INF.subtract(complex0);
      complex0.equals(object0);
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex8.asin();
      complex4.INF.pow(complex9);
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex7.I.cos();
      complex7.getImaginary();
      complex3.pow(Double.POSITIVE_INFINITY);
      complex6.ONE.getField();
      complex4.add((-1947.0));
      Complex complex13 = complex3.divide((-1947.0));
      complex6.getArgument();
      complex13.sqrt1z();
      Complex complex14 = complex12.exp();
      complex14.NaN.negate();
      complex14.divide(0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0);
      complex11.createComplex((-0.3058015757857271), 0.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.divide(4031.4792130211626);
      complex2.INF.add(complex0);
      Complex complex3 = complex2.ZERO.log();
      complex3.INF.acos();
      complex3.NaN.multiply(complex0);
      complex1.I.sqrt();
      complex0.I.sqrt();
      complex1.ZERO.createComplex(0.6598852872848511, 0.6598852872848511);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.add(complex0);
      complex5.NaN.multiply(4031.4792130211626);
      complex1.multiply(4031.4792130211626);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.ZERO.asin();
      Complex complex2 = Complex.valueOf((-4197.5));
      Complex.valueOf(0.0, 0.0);
      complex2.ZERO.sin();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex3.I.divide(612.194535678);
      Complex.valueOf(0.0);
      Complex complex4 = complex0.NaN.asin();
      complex4.ONE.sinh();
      complex0.INF.negate();
      Complex complex5 = complex0.exp();
      complex1.isNaN();
      complex5.createComplex((-4197.5), 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(789.0, (-452.054191257));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(complex1);
      complex2.NaN.hashCode();
      complex1.getField();
      complex2.isInfinite();
      Complex complex3 = Complex.valueOf(789.0);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex1.asin();
      complex5.subtract(complex3);
      complex5.divide(complex1);
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex2.NaN.reciprocal();
      complex3.I.divide(complex7);
      complex6.abs();
      complex6.reciprocal();
      complex6.multiply(complex0);
      complex5.sqrt();
      complex1.nthRoot(1361);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-3369.97), 1658.8949169136163);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ONE.sin();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      complex1.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex4.INF.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex4.exp();
      complex4.I.toString();
      complex3.equals(object0);
      Complex complex7 = complex2.sqrt();
      complex7.INF.tanh();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.divide(complex1);
      complex9.ONE.sqrt();
      complex9.cosh();
      complex9.toString();
      complex6.NaN.add(0.0);
      complex6.multiply(3371.3);
      complex2.asin();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(1666.293024, 1666.293024);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.I.pow(complex0);
      complex2.INF.abs();
      Complex complex3 = complex0.multiply(complex1);
      complex3.ONE.toString();
      complex0.equals("");
      Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.sin();
      complex2.NaN.add(complex1);
      complex0.NaN.multiply(293);
      complex0.isInfinite();
      complex0.abs();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(76.38325786902031, 76.38325786902031);
      complex0.INF.multiply((-540));
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.isInfinite();
      Complex complex2 = complex1.multiply(complex0);
      complex1.subtract(complex2);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex.valueOf(0.495672345161438, 0.495672345161438);
      Complex complex2 = Complex.valueOf((-2295.95));
      complex2.I.nthRoot(1);
      Complex.valueOf(791.672039201026, (-2302.7921));
      complex1.asin();
//      try { 
        complex1.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.I.negate();
      complex1.ONE.negate();
      Complex complex2 = complex0.sqrt();
      complex2.abs();
      Complex.valueOf(988.8403330449461, Double.NaN);
//      try { 
        complex1.nthRoot((-3333));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -3,333
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(228.936);
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.acos();
      complex1.ZERO.sin();
      complex1.NaN.sinh();
      Complex complex4 = complex0.I.negate();
      complex0.INF.hashCode();
      complex0.readResolve();
      complex1.add(228.936);
      Complex complex5 = complex3.ONE.divide(complex4);
      Complex complex6 = complex1.acos();
      Complex.valueOf(0.0, 0.4425300359725952);
      complex3.getArgument();
      complex4.multiply(complex6);
      Complex complex7 = complex5.add(complex2);
      complex7.tan();
      complex1.sqrt();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide((-1246.4497458));
      Complex complex2 = complex1.ZERO.multiply(1026);
      complex2.NaN.cosh();
      complex2.ZERO.hashCode();
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.subtract(1389.25);
      complex0.ONE.subtract(651.1765740677408);
      Complex complex5 = complex4.multiply((-914.875518084));
      Complex complex6 = complex3.tanh();
      Complex complex7 = Complex.valueOf(1389.25);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex5.sqrt1z();
      complex9.INF.tanh();
      complex8.ZERO.getArgument();
      complex5.readResolve();
      Complex complex10 = complex4.subtract(complex0);
      complex1.I.sqrt();
      complex4.pow(1389.25);
      complex3.multiply(1343);
      complex8.add(1389.25);
      Complex complex11 = complex7.add((-2.8362173224732088E165));
      complex11.ZERO.getField();
      Complex.valueOf(0.0);
      Complex complex12 = complex10.tan();
      complex6.readResolve();
      complex12.tan();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(2.0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.NaN.multiply((-2308));
      complex4.NaN.readResolve();
      complex4.NaN.abs();
      complex2.exp();
      complex4.multiply(complex0);
      complex1.abs();
      Complex complex6 = complex3.createComplex(2.0, (-1065.562));
      complex6.ZERO.divide(0.0);
      complex6.INF.conjugate();
      complex6.ZERO.divide(Double.NaN);
      complex6.getReal();
      Complex.valueOf((-1980.1));
      Complex complex7 = complex0.reciprocal();
      complex7.ZERO.atan();
      Complex complex8 = complex2.tanh();
      complex8.I.readResolve();
      complex8.INF.asin();
      Complex complex9 = Complex.valueOf((-1065.562), (-2806.763450114));
      complex9.NaN.pow(complex7);
      complex5.tan();
      complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.pow(0.0);
      complex0.hashCode();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex2.getImaginary();
      complex1.getImaginary();
      Complex complex3 = Complex.valueOf((-2.5676078228301587E-8));
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.cosh();
      complex1.abs();
      Complex complex3 = complex1.INF.createComplex(0.0, 3063.920291014324);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ZERO.divide(complex0);
      complex4.ONE.readResolve();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = Complex.valueOf(3063.920291014324);
      Complex complex8 = complex5.ZERO.tan();
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex5.I.acos();
      assertEquals((-0.8813735870195429), complex9.getImaginary(), 0.01);
      
      Complex.valueOf((-1488.69));
      Complex complex10 = complex7.INF.add(complex3);
      Complex complex11 = Complex.valueOf(3063.920291014324);
      complex10.ONE.add(complex11);
      Complex complex12 = complex7.ZERO.subtract(Double.NaN);
      Complex complex13 = complex12.ONE.reciprocal();
      Complex complex14 = complex13.ZERO.add(complex12);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex15 = complex2.reciprocal();
      Complex complex16 = complex6.conjugate();
      complex15.tanh();
      complex16.getArgument();
      complex15.NaN.negate();
      complex6.isInfinite();
      complex2.isNaN();
      complex5.divide(3063.920291014324);
      complex4.readResolve();
      complex15.readResolve();
      assertSame(complex15, complex14);
      
      Complex complex17 = complex2.sinh();
      complex16.getImaginary();
      Complex complex18 = complex5.add(197.1935224);
      assertEquals(197.1935224, complex18.getReal(), 0.01);
      assertTrue(complex5.equals((Object)complex8));
      
      Complex complex19 = complex17.sin();
      double double0 = complex16.getImaginary();
      assertSame(complex16, complex19);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex4.ONE.negate();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals((-1.0), complex5.getReal(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
      
      Complex complex6 = complex2.sin();
      Complex complex7 = complex0.NaN.sqrt();
      Complex complex8 = complex2.ZERO.add(complex6);
      List<Complex> list0 = complex0.NaN.nthRoot(37);
      assertFalse(list0.contains(complex4));
      
      Complex complex9 = complex0.add((-53.0));
      complex9.ZERO.conjugate();
      Complex complex10 = complex0.multiply((double) 37);
      assertEquals(37.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = Complex.NaN;
      boolean boolean0 = complex7.equals(complex11);
      assertTrue(boolean0);
      
      Complex complex12 = complex2.multiply((-3700));
      assertSame(complex2, complex3);
      assertSame(complex12, complex8);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex13 = complex9.atan();
      assertEquals(3.557453464033644E-4, complex13.getImaginary(), 0.01);
      assertEquals((-1.5519373505614644), complex13.getReal(), 0.01);
      
      Complex complex14 = Complex.valueOf(542.1, (-1422.490566115));
      assertEquals((-1422.490566115), complex14.getImaginary(), 0.01);
      assertEquals(542.1, complex14.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-340.8), (-340.8));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.acos();
      Complex.valueOf((-7.1844969234484515E-96), (-7.1844969234484515E-96));
      complex1.equals(complex3);
      complex3.getImaginary();
      Complex complex4 = Complex.valueOf((-2245.6488430717), 251.85705448434);
//      try { 
        complex4.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      complex0.hashCode();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf((-2211.0), (-2211.0));
      assertEquals((-2211.0), complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-2211.0), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.atan();
      assertSame(complex2, complex4);
      assertSame(complex5, complex1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = (-1552.83);
      Complex complex0 = new Complex((-1552.83));
      complex0.toString();
      Complex complex1 = complex0.ONE.sin();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.tanh();
      complex2.I.sqrt1z();
      complex0.exp();
      complex0.hashCode();
//      try { 
        complex0.ZERO.nthRoot((-401));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -401
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }
}
