/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:05:24 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1337.01), 20.0);
      complex0.acos();
      Complex.valueOf(866.6);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.844500815458839E7, (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(2.956037304012735E15, (-1561.2546));
      complex0.acos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 4.039437286589528E271);
//      try { 
        complex0.subtract((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(4.464279133463661E-201, (-2005.010913119634));
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.INF.multiply((-1.5335923091350053E243));
      complex2.ONE.toString();
      complex1.ZERO.tanh();
      complex0.ONE.toString();
      Complex complex3 = Complex.valueOf(919.3060392495913, 919.3060392495913);
      complex3.readResolve();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.add((-2005.010913119634));
      Complex complex6 = complex0.add(2614.528148957529);
      Complex complex7 = complex1.tan();
      complex7.ZERO.sinh();
      complex4.tan();
      complex6.multiply(17);
      Complex.valueOf(9.215765583599035E-8, 9.215765583599035E-8);
      complex3.sinh();
      Complex complex8 = complex7.atan();
      complex5.log();
      complex8.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(4686.2343740469, (-6216.9520297968165));
      Complex complex1 = complex0.acos();
      complex1.tan();
      Complex complex2 = complex1.cosh();
      Complex complex3 = new Complex(4686.2343740469, (-219.41));
      complex3.log();
//      try { 
        complex2.add((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.exp();
      Complex complex3 = new Complex(1.0, (-731.34164));
      Complex complex4 = complex3.createComplex((-13.0), (-1.569038687687144));
      Complex complex5 = complex1.subtract(3387.53247353369);
      Complex complex6 = Complex.INF;
      complex5.divide(complex6);
      Complex complex7 = complex4.cos();
      Complex complex8 = complex6.multiply(1942.5735214438);
      Complex complex9 = complex5.sqrt1z();
      complex6.add(complex4);
      complex0.pow(complex8);
      complex0.exp();
      Complex complex10 = complex2.subtract(1480.0);
      complex10.log();
      Complex complex11 = complex6.log();
      complex8.toString();
      Complex complex12 = complex11.divide(complex7);
      complex10.cosh();
      complex9.atan();
      complex10.tan();
      Complex complex13 = new Complex((-13.0), (-929.76649101424));
      complex13.cosh();
      complex0.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-1204.5342887994175);
      Complex complex0 = new Complex((-1204.5342887994175), (-1204.5342887994175));
      Complex complex1 = null;
//      try { 
        complex0.pow((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.add(0.0);
      complex1.nthRoot(1230);
      Complex complex2 = Complex.valueOf(5.645687086879944E-128, 2.5739053239703935E-4);
      complex1.multiply(complex2);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      complex2.isNaN();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.log();
      Complex complex6 = new Complex((-889.0));
      Complex complex7 = complex4.tan();
      Complex complex8 = new Complex((-568.3254993428374), 1326.65882980234);
      complex5.divide(complex4);
      Complex complex9 = Complex.valueOf(6.283185307179586);
      complex8.tanh();
      Complex complex10 = new Complex((-20.0), (-2286.10723670944));
      complex5.multiply((-1104));
      Complex complex11 = Complex.ONE;
      complex11.sin();
      Complex complex12 = Complex.I;
      complex10.readResolve();
      complex9.pow((-889.0));
      Complex complex13 = Complex.INF;
      complex13.readResolve();
      complex5.conjugate();
      complex10.tanh();
      Complex complex14 = Complex.ZERO;
      complex7.reciprocal();
      Complex complex15 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.I.readResolve();
      Complex complex2 = Complex.valueOf(1.8014398509481984E16);
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.add((-1.0));
      Complex complex5 = complex3.INF.createComplex(0.0, (-1.0));
      complex5.ONE.abs();
      complex0.readResolve();
      complex1.NaN.conjugate();
      complex4.I.exp();
      complex4.I.createComplex((-1.569038687687144), (-1444.7263017828684));
      complex5.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-257.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.negate();
      Complex complex3 = new Complex((-7547183.772429132), Double.POSITIVE_INFINITY);
      complex3.INF.pow((-7547183.772429132));
      complex3.divide(0.41421356237309515);
      Complex complex4 = complex2.sqrt1z();
      complex1.sqrt1z();
      complex4.createComplex((-257.0), (-1307.0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf((-1.0235056525096769E156));
      complex0.getArgument();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.add(Double.NaN);
      Complex complex4 = complex3.createComplex((-1.0235056525096769E156), (-1.0));
      complex4.abs();
      complex2.readResolve();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.createComplex((-1.569038687687144), 1.8014398509481984E16);
      Complex complex8 = complex0.subtract((-1134.4));
      complex4.divide(complex0);
      Complex complex9 = complex3.cos();
      Complex complex10 = complex8.multiply((-1.0));
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex2.add(complex5);
      complex8.pow(complex7);
      complex7.exp();
      complex5.subtract((-449.1116));
      complex9.log();
      complex12.log();
      complex10.toString();
      complex3.divide(complex8);
      complex11.cosh();
      complex2.atan();
      Complex complex13 = Complex.valueOf((-776.249));
      complex13.tan();
      complex1.tanh();
      complex8.cos();
      complex6.add((-1.0235056525096769E156));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-5.23735298540578E-9));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.subtract((-20.42));
      Complex complex4 = complex2.NaN.reciprocal();
      complex2.INF.reciprocal();
      Complex complex5 = complex1.negate();
      complex5.ZERO.acos();
      complex5.getField();
      Complex complex6 = complex0.divide(complex5);
      complex6.ZERO.nthRoot(1091);
      complex3.ZERO.multiply((-1100.4502295897678));
      complex6.pow((-20.42));
      Complex complex7 = complex0.multiply((-5.23735298540578E-9));
      complex7.NaN.sinh();
      Complex complex8 = complex2.reciprocal();
      complex8.NaN.asin();
      complex8.NaN.reciprocal();
      complex3.getField();
      complex5.abs();
      complex4.log();
      Complex.valueOf((double) 1091);
      complex4.exp();
      Complex.valueOf(2360.62183323);
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      complex3.tanh();
      Complex complex4 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.asin();
      complex2.ZERO.conjugate();
      complex1.nthRoot(1192);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.sin();
      Complex complex5 = Complex.I;
      complex5.INF.hashCode();
      complex4.readResolve();
      Complex complex6 = complex3.pow(3660.4885191880994);
      complex3.readResolve();
      complex2.conjugate();
      Complex complex7 = Complex.ZERO;
      complex7.tanh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.valueOf((-1089.1365170298013), (-1089.1365170298013));
      complex9.reciprocal();
      Complex complex10 = Complex.I;
      complex6.cosh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(1942.57352144377, 1942.57352144377);
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex1.createComplex(1942.57352144377, 0.0);
      complex2.multiply(complex1);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.asin();
      complex2.ZERO.conjugate();
      complex1.nthRoot(1192);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tan();
      complex4.sinh();
      complex2.negate();
      complex3.equals(complex2);
      Complex.valueOf(20.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-883.9), (-883.9));
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.acos();
      complex0.createComplex((-883.9), (-883.9));
      int int0 = 2146413748;
      // Undeclared exception!
      complex2.nthRoot(2146413748);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(1942.57352144377, 8.264916045152994);
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-568.94442427));
      Complex complex1 = Complex.valueOf((-568.94442427));
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.sqrt();
      Complex complex3 = Complex.INF;
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(942.5896435284);
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex2 = complex1.ONE.sqrt();
      complex1.I.tanh();
      Complex complex3 = complex0.acos();
      complex3.tan();
      Complex.valueOf(1.0, 5.726036941135634E176);
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-568.94442427));
      Complex complex1 = complex0.reciprocal();
      complex0.acos();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf((-568.94442427));
      Complex complex3 = Complex.valueOf(20.0, (-568.94442427));
      complex3.tan();
      Complex complex4 = complex1.multiply(complex2);
      complex4.subtract(complex2);
      complex1.createComplex((-667.3875525697513), (-20.0));
      Complex complex5 = Complex.INF;
      complex5.reciprocal();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(2.398038505188316E-163, 2.398038505188316E-163);
      Complex complex1 = Complex.valueOf(2.398038505188316E-163);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.add(2.398038505188316E-163);
      complex3.nthRoot(1230);
      complex1.exp();
      Complex complex4 = complex2.tan();
      complex0.negate();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      complex1.negate();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-568.94442427));
      complex0.reciprocal();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tanh();
      Complex.valueOf((-568.94442427), (-568.94442427));
      Complex complex3 = Complex.ZERO;
      complex1.hashCode();
      complex0.sin();
      Complex complex4 = Complex.valueOf((-568.94442427), 5.726036941135634E176);
      complex2.multiply(966.9);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(2.398038505188316E-163, 2.398038505188316E-163);
      Complex complex1 = Complex.valueOf(2.398038505188316E-163);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.add(2.398038505188316E-163);
      complex2.nthRoot(1230);
      complex0.exp();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      Complex complex4 = complex2.negate();
      complex3.divide(20.0);
      Complex complex5 = Complex.ONE;
      complex2.sqrt1z();
      complex4.add(complex1);
      Complex.valueOf(2.291259288787842, 20.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.conjugate();
      complex1.nthRoot(7);
      Complex complex4 = complex3.exp();
      complex3.tan();
      complex4.negate();
      complex1.equals(complex4);
      complex2.negate();
      complex1.divide(540.124);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-471.6030833587));
      complex0.getArgument();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 1.5707963267948966);
      Complex complex3 = complex2.sqrt();
      complex1.tanh();
      Complex complex4 = Complex.NaN;
      complex4.subtract(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex4.equals(complex1);
      complex4.negate();
      complex2.divide((-2617.52247));
      Complex complex5 = Complex.NaN;
      complex1.sqrt1z();
      complex0.add(complex2);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(3420.657, (-2866.43503949856));
      complex0.multiply(1566);
      Complex complex1 = complex0.multiply((-1712));
      complex1.NaN.exp();
      complex0.INF.tan();
      complex1.cos();
      Complex complex2 = complex1.acos();
      complex0.atan();
      Complex complex3 = complex0.pow(0.0);
      complex3.readResolve();
      complex2.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(3.141592653589793, (-3.459885432869825E182));
      Complex complex1 = complex0.subtract(1.6390891075134277);
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = Complex.valueOf((-3.459885432869825E182));
      Complex complex4 = complex2.subtract(1.6390891075134277);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.ZERO.negate();
      complex6.I.pow(complex3);
      Complex complex7 = complex6.ZERO.negate();
      complex7.INF.nthRoot(2043);
      Complex complex8 = complex1.NaN.pow((-1833.6761654287566));
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = complex5.INF.log();
      complex9.sqrt();
      complex2.sqrt1z();
      Complex complex11 = complex0.I.exp();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex1.cos();
      Complex complex14 = Complex.valueOf(1.6390891075134277, (-3.459885432869825E182));
      complex4.equals(complex14);
      complex7.INF.multiply((-0.9999938214158962));
      complex11.add((-1833.6761654287566));
      complex5.getField();
      complex0.cosh();
      complex12.nthRoot(2043);
      complex8.multiply(complex13);
      complex13.abs();
      complex7.createComplex(1137.8879697188625, Double.NaN);
      complex1.sinh();
      complex10.divide((-3.459885432869825E182));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1942.4237023283988);
      Complex complex2 = Complex.valueOf(1942.4237023283988, 1942.4237023283988);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex0.subtract(complex1);
      complex3.sin();
      complex0.add(1.0);
      complex0.multiply((-1732));
      complex2.log();
      complex1.readResolve();
      complex4.hashCode();
//      try { 
        complex0.nthRoot((-370));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -370
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.I.exp();
      complex3.ZERO.conjugate();
      complex1.nthRoot(1192);
      Complex complex4 = complex1.exp();
      complex1.tan();
      complex2.negate();
      complex4.equals(complex2);
      complex0.negate();
      complex4.divide((double) 1192);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(942.5896435284);
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      complex1.ONE.sqrt();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.acos();
      complex3.INF.subtract((-1447.1903075388));
      complex1.readResolve();
      complex3.equals(complex1);
      complex3.negate();
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.sqrt1z();
      complex5.NaN.add(complex2);
      Complex.valueOf(942.5896435284, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(540.124, 2.786195589614054);
      complex0.hashCode();
      Complex complex1 = complex0.tan();
      complex0.negate();
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex(540.124);
      Complex complex4 = complex3.tan();
      Complex complex5 = new Complex(Double.NaN, 2.5739053239703935E-4);
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = Complex.valueOf((-1667.00707554437));
      complex3.tanh();
      Complex complex8 = Complex.NaN;
      complex3.multiply((-1006));
      complex6.readResolve();
      complex1.pow((-8.788204588550787E-5));
      complex7.readResolve();
      Complex complex9 = complex7.conjugate();
      complex9.tanh();
      Complex complex10 = Complex.ZERO;
      complex10.createComplex((-1667.00707554437), 0.4494072198867798);
      complex4.reciprocal();
      complex4.cosh();
      complex2.divide(2.786195589614054);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = 1236.1116;
      Complex complex0 = Complex.valueOf(1236.1116);
//      try { 
        complex0.INF.multiply((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1942.57352144377, 1942.57352144377);
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.subtract(complex0);
      Complex complex3 = complex2.createComplex(1942.57352144377, 0.0);
      complex3.ZERO.reciprocal();
      complex0.cosh();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2.398038505188316E-163, 2.398038505188316E-163);
      Complex complex1 = new Complex(2.398038505188316E-163);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex2.createComplex(20.0, (-547.0));
      complex2.nthRoot(1);
      complex3.getImaginary();
      Complex complex4 = complex0.divide(complex3);
      complex4.createComplex(2.0, Double.POSITIVE_INFINITY);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(540.124, 2.786195589614054);
      complex0.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(2.786195589614054);
      Complex complex3 = complex2.divide(complex1);
      complex3.divide(complex2);
      Complex complex4 = new Complex(2383.9426343431);
      complex4.subtract(Double.NaN);
      complex3.sqrt1z();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ZERO;
      complex6.I.pow(Double.NaN);
      complex6.abs();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(2.398038505188316E-163, 2.398038505188316E-163);
      Complex complex1 = new Complex(2.398038505188316E-163);
      Complex complex2 = complex0.ONE.acos();
      complex0.createComplex((-154.22668539657397), 1490.5);
      complex2.nthRoot(1525);
      Complex complex3 = Complex.I;
      complex3.getImaginary();
      complex3.abs();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(2.398038505188316E-163, 2.398038505188316E-163);
      Complex complex1 = Complex.valueOf(2.398038505188316E-163);
      Complex complex2 = complex0.ONE.acos();
      complex1.add(2.398038505188316E-163);
      complex2.nthRoot(1230);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.negate();
      Object object0 = complex5.readResolve();
      complex0.equals(object0);
      complex4.negate();
      complex4.divide(2217.0);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-4410.083257015), (-4410.083257015));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(1107.1650407112184);
      complex0.add((-4410.083257015));
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf((-4410.083257015), (-253.3485));
      Complex complex5 = complex2.sinh();
      complex0.hashCode();
      complex4.sin();
      Complex.valueOf((-4410.083257015), (-1319.343));
      complex0.add(complex5);
      complex2.negate();
      complex3.divide((-787.7701697511636));
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-568.94442427));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex((-568.94442427));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.atan();
      Complex.valueOf((-2.1335475961524608E-7));
      complex3.isNaN();
      complex1.log();
      complex0.negate();
      complex1.log();
      Complex complex5 = new Complex((-1373.2));
      Complex complex6 = complex5.tan();
      Complex complex7 = new Complex((-1667.00707554437), (-1373.2));
      Complex complex8 = complex4.divide(complex7);
      Complex complex9 = Complex.valueOf((-1667.00707554437));
      Complex complex10 = complex9.tanh();
      Complex complex11 = Complex.NaN;
      complex11.multiply((-1006));
      complex8.readResolve();
      complex6.pow((-2.1335475961524608E-7));
      complex4.readResolve();
      complex11.conjugate();
      complex10.tanh();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex12.createComplex((-3386.8425968), 675.55684);
      complex13.reciprocal();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(540.124, 2.786195589614054);
      complex0.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(2.786195589614054);
      Complex complex3 = complex2.divide(complex1);
      complex3.divide(complex2);
      Complex complex4 = new Complex(2383.9426343431);
      complex4.subtract(Double.NaN);
      complex3.sqrt1z();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.divide(complex2);
      complex6.createComplex(0.9166666666666666, 2383.9426343431);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(942.5896435284);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      Complex complex3 = complex2.tanh();
      complex1.getArgument();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.cosh();
      complex5.acos();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex4.pow(0.0);
      Complex complex9 = complex1.sqrt1z();
      complex3.add(complex7);
      complex6.ZERO.negate();
      Complex complex10 = complex1.cosh();
      complex9.isNaN();
      complex8.subtract(complex10);
      complex10.log();
      complex5.sqrt();
      Complex complex11 = Complex.valueOf(0.9999969106984044, 0.9999969106984044);
      complex11.reciprocal();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.INF;
      complex12.add(Double.POSITIVE_INFINITY);
      complex6.pow(468.810582);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(942.5896435284);
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex2 = complex1.I.tanh();
      complex0.NaN.getArgument();
      complex2.INF.divide(791.05);
      Complex complex3 = complex1.tanh();
      complex2.acos();
      complex1.tan();
      Complex complex4 = complex1.pow(20.0);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = Complex.valueOf(Double.NaN, 0.0);
      complex1.cosh();
      complex6.isNaN();
      complex6.subtract(complex4);
      Complex complex7 = complex1.log();
      complex5.sqrt();
      complex7.reciprocal();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.INF.pow(complex1);
      Complex complex2 = Complex.valueOf(3294.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex4.ONE.tanh();
      complex5.INF.tanh();
      complex5.ONE.nthRoot(1);
      complex4.cos();
      complex1.hashCode();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      complex1.INF.conjugate();
      Complex complex2 = Complex.valueOf(1942.57352144377, 1942.57352144377);
      Complex complex3 = complex2.exp();
      complex3.acos();
      complex1.sqrt();
      complex1.divide(1942.57352144377);
      complex1.acos();
      complex1.divide(1.5948774814605713);
      complex1.pow(2091.95807743104);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-568.94442427));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.acos();
      complex2.tanh();
      Complex.valueOf((-568.94442427), (-568.94442427));
      Complex complex3 = Complex.ZERO;
      complex2.hashCode();
      complex0.sin();
      Complex.valueOf((-568.94442427), 5.726036941135634E176);
      Complex complex4 = new Complex((-568.94442427), (-4699.276164133416));
      Complex complex5 = complex4.add(complex1);
      complex5.negate();
      complex5.divide((-39.0));
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1848.6));
      Complex complex1 = Complex.valueOf((-1848.6), 1.2704793774453618E163);
      Complex complex2 = complex0.multiply(complex1);
      complex1.NaN.divide(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.pow(complex3);
      complex2.getField();
      complex1.toString();
      Complex complex5 = complex0.add(1737.96569030657);
      complex4.sinh();
      complex4.cos();
      complex5.tan();
      complex0.getField();
      Complex.valueOf(1836.1870782643618);
      complex5.getField();
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(2.398038505188316E-163, 2.398038505188316E-163);
      Complex complex1 = new Complex(2.398038505188316E-163);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex2.createComplex(20.0, (-547.0));
      complex2.nthRoot(1);
      complex3.getImaginary();
      complex2.abs();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 1493.569785632;
      Complex complex1 = new Complex(1493.569785632, 1493.569785632);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.ONE.reciprocal();
      complex0.createComplex(1493.569785632, 0.0);
      Complex complex4 = complex2.I.multiply(3.149267215638608E-187);
      complex4.NaN.multiply(complex0);
      Complex complex5 = complex0.ZERO.multiply((-1341));
      complex5.INF.atan();
      complex0.abs();
      Complex complex6 = complex0.multiply(1493.569785632);
      complex0.readResolve();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.I.subtract(complex6);
      complex7.tan();
      complex6.getArgument();
      complex8.abs();
      complex7.exp();
      complex0.pow(2348.3376);
      Complex complex9 = new Complex(0.0, Double.NaN);
      complex1.equals(complex9);
      complex3.multiply(2348.3376);
      complex2.tanh();
      complex6.abs();
      complex5.acos();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex10.ONE.conjugate();
//      try { 
        complex11.INF.nthRoot((-1341));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,341
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1942.57352144377);
      Complex complex2 = Complex.valueOf(1942.57352144377, 1942.57352144377);
      Complex complex3 = complex1.ONE.multiply(complex2);
      complex0.subtract(complex1);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.add(1.0);
      complex1.nthRoot(931);
      complex5.exp();
      Complex complex6 = complex1.tan();
      complex4.negate();
      complex0.equals(complex6);
      Complex complex7 = complex2.negate();
      complex7.divide((-1848.6));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-4410.083257015), (-4410.083257015));
      Complex complex1 = complex0.reciprocal();
      complex1.multiply(1107.1650407112184);
      Complex complex2 = complex0.add((-4410.083257015));
      Complex complex3 = complex1.INF.conjugate();
      complex2.ONE.atan();
      Complex complex4 = Complex.valueOf((-4410.083257015));
      complex1.isNaN();
      complex4.ONE.log();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex1.log();
      complex6.tan();
      Complex complex7 = complex0.divide(complex4);
      complex5.ONE.tanh();
      complex4.ONE.multiply((-318));
      Complex complex8 = (Complex)complex0.readResolve();
      Complex complex9 = complex5.pow(1107.1650407112184);
      complex3.readResolve();
      complex8.createComplex(3018.74, 2149908.48);
      complex3.nthRoot(1);
      complex7.getImaginary();
      complex3.abs();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1737.96569030657));
      complex0.INF.sin();
      Complex complex1 = Complex.valueOf((-1737.96569030657));
      complex0.ZERO.abs();
      Complex complex2 = complex0.conjugate();
      complex0.conjugate();
      Complex complex3 = complex1.multiply(complex0);
      complex2.multiply((-97.980146925));
      complex1.readResolve();
      complex3.conjugate();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.ZERO;
      complex6.add(4.0889180422033095E8);
//      try { 
        complex5.nthRoot((-1211));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,211
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1737.96569030657));
      Complex complex1 = complex0.INF.sin();
      Complex.valueOf((-1737.96569030657));
      Complex complex2 = Complex.valueOf((-1737.96569030657), 6.283185307179586);
      complex0.multiply(complex2);
      complex2.subtract(complex1);
      complex2.createComplex((-1737.96569030657), (-2.809054633964104E-8));
      Complex complex3 = Complex.I;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-568.94442427));
      Complex complex1 = complex0.reciprocal();
      complex0.ZERO.acos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf((-568.94442427));
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.add(complex2);
      Complex.valueOf(101585.81633183999);
      Complex complex7 = complex3.add(complex4);
      complex5.negate();
      complex7.divide((-568.94442427));
      Complex complex8 = Complex.NaN;
      complex6.sin();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.INF.pow(complex1);
      Complex complex2 = Complex.valueOf(3294.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex4.ONE.tanh();
      complex5.pow(complex2);
      complex3.asin();
      complex0.negate();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1493.569785632, 1493.569785632);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.divide(1493.569785632);
      Complex complex4 = Complex.valueOf(942.5896435284);
      Complex complex5 = complex3.divide((-248.97));
      complex4.getArgument();
      Complex complex6 = new Complex(1625.0, 915.3461844);
      Complex complex7 = complex6.tanh();
      complex0.getArgument();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.pow(complex0);
      complex9.tanh();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex2.sqrt1z();
      complex7.acos();
      Complex complex12 = complex11.pow(915.3461844);
      Complex complex13 = Complex.valueOf(Double.NaN);
      Complex complex14 = complex5.pow(1625.0);
      complex10.NaN.asin();
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = complex14.add(complex11);
      complex10.cosh();
      Complex complex17 = Complex.ONE;
      Complex complex18 = new Complex(1531.1416754);
      complex18.isNaN();
      Complex complex19 = complex12.subtract(complex6);
      complex5.multiply(complex10);
      complex16.getArgument();
      complex2.log();
      complex18.sqrt();
      complex19.reciprocal();
      complex16.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(540.124, 540.124);
      complex0.I.divide((-1029.42239879973));
      Complex complex1 = Complex.valueOf(942.5896435284);
      Complex complex2 = complex1.I.divide(Double.POSITIVE_INFINITY);
      complex1.getArgument();
      Complex complex3 = complex2.I.tanh();
      complex1.NaN.getArgument();
      complex0.pow(complex1);
      Complex complex4 = complex2.tanh();
      complex4.NaN.cosh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex5.pow(2397.8);
      complex2.tan();
      Complex complex8 = complex2.pow(20.0);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex6.add(complex2);
      complex2.cosh();
      Complex complex11 = complex7.cosh();
      complex10.isNaN();
      complex3.exp();
      Complex complex12 = complex9.tan();
      complex3.negate();
      complex11.equals(complex2);
      Complex complex13 = Complex.valueOf(0.0);
      complex13.negate();
      complex12.divide(540.124);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex1.sin();
      complex4.INF.sin();
      complex4.I.toString();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex0.sqrt1z();
      complex6.I.createComplex(1.0572423934936523, 1.0572423934936523);
      complex0.isInfinite();
      complex0.log();
      Complex complex7 = Complex.valueOf(1.0572423934936523);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.INF.sqrt();
      complex8.I.sqrt();
      complex0.log();
      complex2.equals("(0.0, 1.0)");
      Complex complex10 = Complex.valueOf(1.0572423934936523, 0.0);
      Complex complex11 = complex10.divide(complex7);
      Complex complex12 = complex2.add(complex1);
      complex0.toString();
      complex5.abs();
      complex3.nthRoot(17);
      complex7.getImaginary();
      Complex complex13 = complex11.cosh();
      complex9.multiply((-1));
      complex13.toString();
      complex10.pow(complex8);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1090.9030134), (-1090.9030134));
      complex0.getReal();
      complex0.abs();
      Complex complex1 = Complex.valueOf(0.0, (-1090.9030134));
      complex0.INF.pow(complex1);
      complex0.isNaN();
      complex0.readResolve();
      Complex complex2 = complex0.exp();
      complex0.sqrt();
      complex2.ONE.sqrt1z();
      complex0.add((-3283.715703723443));
//      try { 
        complex1.nthRoot((-372));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -372
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex0.ZERO.divide(complex1);
      complex3.readResolve();
      Complex complex5 = complex0.pow(0.0);
      complex1.ONE.subtract(complex3);
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.I.subtract(complex4);
      complex2.NaN.toString();
      complex4.INF.negate();
      Complex complex7 = complex0.negate();
      complex7.I.sqrt();
      Complex complex8 = complex6.sinh();
      complex8.ONE.abs();
      complex8.asin();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex1.multiply(complex2);
      complex0.atan();
      complex9.sqrt();
      complex4.divide(0.0);
      complex4.acos();
      Complex.valueOf(0.0);
      complex1.getReal();
      complex10.acos();
      complex5.isInfinite();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.INF.asin();
      complex1.ZERO.add(complex0);
      complex1.ZERO.abs();
      Complex complex2 = complex0.NaN.add((-1.0));
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex3.ZERO.divide(complex2);
      complex4.NaN.subtract((-1.0));
      complex4.NaN.getArgument();
      Complex complex5 = complex3.ZERO.sin();
      Complex complex6 = complex2.NaN.exp();
      complex6.ZERO.readResolve();
      complex3.I.subtract(complex0);
      complex0.ZERO.hashCode();
      Complex complex7 = complex0.NaN.reciprocal();
      complex3.I.exp();
      Complex complex8 = complex7.I.subtract(complex2);
      Complex complex9 = complex0.ONE.sqrt();
      complex5.hashCode();
      Complex complex10 = complex9.NaN.asin();
      complex0.readResolve();
      complex8.NaN.add(0.0);
      complex0.toString();
      complex5.pow(0.0);
      complex2.sinh();
      complex3.isInfinite();
      complex10.ZERO.createComplex(0.0, (-1.0));
      Complex complex11 = complex7.conjugate();
      complex3.acos();
      complex11.tan();
      complex10.tanh();
      complex6.abs();
      complex8.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(398.1332373323087, 398.1332373323087);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.cosh();
      complex2.NaN.toString();
      complex2.ZERO.abs();
      complex1.I.createComplex(0.0, 398.1332373323087);
      complex0.isNaN();
      Complex complex3 = complex1.subtract(398.1332373323087);
      complex3.I.reciprocal();
      Complex complex4 = complex3.ZERO.negate();
      complex4.multiply((-1431.079671402));
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex3.ZERO.subtract(complex5);
      complex6.NaN.negate();
      complex0.sinh();
      Complex complex7 = Complex.valueOf((-4768.4177));
      complex3.subtract((-4768.4177));
      Complex complex8 = complex3.tan();
      complex8.ZERO.getField();
      complex7.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.cosh();
      complex2.log();
      Complex complex3 = complex0.log();
      complex0.I.getField();
      complex3.INF.getField();
      complex0.getReal();
      complex3.isNaN();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.5186), (-4.5186));
      Complex complex1 = Complex.valueOf(0.0, (-106.0933822));
      complex1.NaN.add(0.0);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.I.subtract(complex1);
      complex3.I.toString();
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex0.ZERO.subtract(complex1);
      complex0.ZERO.getField();
      complex0.hashCode();
      Complex complex6 = Complex.ZERO;
      complex3.ZERO.divide(complex6);
      complex2.subtract(3313.508683);
      Complex.valueOf(3313.508683, (-106.0933822));
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.multiply((-4.5186));
      Complex complex9 = complex3.exp();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex8.I.sin();
      complex9.divide(complex1);
      complex10.subtract(0.0);
      complex10.hashCode();
      Complex complex12 = complex8.multiply(0.0);
      complex12.I.asin();
      complex10.isNaN();
      complex5.sqrt1z();
      complex4.exp();
      complex4.tanh();
      complex11.add((-365.19));
      Complex.valueOf((-365.19), 0.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.pow(0.0);
      complex2.getArgument();
      complex2.ONE.log();
      Complex complex4 = complex3.ZERO.divide(0.0);
      complex1.nthRoot(1140);
      Complex complex5 = complex0.NaN.divide(0.0);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.I.add(complex0);
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex3.cos();
      complex8.ZERO.readResolve();
      complex8.createComplex(0.0, (-2308.4363551));
      complex8.sinh();
      complex9.divide(0.0);
      complex5.nthRoot(989);
      Complex complex10 = complex5.log();
      complex2.getField();
      complex10.pow(complex8);
      complex9.reciprocal();
      complex10.isNaN();
      complex4.negate();
      Complex complex11 = complex4.cosh();
      complex4.multiply(complex10);
      complex0.hashCode();
      complex11.multiply((double) 1140);
      complex4.acos();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(540.124, 540.124);
      complex0.I.divide((-1029.42239879973));
      Complex complex1 = Complex.valueOf(942.5896435284);
      Complex complex2 = complex1.I.divide(Double.POSITIVE_INFINITY);
      complex1.getArgument();
      Complex complex3 = complex2.I.tanh();
      complex1.NaN.getArgument();
      complex0.pow(complex1);
      Complex complex4 = complex2.tanh();
      complex4.NaN.cosh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex5.pow(2397.8);
      complex2.tan();
      Complex complex8 = complex2.pow(20.0);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex6.add(complex2);
      complex2.cosh();
      complex7.cosh();
      complex10.isNaN();
      complex10.subtract(complex8);
      complex8.multiply(complex5);
      complex5.getArgument();
      Complex complex11 = complex2.log();
      complex9.sqrt();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 0.5295937061309814;
      Complex complex0 = Complex.valueOf(0.5295937061309814, 0.5295937061309814);
      double double1 = 0.0;
      Complex complex1 = Complex.valueOf(0.5295937061309814, 0.0);
      Complex complex2 = complex0.exp();
      complex2.I.tanh();
      Complex complex3 = complex0.INF.add(complex1);
      complex0.NaN.multiply(complex2);
      complex0.readResolve();
      complex1.toString();
      Complex complex4 = complex3.sin();
      complex4.NaN.nthRoot(47);
//      try { 
        complex4.nthRoot((-2113));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -2,113
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.asin();
      complex1.ZERO.divide(complex2);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex5.log();
      complex6.NaN.readResolve();
      complex0.hashCode();
      complex3.nthRoot(1);
      complex0.exp();
      complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(1549.08313);
      Complex complex1 = complex0.divide(1549.08313);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.add(1.08443021774292);
      complex3.add(463.9752172);
      Complex.valueOf(463.9752172);
      complex4.getArgument();
      complex2.multiply(1601);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.NaN.hashCode();
      complex0.ONE.readResolve();
      Complex complex1 = complex0.ONE.divide((-224.34296798));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.ONE.conjugate();
      complex4.ZERO.acos();
      Complex complex5 = complex1.ONE.log();
      Complex complex6 = complex5.I.divide(1.7043828964233398);
      Complex complex7 = complex5.exp();
      complex0.nthRoot(1);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.sin();
      complex8.hashCode();
      complex1.readResolve();
      complex0.isNaN();
      Complex complex10 = complex4.pow(complex3);
      complex8.nthRoot(3156);
      complex10.ZERO.abs();
      Complex.valueOf(1594.664519450559);
      complex2.getArgument();
      complex0.NaN.createComplex(0.0, (-400.5806));
      complex5.pow((double) 3156);
      complex9.subtract(complex1);
      complex10.divide(complex6);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.createComplex((-1.1623181434592597E-259), (-1.1623181434592597E-259));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ONE.negate();
      complex1.ZERO.atan();
      Complex complex3 = complex2.I.divide(2.0);
      Complex complex4 = complex3.INF.tan();
      complex0.ONE.cosh();
      complex0.readResolve();
      complex0.createComplex(0.0, 1902.213067402065);
      complex0.toString();
      Complex complex5 = complex2.NaN.exp();
      complex5.I.multiply(376.8124389759368);
      Complex complex6 = complex2.conjugate();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex7 = complex6.conjugate();
      complex7.sqrt1z();
      complex0.getArgument();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.tanh();
      complex0.getArgument();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(2559.09701818);
      Complex complex1 = Complex.valueOf((-4.870518577546228E-56));
      complex1.I.divide(complex0);
      complex0.cos();
      Complex complex2 = Complex.valueOf((-760.7), (-760.7));
//      try { 
        complex2.nthRoot(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: 0
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.INF.getField();
      Complex complex2 = complex0.divide((-2104.4169435));
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.ZERO.negate();
      complex4.I.subtract((-2104.4169435));
      Complex complex5 = complex3.ZERO.sin();
      complex2.isInfinite();
      complex2.ONE.getArgument();
      Complex complex6 = complex3.exp();
      complex6.I.divide(complex2);
      Complex complex7 = complex6.INF.negate();
      complex7.I.sin();
      complex3.multiply(complex0);
      Complex.valueOf(0.0, (-660.0947));
      complex0.ONE.pow(complex1);
      complex2.NaN.add(6.283185307179586);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex5.pow(complex8);
      complex9.I.tan();
      Complex complex10 = complex9.I.cosh();
      complex10.INF.readResolve();
      complex2.getField();
      complex9.INF.subtract((-2104.4169435));
      complex8.hashCode();
//      try { 
        complex1.nthRoot((-1008));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,008
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.23735298540578E-9));
      Complex complex1 = complex0.pow((-5.23735298540578E-9));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.subtract((-20.42));
      Complex complex4 = complex2.NaN.reciprocal();
      complex2.INF.reciprocal();
      Complex complex5 = complex1.negate();
      complex5.ZERO.acos();
      complex5.getField();
      Complex complex6 = complex0.divide(complex5);
      complex6.ZERO.nthRoot(1091);
      complex6.pow((-20.42));
      Complex complex7 = complex0.multiply((-5.23735298540578E-9));
      complex7.NaN.sinh();
      Complex complex8 = complex2.reciprocal();
      complex8.NaN.reciprocal();
      complex3.getField();
      complex5.abs();
      complex4.log();
      Complex.valueOf((double) 1091);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.ZERO.pow(677.38353332324);
      Complex complex5 = complex3.sqrt();
      complex1.INF.nthRoot(4851);
      complex0.abs();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.INF.add((-1.0));
      complex8.INF.hashCode();
      complex7.ZERO.asin();
      Complex complex9 = Complex.valueOf(2722.710361386, 8.193011);
      Complex complex10 = complex9.NaN.createComplex(1.5229979055675358E-8, 20.0);
      complex10.negate();
      Complex complex11 = complex1.divide(complex0);
      Complex complex12 = complex11.ZERO.pow(0.0);
      complex0.readResolve();
      complex8.sqrt();
      complex4.reciprocal();
      Complex complex13 = complex3.exp();
      Complex complex14 = complex12.add((-2710.1142409));
      complex5.abs();
      complex6.getField();
      complex12.equals(complex5);
      complex13.isNaN();
      complex4.getImaginary();
      complex14.getArgument();
      complex13.add(complex5);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.NaN.divide(complex1);
      Complex complex2 = complex0.I.pow(0.0);
      complex0.I.asin();
      complex0.hashCode();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex1.divide(0.0);
      Complex complex5 = complex4.ONE.acos();
      complex3.sqrt1z();
      complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(3291.533250790232);
      complex0.INF.getField();
      Complex complex1 = complex0.ONE.sqrt();
      complex1.I.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex1.ZERO.pow(748.49472426);
      Complex.valueOf(748.49472426);
      Complex complex6 = Complex.valueOf(3291.533250790232, Double.NaN);
      complex1.readResolve();
      complex2.exp();
      complex2.NaN.getArgument();
      complex5.readResolve();
      complex2.add(402.843209198407);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex4.tanh();
      complex8.INF.hashCode();
      complex1.hashCode();
      complex6.divide(748.49472426);
      Complex complex9 = complex3.add(complex6);
      Complex complex10 = complex6.sqrt1z();
      complex10.ZERO.sqrt();
      complex9.isNaN();
      complex7.add(402.843209198407);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      complex2.sqrt();
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1942.57352144377);
      Complex complex2 = Complex.valueOf(1942.57352144377, 1942.57352144377);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.createComplex(1942.57352144377, 0.0);
      complex5.ZERO.reciprocal();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      Complex.valueOf(0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex0.NaN.acos();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = complex4.INF.pow(1538.7858437534721);
      complex2.log();
      Complex complex6 = complex1.sinh();
      complex2.ONE.reciprocal();
      complex5.NaN.pow(0.0);
      complex6.NaN.add(complex2);
      complex5.INF.reciprocal();
      complex5.I.reciprocal();
      complex1.asin();
      complex6.isNaN();
      complex3.subtract(1538.7858437534721);
      Complex.valueOf(3162.802177384, 158.3491);
      complex5.isInfinite();
      Complex.valueOf(2063.470279476608, 2063.470279476608);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(1565.968783341545);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.cos();
      double double0 = 2006.1822526306;
      complex2.divide(2006.1822526306);
      Complex complex3 = complex0.add(complex1);
      complex1.asin();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.sqrt1z();
      complex5.ONE.readResolve();
      complex5.hashCode();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.asin();
      complex3.ONE.reciprocal();
      Complex complex8 = complex3.add(0.0);
      complex8.toString();
      complex7.acos();
      complex4.subtract(1565.968783341545);
      complex3.getReal();
      complex6.hashCode();
      Complex complex9 = complex1.divide(1565.968783341545);
//      try { 
        complex9.ONE.divide((Complex) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-638.5), (-638.5));
      Complex complex1 = complex0.cosh();
      complex0.ZERO.toString();
      complex1.pow((-638.5));
      complex1.NaN.getField();
      Complex complex2 = complex0.sin();
      complex2.I.multiply((-638.5));
      complex2.NaN.sin();
      complex2.INF.reciprocal();
      Complex complex3 = complex1.subtract((-638.5));
      complex3.ONE.toString();
      complex3.ZERO.readResolve();
      Complex complex4 = complex3.add((-638.5));
      complex4.NaN.readResolve();
      Complex complex5 = complex0.cos();
      complex5.ONE.getField();
      complex5.I.getArgument();
      complex5.ONE.sin();
      complex1.sqrt1z();
      complex5.subtract((-638.5));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1737.96569030657));
      complex0.INF.sin();
      Complex complex1 = Complex.valueOf((-1737.96569030657));
      complex0.ZERO.abs();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.conjugate();
      complex1.multiply(complex0);
      complex2.multiply((-97.980146925));
      complex1.readResolve();
      complex0.createComplex(0.0, (-5.469119869891027E-8));
      complex1.nthRoot(1);
      complex0.getImaginary();
      complex3.abs();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.ONE.negate();
      complex0.getField();
      Complex complex2 = complex0.multiply(0.0);
      complex0.pow(0.0);
      Complex complex3 = complex2.ZERO.add(2.7002575714977818E-8);
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex4.ZERO.multiply(complex1);
      complex0.exp();
      complex4.reciprocal();
      complex1.getField();
      Complex complex6 = complex0.divide((-20.0));
      complex5.ONE.multiply((-20.0));
      complex1.getArgument();
      Complex complex7 = complex0.I.multiply(complex3);
      Complex complex8 = complex7.ONE.pow(complex3);
      complex1.nthRoot(1);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.multiply((double) 1);
      complex10.toString();
      complex0.INF.sinh();
      Complex complex11 = complex8.pow((-20.0));
      complex11.NaN.getArgument();
      complex3.getImaginary();
      complex5.conjugate();
      complex6.add(complex4);
      complex2.conjugate();
      Complex.valueOf(2.7002575714977818E-8);
      complex7.sin();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.sqrt1z();
      Complex complex1 = new Complex(2218.0);
      complex1.NaN.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.nthRoot(388);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.tanh();
      complex4.ONE.reciprocal();
      complex4.getArgument();
      Complex complex5 = complex4.ZERO.sin();
      complex5.ONE.sqrt1z();
      Complex complex6 = complex4.I.asin();
      complex0.ZERO.multiply(complex2);
      Object object0 = new Object();
      complex3.equals(object0);
      complex0.sqrt();
      Complex complex7 = complex6.cosh();
      complex4.atan();
      complex1.sqrt();
      complex1.isInfinite();
      complex7.sinh();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(1746.1873132377, 3087.0);
      Complex complex1 = Complex.ONE;
      complex1.INF.divide(complex0);
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.ONE.sin();
      complex2.I.negate();
      complex2.ONE.multiply((-5311.541406312));
      complex2.I.createComplex(3087.0, 3087.0);
      complex0.isInfinite();
      complex2.cos();
      complex0.conjugate();
      complex1.multiply(17);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-4410.083257015), (-4410.083257015));
      Complex complex1 = complex0.reciprocal();
      double double0 = 1107.1650407112184;
      complex1.multiply(1107.1650407112184);
      Complex complex2 = complex0.add((-4410.083257015));
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = Complex.valueOf((-4410.083257015));
      complex1.isNaN();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex5.ZERO.negate();
      Complex complex8 = complex1.log();
      complex8.tan();
      complex0.divide(complex5);
      Complex complex9 = complex7.ONE.tanh();
      complex5.ONE.multiply((-318));
      complex0.readResolve();
      complex7.pow(1107.1650407112184);
      complex3.readResolve();
      Complex complex10 = complex4.conjugate();
      complex2.tanh();
      complex6.sin();
      complex10.add(Double.NaN);
//      try { 
        complex9.nthRoot((-318));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -318
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.add((double) 1);
      complex3.ONE.multiply(complex2);
      complex3.I.reciprocal();
      Complex complex4 = complex0.log();
      complex4.ZERO.tanh();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.I.multiply(1);
      Complex complex7 = complex6.multiply(915);
      complex7.NaN.reciprocal();
      Complex complex8 = complex4.divide(complex3);
      complex8.NaN.getArgument();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex4.sin();
      complex10.ZERO.nthRoot(1);
      complex4.readResolve();
      Complex complex11 = complex8.tanh();
      complex11.ONE.log();
      complex9.multiply(915);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sinh();
      Complex.valueOf((-6.49667713553005E-8), 0.0);
      Complex complex2 = complex0.createComplex((-5250.765831231268), (-5250.765831231268));
      complex2.negate();
      complex0.sinh();
      Complex complex3 = complex1.sqrt1z();
      complex3.NaN.atan();
      complex3.I.nthRoot(1212);
      complex3.NaN.tan();
      Complex.valueOf(2929.75, 0.0);
      complex2.tanh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.abs();
      complex0.ONE.getArgument();
      complex0.nthRoot(415);
      Complex complex1 = Complex.valueOf(4.3791842770430786E-218, (double) 415);
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex0.multiply(complex1);
      complex2.pow(Double.POSITIVE_INFINITY);
      complex3.I.nthRoot(415);
      Complex complex6 = complex0.multiply(complex3);
      complex6.equals((Object) null);
      Complex complex7 = complex5.pow(187.70468764028683);
      Complex complex8 = complex7.ONE.sin();
      complex8.I.asin();
      complex0.add(complex1);
      complex5.getReal();
      complex7.nthRoot(415);
      Complex complex9 = complex6.cos();
      Complex complex10 = complex9.I.subtract(Double.POSITIVE_INFINITY);
      complex10.ZERO.cos();
      Complex complex11 = complex3.subtract(complex2);
      complex4.cos();
      complex11.createComplex(187.70468764028683, 4.3791842770430786E-218);
      Complex complex12 = complex6.sqrt1z();
      complex12.getField();
      complex0.toString();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0, 0.0);
      complex5.NaN.cos();
      complex3.negate();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.NaN.sqrt1z();
      complex7.ONE.multiply(complex0);
      complex1.INF.hashCode();
      Complex complex8 = complex1.sqrt();
      complex8.ZERO.multiply(complex3);
      complex8.getField();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex9.reciprocal();
      complex10.subtract(complex1);
      Complex complex11 = Complex.valueOf((-20.0), 4153.022923124631);
      complex11.INF.hashCode();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sinh();
      complex2.ZERO.exp();
      complex2.ONE.pow(0.6563453674316406);
      complex1.ONE.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.log();
      complex4.NaN.negate();
      complex3.hashCode();
      complex3.isNaN();
      complex0.hashCode();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.INF.pow(complex1);
      Complex.valueOf(3294.0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.ONE.tanh();
      complex4.ONE.nthRoot(1);
      complex3.cos();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.539175932653188E202);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.isNaN();
      complex0.isNaN();
      Complex complex3 = complex0.NaN.reciprocal();
      complex1.I.createComplex(5.8378869339035456E-257, 6.539175932653188E202);
      complex2.hashCode();
      complex1.hashCode();
      int int0 = (-651);
      complex1.multiply((-651));
      complex2.reciprocal();
      complex1.add((double) (-651));
      double double0 = 20.0;
//      try { 
        complex3.INF.nthRoot((-651));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -651
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(277.18287521131, 0.0);
      Complex complex1 = complex0.asin();
      complex1.ONE.multiply(1);
      Complex complex2 = complex0.NaN.sqrt();
      complex0.NaN.multiply(0.0);
      Complex complex3 = complex0.ZERO.sqrt1z();
      complex3.INF.hashCode();
      complex3.I.nthRoot(356);
      complex3.tanh();
      complex0.getField();
      Complex complex4 = complex0.sinh();
      Complex.valueOf((double) 1);
      complex4.getArgument();
      complex2.abs();
      complex4.sin();
      complex0.subtract(1.3325698375701904);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 1493.569785632;
      Complex complex1 = new Complex(1493.569785632, 1493.569785632);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.ONE.reciprocal();
      complex0.createComplex(1493.569785632, 0.0);
      Complex complex4 = complex2.I.multiply(3.149267215638608E-187);
      complex4.NaN.multiply(complex0);
      Complex complex5 = complex0.ZERO.multiply((-1341));
      Complex complex6 = complex5.INF.atan();
      complex0.abs();
      Complex complex7 = complex0.multiply(1493.569785632);
      complex0.readResolve();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.I.subtract(complex7);
      complex8.tan();
      complex7.getArgument();
      complex9.abs();
      complex8.exp();
      complex0.pow(2348.3376);
      Object object0 = complex6.readResolve();
      complex1.equals(object0);
      complex3.multiply(2348.3376);
      complex2.tanh();
      complex7.abs();
      complex5.acos();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex10.ONE.conjugate();
//      try { 
        complex11.INF.nthRoot((-1341));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot compute nth root for null or negative n: -1,341
//         //
//         verifyException("org.apache.commons.math3.complex.Complex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-165.097384216359), (-165.097384216359));
      Complex complex1 = complex0.add(162.353613);
      assertEquals((-165.097384216359), complex1.getImaginary(), 0.01);
      assertEquals((-165.097384216359), complex0.getImaginary(), 0.01);
      assertEquals((-2.7437712163589936), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4225.182216358766), 1.1554696041977512E-288);
      Complex complex1 = complex0.conjugate();
      assertEquals((-1.1554696041977512E-288), complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-4225.182216358766), complex0.getReal(), 0.01);
      assertEquals((-4225.182216358766), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }
}
