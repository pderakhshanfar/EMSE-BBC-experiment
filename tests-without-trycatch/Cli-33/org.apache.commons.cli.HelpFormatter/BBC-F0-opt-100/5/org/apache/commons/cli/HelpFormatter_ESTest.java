/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:02 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.defaultWidth = 1;
      options1.toString();
      // Undeclared exception!
      helpFormatter0.printHelp("-", options1, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      Option option0 = new Option("", ";");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      String string0 = "";
      boolean boolean0 = true;
      option0.setArgName("org.apache.commons.cli.HelpFormatter$1");
      Options options3 = options2.addOption("", "LP?qlj.iq-", true, ";");
      String string1 = "";
      options3.addOption("", " ", true, "-");
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options2, (-1), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = (-1438);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("-", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, ".GE[_2WKIH\"f");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 111, "e 4=:EEl|(4fx5", "e 4=:EEl|(4fx5", options1, 111, 111, ".GE[_2WKIH\"f");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 798, (-3248));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "P", (String) null, options0, 2, 74, "org.apache.commons.cli.Options", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "m(AS_K[oNsFk$7[]gS";
      helpFormatter0.setOptPrefix("m(AS_K[oNsFk$7[]gS");
      helpFormatter0.setOptPrefix("zqm");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(7);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "zqm", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.getOptionGroups();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "[ option: ", "[ option: ", options0, 3, 115, (String) null, true);
      helpFormatter0.createPadding(115);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, " ", "\n", options0, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2320), "D\"YwOj>SN,]358.W `", "", options0, "<", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setWidth((-60));
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("--");
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "--", (File) mockFile0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("fDq)OV-[prh", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      int int0 = 37;
      Options options0 = null;
      helpFormatter0.defaultWidth = 37;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(37, "wk", "i", (Options) null, "i", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = options0.addOption("", "arg", true, "--");
      helpFormatter0.printHelp("-", options1, true);
      helpFormatter1.findWrapPos("usage: ", 1, 3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.append((double) 3);
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "arg", options0, 74, 74, "", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos(";}ob$Qq0[qMxAY", 10, (-1));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("vqw.yPo@Gv94E}m.");
      Options options0 = new Options();
      options0.addOption("arg", "--", true, "usage: ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "Illegal option name '", "line.separator", options1, (-1380), 114, "--", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("vqw.yPo@Gv94E}m.");
      Options options0 = new Options();
      options0.addOption("arg", "--", true, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("-", 5, 44);
      helpFormatter0.renderOptions(stringBuffer0, 44, options0, 44, 74);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter2.renderWrappedText(stringBuffer0, 3, 74, "H,Dn^");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "30yH!'ngdo=", "", options0, 3, 83, "H,Dn^", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option ]'";
      MockFile mockFile0 = new MockFile("", "The option ]'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "\n", " ", options0, 3434, (-1), (String) null, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "k%R2:Rb'(", true, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      options0.addOption("arg", "usage: ", true, "\n");
      helpFormatter1.printHelp("--", options1, true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", "k%R2:Rb'(", true, "usage: ");
      int int0 = 2690;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("--", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "\"Nlt9S+EBugHmxaZW");
      int int0 = 1;
      int int1 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "The option ]'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2914, "' contains an illegal character : '", "-", options0, 74, 611, " ", true);
      // Undeclared exception!
//      try { 
        options0.addOption("-", " ", false, "@+w`T`Nz!");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "\"Nlt9S+EBugHmxaZW");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.printHelp(74, "usage: ", "\"Nlt9S+EBugHmxaZW", options0, (String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.renderOptions(stringBuffer0, 2, options0, 34, 13);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      MockFile mockFile0 = new MockFile("The option '", "The option ]'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string1 = ",";
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 13, (Options) null, 19, 19);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      MockFile mockFile0 = new MockFile(" ]", "The option ]'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", " ]", options0, " ]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      Option option0 = new Option("", "U=V", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(53, "org.apache.commons.cli.ParseException", " ]", options1, "");
      String string0 = helpFormatter0.defaultArgName;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "}%>";
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.setArgName("b");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "HG?_0Mdd /2Q&;`RR");
      String string0 = "B\\hb&<%8JWn6";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer1, 66, (Options) null, 117, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("R");
      helpFormatter0.setLongOptSeparator("R");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 11, (String) null, "KA", options1, (-547), (-2215), "v+OKYRo`DiB=%kpmy9s", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ]", "The option ]'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(150, "\"", " ]", (Options) null, "\"7|xN{)");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option ]'";
      MockFile mockFile0 = new MockFile(" ]", "The option ]'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, " ]");
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "", false, " ");
      helpFormatter0.printHelp(13, "The option ]'", " ]", options3, "usage: ", false);
      boolean boolean1 = false;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "?5dCCk", options2);
      // Undeclared exception!
//      try { 
        options1.addOption("--", "usage: ", false, "GMeth");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.TAIWAN;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "|}]Jh", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(" GYGTA64", (String) null, options0, "|}]Jh");
      Options options1 = options0.addOption("arg", "-", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptions();
      options1.addOptionGroup(optionGroup0);
      options1.getOptions();
      helpFormatter0.printUsage(printWriter0, 23, "", options1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.println(13);
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "arg", options0, " ");
      helpFormatter1.setNewLine("line.separator");
      helpFormatter0.defaultSyntaxPrefix = "line.separator";
      helpFormatter0.getWidth();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "line.separator", "org.apache.commons.cli.Util", options0, 1, 14, (String) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      MockFile mockFile0 = new MockFile("]", "t}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "?*vt", false, "]");
      String string1 = "911e$IbWLwv";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "911e$IbWLwv", "usage: ", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1453);
      helpFormatter0.setArgName("v%");
      helpFormatter0.setLongOptSeparator("[");
      String string0 = "peQ?%`'~^@UOn;P";
      MockFile mockFile0 = new MockFile("peQ?%`'~^@UOn;P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      int int0 = (-648);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[O<lqeq RdKhRJ-", "", options0, (-648), 0, "[", false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1453);
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("-");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char char0 = '?';
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 12, "", (String) null, options0, 3, (-2267), "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]", "t}");
      helpFormatter0.setArgName(" :: ");
      helpFormatter0.setLongOptSeparator("]");
      MockFile mockFile1 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char char0 = '?';
      Options options0 = new Options();
      int int0 = (-324);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-324), "usage: ", "Mx'C,Yo`9", options0, (-1008), (-324), "b", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option ]'";
      MockFile mockFile0 = new MockFile(" ]", "The option ]'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " ]");
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "", false, " ");
      helpFormatter0.printHelp(13, "The option ]'", " ]", options3, "usage: ", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Re*%1Kf", "Re*%1Kf", (Options) null, "Re*%1Kf", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]", "t}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "?*vt", false, "]");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3441, "", (String) null, options0, 14, 3, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "\"Nlt9S+EBugHmxaZW");
      options1.addOption("", true, " ]");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", options0, true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.println(13);
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "arg", options0, " ");
      helpFormatter1.setNewLine("line.separator");
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "]", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      String string0 = "}%>";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      helpFormatter1.setLongOptSeparator("");
      String string1 = "LTBfYP{";
      helpFormatter1.createPadding(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "SiTH7C", (Options) null, "Ya;`|rws%@V$A*vqua");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1453);
      helpFormatter0.defaultOptPrefix = "}%>";
      helpFormatter0.defaultDescPad = (-1453);
      helpFormatter0.setArgName("b");
      helpFormatter0.setLongOptSeparator("b");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char char0 = '?';
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1008), "b", "[O<lqeq RdKhRJ-", options0, (-324), (-324), "b", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "}%>";
      helpFormatter0.defaultLeftPad = (-1453);
      helpFormatter0.setArgName("b");
      helpFormatter0.setLongOptSeparator("b");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2082, "b", "", (Options) null, "2O");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(3, "arg", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "org.apache.commons.cli.ParseException");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (-1558), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("^_?", options0, false);
      helpFormatter0.defaultOptPrefix = "}%>";
      helpFormatter0.defaultLeftPad = (-1453);
      helpFormatter0.setArgName("b");
      helpFormatter0.setLongOptSeparator("b");
      Options options1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("b", "b", (Options) null, "b", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, 0, "");
      helpFormatter0.setNewLine("uIR+");
      helpFormatter0.printHelp("uIR+", ", ", options0, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos(" [ARG]", 14, 14);
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(Fe{eW7 VM$!FsW>AK", options0);
      helpFormatter0.getLeftPadding();
      int int0 = 11;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.hasLongOption("   ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1453);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "}%>";
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, "}%>", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}%>";
      helpFormatter0.setArgName("}%>");
      helpFormatter0.setLongOptSeparator("E");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("E", "}%>", (Options) null, (String) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.renderOptions((StringBuffer) null, 4146, options0, 4146, 4146);
      helpFormatter0.setWidth(2563);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "--");
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      helpFormatter0.setArgName("2iIKl?L'29U]");
      helpFormatter0.setLongOptSeparator("");
      String string0 = "RB&#|wu`.nIt";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "2iIKl?L'29U]", (Options) null, "RB&#|wu`.nIt", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ]/The option '");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile(" ]", "The option '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 4544, "usage: ");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("X%tm5R~|hpz");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-734), "AfTUVu>.r`G", "2O3D9AqDj]q@${mF7", (Options) null, "eRgl}");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1546, 1546, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFile mockFile2 = new MockFile(mockFile1, ":y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println(0.0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 45, ":y");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ]", "The option '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 4544, "usage: ");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "WPgB%q[iuY8'$n)*", "", options0, "qyvy<?2k5lA W0u>\tZ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.setSyntaxPrefix(";MLN0?tgI!5*y");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "cmdLineSyntax not provided");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      mockPrintWriter0.println(0.0F);
      charArray0[2] = '_';
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 81, (-1388), "o{>)Qb#;|X6_+5(~1");
      helpFormatter1.setNewLine("--");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.write(3);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4057), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 1990;
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'M';
      int int1 = (-4057);
      mockFileOutputStream0.write((-4057));
      charArray0[2] = 'T';
      charArray0[3] = 'R';
      mockPrintWriter0.write(charArray0);
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1990, "", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int2 = 4544;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 4544, (-349), "");
      // Undeclared exception!
//      try { 
        stringBuffer1.insert((-349), (CharSequence) "arg", (-1872), (-445));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // dstOffset -349
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-2027);
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-2027));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "31|N~hEuzAj=g-HBH1";
      MockFile mockFile0 = new MockFile("31|N~hEuzAj=g-HBH1");
      MockFile mockFile1 = new MockFile(mockFile0, "31|N~hEuzAj=g-HBH1");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      long long0 = (-136L);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-347));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("Cannot add value, list full.");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, "", "", options0, "{FW+", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      options0.hasLongOption("-PTcnMYL");
      String string0 = null;
      boolean boolean0 = false;
      helpFormatter0.printHelp("J3-5S!3sM=", "-PTcnMYL", options0, (String) null, false);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 168;
      options0.getOptionGroups();
      helpFormatter0.setLongOptPrefix("-PTcnMYL");
      int int1 = (-1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1492, options0, 4146, 1492);
      int int2 = 555;
      // Undeclared exception!
//      try { 
        stringBuffer1.insert(3, (Object) "W-kpD,G#`t?/H-Pa9-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 3
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.defaultArgName = null;
      int int0 = 0;
      String string0 = "fK20]dH&w";
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1428), ">", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "-", "]", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "1dV~~(=U~}H{D8";
      helpFormatter0.setNewLine("1dV~~(=U~}H{D8");
      Options options0 = new Options();
      options0.hasLongOption("1dV~~(=U~}H{D8");
      String string1 = "line.separator";
      helpFormatter0.printHelp("Y!ydahL}>UDm", "-", options0, "line.separator", true);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.defaultWidth = 168;
      options0.getOptionGroups();
      int int0 = 4146;
      helpFormatter0.setLongOptPrefix("1dV~~(=U~}H{D8");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('d');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      helpFormatter0.printOptions(mockPrintWriter0, 168, options0, 2007, 0);
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 4146, options0, 0, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      MockFile mockFile0 = new MockFile("F=|348\"^\"7#J");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println(0L);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1492, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'M';
      mockFileOutputStream0.write((-4057));
      charArray0[2] = 'T';
      int int0 = (-1020);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1020), "rqHH2zjz2#D");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-797), 9, "#s7W#8UxkfM");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      String string0 = "-";
      String string1 = "l tJN4%u'Dt} +<.8";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 4177;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 4177, 4177, "l tJN4%u'Dt} +<.8");
      int int1 = (-2327);
      stringBuffer0.reverse();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2327), options0, (-2327), (-596));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(10);
      String string0 = "<";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("-", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("Cannot add value, list full.");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println((-136L));
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3437), "Cannot add value, list full.");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.defaultLongOptPrefix = "";
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter1.append((CharSequence) "usage: ");
      helpFormatter0.setNewLine("DPlW ");
      stringWriter0.append('H');
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 585, (-2262));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp(1990, "Q?r'hzrSd3 ^MVV1", (String) null, options0, "RR9fi");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("}%>", "LTBfYP{", options0, "q}{S%/Y", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.println(13);
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "has already been selected: '", "arg", options0, " ");
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-797), (-1558), "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'M';
      mockFileOutputStream0.write((-4057));
      charArray0[2] = 'T';
      charArray0[3] = 'R';
      mockPrintWriter0.write(charArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1990, "", options0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "}%>";
      helpFormatter0.defaultLeftPad = (-1453);
      helpFormatter0.setArgName("line.separator");
      helpFormatter0.setLongOptSeparator("line.separator");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("line.separator", "line.separator", (Options) null, "line.separator", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'M';
      mockFileOutputStream0.write((-4057));
      charArray0[2] = 'T';
      charArray0[3] = 'R';
      mockPrintWriter0.write(charArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1990, "", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-349), "", "line.separator", options0, "WPgB%q[iuY8'$n)*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "1dV~~(=U~}H{D8";
      helpFormatter0.setNewLine("1dV~~(=U~}H{D8");
      Options options0 = new Options();
      options0.hasLongOption("1dV~~(=U~}H{D8");
      String string1 = "line.separator";
      helpFormatter0.printHelp("Y!ydahL}>UDm", "-", options0, "line.separator", true);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.defaultWidth = 168;
      options0.getOptionGroups();
      int int0 = 4146;
      helpFormatter0.setLongOptPrefix("1dV~~(=U~}H{D8");
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 4146, options0, 0, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.println(13);
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "arg", "arg", options0, " ");
      helpFormatter1.setLongOptSeparator("--");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((String) null, "usage: ", (Options) null, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "}%>";
      helpFormatter0.defaultLeftPad = (-1453);
      helpFormatter0.setArgName("b");
      helpFormatter0.setLongOptSeparator("b");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("b", "b", (Options) null, "b", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "}%>";
      helpFormatter0.defaultWidth = (-1453);
      String string0 = "b";
      helpFormatter0.setArgName("b");
      helpFormatter0.setLongOptSeparator("b");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("b", "b", (Options) null, "b", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.ParseException");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(10);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.println(2338L);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "gxl~=)");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(".L;", ".L;", options1, ".L;", false);
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
//      try { 
        MockFile.createTempFile((String) null, "}o/MQXomilB");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P,zt";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1882), "P,zt");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println((-136L));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "fK20]dH&w");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-797), (-1558), "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ", "uHy:*j1_ Hr')`7");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // uHy:*j1_ Hr')`7
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 5002, 2563);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-507), 5002, "U}%A5u");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.Options");
      int int0 = 1974;
      helpFormatter0.renderWrappedText(stringBuffer0, 1974, 1974, "org.apache.commons.cli.Options");
      helpFormatter0.setNewLine("[");
      helpFormatter0.createPadding(1974);
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 31;
      helpFormatter0.defaultOptPrefix = "[";
      String string0 = "L|vu9";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, "L|vu9");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("X%tm5R~|hpz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1027, 74, "#^^DHnCCO S");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.setLeftPadding(3);
      String string0 = "";
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      Option option0 = null;
//      try {
        option0 = new Option(" ", "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      boolean boolean1 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) stringBuffer0, 31, 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 74
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Option");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-362);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "@^g33\\WAQ$tg9B";
      // Undeclared exception!
//      try { 
        options1.addOption("org.apache.commons.cli.Option", "@^g33WAQ$tg9B", true, "</*n01i~P#~FAYN1p?j");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      int int0 = (-573);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-573), 0, "]Oh");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("X%tm5R~|hpz");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.findWrapPos("X%tm5R~|hpz", (-734), (-202));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "[$W3>o+y=)T\"S)<nE";
      helpFormatter0.setSyntaxPrefix("[$W3>o+y=)T\"S)<nE");
      helpFormatter0.setSyntaxPrefix("[$W3>o+y=)T\"S)<nE");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptPrefix();
      String string1 = "]";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      mockPrintWriter0.write(1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "c '=tk{m5HUiGy%;'8");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 3;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options2.addOption("Y8X ", true, " ,?$Md6dj['Em");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Y8X ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
