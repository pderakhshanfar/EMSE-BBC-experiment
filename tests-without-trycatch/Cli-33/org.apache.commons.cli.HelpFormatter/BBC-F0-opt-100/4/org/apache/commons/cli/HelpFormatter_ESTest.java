/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:47:47 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[", "fk0Fj=F2", options0, "6=x Y6MO8q,:");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-620));
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "arg");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "-", options0, "-", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Zvig+zo;>Hjs#ME[", "", options1, "=,Rc8A0|;9Ta4GOd~s", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, "");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("hYD_#+lQ!~.", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'hYD_#+lQ!~.' contains an illegal character : '#'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultLongOptPrefix = "4w5R";
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 54;
      helpFormatter0.defaultDescPad = 54;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 54, 54, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getArgName();
      stringBuffer1.append(stringBuffer0);
      Object object0 = new Object();
      stringBuffer0.append(object0);
      stringBuffer1.append((double) 74);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int1 = 175;
      stringBuffer0.append(stringBuffer1);
      stringBuffer0.trimToSize();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
//      try { 
        stringBuffer0.append((CharSequence) "", 1650, 54);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // start 1650, end 54, s.length() 0
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      Options options0 = new Options();
      String string0 = "&;!0=x|B\\knb";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "&;!0=x|Bknb", "--", options0, "--", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = 1;
      Option option0 = new Option("", "arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(" ", "rG`P+~*", options0, "rG`P+~*", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 193, 31, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 31, 1675, "[ Options: [ short ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      int int0 = 34;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("\n", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "&;!0=x|B\\knb";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(3, "&;!0=x|Bknb", "--", options0, "--", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "--", (Options) null, "arg", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", "arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("gs6Cli%IZpd_xa", "has already been selected: '", options0, "has already been selected: '", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2), options0, (-1973), 3694);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 783, 44);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setWidth((-209));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.findWrapPos("\n", 64, 812);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 32, options0, 2166, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 3758;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2305), "", "", options0, 3758, 3758, "JqWfkfL8QWf%IJ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setLeftPadding((-2989));
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      String string0 = "J~bH*PE>";
      MockFile mockFile0 = new MockFile("j&bA,VTbrsYGj~/QS", "J~bH*PE>");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
//      try { 
        MockFile.createTempFile("arg", "usage: ", (File) mockFile1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "8Il6fe:XrbkVn");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("", "--", true, "%vM,]^R^x+G");
      OptionGroup optionGroup2 = optionGroup0.addOption(option1);
      options1.addOptionGroup(optionGroup2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 84, "", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1665), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", (String) null, options0, "-", true);
      File file0 = MockFile.createTempFile("arg", "[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "'", (String) null, options0, 1, 1, "[", false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      options1.addOption("arg", true, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 71);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1015));
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 2214;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", " ", options0, " ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, "%vM,]^R^x+G");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 116, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 3, options1, (-2191), 74);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(990);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter0.append('-');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 37, "\"", "", options0, 3, 74, "\n", false);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "\"", "\"", options0, 1, 990, ":2=|Q");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.optionComparator = null;
      Options options0 = new Options();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      Options options2 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 8);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("\n", "rG`&:/~3", options0, "rG`&:/~3", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption((String) null, "w:k+!H8irE", true, "-");
      helpFormatter1.printHelp("ME f$$~pCdJ", " ", options1, " ", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NO_ARGS_ALLOWED");
      helpFormatter1.printHelp("hX;Og6m<&7w t9Q\"{/", "%,0/B<.]p#F?L", options2, "\"=WK&\"9:Mi");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1661), options1, 1, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "]", objectArray0);
      mockPrintWriter0.checkError();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1099, 2, "[ Options: [ short ");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("[ Options: [ short ", 2, 2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "&;!0=x|B\\knb";
      Options options1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "\n", " ", (Options) null, " ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      String string0 = "v1tPS5vm~Ln";
      Options options1 = options0.addOption("", true, "v1tPS5vm~Ln");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "*5@@h+w<gEJ9", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "l(";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, "", "l(", options0, "&;!0=x|Bknb", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "usage: ");
      helpFormatter0.defaultWidth = 178;
      StringBuffer stringBuffer0 = new StringBuffer("gPK>#<&3yZ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-132), options0, 2258, 2258);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-943), options0, 32, 32);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2114), 572, "T");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("", false, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("Jb4(dp.9BCdktPP", "rG`P+~H", options1, "usage: ", false);
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Jb4(dp.9BCdktPP", "org.apache.commons.cli.HelpFormatter$1", options1, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 106;
      StringBuffer stringBuffer0 = new StringBuffer(106);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "-");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) stringBuffer1;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) "[ option: ";
      PrintWriter printWriter0 = mockPrintWriter1.printf("[ option: ", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.GERMANY;
      mockPrintWriter2.printf(locale0, "[ARG...]", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "l}D72]*";
      int int0 = 0;
      String string1 = "";
      String string2 = "<";
      Options options0 = new Options();
      String string3 = "";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1582), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1162);
      stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter1 = stringWriter0.append('N');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, (-1012), "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1567);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "IPG'@|KM:a)\u0005NkS");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("&O-K#sdf<O[Bp");
      Options options1 = options0.addOption("arg", "--", true, "arg");
      helpFormatter0.printHelp("Kuf:+L4", options1);
      helpFormatter0.setSyntaxPrefix("arg");
      StringBuffer stringBuffer0 = null;
      helpFormatter0.defaultSyntaxPrefix = "";
      int int0 = (-1275);
      MockFile mockFile0 = new MockFile("\"iB.O.HD&c?T+-}yx:>", "usage: ");
      File file0 = MockFile.createTempFile("arg", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int1 = 74;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1275), "PP\"Pb1tVg|;N5W", "org.apache.commons.cli.OptionValidator", options1, (-1275), 2421, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("&O-K#sdf<O[Bp");
      Options options1 = options0.addOption("arg", "--", true, "arg");
      helpFormatter0.printHelp("Kuf:+L4", options1);
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.defaultSyntaxPrefix = "";
      MockFile mockFile0 = new MockFile("\"iB.O.HD&c?T+-}yx:>", "usage: ");
      File file0 = MockFile.createTempFile("arg", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "usage: ", options1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("LN+a#{", "arg", options2, (String) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(", ", ", ", options0, "RE)hE+[+^:[/j+Mo");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "\n", options0, "p8E`\"-DQ[hJ");
      Option option0 = new Option("D", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "arg");
      optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("usage: ", "Jb4(dp.9BCdktPP", options1, "--", true);
      helpFormatter1.setLeftPadding((-1));
      helpFormatter0.printHelp("arg", "\n", options0, " ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      helpFormatter0.printHelp("Nv>B", "Nv>B", options1, "cmdLineSyntax not provided", true);
      helpFormatter0.defaultWidth = 31;
      Option option0 = new Option("arg", "M0QoxjQ", true, "has already been selected: '");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", "M0QoxjQ", true, "");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options2 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp(" ", "", options1, "has already been selected: '", true);
      helpFormatter0.setLeftPadding(3977);
      helpFormatter0.findWrapPos("M0QoxjQ", 45, (-2));
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("Nv>B", "fR~oW8I%ID6OxfkB", options2, "[ Options: [ short ");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Jb4(dp.9BCdktPP", "rG`P+~H", options0, "rG`P+~H", true);
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.findWrapPos("Jb4(dp.9BCdktPP", 31, 13);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("Nv>B", "Ex&", options1, "cmdLineSyntax not provided");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 64, "");
      MockFile mockFile0 = new MockFile("yT;=Jy/UlQKQE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.println((-2556.32998717261));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1056, "", "apKeM*kG@p<M+N.Piy", options0, (-1505), 1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("s(]l\"q/0;/]i", "RE)hE+[+^:[/j+Mo", (Options) null, "s(]l\"q/0;/]i");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2986, options0, 9, 31);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1966), 2986, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 106;
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 1423, "-");
      StringBuffer stringBuffer1 = new StringBuffer(1567);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 1571, "-");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      int int0 = 41;
      String string0 = "B52C_@!8z@E6vEo[";
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", false, "-");
      Options options1 = options0.addOption(option0);
      options1.addOption("NO_ARGS_ALLOWED", "arg", true, "arg");
      int int1 = (-4487);
      int int2 = (-2149);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, (-1468), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">s", "", options0, "{r2C6^Iis5U8.");
      Options options1 = options0.addOption("", "z.c9aQ*j", true, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 9, options1, 31, 87);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "";
      helpFormatter0.printHelp(31, "Nv>B", "Nv>B", options0, "");
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.setSyntaxPrefix("Nv>B");
      String string1 = "";
      String string2 = "_sb?Y@:t%j";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("_sb?Y@:t%j", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 106;
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 1423, "-");
      StringBuffer stringBuffer1 = new StringBuffer(1567);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 1571, "-");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter0.println((Object) helpFormatter1);
      mockFile0.getAbsolutePath();
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), "/experiment/ /usage: ", "\n", options0, 74, 41, "");
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "arg");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter3.renderOptions(stringBuffer1, (-1921), options0, 3, (-1921));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.println((double) 3);
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayCountry();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp("Nph", "", options0, "");
      helpFormatter0.printOptions(printWriter0, 896, options0, 896, 44);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1423, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(1567);
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1567, "--", "\n", (Options) null, 1490, 1782, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "Bl;?G}:SkOIhKkK! Yl";
      Options options0 = new Options();
      options0.getOption("");
      String string1 = null;
      Options options1 = options0.addOption((String) null, "Vx3e}fO<FQ'", false, "Vx3e}fO<FQ'");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Bl;?G}:SkOIhKkK! Yl", options2, false);
      helpFormatter0.printHelp("Vx3e}fO<FQ'", options0, false);
      helpFormatter0.rtrim("Vx3e}fO<FQ'");
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4WfGp>z<l<*?Yp>yvY");
      Options options1 = options0.addOption("", "Kuf:+L4", false, "-");
      helpFormatter0.printHelp("\n", options1);
      helpFormatter0.setSyntaxPrefix("");
      String string0 = "c!F;oys&dbdOy X?6";
      helpFormatter0.printHelp(">", "c!F;oys&dbdOy X?6", options1, "arg");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("c!F;oys&dbdOy X?6");
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", ">", (File) mockFile0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("\"KkFn)<}");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("\"KkFn)<}");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      helpFormatter1.setLongOptPrefix("G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, (-1217), (-477), "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 193, 31, "");
      helpFormatter1.renderWrappedText(stringBuffer1, 31, 1675, "[ Options: [ short ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 1, 3);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 572, 572, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 1423, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(1567);
      helpFormatter2.renderWrappedText(stringBuffer1, 1649, 74, "-");
      MockFile mockFile0 = new MockFile("line.separator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, " ", "aPs<QTl", (Options) null, 852, (-1505), (String) null, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(861);
      helpFormatter0.defaultLeftPad = 106;
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 1423, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(1567);
      helpFormatter2.renderWrappedText(stringBuffer1, 1649, 1571, "-");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      Options options1 = options0.addOption(option0);
      options1.addOption("NO_ARGS_ALLOWED", "arg", true, "arg");
      // Undeclared exception!
      helpFormatter2.printWrapped((PrintWriter) null, 1, 2097, "fEyz.ctpJ?5.%+Hk%Q,");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`U");
      int int1 = 13;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 586, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "--");
      Option option0 = new Option((String) null, "", true, (String) null);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      helpFormatter0.printHelp("LT6~l8 ", ", ", options0, "LT6~l8 ");
      helpFormatter0.printHelp("p8E`\"-DQ[hJ", (String) null, options0, "F~M}");
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4074, (String) null, options0);
      printWriter0.print('f');
      helpFormatter0.printHelp(printWriter0, 861, "F~M}", ", ", options0, 44, 44, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      helpFormatter0.printHelp("71-NB8BpUE%Qv", "71-NB8BpUE%Qv", options1, "sN&P3kH)?`)&J;t--");
      helpFormatter0.getOptionComparator();
      Option option0 = new Option("", "");
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2221), " ", "71-NB8BpUE%Qv", options0, (String) null, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", " ", true, "Y\"lVBU)=8");
      helpFormatter0.printHelp("Kuf:+L4", options0);
      helpFormatter0.setSyntaxPrefix("--");
      int int0 = (-1945);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1275), (-1945), "Y\"lVBU)=8");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("LT6~l8 ", ", ", options0, "LT6~l8 ");
      helpFormatter0.printHelp("p8E`\"-DQ[hJ", (String) null, options0, "F~M}");
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      helpFormatter0.printHelp(printWriter0, 861, "F~M}", ", ", options0, 44, 44, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 106;
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 1423, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(1567);
      helpFormatter2.renderWrappedText(stringBuffer1, 1649, 1571, "-");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      int int0 = 41;
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("NO_ARGS_ALLOWED", "arg", true, "arg");
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) null, 1, "--", "B52C_@!8z@E6vEo[", options2, (-4487), (-2149), "\n", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("LT6~l8 ", ", ", options0, "LT6~l8 ");
      String string0 = "FM}";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("FM}", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1649, ", ", "sg2", options1, (-1), 2228, "/iHT2~5e~t/wHbBv?'");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Kuf:+L4", false, "-");
      helpFormatter0.printHelp("arg", options1);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(">", "c!F;oys&dbdOy X?6", options1, "--");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = new Locale("--", "arg");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-511), ",jG'g;'B0>$S1{");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("&l^Y3?cosl", "&l^Y3?cosl", options0, "");
      helpFormatter0.getOptionComparator();
      Option option0 = new Option("arg", "has already been selected: '");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(31, "&l^Y3?cosl", "&l^Y3?cosl", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Kuf:+L4", false, "-");
      helpFormatter0.printHelp("Y\"lVBU)=8", options1);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(">", "c!F;oys&dbdOy X?6", options1, "--");
      helpFormatter0.setOptPrefix(",jG'g;'B0>$S1{");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = new Locale("--", "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "a?U.]0KXlW", "%A?,;7s7:", options1, 31, 10, "&rPBwX3_t*", false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 117, 3126, " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(606);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderWrappedText(stringBuffer0, 355, 64, " | ");
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 134, "-", "", (Options) null, 3, 74, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) comparator0;
      PrintWriter printWriter1 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Object object0 = new Object();
      printWriter1.format(locale0, "-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 3, "3Yqq}?hFw(=sm2b1", (String) null, (Options) null, (-2303), 1528, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      helpFormatter0.printHelp("Nv>B", "Nv>B", options1, "cmdLineSyntax not provided", true);
      helpFormatter0.defaultWidth = 31;
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) "cmdLineSyntax not provided";
      objectArray0[5] = (Object) "Nv>B";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 105, "Nv>B", "", options0, 9, 77, "", false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 77, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("LT6~l8 ", ", ", options0, "LT6~l8 ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F~M}", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-480), "-", "m&-)", options0, (-833), (-480), "F~M}");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) "arg";
      objectArray0[7] = (Object) "-";
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      int int0 = 63;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption("org.apache.commons.cli.HelpFormatter$1", "\n", true, "G&Q%B7uNg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) comparator0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printWrapped(printWriter0, 9, 9, "w\"/3HKM*Gh");
      helpFormatter0.getDescPadding();
      mockPrintWriter0.append('a');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "[");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(9);
      helpFormatter0.findWrapPos("26jRJrI", (-2448), (-2448));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) options0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "9", objectArray0);
      helpFormatter0.printHelp(printWriter0, 9, "NO_ARGS_ALLOWED", "", options0, 31, 31, "3Yqq}?hFw(=sm2b1", false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.GERMAN;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = 'j';
      charArray0[2] = 'p';
      charArray0[3] = '(';
      mockPrintWriter1.write(charArray0);
      helpFormatter0.setNewLine("%n]fK,w8");
      helpFormatter0.rtrim(",");
      helpFormatter0.rtrim("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('B');
      int int0 = 643;
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 643, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = "Nv>B";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      helpFormatter0.printHelp(31, "Nv>B", "Nv>B", options0, "");
      String string2 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      String string1 = "-";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3960, "-", (String) null, (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "}P");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Nv>B";
      Options options0 = new Options();
      String string1 = " ";
      Options options1 = options0.addOption("arg", false, " ");
      String string2 = "cmdLineSyntax not provided";
      helpFormatter0.printHelp("Nv>B", "Nv>B", options1, "cmdLineSyntax not provided", true);
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1675, "--", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("Q", false, "usage: ");
      options2.addOption((String) null, "arg", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append('T');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 1423, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(1567);
      helpFormatter2.renderWrappedText(stringBuffer1, 1649, 1571, "-");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 41, ">G]J#iW8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.addOption("arg", false, "a[j-J");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "9SU9|sME&/Z", options0, "cmdLineSyntax not provided", false);
      helpFormatter0.setLeftPadding(8);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("W0OS_:,z]68MR#3Xfd@", (-741), 18);
      helpFormatter0.getWidth();
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.createPadding(3504);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(643, "Y\"lVBU)=8", "Y\"lVBU)=8", options0, "The option '");
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", options0);
      helpFormatter0.setLongOptPrefix("nf7lM#gC6xC");
      helpFormatter0.setArgName("Y\"lVBU)=8");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Kuf:+L4", false, "-");
      helpFormatter0.printHelp("Y\"lVBU)=8", options1);
      helpFormatter0.setSyntaxPrefix("");
      String string0 = "c!F;oys&dbdOy X?6";
      helpFormatter0.printHelp(">", "c!F;oys&dbdOy X?6", options1, "--");
      helpFormatter0.setOptPrefix(",jG'g;'B0>$S1{");
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("c!F;oys&dbdOy X?6");
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "{l>Yzik9!W)7%\"18Q", (File) mockFile0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Options options0 = new Options();
      helpFormatter0.printHelp("Q", "A CloneNotSupportedException was thrown: ", options0, "A CloneNotSupportedException was thrown: ", false);
      helpFormatter0.setLeftPadding(0);
      String string0 = "[ARG...]";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("[ARG...]", 0, (-2428));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Y\"lVBU)=8", "The option '", options0, "");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 2232;
      helpFormatter0.printHelp("usage: ", " ", options0, " ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setNewLine("hN/,FQ$||y)5ry#");
      helpFormatter0.getSyntaxPrefix();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-103), (-3037), "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2390;
      helpFormatter0.setDescPadding(2390);
      helpFormatter0.rtrim("+84rg");
      helpFormatter0.setOptPrefix("+84rg");
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-1651));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "]@jmK fFj");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#q>}{m$^re";
      int int0 = 943;
      helpFormatter0.setLeftPadding(943);
      helpFormatter0.setLongOptSeparator("#q>}{m$^re");
      helpFormatter0.setArgName("$^mR[QA`E;");
      helpFormatter0.setOptPrefix("#q>}{m$^re");
      helpFormatter0.setDescPadding(32);
      helpFormatter0.findWrapPos("$^mR[QA`E;", 32, 32);
      // Undeclared exception!
//      try { 
        MockFile.createTempFile((String) null, "_");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", true, "!feGC6;5)ZJt");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "!feGC6;5)ZJt", options0, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "Y.xGK");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3960, "", (String) null, (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.createPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      options0.addOption("arg", "", false, "usage: ");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setSyntaxPrefix("");
      options0.getOptionGroups();
      Option option0 = new Option("", (String) null, false, ":|=~BA7j@{LVE7");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-646), options0, (-646), (-646));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      helpFormatter0.printHelp("Nv>B", "Nv>B", options1, "cmdLineSyntax not provided", true);
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-2753);
      Options options0 = new Options();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      // Undeclared exception!
//      try { 
        options0.addOption("PMHpiGZL:,w[4}n", "usage: ", false, "PMHpiGZL:,w[4}n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'PMHpiGZL:,w[4}n' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.createPadding(10);
      String string0 = "";
      Options options0 = new Options();
      String string1 = null;
      Option option0 = null;
//      try {
        option0 = new Option("          ", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '          ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      MockFile mockFile0 = new MockFile("[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "usage: ");
      options1.addOption("arg", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "6rMb!d");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLongOptPrefix = "l}D72]*";
      int int0 = 44;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 44, 44, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("Q", false, "usage: ");
      Options options3 = options2.addOption((String) null, "arg", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 0, "Q", options3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setLongOptPrefix("5=|oNaTeMSt)~!U3m");
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(0);
      assertEquals("usage: ", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 361;
      String string0 = "line.separator";
      String string1 = "M";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option("", false, "\n");
      option0.clearValues();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, options0, (-1678), 1);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }
}
