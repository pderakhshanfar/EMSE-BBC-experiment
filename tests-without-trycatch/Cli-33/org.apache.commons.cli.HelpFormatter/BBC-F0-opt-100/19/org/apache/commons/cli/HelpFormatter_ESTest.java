/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:23:21 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "j9y>oT{(%_W!", (String) null, (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('S');
      // Undeclared exception!
      helpFormatter2.printUsage(printWriter0, 1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 9, 2662, "{P6jEnq>g0J,Ft;}UK ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      int int0 = (-2176);
      helpFormatter0.setDescPadding((-2176));
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.Options";
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int1 = 3;
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = '9';
      char char0 = 'H';
      int int2 = (-788);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Options", (Options) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "usage: ");
      Options options2 = options1.addOption("_", false, "xv|QAC1$yrP+7#i,");
      helpFormatter0.printHelp("' was specified but an option from this group ", options2, true);
      helpFormatter0.printHelp("xv|QAC1$yrP+7#i,", "xv|QAC1$yrP+7#i,", options2, "W[MZQGMb;YZkE -");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1837), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("NO_ARGS_ALLOWED", "oS=7qk;;V", true, "ueC_i='");
      helpFormatter0.printHelp("smG!<yGZ<SikhlK-BV", options2, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "arg", options1, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MF!Aasu,=F");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), 13, "hQ$.Po");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("NI[.W~");
      helpFormatter0.defaultLeftPad = (-2888);
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(14, "--", "          ", options0, "<");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "arg", options1, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-582), options0, 1, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1654, ":z\"Etac%#_&y4i>jq", ">%Y!)&xBXl{ h", options1, ":z\"Etac%#_&y4i>jq", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp("-|=+:7gZ\"h5#A", " ]", options0, " ]");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-39);
      int int0 = (-496);
      String string1 = "s=0q_~qs//-%j6&";
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("s=0q_~qs//-%j6&", options1, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", options0, true);
      String string0 = "#%$3q";
      String string1 = "";
      // Undeclared exception!
//      try { 
        options1.addOption("--", true, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      Option option0 = new Option("arg", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1654, ":z\"Etac%#_&y4i>jq", ">%Y!)&xBXl{ h", options1, ":z\"Etac%#_&y4i>jq", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(71);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Option option0 = new Option("zWWC", false, " ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(".", options2, true);
      helpFormatter0.printHelp("]<", (String) null, options0, " ");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "");
      helpFormatter0.printHelp("c'6QbAi9s8!?i", options1, true);
      helpFormatter0.printHelp("--", "IwNKu2C^=cGWZE\"", options0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("[ARG...]");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b=2Z]nL6[}YR;.FWdn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "arg", false, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 39, "", options0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "M`W}(n}QxhX", options1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, "");
      File file0 = MockFile.createTempFile("line.separator", "P\"cblDBuA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "line.separator";
      objectArray0[1] = (Object) "line.separator";
      objectArray0[2] = (Object) options1;
      mockPrintWriter0.print(58);
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " [ARG]", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "P\"cblDBuA", options0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1405), (-2), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.renderOptions(stringBuffer0, 883, options0, 64, 968);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 1410;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 9, (Options) null, 9, 1410);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-3084);
      helpFormatter0.rtrim(" ");
      String string0 = "-";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("rC9F[XR|<*C=A", "]", options0, "-");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.rtrim("aK=a<I)u\"t<SW8O");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("O01raJ2Pb5+S*.s2H+", "", options0, "\"");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('q');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "=,]", (String) null, options0, (-1), (-2762), (String) null, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", options1, true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ]");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      String string0 = "v}";
      helpFormatter0.printWrapped(printWriter0, 674, 674, "v}");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("!F9&:)nb%}TTbtX", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("arg", (-535), 74);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(9, "\n", "arg", options0, "arg");
      helpFormatter0.setWidth((-461));
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(")qv\"CJ$47", (String) null, options0, "fP|:kK1O:");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", "-", true, "--");
      int int0 = (-1);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '{';
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-630), options0, 1, 64);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      int int0 = 32;
      String string0 = "|BhZ^_?c&n&)$Ma[";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "|BhZ^_?c&n&)$Ma[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, " ");
      MockFile mockFile0 = new MockFile("arg", "org.apache.commons.cli.Options");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 63, options1, 63, 1473);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 19;
      MockFile mockFile0 = new MockFile((File) null, "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("--", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, " ", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 12, 115, "");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 119, "   ", "--", options1, 0, 0, "usage: ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 3247, 83);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(74, "gAP", " ", (Options) null, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.getNewLine();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      options0.hasShortOption("K`|");
      helpFormatter0.printHelp("5kH,u*u", "", options0, "5kH,u*u");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 107, options0, 107, 420);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "arg");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("AK+U<@;Z<E8Ix#|V");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "AK+U<@;Z<E8Ix#|V");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 33, "{7G)HE<");
      helpFormatter0.renderOptions(stringBuffer1, (-1065), options0, 33, 1);
      StringBuffer stringBuffer2 = new StringBuffer(74);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "");
      helpFormatter0.setOptPrefix("kecS>U:x+('~%rj |");
      helpFormatter0.setOptPrefix("kecS>U:x+('~%rj |");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(69);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("7r_-", "%a2LLe@&0XB.V[rZ]r", options1, "'");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 3, 19);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", "Cannot add value, list full.", (Options) null, "Cannot add value, list full.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-143), "arg", "-", options0, "arg", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 3, 19);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, false, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1861), "Q6C,m|:");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      helpFormatter0.renderOptions((StringBuffer) null, 2, options0, 21, 1711);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(739, "Illegal option name '", "Iy{'0u9C6v+cxG", options1, "Iy{'0u9C6v+cxG");
      helpFormatter0.setWidth((-1465));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("6dK", (-535), 1);
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), (-1932), "w2@b=D$6B$iq&*/O");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(false);
      helpFormatter0.printHelp("_CE", "iJd@=", options1, "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("OTQW*L!4Ksl");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('P');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 2148, "_CE");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 3, 19);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "G", "-", options0, (-2854), 10, "usage: ", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "CJ/A]r|QxYM-KGQ/", "CJ/A]r|QxYM-KGQ/", options0, 31, 31, "CJ/A]r|QxYM-KGQ/");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 250, "_{[D", "Ra5m[0]D-*aN~blT-", options0, 250, 31, "cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2));
      String string0 = "BK?=#ar\\wxs`PF[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BK?=#arwxs`PF[");
      Locale locale0 = null;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "BK?=#arwxs`PF[";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "BK?=#arwxs`PF[";
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      int int0 = 13;
      String string1 = "2";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 13, "", "", options0, (-2010), (-2764), "2", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.addOption("arg", (String) null, true, "--");
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setDescPadding((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "o}SW@2pDl r,mzt/#", options0, 119, 1, "Illegal option name '", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile("arg", ";IrGC8c(0m~%k");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), " | ", "\n", options1, (-2107), 1041, "usage: ", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile((String) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3938, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 940, ";Oom1>", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 940, 940, "XEX<)qk", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 9, (-2061), "XEX<)qk");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]`wutbKk");
      mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "   ", "--", options1, 0, 0, "usage: ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "\n", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setDescPadding(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]`wutbKk");
      mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "   ", "--", options1, 74, 74, "usage: ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "--");
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]`wutbKk");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 119, "   ", "", options1, 31, 31, (String) null, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 119, 0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("6dK", (-535), 1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("-");
      helpFormatter0.setDescPadding((-1670));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Util");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, true);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1757, "cmdLineSyntax not provided");
      helpFormatter0.createPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter1.findWrapPos("arg", 107, 381);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = " ] [ long ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ] [ long ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultDescPad = (-4218);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultWidth = (-1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("6dK", (-535), 1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setOptPrefix("-");
      helpFormatter0.setDescPadding((-1670));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Util");
      String string0 = "ly@fRW";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-535), "\n", "ly@fRW", options0, (-776), 3, " :: ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1014);
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = new Options();
      Options options2 = options1.addOption("Wt72w3", "usage: ", false, "usage: ");
      helpFormatter0.printHelp(1711, "2 ", "[ option: ", options1, "0QqVGv", true);
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      String string1 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O");
      int int0 = 31;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1711, "[ option: ", "2 ", options2, 0, 31, "", false);
      int int1 = (-2061);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-2061), "\"Z3c]!XYG=uRM.t-bN");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("r`A9}[9Su{=KzH", options1, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "[");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", true, "");
      helpFormatter0.printHelp(":|voy", "VsB;w7yo@v.P", options3, "[", false);
      helpFormatter0.setDescPadding((-2699));
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", "=74", options1, "r%S&");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile("arg", ";IrGC8c(0m~%k");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " ", "", options1, 0, 545, "", false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", false, (String) null);
      Options options2 = options1.addOption("arg", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2440, "line.separator", "line.separator", options2, 20, (-1534), "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      int int0 = (-535);
      String string1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-535), (-535));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.findWrapPos("y~02h>qiK*$", 1, 1);
      helpFormatter0.getArgName();
      String string0 = "--";
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      Options options2 = options1.addOption("arg", false, "");
      Option option0 = new Option("arg", "%7{o,*,nP\"o");
      Options options3 = options2.addOption(option0);
      String string2 = "";
      // Undeclared exception!
//      try { 
        options3.addOption("-", "arg", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("E7|K-k{i\"U?p<mq*VF", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "''YSJV+Z'6v", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options1, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "N/}a3U~G;+";
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = new Options();
      helpFormatter0.printHelp(1711, " ", "[ option: ", options1, "0QqVGv", true);
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q>W-K4w");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1881, "9");
      helpFormatter0.createPadding(989);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "N/}a3U~G;+";
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = new Options();
      Options options2 = options1.addOption("Wt72w3", "N/}a3U~G;+", false, "N/}a3U~G;+");
      helpFormatter0.printHelp(1711, " ", "[ option: ", options1, "0QqVGv", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q>W-K4w");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1711, "[ option: ", " ", options2, 0, 31, "", false);
      helpFormatter0.findWrapPos("[", 1711, (-535));
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", options2);
      helpFormatter0.printHelp((-1), "[ option: ", "$P5kH,&u*u", options1, "!oKQZ$~rB!+tiPIx[|");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-476), (String) null, options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 3, 19);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) null, 1, "usage: ", "\n", options0, 19, 19, (String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-818), "The option '", "M,mUTs", options0, "The option '");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "N/}a3U~G;+";
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = new Options();
      Options options2 = options1.addOption("Wt72w3", "usage: ", false, "usage: ");
      helpFormatter0.printHelp(1711, " ", "[ option: ", options1, "0QqVGv", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q>W-K4w");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1711, "[ option: ", " ", options2, 0, 0, "", false);
      helpFormatter0.findWrapPos("[", 1711, (-535));
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("N/}a3U~G;+", options2);
      helpFormatter0.printHelp((-1), "[ option: ", "$P5kH,&u*u", options1, "!oKQZ$~rB!+tiPIx[|");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, (-535), (-1496));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 44;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "''YSJV+Z'6v", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "''YSJV+Z'6v");
      Options options3 = options2.addOption(option0);
      options3.addOption("", false, "5CF*");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 44, options0, (-2), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("6dK", (-535), 1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      dataOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "Illegal option name '");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-4419));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile("<", ";IrGC8c(0m~%k");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("Y#", "4", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Y#' contains an illegal character : '#'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 19, (-2820));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NI[.W\\~";
      helpFormatter0.setLongOptSeparator("NI[.W~");
      int int0 = 10;
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("usage: ", "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(";IrGC8c(0m~%k");
      MockFile mockFile0 = new MockFile(" ", "^jQ!d:m|^=dlB3q=(");
      MockFile mockFile1 = new MockFile("line.separator");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      dataOutputStream0.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1806, "^jQ!d:m|^=dlB3q=(");
      helpFormatter0.createPadding(1806);
      helpFormatter0.findWrapPos("", (-2887), 0);
      helpFormatter0.rtrim("^jQ!d:m|^=dlB3q=(");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "N/}a3U~G;+";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1711, "JFR4)~'#* <Yd$`T@s~", "N/}a3U~G;+", options0, " ", false);
      Options options1 = new Options();
      Options options2 = options1.addOption("Wt72w3", "N/}a3U~G;+", false, "N/}a3U~G;+");
      helpFormatter0.printHelp(1711, " ", "[ option: ", options1, "0QqVGv", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q>W-K4w");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1711, "[ option: ", " ", options2, 0, 31, "", false);
      helpFormatter0.findWrapPos("[", 1711, (-535));
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", options2);
      helpFormatter0.printHelp((-1), "[ option: ", "$P5kH,&u*u", options1, "!oKQZ$~rB!+tiPIx[|");
      helpFormatter0.setWidth(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "!&FPcgknb.]c</l[G", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 215, "", "", options1, 1711, 10, "@#Mpv5/j");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      doReturn((-1162)).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "''YSJV+Z'6v", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "''YSJV+Z'6v");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", false, "5CF*");
      helpFormatter0.printHelp(44, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options4, "]", false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("oO", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "tpY133.", false, "1I|P1rUH");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultArgName = "%G>>lO$1~~Y8~agC";
      helpFormatter1.printHelp("}Ol(", "arg", options3, "H#M()B~os&c");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 3, 19);
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 2055;
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2338), "org.apache.commons.cli.HelpFormatter$1");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.defaultWidth = 74;
      stringWriter0.write("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.GERMANY;
      String string0 = "fQc$A";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      mockPrintWriter0.append('X');
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "fQc$A", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 607, "The option '", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, ">");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2820), "CJ/A]r|QxYM-KGQ/", "F{--6aiR,NOdR|=R00", options1, 31, 31, "F{--6aiR,NOdR|=R00");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "&Q{7tKb,\"4BY";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("&Q{7tKb,\"4BY", "&Q{7tKb,\"4BY", (Options) null, "&Q{7tKb,\"4BY", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3245, " *@:z5gR*Z-zer3p", "--", options0, "--", true);
      helpFormatter0.createPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter1, 1502, 0, "--");
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(",)4x9J%ok|pN3E@Cv`", " *@:z5gR*Z-zer3p", options0, "--", true);
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 796, 796, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 796, 796, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(467, "", "The option '", options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Jh@f8=-p-O*g", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "BxpL|m{G6+1v+QZ", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "BxpL|m{G6+1v+QZ");
      Option option0 = new Option("", false, "arg");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-6853), options4, (-2), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      int int0 = 4578;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = null;
//      try {
        option0 = new Option(" ", "", true, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setSyntaxPrefix("--");
      int int0 = 0;
      String string0 = "Zbx~w\\2B";
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("--");
      Options options0 = new Options();
      options0.hasLongOption("5JO D!");
      // Undeclared exception!
//      try { 
        options0.addOption("--", "--", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2412;
      String string0 = "[";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = null;
      Option option0 = new Option("", "--", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "", false, "");
      Options options2 = options1.addOption(option1);
      String string2 = "";
      boolean boolean0 = true;
      options2.hasShortOption("G");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "=}(o,2S8)PR", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.setNewLine("-");
      helpFormatter0.setWidth(0);
      helpFormatter0.setArgName("-");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      int int0 = 0;
      String string1 = "]";
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      Option option0 = null;
//      try {
        option0 = new Option("A CloneNotSupportedException was thrown: ", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "--");
      stringBuffer0.append((CharSequence) "--");
      Options options2 = options1.addOption("E", true, "}z");
      helpFormatter0.renderOptions(stringBuffer0, 3, options2, 3, 5);
      helpFormatter0.rtrim("u}V");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("-", (-145), 3);
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("", "%v/*-)N\"BT4PK;]8");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2909, ":h4#O[',", "--", options2, "usage: ");
      helpFormatter0.setWidth(1567);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("6dK", (-535), 1);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("The option '", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "   ", "--", options1, "$P5kH,&u*u");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "CJ/A]r|QxYM-KGQ/";
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "CJ/A]r|QxYM-KGQ/", "\n", options1, 31, 31, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("6dK", (-535), 1);
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", "A!yvKq\"v{2Nc_ukrBeh", true, "Y9G");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "usage: ", options1, "?]NpRRJhZ2gW|wI[IGk");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("<", "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '<'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("6dK", (-535), 1);
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(9, "\n", "Q", options1, "$P5kH,&u*u");
      helpFormatter0.setWidth((-1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      String string1 = "";
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile("<", ";IrGC8c(0m~%k");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0, false);
      dataOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      boolean boolean0 = false;
      mockPrintWriter0.print(false);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "<");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      helpFormatter0.findWrapPos("6dK", (-535), 1);
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "Q", options1, "$P5kH,&u*u");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "''YSJV+Z'6v", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "''YSJV+Z'6v");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", false, "5CF*");
      helpFormatter0.printHelp(44, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options4, "]", false);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Cannot add value, list full.");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1052;
      helpFormatter0.setWidth(1052);
      helpFormatter0.createPadding(1052);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", "--");
      mockFile0.toURI();
      mockFile0.toURL();
      mockFile0.setExecutable(true, true);
      String string0 = null;
      mockFile0.toURI();
      mockFile0.setWritable(false, false);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[3];
      Locale.forLanguageTag("g:gC~N+`g(ZAq++1&Q");
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 32, 32, "n\falSvRRMP8-sdd!-V");
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("`p-jDL>'", options0);
      helpFormatter0.setSyntaxPrefix("J3.r$>C!K)'Y|.2M");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = (-3345);
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "line.separator", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "jK!a";
      helpFormatter0.findWrapPos("jK!a", 1314, 1314);
      helpFormatter0.setLongOptPrefix("jK!a");
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("jK!a", options0, false);
      String string1 = " ]";
      // Undeclared exception!
//      try { 
        options0.addOption(" ]", "\n", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' ]' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("V|4d#n");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("has already been selected: '", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'has already been selected: '' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "0";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix(" ");
      assertEquals(" ", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("-", "-", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3755));
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-/hZ=LK.M)\"Eef'";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("The option '", "arg", false, "The option '");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'The option '' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
