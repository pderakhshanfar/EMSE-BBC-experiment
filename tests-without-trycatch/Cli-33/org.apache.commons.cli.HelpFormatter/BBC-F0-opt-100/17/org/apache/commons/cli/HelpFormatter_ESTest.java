/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:09:40 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = (-1119);
      Options options0 = null;
      int int1 = 1977;
      String string0 = "' contains an illegal character : '";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(4, "' contains an illegal character : '", "' contains an illegal character : '", (Options) null, "' contains an illegal character : '", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("sFXUig-28?^qO{g", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-754);
      helpFormatter0.setDescPadding((-754));
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "\n", "\n", (Options) null, "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("", true, "\n");
      StringWriter stringWriter0 = new StringWriter(37);
      StringWriter stringWriter1 = stringWriter0.append('n');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 37, "bZ|>ok", "org.apache.commons.cli.Util", options1, 34, 74, "-", true);
      Options options2 = options1.addOption("dnXS_", false, "bZ|>ok");
      helpFormatter0.printHelp("org.apache.commons.cli.Util", options2);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1563), 1, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "z";
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("", 34, 9);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), 9, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "-");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption(option0);
      helpFormatter0.printHelp("-", options0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption((String) null, true, " [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, " ", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#{;Wt7L'8Ak");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-28), 670, "#{;Wt7L'8Ak");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, "arg");
      optionGroup0.addOption(option0);
      helpFormatter0.defaultDescPad = (-1);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("[ Options: [ short ", options1);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("--");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, ";WS[c+nJ\"5|qnJ0djh");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1029));
      helpFormatter0.defaultWidth = (-1029);
      helpFormatter0.defaultArgName = "v]qo),dgutoe6n8el)~";
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = null;
      int int0 = (-937);
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("-", "-", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2, "h>7lV0hgyjtn@", "7#qQG_'", options1, 34, 9, "", false);
      helpFormatter0.printHelp(2581, "7#qQG_'", "!hi?a1QPRbTO2LAkw{}", options2, (String) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1693), options0, 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      String string0 = "KuP7ocR;w\"{OKKh0]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "KuP7ocR;w\"{OKKh0]", "qaLMDm", options0, "qaLMDm");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("}]|", (String) null, options0, "-", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = "(Cozn[R";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, "(Cozn[R", options0, (-2), 64, "<", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, (-1602), "R,W535N");
      helpFormatter0.printHelp(9, "R,W535N", "[", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      option0.setArgName("3KV|X?5%2A$@}q)Njhg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2486, "-", "-", options0, "");
      helpFormatter0.createPadding(1144);
      optionGroup0.addOption(option0);
      helpFormatter0.getOptionComparator();
      int int0 = 1124;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1124, (String) null, "", options1, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", " ", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("i.^A3@x%$,*", (String) null, options0, "-", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options1 = new Options();
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options3 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "", "", options3, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Z_u", "I,L-", (Options) null, (-751), 11, "KuP7ocR;w\"{OKKh0]");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "Nv%\"<$}T*)l~+y<lXv", "r2", options0, 0, 2, ">WY", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.findWrapPos("line.separator", 0, 74);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.findWrapPos("t?=.=NgtY", 2, 2);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 12, 12, "");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("/r)1Z", "", options1, (String) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.printHelp(3, "=M4KdC{`RMJ", "=M4KdC{`RMJ", options1, "=M4KdC{`RMJ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      helpFormatter1.getOptionComparator();
      helpFormatter1.getWidth();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("-", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.findWrapPos(" ", 1, 0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, "-", "--", options0, 52, 0, "arg");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      option0.setArgName("3KV|X?5%2A$@}q)Njhg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2486, "-", "-", options0, "");
      helpFormatter0.createPadding(1144);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("_]D%=VjZoKxU");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 617, 46, "_]D%=VjZoKxU");
      helpFormatter0.renderOptions(stringBuffer1, 46, options1, 35, 5034);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 30, "_S!j@lwF<0mc2.g");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, ":3B", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(91, "[", "", options2, " | ");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", false, (String) null);
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("i.^A3@x%$,*", (String) null, options0, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3455), "+MzE.bG.^s2I");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 0;
      String string0 = "sMp|^D|{&aT/YuDm";
      Options options0 = new Options();
      int int1 = 0;
      options0.hasLongOption("QbFr/iU^5vu");
      int int2 = (-4439);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-4439), "sMp|^D|{&aT/YuDm", (String) null, options0, "Xl", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter(63);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options1 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 63, options0, 32, 32);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 74);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 1, "--");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("r)}Zk", "   ", options1, (String) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options2 = new Options();
      Options options3 = new Options();
      StringBuffer stringBuffer0 = null;
      int int0 = 1389;
      // Undeclared exception!
//      try { 
        options2.addOption("#zPn9i[W7^a:KG30", "--", false, "5@EO&v+'\"W=WA~");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '#zPn9i[W7^a:KG30' contains an illegal character : '#'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "ewC&Anv]G";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "R8 n,|Q\\W7=", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2486, "-", "-", options0, "");
      helpFormatter0.createPadding(1144);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 60;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, 74, 60);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 74);
      int int0 = 0;
      helpFormatter0.findWrapPos(" ", 1, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-391), " ", "I,L-", options0, (int) '0', 0, "I,L-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      File file0 = MockFile.createTempFile("z?jVHx0Tbs~<L", "G)`*QvD7");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append('l');
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("%c_ITl?F'6vN6l=}+5P", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      stringWriter0.close();
      stringWriter0.append((CharSequence) " ");
      StringWriter stringWriter1 = stringWriter0.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Options options1 = new Options();
      int int1 = (-748);
      Options options2 = options1.addOption("arg", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-748), options2, 86, 34);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      helpFormatter0.rtrim("");
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1227, "\n", "\n", (Options) null, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append(';');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      File file0 = MockFile.createTempFile("z?jVHx0Tbs~<L", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter2.append('l');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 74;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      Options options0 = null;
      helpFormatter1.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 3, "arg", (String) null, (Options) null, 7, 1101, " ", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, options1, (-1662), 74);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = ":w=A%PA3@Tyxek60";
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      stringWriter0.append('0');
      stringWriter0.write(" ");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("J{@e>CZDMC9q`HHYG?_", 0, (-1306));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 14, 14);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "zp", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("arg");
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("i.^A3@x%$,*", (String) null, options0, (String) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      option0.clone();
      PrintWriter printWriter0 = mockPrintWriter0.append('o');
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "fPN>IEKJ<'nnpV}e`", "", options1, (-1), (-4439), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 945);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1285), 1561, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append(';');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      File file0 = MockFile.createTempFile("z?jVHx0Tbs~<L", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter2.append('l');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 74;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 3, "arg", (String) null, (Options) null, 7, 1101, " ", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp(351, "sMp|^D|{&aT/YuDm", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("R8 n,|Q\\W7=", "", options0, "ewC&Anv]G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("R8 n,|Q\\W7=");
      Options options1 = options0.addOption("arg", "arg", true, "[fM-N");
      helpFormatter0.printHelp("x}F", options1, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1227, "", "R8 n,|Q\\W7=", (Options) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      stringWriter0.append('0');
      stringWriter0.write(" ");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(6);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1612, "S^g");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1548, "sMp|^D|{&aT/YuDm", "Vt", (Options) null, 0, 1946, "~U)B6", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 74);
      helpFormatter0.findWrapPos(" ", 1, 0);
      mockPrintWriter0.append('r');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 945, " ", options0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("i.^A3@x%$,*", (String) null, options0, (String) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('o');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "fPN>IEKJ<'nnpV}e`", "", options1, (-1), (-4439), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("- ++[\" }K", "R8 n,|Q\\W7=", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("}`z->Y? :_4J5&xl{E", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      stringWriter0.append('0');
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("i.^A3@x%$,*", "i.^A3@x%$,*", (Options) null, "i.^A3@x%$,*", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter(63);
      stringWriter0.write(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options1 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 63, options0, 20, 32);
      helpFormatter0.findWrapPos("yR", 0, 14);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 74);
      helpFormatter0.findWrapPos(" ", 1, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "I,L-", "I,L-", options0, 533, (-848), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 74);
      helpFormatter0.findWrapPos(" ", 1, 0);
      Options options1 = new Options();
      helpFormatter0.printHelp(" ", options1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "R8 n,|Q\\W7=";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("gSO?<", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-324), "gSO?<", "P}jL#j=OSM", options2, 0, 0, "36y", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      helpFormatter0.renderOptions((StringBuffer) null, (-2395), options0, 63, 13);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("W");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1227, "\n", "\n", (Options) null, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("b`:AQKHK}!<&1aAml75", "R8 n,|Q\\W7=", options0, "R8 n,|Q\\W7=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1227, "usage: ", "usage: ", (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("i.^A3@x%$,*", (String) null, options0, (String) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.append('0');
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 1309;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 1309);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.checkError();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      int int0 = 0;
      mockPrintWriter1.print('.');
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "--", "--", options0, 0, (-4439), "--", true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
      helpFormatter0.setSyntaxPrefix("\"0)V`/-vug2?h/34y~");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 533, 0, "\"0)V`/-vug2?h/34y~");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1188), "PcM3Pf/DFpK7kRsZ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.checkError();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printOptions(printWriter0, 0, options0, 9, 9);
      helpFormatter0.findWrapPos("\"0)V`/-vug2?h/34y~", 0, 0);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      mockPrintWriter0.print('.');
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", options0, 663, (-1), "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("gq:jnJx/6");
      helpFormatter0.setArgName("gq:jnJx/6");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(65);
      MockFile mockFile0 = new MockFile("k<JYN}hrrs,P:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1159), "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, (-1), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 74);
      helpFormatter0.findWrapPos(" ", 1, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-391), "", "I,L-", options0, (int) '0', 0, "I,L-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      int int0 = helpFormatter0.defaultWidth;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-640), "I,L-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", false, ")l");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3364), ">", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1227, "usage: ", "usage: ", (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("gq:jnJx/6");
      helpFormatter0.setArgName("gq:jnJx/6");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("|]T.Gaip1");
      Locale locale0 = Locale.FRENCH;
      mockPrintStream0.println((long) 74);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      mockPrintWriter0.format(locale0, "|]T.Gaip1", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "kp*j3;Ed", "", (Options) null, "1{n75dMw");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(44);
      stringWriter0.close();
      stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter1 = stringWriter0.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 75, 75);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("2ZK;//Z'UIe}Q6h", 74, 0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 21, "--", "--", options0, 74, (-391), "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("J5Md|9l`?7S)7]");
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1011, (String) null, "", (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(3);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1188), "kp*j3;Ed", "usage: ", (Options) null, "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setArgName("JGXER3Vo8X0w~hZzS");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 44, 0);
      int int0 = 77;
      int int1 = 1688;
      // Undeclared exception!
//      try { 
        stringBuffer1.deleteCharAt((-2898));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: -2898
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      int int0 = 0;
      String string0 = "c {k|8i\\v8B;";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "c {k|8iv8B;", options0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.write("arg");
      Options options0 = new Options();
      printWriter0.println((float) 1);
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "sMp|^D|{&aT/YuDm", "sMp|^D|{&aT/YuDm", options0, 0, (-4439), "sMp|^D|{&aT/YuDm", false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.rtrim("org.apache.commons.cli.AlreadySelectedException");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.AlreadySelectedException", " ");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      File file0 = MockFile.createTempFile("arg", "$X]q2b#mWj");
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = " [ARG]";
      MockFile.createTempFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = (-2710);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("\n", "--", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1227, "", "usage: ", (Options) null, "kp*j3;Ed");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-1179), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "sMp|^D|{&aT/YuDm", "sMp|^D|{&aT/YuDm", options0, 0, (-4439), "sMp|^D|{&aT/YuDm", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("gq:jnJx/6");
      helpFormatter0.setArgName("gq:jnJx/6");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("|]T.Gaip1");
      Locale locale0 = Locale.FRENCH;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "|]T.Gaip1", (Object[]) null);
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1690), "", "(iaNSOx%", (Options) null, "(iaNSOx%");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setDescPadding((-1188));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "--";
      helpFormatter0.setSyntaxPrefix("--");
      String string1 = null;
      String string2 = "]";
      Options options0 = new Options();
      String string3 = "zRJM<L:Db";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "\n", true, "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      stringWriter0.append('0');
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 172, "z~ymUgG(da7H");
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("J5Md|9l`?7S)7]");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.ROOT;
      mockPrintStream1.println((-1.0F));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "J5Md|9l`?7S)7]");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
      helpFormatter0.findWrapPos("\"0)V`/-vug2?h/34y~", 0, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-391), "", "I,L-", options0, 1259, 0, "I,L-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      String string1 = "#*# ?f6Ua-x";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "#*# ?f6Ua-x");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // #*# ?f6Ua-x
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3310;
      helpFormatter0.createPadding(3310);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      int int1 = (-605);
      helpFormatter0.setLeftPadding((-605));
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "KuP7ocR;w\"{OKKh0]");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "jNd4C%n( XWan#";
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-3729));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("usage: ", ">");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "0^5d", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string1 = "i.^A3@x%$,*";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "i.^A3@x%$,*", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Q>3iuC'LB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('L');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1, "xuR!)", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2542);
      helpFormatter0.setLeftPadding((-2542));
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-3125);
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((-3125));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }
}
