/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:49:02 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1'imyCkBv#lg*";
      helpFormatter0.setLongOptSeparator("1'imyCkBv#lg*");
      helpFormatter0.setOptPrefix("1'imyCkBv#lg*");
      helpFormatter0.setLongOptSeparator("@_EX9-VKvD)88tm-t");
      StringBuffer stringBuffer0 = new StringBuffer("*:M Sb7");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", false, " ");
      int int0 = 0;
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 1, options1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "Wo`#ki0};0D5rhR^(mY";
      helpFormatter0.setLeftPadding((-44));
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "\n", "usage: ", options0, "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setNewLine("^>uPe38W_})&J");
      helpFormatter0.setWidth(244);
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setDescPadding((-1533));
      helpFormatter0.setSyntaxPrefix("6C(B7#\" `^;`<TeSc");
      helpFormatter0.getArgName();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = (-726);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("6C(B7#\" `^;`<TeSc", true, "6C(B7#\" `^;`<TeSc");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '6C(B7#\" `^;`<TeSc' contains an illegal character : '('
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("'[S8,OPL!u", "-", options0, "-");
      helpFormatter0.renderOptions((StringBuffer) null, 8, options0, 8, 8);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 8, 0, "'[S8,OPL!u");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("US)q>#@$F\u0001/HuFNp", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      options0.hasShortOption("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1000, "G6BH].by6rZ<Zj", (String) null, options0, 1000, 1000, (String) null, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('0');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 2, "/:|4] JZ7,`_jmce7OW");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp(9, "arg", "-", options0, "z>YM6$w(o6*[S;", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = new Object();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options1 = options0.addOption("", false, (String) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1618, "*\"Cc02", "NO_ARGS_ALLOWED", options1, 1618, 1618, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")olnvMl{<DYXTH#arh*");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 746, "-", " ", options0, 74, 1, "\n", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "-", true, "--");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 80, (String) null, options0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "'4[S8,OPL!u", true, "'4[S8,OPL!u");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("'4[S8,OPL!u", "", options0, "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 0, (String) null, (String) null, options0, 0, 0, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C'");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "K(mT.GU]2odh.";
      objectArray0[2] = (Object) "'[S8,OPL!u";
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "C'";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "'[S8,OPL!u", objectArray0);
      helpFormatter1.printHelp(printWriter0, 74, "'[S8,OPL!u", "b", options0, 737, 3, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")olnvMl{<DYXTH#arh*");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 746, "-", " | ", options0, 2, 74, "\n", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(3, "--", "'4[S8,OPL!u", options0, "usage: ", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      CharBuffer charBuffer0 = CharBuffer.allocate(34);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      helpFormatter0.printHelp(printWriter0, 18, "'4[S8,OPL!u", "'4[S8,OPL!u", options0, 1594, 18, "Q=yL, rqk^I6", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 18, "Q=yL, rqk^I6");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 64, "", "-", (Options) null, 3, 1, "usage: ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options1.addOption("", false, "--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "qjo)5%", true, "'4[S8,OPL!u");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1868, "org.apache.commons.cli.HelpFormatter$OptionComparator", "[ARG...]", options1, 1868, (-1006), "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3218, options0, 3218, 64);
      StringWriter stringWriter0 = new StringWriter(3218);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = '#';
      mockPrintWriter0.print(charArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) "^}J#y%XG(bODqV";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) stringBuffer1;
      mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-321), "93O+^s5)", "5M", options0, 9, (-186), "#$sfkXm", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "qjo)5%", true, "'4[S8,OPL!u");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      option0.toString();
      helpFormatter0.printHelp((-1), "/SE]UOJxP`8F8LA_Z", "'4[S8,OPL!u", options0, "qjo)5%", true);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "qjo)5%");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3218, options0, 3218, 64);
      StringWriter stringWriter0 = new StringWriter(3218);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) "^}J#y%XG(bODqV";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) stringBuffer1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "K", "J7[:i>PP3.5~!vlOIf#", options0, (-113), (-321), "", false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "'4[S8,OPL!u";
      objectArray0[1] = (Object) "2/Czo88|iJ";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "org.apache.commons.cli.ParseException";
      objectArray0[4] = (Object) "2/Czo88|iJ";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) "2/Czo88|iJ";
      objectArray0[8] = (Object) "org.apache.commons.cli.ParseException";
      mockPrintWriter0.format("2/Czo88|iJ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1624), "|a+[GaRY@]_MkZ{", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "]+=j4I?0");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 8, 1225);
      helpFormatter0.renderOptions(stringBuffer1, 8, options0, 1225, 3218);
      StringWriter stringWriter0 = new StringWriter(97);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringBuffer1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 97, "J7[:i>PP3.5~!vlOIf#", "J7[:i>PP3.5~!vlOIf#", options0, (-1), 19, "J7[:i>PP3.5~!vlOIf#", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", "").when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("", (-488), 23);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("STlUTKJE5I8l", "-", true, "x_H4y$5L&P^J0'SB)Q");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", true, "");
      Option option1 = new Option((String) null, "");
      options2.addOption(option1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-465), "STlUTKJE5I8l", "\n", options2, "*]jdX]CET6*\"LLVO", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      helpFormatter0.printHelp((-1), "Cannot add value, list full.", "/SE]UOJxP`8F8LA_Z", options0, "T#EHkjU-w`BR", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "1}", "--", options0, "}Pg");
      helpFormatter1.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      String string0 = "EEgB>3HD1:G{e";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "EEgB>3HD1:G{e");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, " ");
      helpFormatter0.printHelp(10, "Q9* )N?dK", "", options1, "Q9* )N?dK");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("qxp8", "").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("]", (-488), 23);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.findWrapPos("", (-2), (-452));
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 23, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Util", (String) null, options2, "", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.format("--", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 2975, "\"", "\"", options0, 1615, 4163, "Kex8");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5?/2yVYi2~C");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "5?/2yVYi2~C";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      mockPrintWriter0.format("5?/2yVYi2~C", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "5?/2yVYi2~C", options0);
      String string0 = helpFormatter0.defaultArgName;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-542), "arg", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 4163, "\"", "\"", (Options) null, 64, 1615, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 108, "|gj_@TR`pd`kG7", "", options1, 64, (-1194), "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "--", "'[S8,OPL!u", options0, "usage: ", true);
      helpFormatter0.rtrim("--");
      helpFormatter0.printHelp("'[S8,OPL!u", "'[S8,OPL!u", options0, "--", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1100), "o", " | ", options0, (-1100), (-1316), "has already been selected: '");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      mockFile0.setExecutable(true);
      String string0 = "[(Ko+x397Z82]UZ";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "[(Ko+x397Z82]UZ");
      Options options0 = new Options();
      String string1 = " ";
      // Undeclared exception!
//      try { 
        options0.addOption(" ", true, ";?4{0[:9%+4_Py");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1671);
      helpFormatter0.setLeftPadding((-1671));
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      int int1 = 0;
      mockPrintWriter0.print((double) 74);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "K9", " | ", options0, (-9), 0, " | ");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(6, "'[S8,OPL!u", "'[S8,OPL!u", options0, "[", true);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter1.createPadding(3);
      helpFormatter0.findWrapPos("arg", 0, 2);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, "-");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter3.printHelp((-3247), "-", "g y.2&p)Wqxmw", options1, "\n", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(9, "kj#y@ZI+KAvkJCg9", "usage: ", (Options) null, ",NuV", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(40, "f6`RtR.YCvHi", "gi8=", options1, "f6`RtR.YCvHi", true);
      helpFormatter0.createPadding(40);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dz+\"H_ey@@$UG0#gw");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "                                        ";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "f6`RtR.YCvHi";
      objectArray0[5] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("f6`RtR.YCvHi", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-7218), (String) null, "f6`RtR.YCvHi", options1, 40, (-7218), "f6`RtR.YCvHi");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.findWrapPos((String) null, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.createPadding(3);
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 63, (-488));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "usage: ", "--", options0, "pZDYND-n;(Py)7YWu#");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(3097);
      helpFormatter1.getLongOptPrefix();
      helpFormatter2.printHelp("cmdLineSyntax not provided", "", options0, "\"", false);
      helpFormatter2.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter1.renderOptions(stringBuffer0, 74, options0, 153, 3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Option option0 = new Option("arg", "qjio)5%", false, "&#^$Y_&VV^");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "arg", "&#^$Y_&VV^", options0, "&#^$Y_&VV^", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "qjo)5%", true, "'4[S8,OPL!u");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption(option0);
      helpFormatter0.printHelp((-1), "/SE]UOJxP`8F8LA_Z", "'4[S8,OPL!u", options0, "qjo)5%", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("]", (-488), 23);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "nk/#FQV'}", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Util", (String) null, options2, "", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.rtrim("-");
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", false, "--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(877, "~5&}$X :|,u", "~5&}$X :|,u", (Options) null, "~5&}$X :|,u");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "lp^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(44, "T5UKcwz", ",", options2, "org.apache.commons.cli.Option");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",");
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) "lp^";
      PrintWriter printWriter0 = mockPrintWriter0.format("jsm_htA2:NRH>*5g=h?", objectArray0);
      helpFormatter0.printUsage(printWriter0, 64, "\n", options2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options1, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1099);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1480, 1099, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp(9, "arg", "-", options0, "z>YM6$w(o6*[S;", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.append((CharSequence) "arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("y7y");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 54, "y7y");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      Options options2 = options1.addOption("", "--", false, "lp^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(44, "T5UKcwz", ",", options3, "org.apache.commons.cli.Option");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) "lp^";
      objectArray0[2] = (Object) "org.apache.commons.cli.Option";
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) options2;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 64, "n8ZAwnTR", options1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "' was specified but an option from this group ");
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.printHelp("' was specified but an option from this group ", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "' was specified but an option from this group ";
      options1.addOption("arg", "' was specified but an option from this group ", false, "usage: ");
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-147), "|s26", "sD4u^J7lW#vM", options1, "}Ze\"Y");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "N");
      String string0 = "' was specified but an option from this group ";
      boolean boolean0 = true;
      Options options2 = options0.addOption("N", "' was specified but an option from this group ", true, "line.separator");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2815), "", "<", options2, "92r8-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", " ", options0, "");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", " ", options0, "");
      // Undeclared exception!
//      try { 
        options0.addOption("\n", "arg", true, "W IQ;IGizKO#93bvk");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      Options options2 = options1.addOption("", "--", false, "7+^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(50, "XT5Uwz", "'", options3, "org.apache.commons.cli.Option");
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(337);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1855), options2, (-1855), 337);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("1'imyCkBv#lg*");
      helpFormatter0.setOptPrefix("1'imyCkBv#lg*");
      helpFormatter0.setLongOptSeparator("@_EX9-VKvD)88tm-t");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      Options options0 = new Options();
      stringBuffer0.append(stringBuffer1);
      helpFormatter0.printHelp(9, "OID?u>`Oqg9)WKs@", "OID?u>`Oqg9)WKs@", options0, "", true);
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("_]{DQ`", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, (-4230), options0, 3786, 60);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "' was specified but an option from this group ");
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setLeftPadding(74);
      options1.getOption("org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1927), "z>YM6$w(o6*[S;", "+f;;O`AOSPTQ^~", options1, "' was specified but an option from this group ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      helpFormatter0.findWrapPos("has already been selected: '", 69, 69);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("@nUJ}YG-<u+[LC", false, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '@nUJ}YG-<u+[LC' contains an illegal character : '@'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      mockPrintStream0.flush();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, (-2), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "' was specified but an option from this group ");
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.printHelp("' was specified but an option from this group ", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options2 = options1.addOption("arg", "' was specified but an option from this group ", false, "usage: ");
      helpFormatter0.defaultArgName = "-";
      StringBuffer stringBuffer1 = new StringBuffer();
      int int0 = 1384;
      Options options3 = new Options();
      int int1 = (-2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options2, "$/.yYKJ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("1'imyCkBv#lg*");
      helpFormatter0.setOptPrefix("1'imyCkBv#lg*");
      helpFormatter0.setLongOptSeparator("@_EX9-VKvD)88tm-t");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      Options options0 = new Options();
      stringBuffer0.append(stringBuffer1);
      helpFormatter0.printHelp(9, "OID?u>`Oqg9)WKs@", "OID?u>`Oqg9)WKs@", options0, "", true);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "line.separator");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp(" | ", "b)ZXN[4|pFPlQu", options0, " | ", false);
      helpFormatter0.printHelp("AY%;F>C", "org.apache.commons.cli.Util", options0, "");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1688));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "N*Wn#t", "k", options0, "arg");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "N*Wn#t", options1, "srw;fDY%e6W<1Gv", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "fj|#I$.6pXQ;T}`exS", "-", options0, "z>YM6$w(o6*[S;", true);
      String string0 = "   ";
      String string1 = "WYb8jfiGD[oGS300";
      boolean boolean0 = false;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "z>YM6$w(o6*[S;";
      objectArray0[1] = (Object) "   ";
      objectArray0[2] = (Object) "z>YM6$w(o6*[S;";
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      int int0 = (-1205);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-1205), "org.apache.commons.cli.HelpFormatter$OptionComparator");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("1'imyCkBv#lg*");
      helpFormatter0.setOptPrefix("1'imyCkBv#lg*");
      helpFormatter0.setLongOptSeparator("@_EX9-VKvD)88tm-t");
      Options options0 = new Options();
      options0.addOption("", false, " ");
      helpFormatter0.setLongOptPrefix("]");
      options0.getOptionGroups();
      helpFormatter0.getSyntaxPrefix();
//      try { 
        MockURI.URI("1'imyCkBv#lg*", "-", "H'E5", "usage: ", "\n");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: 1'imyCkBv#lg*://-H'E5?usage:%20#%0A
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3573);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.createPadding(34);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "' was specified but an option from this group ");
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.printHelp("' was specified but an option from this group ", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      options1.addOption("arg", "' was specified but an option from this group ", false, "usage: ");
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1384, options2, (-2), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      String string0 = "'";
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(44);
      helpFormatter0.setLeftPadding((-2));
      options0.helpOptions();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("T5UKcwz", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", (String) null, options0, "--");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName(" ");
      helpFormatter0.printHelp(" ", (String) null, options0, "-", false);
      helpFormatter0.printHelp("AY%;F>C", "", options0, "Q^X");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1'imyCkBv#lg*";
      helpFormatter0.setLongOptSeparator("1'imyCkBv#lg*");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix("1'imyCkBv#lg*");
      helpFormatter0.setLongOptSeparator("@_EX9-VKvD)88tm-t");
      StringBuffer stringBuffer0 = new StringBuffer("*:M Sb7");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      int int0 = (-2);
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", false, " ");
      int int1 = 0;
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options1, 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      Options options2 = options1.addOption("", "--", false, "lp^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOption("f5bu$", "-", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 309, options0, 74, 63);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      Object[] objectArray0 = new Object[3];
      mockPrintStream0.flush();
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream1;
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "arg");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "[ option: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 14;
      int int1 = 3;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-616), (Options) null, 14, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptSeparator("@_EX9-VKvD)88tm-t");
      StringBuffer stringBuffer0 = new StringBuffer("*:M Sb7");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      int int0 = (-2);
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", false, " ");
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options1, 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(".*ewjfX!blkSYDV");
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = (-402);
      String string0 = "Fvd-J";
      String string1 = " ] [ long ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption("[ option: ", false, "kvmlN%E)3R9e{*t");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ option: ' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 743;
      helpFormatter0.renderWrappedText(stringBuffer0, 743, 743, "cmdLineSyntax not provided");
      int int1 = (-1552);
      helpFormatter0.defaultDescPad = 2205;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("cmdLineSyntax not provided", "-", true, "BE-7Xtp");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Options");
      helpFormatter0.createPadding(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-2684), (-169), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getWidth();
      int int0 = (-2);
      String string0 = " ;fWATw-ziZnWWAp{W";
      Options options0 = null;
      int int1 = 777;
      MockFile mockFile0 = new MockFile(" ] [ long ", "lQaABy+QIo,2");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.toString();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.printHelp("gi8=", "<", options0, "!vM ||,'IDt@");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2379);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2379), (-2379), "{xuW69Fq~I:>h7#@");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(50);
      helpFormatter0.setLongOptPrefix("C[xvU{(0]}(");
      helpFormatter0.defaultDescPad = 32;
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) " ");
      helpFormatter0.setWidth(1);
      int int0 = (-904);
      int int1 = 1916;
      String string0 = "o1( 49";
      helpFormatter0.setLongOptSeparator("o1( 49");
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "usage: ", (-904), 1916);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("~%C");
      helpFormatter0.createPadding(944);
      MockFile mockFile0 = new MockFile("N12<MXGg@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 0;
      String string0 = "$hRB~/]";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
//      try {
        option0 = new Option(".YYCB-!(s7", "-8W)/[)]auL,>imR{", false, "[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '.YYCB-!(s7' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "gi8=";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(9, "", "", options0, "z>YM6$w(o6*[S;", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "^}J#y%XG(bODqV", "'4[S8,OPL!u", options0, "gi8=", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-631);
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("--", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "T5UKcwz";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-2);
      Options options1 = new Options();
      Options options2 = options1.addOption("", false, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1721), options2, (-2), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.printHelp(9, "4abFU I]hy\"ygR", "fb|PVJ7%5S<fcD", options2, "4abFU I]hy\"ygR", true);
      helpFormatter0.createPadding(9);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "-", true, "' was specified but an option from this group ");
      helpFormatter0.setDescPadding(74);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("J");
      Options options0 = new Options();
      int int0 = (-128);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, (-128));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "line.separator");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "gi8=", options0, "gi8=", true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#g~}";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "#g~}", "-", options0, "#g~}");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "'(:";
      Options options0 = new Options();
      helpFormatter0.printHelp("'(:", options0);
      String string0 = null;
      Options options1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (Options) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "' was specified but an option from this group ");
      options0.hasOption("arg");
      Options options2 = options1.addOption((String) null, false, (String) null);
      Option option0 = new Option((String) null, " ", true, "--");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "l6Cx 6goR9vlk", options4, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("oo)k:t9qkd*)Cz_");
      mockPrintWriter0.println((-360));
      mockPrintWriter0.println(0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "ybP/u5)-E[6T+;*;PWh");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", ")0", (Options) null, "[ option: ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      Object[] objectArray0 = new Object[3];
      mockPrintStream0.flush();
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream1;
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 0, "");
      String string0 = "hu[ll QSg,s%$yU";
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultLongOptPrefix = "hu[ll QSg,s%$yU";
      helpFormatter0.setOptPrefix("m");
      helpFormatter0.setWidth(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("~}@aVx[)[>", 0, 0);
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption(")321o&V:n(]s", false, "(zqeA\"/I-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ')321o&V:n(]s' contains an illegal character : ')'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1'imyCkBv#lg*";
      helpFormatter0.setLongOptSeparator("1'imyCkBv#lg*");
      helpFormatter0.setOptPrefix("1'imyCkBv#lg*");
      helpFormatter0.setLongOptSeparator("@_EX9-VKvD)88tm-t");
      StringBuffer stringBuffer0 = new StringBuffer("*:M Sb7");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      int int0 = (-2);
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", false, " ");
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options1, 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      Options options2 = options1.addOption("", "--", false, "lp^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(44, "T5UKcwz", "'", options3, "org.apache.commons.cli.Option");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("");
      assertEquals("", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      String string0 = "`VN9~b%";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("`VN9~b%", "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'p';
      stringWriter0.append('p');
      int int0 = 2635;
      // Undeclared exception!
//      try { 
        CharBuffer.wrap((CharSequence) "-", 2635, 2635);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }
}
