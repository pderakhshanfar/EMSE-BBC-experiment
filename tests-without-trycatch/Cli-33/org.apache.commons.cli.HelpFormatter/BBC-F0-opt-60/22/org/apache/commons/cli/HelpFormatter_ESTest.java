/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 08:43:50 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("+|*Zd0Zs$S)ea+R", "+|*Zd0Zs$S)ea+R", (Options) null, "+|*Zd0Zs$S)ea+R");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.rtrim("[ Options: [ short ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 3;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "]");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1167), options2, 3, 10);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-760);
      helpFormatter0.setLeftPadding((-760));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      String string0 = "-yCyS'>/YO]R)Ix2";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("-yCyS'>/YO]R)Ix2", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      Option option0 = new Option("", true, "]Uv }\u0002dC9v4Qzp");
      option0.setArgName(" ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.printHelp("OE68@=8vg.", "-", options1, "ngI@d$Q", true);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[5wp<'-3+C";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 10, options0, 1, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, "-");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      int int1 = 63;
      helpFormatter0.setLeftPadding(63);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "[", (String) null, options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!w@U7#'n";
      int int0 = 3578;
      String string1 = "_>05J2XpMBtw{WR";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_>05J2XpMBtw{WR");
      String string2 = ">";
      Options options0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3578, "!w@U7#'n", ">", (Options) null, "has already been selected: '", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "uf|=T6Tepmr\"", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println((double) 3);
      String string0 = null;
      mockPrintWriter0.print("");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      String string1 = "[ARG...]";
      helpFormatter0.createPadding(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-791), "[ARG...]");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xq=Ry");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1509);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(1509);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, false, "7qxDj<f]0_1,sLl{+eI");
      Options options1 = options0.addOption(option0);
      mockPrintWriter0.print((double) 3);
      helpFormatter0.printUsage(printWriter0, 1509, "usage: ", options1);
      helpFormatter0.rtrim("-");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 838, "gQicQNRY!c");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, "--");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 3, 3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 74, "|`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.setLeftPadding(63);
      Options options0 = new Options();
      options0.hasLongOption("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultDescPad = (-661);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      options0.addOption("arg", "--", false, "arg");
      mockPrintStream0.println((long) 74);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("*}b\"7", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.setLeftPadding(63);
      Options options0 = new Options();
      options0.hasLongOption("");
      options0.addOption("", (String) null, true, "[ option: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream1 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      options0.addOption("arg", "--", false, "arg");
      mockPrintStream1.println((long) 74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, (String) null, options0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options1 = options0.addOption("", true, ")l,w<?u{\"0i");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 3195);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">9q");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-3124), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(13);
      helpFormatter0.setLongOptPrefix((String) null);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, "");
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(false);
      Option option0 = new Option("", "\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.setLeftPadding(63);
      Options options0 = new Options();
      options0.hasLongOption("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream1 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream1;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      mockPrintStream1.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      options0.addOption("arg", "--", false, "arg");
      mockPrintStream1.println((long) 74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, (String) null, options0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.print((Object) optionGroup0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "w%LJvI8wZ\"L vV[*(_");
      helpFormatter0.rtrim("-");
      helpFormatter0.setSyntaxPrefix("EgLNBZVdenMxU7Z");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "<]M%mJ+a$", "-", options0, 66, 1, "~L~", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      options1.helpOptions();
      helpFormatter0.printHelp("   ", "l*T-U6JF", options1, "c9%~", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.setLeftPadding(63);
      Options options0 = new Options();
      options0.hasLongOption("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream1 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      Options options1 = options0.addOption("arg", "--", false, "arg");
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 64, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 63, options1, 9, 928);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("   ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "h;1:DuZ0\"KWJo%e");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "YCTSX_F]D,rlO");
      optionGroup0.setSelected(option0);
      Option option1 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("(]co/6;", "usage: ", options2, "h;1:DuZ0\"KWJo%e", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(]co/6;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options3 = new Options();
      helpFormatter2.printHelp("cmdLineSyntax not provided", (String) null, options3, "\n", true);
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "*q~T8X).^P'af 4'u", "--", options2, (-3557), 41, "-", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      int int0 = (-2949);
      helpFormatter0.setLeftPadding((-2949));
      Options options0 = new Options();
      String string0 = " ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", " :: ", options0, " :: ", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      File file0 = MockFile.createTempFile("EgLNBZVdenMxU7Z", " ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ]");
      helpFormatter0.setLongOptPrefix("EgLNBZVdenMxU7Z");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "");
      helpFormatter0.rtrim("EgLNBZVdenMxU7Z");
      helpFormatter0.setLongOptSeparator(" ]");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " ]";
      objectArray0[1] = (Object) "EgLNBZVdenMxU7Z";
      objectArray0[2] = (Object) "EgLNBZVdenMxU7Z";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "w%LJvI8wZ\"L vV[*(_";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "<", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1, "b^:5_qC~^N");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "2A??s6SU>r v&");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(false);
      helpFormatter0.defaultWidth = (-150);
      stringWriter0.append((CharSequence) "");
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "VodHMVG");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "   ", (String) null, options0, 71, 555, "", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("tAC,");
      helpFormatter0.defaultArgName = "tAC,";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("PU,dztHRA|_", 1, 1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 48;
      Options options0 = new Options();
      int int1 = 74;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      int int2 = 44;
      helpFormatter0.renderOptions(stringBuffer0, 48, options0, 74, 44);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        optionGroup0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.OptionGroup", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("3.:Kmm1XM<");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((File) null, "arg");
      mockFile0.setReadOnly();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("");
      helpFormatter0.printHelp("\n", "", options0, "[", false);
      helpFormatter1.printHelp("--", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("EgLNBZVdenMxU7Z", " G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" G");
      mockPrintWriter1.println((float) 74);
      helpFormatter0.setLongOptPrefix("EgLNBZVdenMxU7Z");
      mockPrintWriter0.println(false);
      StringWriter stringWriter0 = new StringWriter(1566);
      stringWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1566, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "sQ'84~vG*a5iK v ", false, "sQ'84~vG*a5iK v ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1566, "!~}qFN<N", "lWY[nvk.[G", options1, 1692, 1566, "sQ'84~vG*a5iK v ", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, "");
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", false, "");
      helpFormatter0.printHelp("/EIS_X", "SKNPp+T", options2, "", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-832));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("3.:Kmm1XM<");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter1.printOptions(mockPrintWriter1, 124, options0, 31, 40);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 40, "--", "arg", options0, 124, 118, "", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("   ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "h;1:DuZ0\"KWJo%e");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("=7a1p5[", "", options0, "", true);
      helpFormatter0.findWrapPos("|PmIk~Y&a#UsAi(", 0, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("3.:Kmm1XM<");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 40, "--", "arg", options0, 124, 118, "", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("   ");
      Options options0 = new Options();
      options0.addOption("", true, "h;1:DuZ0\"KWJo%e");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1640), "   ", "h;1:DuZ0\"KWJo%e", options0, (-1), (-1640), "A CloneNotSupportedException was thrown: ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "(fGC6,m", "(fGC6,m", options2, 1639, 0, (String) null, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("The option '").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("--");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((File) null, " [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println();
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, " [ARG]", "   ", options1, 2, 64, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockPrintWriter0.append('_');
      mockPrintWriter0.print("cmdLineSyntax not provided");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.HelpFormatter", "", (Options) null, 10, 10, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("   ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "h;1:DuZ0\"KWJo%e");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "", "h;1:DuZ0\"KWJo%e", options2, 4, (-1), "gV(B", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1627);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1627, 1627, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "JujU|&=y9e|eo)v");
      options0.addOption(option0);
      helpFormatter0.printHelp("\n", "usage: ", options0, "JujU|&=y9e|eo)v", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-2), 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.setLeftPadding(63);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 63, 63, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, "");
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", "", false, "");
      helpFormatter0.printHelp("/EIS_X", "[", options0, (String) null, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-523), "usage: ", " ] [ long ", options1, 4, 31, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(1027.608F);
      mockPrintWriter0.println(false);
      stringWriter0.append((CharSequence) "arg");
      mockPrintWriter0.append('^');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3442, "|Q/NKTC[cG_Xf");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("yif@");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("/,iI'`Iz", 1, (-1477));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, "");
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", false, "");
      helpFormatter0.printHelp("|c6]t(K|wHs*O/=>6z", "|c6]t(K|wHs*O/=>6z", options2, (String) null, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-523), (String) null, "2_Kj:Rjv'#x", options0, (-1), (-523), "2_Kj:Rjv'#x", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3371), "nTw,8j{+&@&|J,Z", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "=7@XES*tx,cW");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1168), "=7@XES*tx,cW", " :: ", options0, 3027, (-1168), " :: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('D');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 113, "L", "", options0, (-4124), 1, "v%L w7)w");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 6, "\"", "\"", (Options) null, 6, 2277, "\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(false);
      int int0 = 97;
      Options options0 = new Options();
      options0.getOptions();
      int int1 = 655;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, "", "", options0, 655, 655, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DXY3z");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 83, "DXY3z", "", options0, 83, 776, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "").when(comparator0).toString();
      doReturn(74, 3, (-1105), 44, 1).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "jY";
      Option option0 = new Option((String) null, false, "jY");
      options0.addOption(option0);
      options0.addOption(option0);
      Options options1 = options0.addOption("1", false, "-");
      helpFormatter0.setSyntaxPrefix("1");
      options0.addOption("arg", true, "");
      option0.setArgs(74);
      boolean boolean0 = true;
      helpFormatter0.printHelp(12, "jY", "jY", options1, "jY", true);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("jY", "`yZmTxxQU.U`h_1K ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // `yZmTxxQU.U`h_1K 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream1 = new MockPrintStream("DCVBqs5_@~-RjXT,E#G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      options0.addOption((String) null, "usage: ", true, " [ARG]");
      mockPrintStream1.println(0L);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 35, (String) null, options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, " [ARG]", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.hasLongOption("");
      options0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      options0.addOption("", "7C>WZ3/P.)!DQ9jf", false, "");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(483);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "JujU|&=y9e|eo)v");
      options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", (Options) null, " z2~Y@$qL(H?", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      doReturn(74, 1).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "jY");
      Options options1 = options0.addOption(option0);
      options0.addOption("", false, "-");
      helpFormatter0.setSyntaxPrefix("");
      Options options2 = options0.addOption("arg", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "h,8.r", options1);
      options2.addOption("", true, "bFE*6");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp("j,x &v<(\"", "usage: ", (Options) null, "\n", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(63);
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.hasLongOption("");
      options0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options1 = options0.addOption("", "7C>WZ3/P.)!DQ9jf", false, "");
      Options options2 = options1.addOption((String) null, "", false, "7C>WZ3/P.)!DQ9jf");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "J8<<FGH3dCX'*}M", options2, "C9t", false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("[5wp<'-3+C");
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("[5wp<'-3+C");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-2449), options0, 118, 118);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.printf(".pS9)vts1V?Yr!I", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintWriter1.format(locale0, "--", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1691, 1691, "~CS2EA|");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp(228, "V<V3<3xl", "jY", options1, "");
      helpFormatter0.setLeftPadding((-732));
      OptionGroup optionGroup2 = new OptionGroup();
      Options options2 = new Options();
      options1.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintWriter1.format(locale0, "-", objectArray0);
      helpFormatter0.setSyntaxPrefix("line.separator");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setLeftPadding((-764));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-2347));
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "%j4ioX%p6^D";
      options0.hasOption(" ");
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2471), "usage: ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "%j4ioX%p6^D", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.setLongOptPrefix("[");
      helpFormatter0.getSyntaxPrefix();
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = (-4835);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("!6LOEhTSe\".2", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '!6LOEhTSe\".2' contains an illegal character : '!'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasShortOption("G)^p");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("arg", options1, false);
      helpFormatter0.setLeftPadding(452);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "j.HnNZ'js>@x$||L3*";
      Options options1 = options0.addOption("GLNdK3", "j.HnNZ'js>@x$||L3*", true, (String) null);
      Option option0 = new Option("GLNdK3", true, (String) null);
      option0.setArgName("usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("fW{\"'j", "Hj6{Pw|~K`oK\"z", options2, " `5}),$1pVza", false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "j.HnNZ'js>@x$||L3*";
      Options options1 = options0.addOption("GLNdK3", "j.HnNZ'js>@x$||L3*", true, (String) null);
      Option option0 = new Option("GLNdK3", true, (String) null);
      option0.setArgName("usage: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3050), "vfW\"'Zj", "K<5/<.'Vtg;><ROoU", options2, "vfW\"'Zj", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("   ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "h;1:DuZ0\"KWJo%e");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", "Gx", true, "");
      options4.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      helpFormatter0.printHelp("NZhl0piU#D", "NZhl0piU#D", options2, "h;1:DuZ0\"KWJo%e", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Option option0 = new Option("arg", "arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(".D$HR'_Xw E_!.g", "usage: ", options1, "|c6]t(K|wHs*O/=>6z", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", (String) null).when(comparator0).toString();
      doReturn(74, 0, 0, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "jY";
      Option option0 = new Option((String) null, false, "jY");
      options0.addOption(option0);
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.setSyntaxPrefix("");
      options0.addOption("arg", true, "");
      boolean boolean0 = true;
      helpFormatter0.printHelp(12, "jY", "jY", options1, "jY", true);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("jY", "`yZmTxxQU.U`h_1K ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // `yZmTxxQU.U`h_1K 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.hasLongOption("");
      options0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      String string0 = "";
      String string1 = "";
      Options options1 = options0.addOption("", "7C>WZ3/P.)!DQ9jf", false, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.hasLongOption("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      options0.hasOption("cmdLineSyntax not provided");
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      String string1 = "";
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, " ", false, " ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, " ", options2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      printWriter0.println(0.0F);
      mockPrintWriter0.println(false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped(printWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      printWriter0.write(16);
      Locale locale0 = Locale.KOREA;
      mockPrintWriter1.format(locale0, "-", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 1691, "Ab ]3A}=^`=Dv");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(673);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("   ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[5wp<'-3+C";
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "[5wp<'-3+C");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("   ");
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(335, "", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("yk`RKmm)R", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "' contains an illegal character : '", false, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1892), ",!\"&[y;Un7{R!B#B=M", ",!\"&[y;Un7{R!B#B=M", options2, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      options0.toString();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("   ");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("line.separator");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintWriter1.format(locale0, "-", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 1691, "Ab ]3A}=^`=Dv");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.printf("p!0QS]}{?|QQ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintWriter0.format(locale0, "'`f", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1691, 1691, "p!0QS]}{?|QQ");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "jY");
      options0.addOption(option0);
      Options options1 = options0.addOption("", false, "-");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", options1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option((String) null, true, "--");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("4XS_Xe8O^j8fi<$a6`", options1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      String string0 = ", ";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) helpFormatter0;
      // Undeclared exception!
//      try { 
        mockPrintWriter0.printf(locale0, ", ", objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "V$Zjm6";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "usage: ", true, "");
      Option option0 = new Option("arg", (String) null, true, "n>9*g=OWjrM y");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5rOVD_CoIx3,JX");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("nWq<Wp", "V$Zjm6", options2, ",d\"");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, "", true, "");
      Option option0 = new Option((String) null, "B-[BuzjVKE6~&Z~Iev9", true, "");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp("m&;=0", "m&;=0", options4, "B-[BuzjVKE6~&Z~Iev9");
      helpFormatter0.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options5 = new Options();
      Option option1 = new Option("arg", "arg", false, "usage: ");
      options5.addOption(option1);
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter0.printHelp("yk`RKmm)R", "", options5, "", false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      mockFile0.delete();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      String string0 = "'";
      helpFormatter0.printUsage(printWriter0, 1124, "'");
      helpFormatter0.setSyntaxPrefix("D|QW3");
      helpFormatter0.getLeftPadding();
      String string1 = "&rC?G};[]Q)Qb";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("&rC?G};[]Q)Qb", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println((double) 3);
      String string0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      String string1 = "[ARG...]";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-791), "[ARG...]");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("!TCf%Ot`>Row\"");
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = false;
      helpFormatter0.printHelp("=2'^T+<}&F`W", options0, false);
      int int0 = (-206);
      helpFormatter0.findWrapPos("!TCf%Ot`>Row\"", (-206), (-206));
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      helpFormatter0.setWidth(0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "!TCf%Ot`>Row\"");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // !TCf%Ot`>Row\"
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "", (String) null, options1, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(673);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      int int0 = (-546);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option((String) null, false, "jY");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "V<V3<3xl";
      optionGroup1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-546), "", "", options1, "V<V3<3xl");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = 452;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("arg", "arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      String string0 = "V<V3<3xl";
      optionGroup0.addOption(option0);
      String string1 = "Z'&)SqHwgfJgnyevdIp";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(452, "V<V3<3xl", "Z'&)SqHwgfJgnyevdIp", (Options) null, "V<V3<3xl");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.optionComparator = comparator1;
      int int0 = 44;
      helpFormatter0.findWrapPos("'", 0, 44);
      helpFormatter0.setNewLine("'");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(44);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "Wa#PA'FDA'lg m3");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string1 = "H#dN0]Y-=";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("]j\"O|<", "usage: ", true, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ']j\"O|<' contains an illegal character : ']'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLeftPadding((-1));
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 4357, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "yk`RKmm)R");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("M~<V", options3, false);
      helpFormatter0.setLeftPadding(452);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 0, 0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "   ";
      Option option0 = null;
//      try {
        option0 = new Option("bM(je+BX%KfRZclc", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'bM(je+BX%KfRZclc' contains an illegal character : '('
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1527), 0, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      int int0 = (-764);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('j');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-764), (-1257), "IL{?JG");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 1;
      helpFormatter0.setWidth(1);
      helpFormatter0.rtrim("}U:i9IUv");
      helpFormatter0.setNewLine("}U:i9IUv");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((String) null, "}U:i9IUv");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 333;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptSeparator("Z");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.findWrapPos("Z", 333, 1028);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.hasLongOption("");
      options0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintStream0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = "";
      String string1 = "";
      Options options1 = options0.addOption("", "", false, "");
      helpFormatter0.setDescPadding(63);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(13);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, "");
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", false, "");
      helpFormatter0.printHelp("|c6]t(K|wHs*O/=>6z", "|c6]t(K|wHs*O/=>6z", options2, (String) null, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-523), (String) null, "2_Kj:Rjv'#x", options0, (-1), (-523), "2_Kj:Rjv'#x", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.KOREA;
      PrintWriter printWriter1 = mockPrintWriter1.format(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter1, 1, 1691, "UD=Mb>P&XTn<yb|no");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(2743.79F);
      mockPrintWriter0.println(false);
      stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "|Q/7{T([cG_Xf");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-793));
      helpFormatter0.defaultDescPad = (-793);
      helpFormatter0.setLongOptSeparator("fJ\"kXc[C7[N#w/5");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "fJ\"kXc[C7[N#w/5");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("F!K", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-723), "The option '");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("Z");
      helpFormatter0.setLongOptPrefix(".VQV5+Cs&");
      assertEquals(".VQV5+Cs&", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName((String) null);
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptPrefix((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("usage: ", "");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "The option '");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "|m2", "|m2", options1, 1490, 74, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, (String) null, "EgLNBZVdenMxU7Z", (Options) null, (-6293), 1, "org.apache.commons.cli.HelpFormatter$OptionComparator");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "7T`1K{F(zSrc_8@dR`");
      helpFormatter0.printHelp("[5wp<'-3+C", "[5wp<'-3+C", options1, "7T`1K{F(zSrc_8@dR`", false);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, (-1828), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int1 = 1818;
      String string0 = null;
      int int2 = (-990);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1818, options0, 0, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3110;
      String string0 = "s:0(Lo1@mU";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      StringBuffer stringBuffer0 = new StringBuffer("]");
      String string1 = "";
      options0.hasLongOption("");
      stringBuffer0.replace(1, 2049, "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3110, 3110, "]");
      // Undeclared exception!
//      try { 
        optionGroup0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.OptionGroup", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 31;
      char char0 = 'W';
      // Undeclared exception!
//      try { 
        stringBuffer0.setCharAt(31, 'W');
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }
}
