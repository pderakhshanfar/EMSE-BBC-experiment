/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:22:49 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgName("-");
      helpFormatter0.printHelp(13, "\"", "--", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      option0.setArgName("-");
      helpFormatter0.printHelp((-1), "org.apache.commons.cli.Util", "-", options0, "org.apache.commons.cli.Util", false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2624);
      helpFormatter0.setWidth((-2624));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", "\n", options0, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("7?@c$<w},", "org.apache.commons.cli.HelpFormatter", options0, "7?@c$<w},");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(">uiiy63lJ1#z21J;", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.rtrim(" ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "YzS_66K6";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "YzS_66K6";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) "YzS_66K6";
      objectArray0[7] = (Object) "YzS_66K6";
      mockPrintWriter0.printf(locale0, "YzS_66K6", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, " ]");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(12);
      helpFormatter0.setLongOptSeparator("            ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "*;");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 506, 506, "B");
      helpFormatter0.renderOptions(stringBuffer1, 506, options0, 2, 2);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 2673, "", "", options0, 2673, 21, "cqVdrp~qV");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(" ", "", options0, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", options0, "");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-2511), "},9-Un7:VPH=m\u0004", "},9-Un7:VPH=m\u0004", options0, (-2511), 0, "},9-Un7:VPH=m\u0004");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 10, options0, 10, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "line.separator");
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("=_2lJ2hR@", "=_2lJ2hR@", options1, "2kp9g4`gB;7[SV>&y>");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      Options options2 = new Options();
      helpFormatter0.printHelp(946, "--", "f%ZRhfH5dW ", options2, "f%ZRhfH5dW ", true);
      StringBuffer stringBuffer0 = new StringBuffer(32);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 32, options1, 32, 946);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options1, 2, 2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "--", options0, (String) null);
      helpFormatter1.renderOptions((StringBuffer) null, (-922), options0, 16, 967);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "Exc}d183WCsk", "", (Options) null, 1, 1, "Exc}d183WCsk");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.setOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.printHelp("dr[(mm6A", "", options0, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-151), "arg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3432, "]", (String) null, options0, 3, 3, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "KvXF#+]R";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "]";
      options1.addOption("", "", false, "]");
      Option option0 = null;
//      try {
        option0 = new Option("\n", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.delete();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "~)6IN%j(uE6Sb", options0, "--");
      helpFormatter1.getDescPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, "JKb");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "EV 9n%#[=wA]TIXpyF", "", options0, 3, 74, " ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c.J?4\"RO<P");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", "\n", options0, 3, (-1260), "--", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("", "-", true, "\"U/");
      options0.helpOptions();
      int int0 = 818;
      helpFormatter0.printHelp(818, "\"U/", "", options0, "\"U/", true);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 818, (-5010));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.HelpFormatter");
      MockFile mockFile1 = new MockFile(mockFile0, "A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      mockPrintWriter1.printf("usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, " ]", "pT`'+", options0, 36, 31, "", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.setOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1490), "-", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-503), "7~Z^CD", " ", options0, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) helpFormatter1;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) helpFormatter1;
      mockPrintWriter0.printf("A CloneNotSupportedException was thrown: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 52, "--", "\n", options0, 58, 52, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("Yw&W\"ZyU'4EThg");
      // Undeclared exception!
//      try { 
        helpFormatter2.printUsage((PrintWriter) null, 7, "\n", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 4286, 4286, "");
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "<", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "$o8~9KzMy-T`KIDp", (String) null, options0, 3, 7, "--", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "arg");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "-", true, (String) null);
      helpFormatter0.printHelp(2170, "(YhT54D.\"}|Rts}f", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options3, "SHInZ!VLA@^", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      Options options1 = options0.addOption((String) null, "--", false, "arg");
      options1.addOption("NO_ARGS_ALLOWED", "usage: ", true, "}fv3I3n}@x");
      Options options2 = new Options();
      options1.hasOption("}fv3I3n}@x");
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      helpFormatter0.setNewLine("f[$p]]~0Z56mZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.setOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(106, "M", "--", options1, "", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1478), 1, "!ai.U7'zcm&-RBe");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("\n");
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      options1.hasOption("}o{sG=hD/>L");
      helpFormatter0.setOptPrefix("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "\n", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(10, "usage: ", "", options1, " ", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix(" ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.printHelp(7, "A CloneNotSupportedException was thrown: ", (String) null, options0, "A CloneNotSupportedException was thrown: ", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-1956));
      int int0 = 2412;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2412, "?'yDk9^", (String) null, options1, "[ARG...]", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options1 = options0.addOption("arg", "arg", false, "q<");
      helpFormatter1.printHelp(printWriter0, 13, "K$", "S", options1, 13, 34, "line.separator", false);
      helpFormatter0.setLeftPadding(1850);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.findWrapPos("+ax1[7>WF h?Ie", 0, 0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 7;
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.setOptPrefix(":/1JztEoD3PMqX");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 7, 7, ":/1JztEoD3PMqX");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("uVQ51ah{-", "usage: ", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-3641), (-2));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = (-312);
      Options options0 = new Options();
      String string0 = "k\"re1";
      helpFormatter0.setSyntaxPrefix("k\"re1");
      Option option0 = new Option("arg", false, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int1 = 1761;
      optionGroup0.setSelected(option0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      stringBuffer0.append(stringBuffer1);
      String string1 = "";
      options2.hasLongOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-312), options2, 1761, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("@j:xvBYjs~t", 1, 1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options1 = options0.addOption("arg", "arg", false, "q<");
      helpFormatter1.printHelp(printWriter0, 13, "K$", "", options1, 13, 34, "line.separlator", false);
      helpFormatter0.setLeftPadding(1850);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderOptions(stringBuffer0, 74, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.hasOption("usage: ");
      options0.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("?.2M2xY-(10M)]M", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options1 = options0.addOption("arg", "arg", true, "q<");
      helpFormatter1.printHelp(printWriter0, 13, "K$", "", options1, 13, 34, "lineyseparator", true);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "", "S-Zwc_Tc[z0Q9*[A]v", options0, "4", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.setOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printUsage(printWriter0, (-1), "M", options1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      options0.addOption((String) null, "--", true, "arg");
      options0.getOptionGroups();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      String string1 = "]";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "]", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "<", options0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", false, " [ARG]");
      String string0 = "$ve$?\"\"s,ou>.%fg+{";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]Nga[F");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3395), "$ve$?\"\"s,ou>.%fg+{");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options1 = options0.addOption("arg", "arg", false, "--");
      option0.setLongOpt("Ifb`X3{Co)T&@(snyO");
      helpFormatter1.printHelp(printWriter0, 13, "K$", "", options1, 13, 34, "line.separator", false);
      helpFormatter1.printHelp(printWriter0, (-1), "--", "G@1)u)O^^{p2H*#8", options0, 710, 112, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-860), "cMYm9%0aIu8U'&K", "cMYm9%0aIu8U'&K", options0, (-860), (-860), "hL4WU(tuNlS_/c", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter2.renderWrappedText(stringBuffer0, 1807, 1, " ");
      helpFormatter2.setOptPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      String string0 = null;
      options0.addOption((String) null, "--", false, "arg");
      options0.getOptionGroups();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      String string1 = "]";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "]", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      options0.addOption("", "--", true, "");
      helpFormatter0.printHelp(7, "-", "\"-y", options0, "C}.*s", true);
      StringBuffer stringBuffer0 = new StringBuffer(23);
      helpFormatter0.renderOptions(stringBuffer0, 7, options0, 7, 23);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.printHelp(" | ", " | ", options0, "");
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 7, "<", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      options1.addOption("arg", "$ve$?\"\"s,ou>.%fg+{", true, "$ve$?\"\"s,ou>.%fg+{");
      helpFormatter0.printHelp("eH{Rs", "fh$]+'[4UFOm?aBw$d", options0, "fh$]+'[4UFOm?aBw$d");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1574), (-1), "&>vT:");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 4201, "2iMt]D&i%~xPQ$r ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options1 = options0.addOption("arg", "arg", false, "q<");
      helpFormatter1.printHelp(printWriter0, 13, "K$", "", options1, 13, 34, "line.separator", false);
      helpFormatter1.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.printHelp(34, "PGI}7~3/&g?w", "usage: ", options0, "]", false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      options1.addOption("arg", "$ve$?\"\"s,ou>.%fg+{", true, "$ve$?\"\"s,ou>.%fg+{");
      helpFormatter0.printHelp("eH{Rs", "fh$]+'[4UFOm?aBw$d", options0, "fh$]+'[4UFOm?aBw$d");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "--");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1587), "", "[", options0, 1, 6489, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setLongOptSeparator("*OzSZ|(5&>(");
      helpFormatter0.printHelp("usage: ", "1v^`9", options1, "1v^`9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.setOptPrefix("--");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, "", options0, 0, 64, "-faP/`?RV|@U5U", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "u4V}sf!Nf";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.setSyntaxPrefix("");
      options0.hasOption("");
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printHelp("u4V}sf!Nf", "", options0, "u4V}sf!Nf");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 242, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1738, "E", "usage: ", options0, "usage: ");
      helpFormatter0.rtrim(" ] [ long ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options1 = new Options();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(181);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6@6", " ] [ long ", options0, "");
      helpFormatter0.setOptPrefix("]");
      helpFormatter0.defaultWidth = (-2875);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2875), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 2171;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-1444));
      StringBuffer stringBuffer0 = new StringBuffer(2);
      helpFormatter0.renderOptions(stringBuffer0, 2, options0, 880, 2546);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 38, (Options) null, 38, 38);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      String string0 = ">";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":'A?]MTD c`]/g=hjBf");
      helpFormatter0.setDescPadding((-1638));
      int int0 = (-2912);
      helpFormatter0.findWrapPos(">", (-769), (-2912));
      String string1 = "yXrO";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("yXrO", "yXrO", options0, ">", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("6@(6", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "A CloneNotSupportedException was thrown: ", options0, "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.defaultWidth = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "&%", options0, "arg", false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", options0, "A CloneNotSupportedException was thrown: ", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-1444));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">[w(nbGv:~");
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      Option option1 = new Option("arg", false, "}K44lLr5pE)qx1]CMf");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "}K44lLr5pE)qx1]CMf");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("[");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(74);
      File file0 = MockFile.createTempFile("2Il", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.checkError();
      helpFormatter0.printOptions(mockPrintWriter1, 2200, options0, 1725, 1725);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(32, "|RUL;~Og", "", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "usage: ", false, "%%I%n!imA7");
      helpFormatter0.printHelp("%%I%n!imA7", "   ", options1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix(" ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      Options options2 = options1.addOption("arg", "$ve$?\"\"s,ou>.%fg+{", true, "$ve$?\"\"s,ou>.%fg+{");
      Options options3 = options2.addOption(option0);
      Option option1 = new Option((String) null, "yGa91aID$Tv<o?E&o`Q");
      options1.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      optionGroup0.addOption(option0);
      options4.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("arg", "-", options2, (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      boolean boolean0 = false;
      String string1 = "/";
      String string2 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-729), "/", (String) null, (Options) null, "[ARG...]");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("[ARG...]", "", (Options) null, "org.apache.commons.cli.AlreadySelectedException");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "u4V}sf!Nf";
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printHelp("u4V}sf!Nf", "u4V}sf!Nf", options0, "u4V}sf!Nf", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("6@(6", "", options0, "org.apache.commons.cli.Options");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "SFG<4V ;c%D'g";
      int int0 = 63;
      helpFormatter0.findWrapPos("SFG<4V ;c%D'g", 63, 155);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(63);
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "usage: ", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "rZl}+.W?t");
      helpFormatter0.printHelp(7, "2kp9g4`gB;7[SV>&y>", "2kp9g4`gB;7[SV>&y>", options1, "rZl}+.W?t", false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "\"U/");
      options0.getOptionGroups();
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3014), "_`3", (String) null, options1, "J;|ilo2q_;", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "D/8HGpbePi";
      helpFormatter0.setNewLine("BV&");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.createPadding(2443);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("a$xCf{}8X");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "usage: ", options0, "&;^j0H9-c$qI", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "u4V}sf!Nf";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-10), "u4V}sf!Nf", "u4V}sf!Nf", options0, "u4V}sf!Nf", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("3UKt<zsec2 GW*e");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "<3'r>";
      String string0 = "";
      helpFormatter0.setArgName("<3'r>");
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("<3'r>", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "<3'r>";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2t/fJZ<{WW");
      helpFormatter0.printHelp("<3'r>", options1);
      helpFormatter0.setSyntaxPrefix("[z");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("Wh^cnn]o/aS", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      boolean boolean0 = true;
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-729), "", (String) null, (Options) null, "[ARG...]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      Options options2 = options1.addOption("arg", "$ve$?\"\"s,ou>.%fg+{", true, "$ve$?\"\"s,ou>.%fg+{");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      options4.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "-", options2, (String) null, true);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.printHelp("--", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3738), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "vh|rhczxjs!=vF.(_3";
      helpFormatter0.setWidth(57);
      Option option0 = null;
//      try {
        option0 = new Option("vh|rhczxjs!=vF.(_3", "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'vh|rhczxjs!=vF.(_3' contains an illegal character : '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.createPadding(2443);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("a$xCf{}8X");
      helpFormatter0.setWidth(2443);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2936));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-729);
      String string0 = "[ARG...]";
      Options options0 = null;
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-729), "[ARG...]", "[ARG...]", (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "?uIAIxCc");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("@j:xvBYjs~t", (-1122), (-1122));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(117, " | ", " | ", options0, "Cannot add value, list full.", true);
      helpFormatter0.getLongOptSeparator();
      String string0 = "H@Vl Ow5Pm'AF3pO";
      String string1 = "scBXnu";
      Option option0 = null;
//      try {
        option0 = new Option("u4V}sf!Nf", " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'u4V}sf!Nf' contains an illegal character : '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*{Jke9s469$=8WF";
      helpFormatter0.setLongOptPrefix("*{Jke9s469$=8WF");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        MockURI.resolve((URI) null, (URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      String string0 = "[ option: ";
      Options options0 = new Options();
      String string1 = "}[I>OJC#VrNQ*5";
      boolean boolean0 = true;
      options0.hasLongOption("-");
      String string2 = "";
      // Undeclared exception!
//      try { 
        options0.addOption(" ", "}[I>OJC#VrNQ*5", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      Options options1 = options0.addOption("", "--", true, "");
      options0.getOptionGroups();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp(3198, "RhMgYe+x]RJc", "", options1, "RhMgYe+x]RJc", false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = (-3030);
      String string0 = " [ARG]";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption(">nG0lh8<S1b3h~4jD", " ", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '>nG0lh8<S1b3h~4jD' contains an illegal character : '>'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      String string0 = "]";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1, "]");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "u4V}sf!Nf";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "u4V}sf!Nf", "u4V}sf!Nf", options0, "u4V}sf!Nf", true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      options1.addOption("arg", "$ve$?\"\"s,oue.%fg+{", true, "$ve$?\"\"s,oue.%fg+{");
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptPrefix((String) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1665);
      helpFormatter0.setDescPadding((-1665));
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      Option option0 = new Option("", false, "-");
      option0.clearValues();
      option0.clone();
      Options options2 = options1.addOption(option0);
      helpFormatter0.defaultLeftPad = (-1665);
      // Undeclared exception!
//      try { 
        options2.addOption("--", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.Option", options0, "");
      helpFormatter0.setOptPrefix("a$xCf{}8X");
      assertEquals("a$xCf{}8X", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "", 0, 4140);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      String string0 = "'m5@";
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) " ", 1491, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.getNewLine();
      int int0 = 1585;
      String string0 = "| b@<blltG";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("<", false, "su\r");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '<'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("   ");
      String string0 = "-AfI=mS8";
      helpFormatter0.setArgName("-AfI=mS8");
      String string1 = "arg";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a]ENq@Ev[hAb}7upX";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a]ENq@Ev[hAb}7upX");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, (Options) null, (-271), (-271));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setLeftPadding(74);
      String string0 = "?C!}!O#(Nj";
      String string1 = " ] [ long ";
      String string2 = null;
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("--", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("F.HhclKP(8eh");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("--", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "<3'r>";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("<3'r>", options1);
      helpFormatter0.setSyntaxPrefix("[z");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("Wh^cnn]o/aS", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("--", "\n");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }
}
