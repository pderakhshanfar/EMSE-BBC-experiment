/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:17 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!?\"Y^*@8R=@,");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3661));
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.defaultSyntaxPrefix = "!?\"Y^*@8R=@,";
      helpFormatter0.setLongOptPrefix("Ww");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("Ww");
      helpFormatter0.getDescPadding();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3661), "nr?S", "!?\"Y^*@8R=@,", (Options) null, "Ww", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("q", "q", (Options) null, " | ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "cQ[^b^4K3*#gm|Tw", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 10, 10, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption(option0);
      options1.hasOption("usage: ");
      options2.getOption("-");
      helpFormatter0.printHelp(80, "D0O-|j", "O", options1, "-", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, (-897), options1, 0, 67);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1902);
      String string0 = ");1OxN0 ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1593, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", ");1OxN0 ", options0, ");1OxN0 ", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " :: ";
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding((-1930));
      helpFormatter0.createPadding(954);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp("-", " ", options0, "--");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      options0.addOption("nT96", true, "($9|hmGH");
      helpFormatter0.defaultNewLine = "+DtE8";
      helpFormatter0.defaultDescPad = (-300);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1095), "arg", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = options0.addOption("nT96", true, "($9|hmGH");
      options1.addOption("arg", (String) null, false, "p\"O");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 19, "hH /6f+LRt", options1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "arg", "-", options0, "usage: ", true);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      helpFormatter0.printHelp("-", options1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('y');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "|:XOTK54dd{'OW", options1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, "");
      MockFile mockFile0 = new MockFile("arg", "|M");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('\'');
      helpFormatter0.printOptions(printWriter0, 10, options0, 4152, 55);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      helpFormatter0.printHelp("\n", options1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ]");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      helpFormatter1.printHelp("-", "-", options0, "V&u");
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("--", 2251, 1475);
      Options options0 = new Options();
      Options options1 = options0.addOption("", ")krvcK<4OgE", false, "[");
      String string0 = "C>4IXog^";
      helpFormatter0.printHelp("C>4IXog^", "", options0, "C>4IXog^");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 2944, options1, 3596, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3016, "($9|hmGH", options1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(60, "-", "{%lAR:kE?7gF#+3", options0, "-", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 60, options1, 60, 38);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 38, 53, "{%lAR:kE?7gF#+3");
      helpFormatter0.renderOptions(stringBuffer2, 60, options1, 60, 38);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("TN", "TN", options0, "");
      helpFormatter0.createPadding(0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = Locale.CANADA;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, (Options) null, 1875, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 13, "P655>#(k,8ey");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "|\"x~";
      File file0 = MockFile.createTempFile("usage: ", "cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 33, "--", (String) null, options0, (-506), 74, "cmdLineSyntax not provided", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.printf("usage: ", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1684, "V+^vf27{", "--", options1, 74, 480, (String) null, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1820), (String) null, ">", options0, ">", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      int int0 = 0;
      helpFormatter0.findWrapPos("rlo", 0, 0);
      MockFile mockFile0 = new MockFile("", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      String string1 = "' contains an illegal character : '";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' contains an illegal character : '");
      PrintStream printStream0 = mockPrintStream0.append('`');
      Object[] objectArray0 = new Object[2];
      mockPrintStream0.close();
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "rlo";
      mockPrintStream0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockFile0.toURL();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 215, " ", (String) null, options0, 769, (-1006), " ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1475;
      helpFormatter0.findWrapPos("usage: ", (-159), 1475);
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.printf("arg", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "{", "", options0, (-1), 44, "~:e^", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1475;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 74, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "usage: ", true, "");
      options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printHelp(3, "\n", "zKsb2Q,ZjAU", options0, "wSbBumF1Yxrtg~`v", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-76);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      helpFormatter0.setLongOptPrefix("E_nW!4.yEy&cGRrPs");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "E_nW!4.yEy&cGRrPs");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "arg", "", (Options) null, "usage: ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", (-159), 1475);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "$2Q}b1''FV&*|KmA<", false, "-");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "usage: ", "usage: ", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.defaultLeftPad = (-106);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "", options0, "arg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("DV988NY%", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 3718, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 74, "-", "{", options0, 1, 74, "", false);
      Option option0 = new Option("arg", "usage: ", false, "\n");
      helpFormatter0.rtrim("arg");
      options0.addOption(option0);
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter1.printHelp(111, "8:}Yo0]Ih>1P>-zJ", "-", options1, "", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter1.printHelp(3, "OM}|SZDo(2", "--", options0, "4!z/\"", true);
      helpFormatter1.printHelp("-", "arg", options0, "-");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options1.hasOption("arg");
      options0.getOption("5M_D?");
      options2.addOption("", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "--", options2, "--", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-159);
      helpFormatter0.findWrapPos("", (-159), 1475);
      Options options0 = new Options();
      options0.addOption("arg", "$2Q}b1''FV&*|KmA<", false, "-");
      String string0 = "~RMpEI+ 8=";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-159), "", "y3; gKg+XsX+FRE=a", options0, "~RMpEI+ 8=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      Options options0 = new Options();
      helpFormatter1.findWrapPos("A CloneNotSupportedException was thrown: ", 3, 3);
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
//      try { 
        options1.addOption("--", "'f*l0tlC2]{iQ-YR", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp("i6I9l", "", options1, "i6I9l");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 15, 15, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("B_:/%[?2T]H", "", options1, "`Ynt%e.#0&BTw,Ot.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Hx8k");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1978), "B_:/%[?2T]H");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "-";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1804), "69Q", "-", options0, 17, 17, "{", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "line.separator");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("c8T+[$VB");
      Option option0 = new Option("arg", "-", true, " ");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.insert(0, (Object) "c8T+[$VB");
      helpFormatter2.renderOptions(stringBuffer0, 74, options0, 624, 105);
      options0.hasOption("");
      helpFormatter2.printHelp(3, "c8T+[$VB", "-", options0, "--");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.hasOption("#o8,X;");
      options2.getOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.printHelp(24, "usage: ", "-", options2, "", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = ")pi;RJ[b8UdeV9CL";
      String string1 = "org.apache.commons.cli.HelpFormatter";
      String string2 = "Lu,I1Y)[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Lu,I1Y)[");
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "<", options0, (-2790), 1, "<", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 28, "P<CTD$iT*b$fA=P6B", "D1 ?HtU.|YAIF", options0, 28, 28, "P<CTD$iT*b$fA=P6B");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options1.hasOption("5M_D?");
      options2.getOption("WEKv3gG");
      Options options3 = options1.addOption("arg", true, "V=F+D1~%");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "WEKv3gG", "WEKv3gG", options3, "F_I", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("   ", 62, 100);
      Options options1 = new Options();
      options0.addOption("", "", false, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "", (Options) null, "$2Q}b1''FV&*|KmA<");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "-", options0, 74, 197, "arg", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("leio{,/3{Vzz");
      helpFormatter0.renderOptions((StringBuffer) null, (-1663), options0, 361, 34);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 74, "-", "{", options0, 1, 74, "org.apache.commons.cli.HelpFormatter", true);
      Option option0 = new Option("arg", "usage: ", true, "\n");
      helpFormatter0.rtrim("arg");
      Options options1 = options0.addOption(option0);
      options1.hasOption("--");
      helpFormatter0.printHelp(444, "-", "-", options1, "uti@tbaemr)+>,");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "OM}|SZDo(2", "--", options0, "4!z/\"", true);
      helpFormatter0.setLongOptSeparator(" ~};gX-7i%%DNDcCS:O");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("O", 1, (-4283));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(Mpv6>n+E)ox\"L6z)8", "", options0, "arg");
      MockFile mockFile0 = new MockFile(", ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('0');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 64, "OoGOQX?CD)=;");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1892);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "]#";
      helpFormatter1.printHelp("usage: ", "]#", options1, "usage: ", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      boolean boolean0 = true;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "-", " ", options0, 0, 25, "", true);
      // Undeclared exception!
      helpFormatter1.printHelp(1, "usage: ", "\n", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "", options0, 0, 33, "line.separator", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = Locale.CANADA;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2413, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 43, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "arg", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultWidth = (-106);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "", options0, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("1z\"*ShJF.7", "", options0, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "[ Options: [ short ", options0, 13, (-2471), "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("h", options1, false);
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(31);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter2.createPadding(3);
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp("-", "", options2, "org.apache.commons.cli.Options");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2956), 2060, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("S_yvKR", "!`(eSVd)?U;nZ7;3", options0, "!`(eSVd)?U;nZ7;3");
      helpFormatter0.printHelp(1995, "\"", "\"", options1, "\"");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption((String) null, "$D;S", false, "--");
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("$D;S", "i$][s6O%MJN", options0, " ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption(option0);
      options1.hasOption("usage: ");
      options2.getOption("-");
      helpFormatter0.printHelp(98, "D0O-|j", "O", options1, "-", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 9, options1, 0, 31);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("h", "i$][s6O%MJN", options0, "");
      Option option0 = new Option("h", " [ARG]", true, "EBr2V|QTA(");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("h", options2);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(2079);
      helpFormatter0.findWrapPos("", (-3254), (-3254));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, "arg");
      options1.hasOption("arg");
      options1.getOption("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(23, (String) null, "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1892);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "]#", options1, "usage: ", true);
      options1.addOption("arg", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 3, 20);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-159), 1475);
      Options options0 = new Options();
      helpFormatter0.printHelp(">L_PW0_SK?U;", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 496, "|9\"Od{", "usage: ", options0, (-2692), 496, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Xis83KA&#jZ%ZU$ml0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = 3;
      helpFormatter1.printWrapped(printWriter0, (-1), (-2956), "X7`]:x!M");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Xis83KA&#jZ%ZU$ml0";
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", false, "G{]D?WF;b");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
//      try { 
        optionGroup0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.OptionGroup", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "yqeLW;e$HRfqY>44", "M", options1, "yqeLW;e$HRfqY>44", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-159), 1475);
      Options options0 = new Options();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, (-2), options0, (-159), 74);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4587);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-4587));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L^iNBVP3L*=j3k+");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      mockPrintWriter0.println((-1034));
      helpFormatter0.printWrapped(printWriter0, 4080, 4080, "");
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2179, "", "<C>", options0, "L^iNBVP3L*=j3k+", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" [ARG]");
      helpFormatter0.setArgName(" [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, " [ARG]", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-2956), (-2956), " [ARG]");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = (-1);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options1.hasShortOption("--");
      Options options3 = options2.addOption("", "}=}kg/18(BFvMR<", false, "--");
      Options options4 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "e=`{Ob", options4, "}=}kg/18(BFvMR<", false);
      // Undeclared exception!
//      try { 
        options3.addOption("r)D+H^u", false, "r)D+H^u");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'r)D+H^u' contains an illegal character : ')'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "'", "'", options0, 21, 77, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = (-768);
      helpFormatter0.defaultLeftPad = (-768);
      helpFormatter0.defaultOptPrefix = "   ";
      helpFormatter0.setLongOptPrefix(" ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int1 = 44;
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(74, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 74
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "-`q80h<vVAFHCS6V", "$dLGE", (Options) null, (-1759), 0, "--");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!6M].@zm_s`_u%o,";
      helpFormatter0.defaultNewLine = "!6M].@zm_s`_u%o,";
      helpFormatter0.defaultWidth = 16;
      helpFormatter0.defaultDescPad = (-984);
      helpFormatter0.setArgName("");
      String string1 = "\"4C/*H0a";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("\"4C/*H0a", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "-";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4206), "t$o8e");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2257, options0, 2257, 0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1757));
      Options options0 = new Options();
      Option option0 = new Option("", "\n", true, "");
      options0.toString();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1053), "--", "-", options1, "$tkKB/(/Z");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      Option option0 = new Option("", "-", true, "--");
      options0.toString();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-897), "6agL+cq`P}m}", "6agL+cq`P}m}", options1, "6agL+cq`P}m}");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "\n");
      options0.toString();
      Options options1 = options0.addOption(option0);
      options1.hasOption("--");
      helpFormatter0.printHelp(444, "-", "-", options1, "uti@twbaemr)+>,");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-159), 1475);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "$2Q}b1''FV&*|KmA<", false, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "$2Q}b1''FV&*|KmA<");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(2079);
      String string0 = "";
      int int0 = (-3254);
      helpFormatter0.findWrapPos("", (-3254), (-3254));
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, "arg");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "\n", false, "[");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options3, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1892);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "has already been selected: '", options1, "i$][s6O%MJN");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("h", "i$][s6O%MJN", options0, "");
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1970), "T (h<E7Xzx,Vrj($W", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, (-4073), (-4073), " '.dG6#C=g2\"O4]");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setNewLine("The option '");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = (-3091);
      helpFormatter0.defaultNewLine = "The option '";
      String string0 = "8";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('n');
      stringWriter1.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "8");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3091), "The option '", "8", options0, (-3091), (-3091), "The option '");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[2_pY@W");
      helpFormatter0.getOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", "-", true, "[2_pY@W");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "(*G<>=^}ab^");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`oZ0r ";
      helpFormatter0.setOptPrefix("`oZ0r ");
      int int0 = (-3111);
      helpFormatter0.setDescPadding((-3111));
      String string1 = "W|[4d<n";
      Options options0 = new Options();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("--", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 733;
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "~6K['Oek<<I5YA;,J");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      String string0 = "";
      options1.hasOption("5M_D?");
      boolean boolean0 = true;
      options0.getOption("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-579), "E]%VU\"kdtnjb65q,uDx", "E]%VU\"kdtnjb65q,uDx", options1, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "c7%b";
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 44;
      Options options0 = new Options();
      String string0 = ":F3>DL9LhG:";
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", false, ":F3>DL9LhG:");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, (-1861), "t*j^go^ZFu&mg~(DIf");
      int int0 = 1165;
      Options options0 = new Options();
      String string0 = "?=Wb";
      // Undeclared exception!
//      try { 
        options0.addOption("?=Wb", false, "1wg8JrBxp");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '?=Wb' contains an illegal character : '?'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Xis83KA&#jZ%ZU$ml0");
      helpFormatter0.rtrim("z_");
      int int0 = (-1005);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("\n", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
