/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:44:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "-", true, "-");
      options2.addOption("", true, " _q(3a;");
      int int0 = (-138);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-138), "N ", "NO_ARGS_ALLOWED", options0, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X'2MC_[e!lB");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 31, options0, (-1), 64);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 4, options0, 4, 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setDescPadding((-96));
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, (Options) null, 34, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("q,7;1;RUg~Kr", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter2.printHelp(3, "--", "arg", options0, "qV!7,!|3DqCkQ|)}");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "cmdLineSyntax not provided", "org.apache.commons.cli.OptionValidator", options0, 2, 3390, "cmdLineSyntax not provided");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setLongOptSeparator("");
      Options options1 = options0.addOption("arg", "\n", true, (String) null);
      helpFormatter0.printHelp(2230, "-", "`JGQP0PpB[2", options1, "ogZt!{</Pgsn],Mlnv.");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(8*r,tL3";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("(8*r,tL3", "The option '", (Options) null, "The option '");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      Option option0 = new Option("dl8RGFQl", "@ZP0G2");
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "]", options2, 1, 74, (String) null);
      Options options3 = new Options();
      Option option1 = new Option("arg", "--", true, "--");
      option1.setArgName("");
      Options options4 = options3.addOption(option1);
      helpFormatter0.printHelp(3, "--", "", options4, "   ", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "", "--", options4, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      int int0 = helpFormatter0.defaultDescPad;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "vG", (String) null, options0, (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "--");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3, "--", "VXP", options1, "   ", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.printHelp(127, "0vZB]T<f0qyC", "--", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      option0.setArgs(1);
      helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 722, 3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printHelp(6551, ",]\"TU$:C%Y", ",]\"TU$:C%Y", options0, "org.apache.commons.cli.ParseException");
      StringBuffer stringBuffer0 = new StringBuffer(6551);
      helpFormatter0.renderOptions(stringBuffer0, 6551, options0, 6551, 3019);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("arg");
      Option option0 = new Option("arg", "--", true, "--");
      option0.setArgName("\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(99, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options1, "(8*r,tL3", true);
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "usage: ", "", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      options0.addOption(option0);
      helpFormatter0.printHelp((-1), "(8*r,tL3", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(99, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options1, "(8*r,tL3", true);
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "usage: ", "", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      optionGroup0.setRequired(true);
      String string1 = null;
      Option option0 = new Option((String) null, "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("KC");
      Options options0 = new Options();
      options0.getOption("z*XI2LcfYt+@%h Q");
      options0.getMatchingOptions("--");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.printHelp(7, "3Aso[E3xk?]w[U,!", "--", options0, "bJgl];_$", false);
      helpFormatter0.findWrapPos("d8Q*`t2O#qLF", (-2), 10);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3384);
      helpFormatter0.setOptPrefix("line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, " ] [ long ", "-", options0, "The option '");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-180), 1602, "org.apache.commons.cli.HelpFormatter$1");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("arg");
      boolean boolean0 = true;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", ".+re'hQ%ya~", true, " ");
      option0.setArgName("usage: ");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-2), "-", "--", options0, "\n", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(105);
      helpFormatter1.setOptPrefix("GkzDe!;%IoIS9atU_G^");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter2.setDescPadding((-1306));
      Option option0 = new Option("arg", "", true, " ");
      helpFormatter1.printHelp(3, "\n", "org.apache.commons.cli.Option", options0, "GkzDe!;%IoIS9atU_G^");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(21, ".OajJBKp1^4UL/", " ", options1, "usage: ", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "9", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(115);
      helpFormatter1.setOptPrefix("GkzDe!;%IoIS9atU_G^");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(74);
      Option option0 = new Option("arg", "", true, " ");
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator(" ");
      options0.getOption("arg");
      options0.helpOptions();
      options0.getMatchingOptions("--");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.printHelp(3, "\n", " ", options0, "1W@V>e>", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(1096, "QEXW", "--", options0, "7pI]b7$");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2214);
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", true, "[ Options: [ short ");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-2155), "usage: ", "q%~5x$", options0, "--", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("fQr(iW", options0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      options0.helpOptions();
      helpFormatter0.printHelp("8zf OP Q }-pK+w", "\n", options0, "");
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 46, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "org.apache.commons.cli.HelpFormatter", options0, 46, 3, " ", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(115);
      helpFormatter1.setOptPrefix("GkzDe!;%IoIS9atU_G^");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, " ");
      Options options1 = options0.addOption(option0);
      helpFormatter2.printHelp(3, "-", "--", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator(" ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("V", "-", true, "org.apache.commons.cli.Options");
      option0.clone();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cmdLineSyntax not provided");
      helpFormatter1.printHelp("-", "V", options0, "usage: ");
      helpFormatter0.printHelp(2, "-", "usage: ", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("$G|*+W7:Ew?", options0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      options0.helpOptions();
      helpFormatter0.printHelp("95H", "org.apache.commons.cli.HelpFormatter", options0, (String) null);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      helpFormatter0.printWrapped(printWriter0, 85, " ] [ long ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 53, "7 ~f\"-ME{xn jdDpP ", (String) null, options0, 85, 74, "u[sjy$EH[/aUuuYL:fQ", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2437);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = " ";
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "D&I7`(b^j(j>fUPNH;", " ", options0, 16, 9, "--", true);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator(" ");
      options0.helpOptions();
      helpFormatter0.printHelp("96fk3d]fqfu+/dt", options0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.printHelp("d%kK1C\"8_bFD.", "org.apache.commons.cli.HelpFormatter", options0, "--");
      File file0 = MockFile.createTempFile("96fk3d]fqfu+/dt", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('&');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1610, (String) null, "!dAvoT9oX", options0, (-2), 1, "N,+X>_Ub(", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator(" ");
      options0.helpOptions();
      helpFormatter0.printHelp("96fk3d]fqfu+/dt", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("d%kK1C\"8_bFD.", "org.apache.commons.cli.HelpFormatter", options0, "arg");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "d%kK1C\"8_bFD.");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 9, 1952, ">L<rR+~r1T8q1L");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 127, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2437);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "D&I7`(b^j(j>fUPNH;", " ", options0, 16, 9, "--", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Jo9(J`{gr]9O{ uws?");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 105, 105, "~hP3fFo");
      mockPrintWriter1.append((CharSequence) stringBuffer1);
      Options options0 = new Options();
      options0.helpOptions();
      String string0 = "";
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "", options0, "has already been selected: '");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator("-");
      Options options1 = options0.addOption("", "s\"OzSXc>ZTB+,x`", true, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, "&12?5w6w(X5XV5i(");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(printWriter0, 74, "&12?5w6w(X5XV5i(", "H;N", options1, 6, 3, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1081), "--", "zj_:;C", options0, "zj_:;C");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator(" ");
      options0.helpOptions();
      helpFormatter0.printHelp("96fk3d]fqfu+/dt", options0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("\n");
      File file0 = MockFile.createTempFile("usage: ", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('m');
      helpFormatter0.printHelp(printWriter0, 9, "{t~\"K.-7l", "{t~\"K.-7l", options0, 1, 9, " ");
      helpFormatter0.getNewLine();
      helpFormatter0.printOptions(printWriter0, 11, options0, 32, 9);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator(" ");
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 2, "usage: ", "", options3, (-755), 74, "hI=e", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("g", true, "arg");
      Option option0 = new Option("", "--", true, ":xVF{Aa");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(3175, " ]", " ]", options3, (String) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(0);
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("-");
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "oe= es");
      option0.clone();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\n", "03('Z", options2, "");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("' was specified but an option from this group ");
      Options options0 = new Options();
      Options options1 = options0.addOption("Kb0iuK$$", true, "--");
      options1.helpOptions();
      helpFormatter0.printHelp("Kb0iuK$$", options1);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "96fk3d]fqfu+/dt", options1, "-");
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 207, "arg");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append((CharSequence) "--");
      MockFile mockFile0 = new MockFile((String) null, "sD2sKRfr:_2ok%N");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "sD2sKRfr:_2ok%N");
      Options options0 = new Options();
      options0.addOption("", false, "Cannot add value, list full.");
      Options options1 = options0.addOption((String) null, true, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 48, "sD2sKRfr:_2ok%N", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1829);
      helpFormatter0.setLeftPadding((-1829));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'o{fa7kq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println();
      mockPrintWriter1.println('+');
      mockPrintWriter0.println(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("'o{fa7kq", options1);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter1.getNewLine();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.Options", false, "line.separator");
      String string1 = "~'lKg";
      helpFormatter1.printHelp("_tO]yf@9m/", "usage: ", options1, "~'lKg", false);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.Options");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 74, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      optionGroup0.setRequired(false);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(57, "org.apache.commons.cli.HelpFormatter", (String) null, options0, (String) null);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionValidator");
      options0.addOption("", "s\"OzSXc>ZTB+,x`", true, "");
      helpFormatter0.printHelp("d2/O-nwG~1@=et_orF", options0);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-280), ">", " ", options1, (-280), (-280), "LQ*", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionValidator");
      options0.addOption("", "s\"OzSXc>ZTB+,x`", true, "");
      helpFormatter0.printHelp("d2/O-nwG~1@=et_orF", options0);
      MockFile.createTempFile("LQ*", "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 127, "", "org.apache.commons.cli.OptionValidator", options0, 93, 1767, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.forLanguageTag("Pbc@rJ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) printWriter0;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "Pbc@rJ", objectArray0);
      Options options0 = new Options();
      locale0.getDisplayScript();
      helpFormatter0.printWrapped(printWriter1, 174, "4HOC>4<ogn3M89j");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter2);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(54, "usage: ", "   ", options0, "1W@V>e>", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "Y&rMXx#S-'DPYX(";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 360, "Y&rMXx#S-'DPYX(");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator(" ");
      options0.helpOptions();
      helpFormatter0.printHelp("96fk3d]fqfu+/dt", options0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      Option option0 = new Option("arg", false, "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 20, "\n", "", options0, 1, 10, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1829));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'o{fa7kq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println();
      mockPrintWriter1.println('+');
      mockPrintWriter0.println(3);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ", 1, 2);
      helpFormatter0.printWrapped(printWriter0, 2, 1, "'o{fa7kq");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("arg", 1, 2);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("'o{fa7kq");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-3302), "arg", "arg", (Options) null, 501, 9, "<", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator(" ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("V", "-", false, "org.apache.commons.cli.Options");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("-", "V", options0, "usage: ");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "cmdLineSyntax not provided", options0, "cmdLineSyntax not provided", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter1.defaultOptPrefix = "line.separator";
      Options options0 = new Options();
      helpFormatter1.setLongOptSeparator("\n");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp("line.separator", "-", options1, "line.separator");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1829));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'o{fa7kq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println();
      mockPrintWriter1.println('+');
      mockPrintWriter0.println(3);
      mockPrintWriter1.append((CharSequence) "usage: ", 1, 2);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1148, "idO;Ee=6.]y");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 0, (-1829));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(712, "T+", "xnoG};-FbZc4R\"iW5", options0, "xnoG};-FbZc4R\"iW5");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator(" ");
      options0.helpOptions();
      helpFormatter0.printHelp("96fk3d]fqfu+/dt", options0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      options0.getMatchingOptions("-");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", " ", options0, "1W@V>e>", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("   ", 0, 0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp("The option '", options1);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      option0.setLongOpt("");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options2 = new Options();
      helpFormatter0.printHelp("The option '", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setLongOptPrefix("usage: ");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.printHelp("arg", "\n", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1998, "8gm");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.findWrapPos("   ", 4168, 10);
      helpFormatter0.setLongOptSeparator("   ");
      Options options0 = new Options();
      helpFormatter0.printHelp("The option '", "The option '", options0, "The option '");
      MockFile mockFile0 = new MockFile("4d #Sm!wA%rIY<nu^^_");
      mockFile0.mkdir();
      Locale locale0 = Locale.CHINA;
      helpFormatter0.printHelp("   ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.getNewLine();
      helpFormatter0.defaultNewLine = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, 74, " *Kd1a");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ]");
      helpFormatter0.getArgName();
      String string0 = "";
      helpFormatter0.findWrapPos("", 15, 64);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("\n");
      Options options0 = new Options();
      helpFormatter1.printHelp("arg", "--", options0, "\n");
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      printWriter0.checkError();
      Locale locale0 = Locale.forLanguageTag("Pbc@rJ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) printWriter0;
      mockPrintWriter1.printf(locale0, "Pbc@rJ", objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 14, "~#E");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "hK`vC[SR~d`", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2941), options0, (-2941), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("iq^$5'FoipOliw");
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter2);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "-", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter3, 1, "usage: ", "8Be/Y}5>7/VsnS]", options1, 1, 2382, "", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("iq^$5'FoipOliw");
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(stringWriter1);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter2);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 74, "UQKdyk5\"=H7SJhmS+7", "usage: ", options0, 74, (-3462), "arg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NO_ARfXS_ALLOWE", "", options0, "NO_ARfXS_ALLOWE");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ax.>ST!o#Uou");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2454), (-2454), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1829));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'o{fa7kq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println();
      mockPrintWriter1.println('+');
      mockPrintWriter0.println(3);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ", 1, 2);
      helpFormatter0.printWrapped(printWriter0, 2, 1, "'o{fa7kq");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("arg", 1, 2);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("'o{fa7kq");
      Options options0 = new Options();
      String string0 = "5n,\"P%s/Sx!&h";
      // Undeclared exception!
//      try { 
        options0.addOption("5n,\"P%s/Sx!&h", "5cp\"1lOc!E7qwRs", true, "'o{fa7kq");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '5n,\"P%s/Sx!&h' contains an illegal character : ','
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1829));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'o{fa7kq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println();
      mockPrintWriter1.println('+');
      mockPrintWriter0.println(3);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ", 1, 2);
      helpFormatter0.printWrapped(printWriter0, 2, 1, "'o{fa7kq");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("arg", 1, 2);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("'o{fa7kq");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(64, "", "V{`5d.A{-Bc'V@piB", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      Locale.forLanguageTag("Pbc@rJ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "Pbc@rJ", options0, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3412));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("]", options0, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter2);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 63, "usage: ", "usage: ", options0, 3, 1, "bkK|iI^@aIuc-a~");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator(" ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('l');
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-", 1, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      mockPrintWriter0.append('l');
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "!");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("iq^$5'FoipOliw");
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      Locale.forLanguageTag("Pbc@rJ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-440), (String) null, (String) null, (Options) null, 0, 0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, " ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3201), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      helpFormatter0.setArgName(" 6Vi0");
      helpFormatter0.findWrapPos(" 6Vi0", 44, 63);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix(" :: ");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2157), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "eiSr");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "", "", options0, 507, 10, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("line.separator");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      int int0 = 0;
      String string0 = "h";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("cmdLineSyntax not provided", " ", true, "K?8YD2AuVffFb`I9");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 74);
      PipedOutputStream pipedOutputStream1 = null;
//      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ]");
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.findWrapPos("   ", 0, 0);
      helpFormatter0.setLongOptSeparator(" ]");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "   ", options0, "org.apache.commons.cli.OptionGroup");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "   ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printUsage(printWriter0, 13, "   ");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_@Af>1C5K%]WF%wQ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("_@Af>1C5K%]WF%wQ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-933);
      helpFormatter0.defaultLeftPad = (-933);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3068), "");
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(1426, '_');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine("l4*!.,`9A3V?h|+6eJ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2082, (-2843), "l4*!.,`9A3V?h|+6eJ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "{]!ZzzW<mJ?*^7S*";
      objectArray0[2] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "{]!ZzzW<mJ?*^7S*", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "--");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2362));
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultWidth = (-2362);
      helpFormatter0.setDescPadding(801);
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 801, 0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName((String) null);
      String string0 = "\"";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3194), "", "\"", options0, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3841);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      // Undeclared exception!
//      try { 
        options0.addOption("-", "Nfhn", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4756;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLeftPadding(4756);
      helpFormatter0.defaultWidth = 4756;
      helpFormatter0.getOptionComparator();
      String string0 = ",6qX";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "arg", true, "arg");
      // Undeclared exception!
//      try { 
        options1.addOption("--", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "Pk]";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("Pk]", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-4445), "Pk]", " AV|pBz6[j", options0, (-4445), 2393, " AV|pBz6[j");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "g*?Ye/}");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // g*?Ye/}
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4363;
      helpFormatter0.defaultWidth = 4363;
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      String string2 = "_!ZO=v.GtR4-%<lh-E`";
      Options options2 = options1.addOption("arg", "_!ZO=v.GtR4-%<lh-E`", true, "-");
      options2.addOption("", true, "_!ZO=v.GtR4-%<lh-E`");
      Option option0 = null;
//      try {
        option0 = new Option("-", "--", false, "`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "--");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1653, (String) null, options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-495);
      String string0 = null;
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-495));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-706);
      String string0 = " ";
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-706), " ", "", options0, " ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(0);
      String string0 = "";
      String string1 = " ] [ long ";
      Options options0 = new Options();
      String string2 = "$Zv:28JuX1qGTb?rZ>";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("-", "", false, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1580), (Options) null, 2057, (-381));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.forLanguageTag("Pbc@rJ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) printWriter0;
      PrintWriter printWriter1 = mockPrintWriter2.printf(locale0, "Pbc@rJ", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, 174, "~#E", "Pbc@rJ", options1, (-84), (-2), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp("96fk3d]fqfu+/dt", options0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getNewLine();
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ":";
      helpFormatter0.setLongOptSeparator(":");
      helpFormatter0.getLongOptPrefix();
      int int0 = 2474;
      String string1 = "0RG<@hI<tFctY]2Ymav";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2474, "0RG<@hI<tFctY]2Ymav", "--", (Options) null, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      int int0 = 1;
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int1 = 0;
      stringBuffer0.replace(1, 1, "-");
      Options options0 = new Options();
      String string1 = "<kU0^R]y";
      Object object0 = new Object();
      stringBuffer0.append(object0);
      Option option0 = null;
//      try {
        option0 = new Option("<kU0^R]y", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '<kU0^R]y' contains an illegal character : '<'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getLongOptPrefix();
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      helpFormatter0.printHelp("]", options0, true);
      assertEquals(9, helpFormatter0.defaultWidth);
  }
}
