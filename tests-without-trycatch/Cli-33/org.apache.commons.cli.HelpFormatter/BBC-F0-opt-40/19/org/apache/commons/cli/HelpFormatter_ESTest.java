/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:21:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("K", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "K", "K", options1, ">!JZxY~7zl", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1414, options0, 1414, 4);
      options0.hasOption("arg");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 248, 4, "");
      helpFormatter0.renderOptions(stringBuffer2, 4, options0, 248, 0);
      helpFormatter0.printHelp("#", options0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "arg", options0, "--", true);
      helpFormatter1.defaultWidth = (-833);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("-", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "88JXI}`$x@I\"xvade", true, (String) null);
      Options options2 = options1.addOption("", false, ">6D");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "88JXI}`$x@I\"xvade", options2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-133));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1396, "usage: ", "usage: ", options0, " ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "--";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, options0, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("*I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b0$pn-21oo?,(");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "b0$pn-21oo?,(");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "IBvdJ%?5ra/E!~pm", "-", options0, "IBvdJ%?5ra/E!~pm", false);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 0;
      int int1 = (-1608);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1608), "<");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 32;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-454), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 2333;
      String string0 = null;
      stringBuffer0.insert(1, (String) null);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2333, (Options) null, 2333, 2333);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      int int0 = 87;
      helpFormatter0.printWrapped(printWriter0, 87, "i3C0.e 9x4U6fdP90nD");
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      String string1 = " [ARG]";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("--", false, "r\"52g'7\"sQ9:U-$");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "]";
      helpFormatter1.setNewLine("=@t[LNSOBn +nqd#B");
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1, options0, (-1407), 3);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "IBvdJ%?5r\\a/E!\\~pm";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?");
      mockPrintWriter0.println((-1773));
      mockPrintWriter0.println("]");
      mockPrintWriter0.print('6');
      mockPrintWriter0.write(1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 994, 0, "?");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.write(1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 15, "?");
      helpFormatter0.findWrapPos("]SE", 1, 1);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("]SE");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 2150;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("?+u:PboA^uS/", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NO_ARGS_ALLOWED");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, (-1021), "[ARG...]");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1896);
      String string0 = " ";
      Options options0 = new Options();
      options0.hasOption("-");
      options0.addOption("arg", true, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2508, "\"", "usage: ", options0, 0, 0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-2248);
      helpFormatter0.setDescPadding((-2248));
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), " ", "", options1, "cmdLineSyntax not provided", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3023);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "usage: ", options0, "]");
      Options options1 = new Options();
      helpFormatter1.printHelp(63, " ", "--", options1, "usage: ", false);
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, " | ", options0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "u)D)60$Ro:M", (String) null, options0, "", false);
      String string0 = helpFormatter0.defaultOptPrefix;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2229, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile(" ", "[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Q", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("--", options2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.setWidth(2044);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4135, " | ", (String) null, options0, 2044, (-540), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "");
      MockFile mockFile1 = new MockFile(mockFile0, "E@TM#1B");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockPrintStream0.print(74);
      int int0 = 41;
      mockPrintStream0.write(41);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 60, 5066, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 1321;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1321);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 49, " ", "=|dkQ.#`gUh/OM<&bk*", options0, 1321, 64, (String) null, false);
      helpFormatter1.getArgName();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption("^yA<5uxRP<|P/r3Y:", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '^yA<5uxRP<|P/r3Y:' contains an illegal character : '^'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.printf((Locale) null, "arg", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-553), "-", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "-", "usage: ", options0, "IBvdJ%?5ra/E!~pm", false);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2182), (-2182), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1555;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "?x-", true, "");
      String string0 = "'f'4UK";
      boolean boolean0 = true;
      helpFormatter0.printHelp(1555, "IBvdJ%?5ra/E!~pm", "", options1, "'f'4UK", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasLongOption(" ");
      helpFormatter0.printHelp("-", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 116, "!qYO8DP57qSP5d e", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      int int0 = 4;
      String string0 = "$fdC3jp9-{c,^q8V0^";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("$fdC3jp9-{c,^q8V0^", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("VWK", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption("", "", false, "org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup2);
      options2.hasLongOption("_$=7uU<iei,8JRX|_P");
      Options options3 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1463), "4.sr*02$'mUrUJ", "\"", options2, "_$=7uU<iei,8JRX|_P", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(3, "4.sr*02$'mUrUJ", "", options0, "IBvdJ%?5ra/E!~pm", false);
      helpFormatter0.printHelp("`E>8I\"q}", options0);
      helpFormatter0.getArgName();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8\u0000Nu_", true, "arg");
      helpFormatter0.printHelp(13, "P", "P", options1, "?&HpDyrDbNX60r", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-956), options0, 32, 1019);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "OP 2;wL*,hpPPrF4", "OP 2;wL*,hpPPrF4", options0, "org.apache.commons.cli.Util", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 691, "org.apache.commons.cli.Util", (String) null, options1, 691, 78, "org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2738);
      String string0 = "O2";
      helpFormatter0.setArgName("O2");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(64);
      Options options0 = new Options();
      Options options1 = options0.addOption("O2", "", false, "O2");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "--", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 3089;
      boolean boolean0 = true;
      String string1 = "Xkkk";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3953), "Xkkk");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "uR;r|D#?tEi2ON-zwn", "", options0, 3, 64, "", false);
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream0.append('4');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byteArrayOutputStream0.reset();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "`", "`", options0, 3, 3367, "o5", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, (String) null);
      helpFormatter1.printHelp("-", options1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "VR3";
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "-";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      mockFile0.toURI();
      mockFile0.setReadOnly();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 44;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "-");
      helpFormatter0.getDescPadding();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(3);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option(" ", "-", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1079);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      String string0 = "}\"@R";
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "}\"@R", "CV", options0, 64, (-2309), "`", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      byteArrayOutputStream0.reset();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, " :: ", "`", options0, 4152, 64, "org.apache.commons.cli.Options", false);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "`";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) " :: ";
      objectArray0[5] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.Options", objectArray0);
      helpFormatter0.printUsage(printWriter0, 64, "/nTD*,S)T", options0);
      helpFormatter0.printOptions(printWriter0, 4152, options0, 63, 4152);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(35, "CV", "CV", options0, "");
      Options options1 = options0.addOption("", true, "?");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(32, "--", "'", options0, "-", false);
      MockFile mockFile0 = new MockFile("usage: ");
      StringWriter stringWriter0 = new StringWriter(64);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "'", 1, 1);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 3, 558);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped(printWriter0, (-2525), 1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(164, "9@;T'^@", "9@;T'^@", options0, "arg", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("[", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 164, 164, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "'";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", "i>^k7_o9e2KzW1LK", options0, "-");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(35, "CV", "CV", options0, "");
      Options options1 = options0.addOption("", true, "?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "CV");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "?";
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) "CV";
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) "?";
      objectArray0[8] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "1y*5o+X4U1P", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "TEyIu@+|", options1);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "";
      int int0 = 105;
      Options options2 = null;
      String string1 = "&z,3pUSjUs%";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(105, "1uI2", "", (Options) null, "&z,3pUSjUs%", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 9;
      options0.hasShortOption("^i)v PfNg>");
      String string0 = "   ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1368), "1aizob9", "", options0, "   ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "'", " vm&=a64fJo{", options0, "CV");
      options0.addOption((String) null, true, "' contains an illegal character : '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(5, "--", "", options0, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "'", "'", options0, "CV");
      options0.addOption("CV", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "{*=udpL_`", "-", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      byteArrayOutputStream0.reset();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, " :: ", "`", options0, 4152, 64, "org.apache.commons.cli.Options", false);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "`";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "`", "org.apache.commons.cli.Options", options0, 4152, (-1226), "0RcJ/*)a8R'1GB-nW", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      option0.setOptionalArg(true);
      Option option1 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption(" ");
      options0.hasLongOption((String) null);
      optionGroup0.addOption(option1);
      options1.getOptions();
      helpFormatter0.printHelp("@l0,%QT", options1);
      options1.hasLongOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.print((Object) option1);
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) collection0;
      objectArray0[2] = (Object) "@l0,%QT";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) option0;
      objectArray0[6] = (Object) "P/;z3]VLu_-d|vVJ5B";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 13, "l! VJONGYga!5%", options1);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      byteArrayOutputStream0.reset();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, " :: ", "`", options0, 4152, 64, "org.apache.commons.cli.Options", true);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "`";
      objectArray0[2] = (Object) "";
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("`", 4152, 89);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 89, 64, "`");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(74);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H{I[5f%02DI+X");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Frj?H09:wu");
      mockPrintStream0.println(':');
      mockPrintStream0.printf("", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.printf("-", (Object[]) null);
      helpFormatter1.printWrapped(printWriter0, 3796, "Frj?H09:wu");
      int int0 = 64;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "", "H{I[5f%02DI+X", options0, (-1997), (-1), " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      option0.setOptionalArg(true);
      Option option1 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ij@Q_:DoA?98',bDPY");
      MockFile mockFile0 = new MockFile("_Qi\"u7k*4;!kx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) collection0;
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) "@l0,%QT";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), (String) null, "v3}GVt03xJII:|'/", options0, 2278, (-1), "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      option0.setOptionalArg(true);
      String string0 = "h.@$NZ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "", "h.@$NZ", options0, " ]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getArgName();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      Options options1 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.setLeftPadding(987);
      helpFormatter0.printHelp(987, "arg", "arg", options0, "y", false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = (-1);
      stringBuffer0.append(0.0F);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1330), (-1), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "4.sr*02$'mUrUJ", "", options0, "IBvdJ%?5ra/E!~pm", false);
      helpFormatter0.printHelp("`E>8I\"q}", options0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " [ARG]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("j[>sI>=}{cl");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "?~DS\"Ub<E}`", "B@yW6sx", options0, 101, (-2975), "B@yW6sx");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("", (String) null, true, " ");
      options0.addOption(option0);
      options0.getMatchingOptions("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1694), "'", "", options0, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      option0.setOptionalArg(true);
      Option option1 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption(" ");
      options0.hasLongOption((String) null);
      options1.getOptions();
      helpFormatter0.printHelp("@l0,%QT", options1);
      options1.hasLongOption("usage: ");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3880), "P/;z3]VLu_-d|vVJ5B", "", options1, (-1), 635, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commoncli.Options");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setSyntaxPrefix("M?`=+bmC");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "O?f1fuk}FWrp4{`", "\n", options0, 74, 74, "");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 60, 60, "8'7");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "usage: ", options0, (String) null, false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      char[] charArray0 = new char[9];
      charArray0[1] = ';';
      charArray0[2] = '`';
      Options options1 = new Options();
      options1.getMatchingOptions("dy");
      helpFormatter0.printHelp(32, "dy", "", options1, ", ", false);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-126);
      String string0 = "WX_D'&L>uwGm]jOK*_A";
      helpFormatter0.setDescPadding(392);
      Options options0 = null;
      String string1 = "fOUKH),kKA";
      String string2 = "zZx}/7";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2977, "gWLLA7_1e", "Q+^v?I3\"'Ewk.S*HT", (Options) null, "WX_D'&L>uwGm]jOK*_A");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "'", "'", options0, "CV");
      options0.addOption("CV", true, "--");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "d4Ns;hV";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-287), " [ARG]", " [ARG]", options0, 1, 2432, "8'7", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 5, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "usage: ", options0, (String) null, false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      char[] charArray0 = new char[9];
      charArray0[1] = ';';
      charArray0[2] = 'c';
      helpFormatter0.printHelp("arg", "arg", options0, "arg", false);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 32, 74);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(60, "8'7", (String) null, options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getMatchingOptions("KkCXf{Ft)I:W");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "", "9n_zzn-'?ltSm6n", options0, "d4Ns;hV", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("arg", "usage: ", options0, (String) null, false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 31;
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "", "X]sTtE$X[ngk\"Z", options0, 13, 31, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      options0.hasShortOption("usage: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      int int0 = 4152;
      String string0 = "";
      helpFormatter0.printHelp(")m01~ A!", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4152, "-", "B@yW6sx", options0, 0, 4152, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = (-1694);
      String string0 = "8'7";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "8'7", "8'7", options0, (-1694), (-287), "d4Ns;hV", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "--";
      helpFormatter0.printHelp("--", options0, false);
      helpFormatter0.getNewLine();
      String string1 = "' was specified but an option from this group ";
      helpFormatter0.printHelp("' was specified but an option from this group ", options0, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        options0.addOption("--", "\"", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 32, (-2646));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" | ");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("\"");
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-713));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
      helpFormatter0.printHelp(1, " ", "B@yW6sx", options0, "B@yW6sx", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " [ARG]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("]");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-25));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " [ARG]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" [ARG]", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("]");
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, " [ARG]");
      optionGroup0.setSelected(option0);
      helpFormatter0.printHelp("jA!n^+rdOjO7RuH_", "jA!n^+rdOjO7RuH_", options1, "Jof.@+X6=Wib95:");
      helpFormatter0.setNewLine("");
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp((-1), "]", " ", options0, " [ARG]", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      int int0 = 4152;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4152, "-", "B@yW6sx", options0, 0, 4152, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(1957);
      String string1 = "has already been selected: '";
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(659);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption(" ", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      option0.setOptionalArg(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption(" ");
      helpFormatter0.defaultNewLine = "@l0,%QT";
      options0.hasLongOption("@l0,%QT");
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(">2+^E+<X22wFnEhw4");
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-622), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "kg?";
      helpFormatter0.defaultLeftPad = 3089;
      boolean boolean0 = true;
      String string2 = "Xkkk";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "Xkkk");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2), options0, (-2), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 0, 32);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setLongOptPrefix("line.separator");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", " ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //  
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1817);
      String string0 = ">@+~Vm4w)[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">@+~Vm4w)[");
      PrintWriter printWriter0 = mockPrintWriter0.append('^');
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-320), 3141, ">@+~Vm4w)[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "B@yW6sx";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, " l!_zA%", options0, "B@yW6sx", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<String>();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "8.XKTrJW>qIb$", true, "\n");
      option0.setOptionalArg(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption(" ");
      helpFormatter0.defaultNewLine = "@l0,%QT";
      options0.hasLongOption("@l0,%QT");
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "usage: ", options0, (String) null, false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      char[] charArray0 = new char[9];
      charArray0[1] = ';';
      charArray0[2] = 'c';
      Options options1 = new Options();
      options1.getMatchingOptions("dy");
      helpFormatter0.printHelp(32, "dy", "", options1, ", ", true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = ",\"13=d%p-iy;";
      helpFormatter0.setNewLine(",\"13=d%p-iy;");
      int int0 = (-1283);
      helpFormatter0.setWidth((-1283));
      String string0 = "";
      String string1 = "2NZYB?]'";
      Options options0 = new Options();
      Option option0 = new Option("", "-", true, ",\"13=d%p-iy;");
      options0.addOption(option0);
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
//      try { 
        options0.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " [ARG]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("]");
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, " [ARG]");
      optionGroup0.setSelected(option0);
      helpFormatter0.printHelp("jA!n^+rdOjO7RuH_", "jA!n^+rdOjO7RuH_", options1, "Jof.@+X6=Wib95:");
      helpFormatter0.setNewLine("");
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, " l!_zA%", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      byteArrayOutputStream0.reset();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      String string1 = "";
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.Options", "org.apache.commons.cli.Options", options1, (-1), 74, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "V9", options0, (String) null, false);
      int int0 = 32;
      Options options1 = null;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = ';';
      charArray0[2] = 'c';
      charArray0[3] = 'Z';
      charArray0[4] = 'n';
      charArray0[5] = 'e';
      charArray0[6] = 'x';
      charArray0[7] = '{';
      charArray0[8] = '|';
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(3, charArray0, 0, 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 3
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append('(');
      String string0 = "=.hM{EbC{bS";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "]", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "WX_D'&L>uwGm]jOK*_A";
      helpFormatter0.setDescPadding(392);
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("WX_D'&L>uwGm]jOK*_A", "fOUKH),kKA", (Options) null, "zZx}/7", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "B@yW6sx", "B@yW6sx", options0, "B@yW6sx", true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "   ";
      helpFormatter0.setSyntaxPrefix("   ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "");
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      Option option0 = null;
//      try {
        option0 = new Option(" ", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("=kg6;", "cmdLineSyntax not provided");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      int int0 = 0;
      String string1 = "^Ji";
      String string2 = "' was specified but an option from this group ";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
//      try {
        option0 = new Option("--", "Q16RR_HF", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("q?`e~y.X|k8()sp");
      helpFormatter1.printHelp(74, "--", "v]$_|3r:qcp", options0, "usage: ");
      helpFormatter1.printHelp(9, "v]$_|3r:qcp", " ", options0, "--", true);
      helpFormatter1.getArgName();
      helpFormatter1.printHelp("-", options0);
      helpFormatter0.getWidth();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 31, options0, 0, (-1181));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 625;
      helpFormatter0.createPadding(625);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      Option option0 = null;
//      try {
        option0 = new Optionorg.apache.commons.cli.HelpFormatter$1");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The optioncontains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
