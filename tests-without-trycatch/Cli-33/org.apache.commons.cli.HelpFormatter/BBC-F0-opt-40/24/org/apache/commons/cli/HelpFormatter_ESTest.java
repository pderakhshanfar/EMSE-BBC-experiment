/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 08:57:17 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "arg", "", options0, 31, 1, "IkGrvl0-f");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "BZfn,LnGE;C{3$]";
      helpFormatter0.defaultLongOptPrefix = "BZfn,LnGE;C{3$]";
      helpFormatter0.defaultArgName = null;
      helpFormatter0.defaultOptPrefix = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a=q*");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-830);
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, (String) null);
      // Undeclared exception!
//      try { 
        options2.addOption("-", "", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "juu)[\"B0oq");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ", 1, 1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 55, "juu)[\"B0oq", "juu)[\"B0oq", (Options) null, 55, 55, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "A", "A", options0, "cBx#DQZR", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      MockFile mockFile0 = new MockFile("usage: ", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "( t_-");
      helpFormatter0.defaultArgName = "";
      File file0 = MockFile.createTempFile("|2L{ul", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, (-3116), "|2L{ul");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 45;
      String string0 = "}'5u[";
      Options options0 = new Options();
      String string1 = ",c~";
      Options options1 = options0.addOption("arg", ",c~", false, "\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Option option0 = new Option("arg", "hO", false, "hO");
      Options options2 = options1.addOption(option0);
      option0.setOptionalArg(false);
      helpFormatter0.defaultDescPad = (-999);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(45, "}'5u[", "}'5u[", options2, ",c~", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.addOption("arg", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = '$';
      charArray0[2] = 'n';
      charArray0[3] = 'H';
      CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "", "-", options0, (-1882), 64, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("{D", "|~kPM", (Options) null, "|~kPM", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2273;
      helpFormatter0.setWidth(2273);
      helpFormatter0.setLongOptSeparator("");
      String string0 = "";
      helpFormatter0.setDescPadding((-2409));
      helpFormatter0.getOptionComparator();
      String string1 = ">";
      String string2 = " ]";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", "", false, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Illegal option name '", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("<0v[NFQ>ZxV~q&PPW");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.setArgName("S=");
      String string0 = helpFormatter0.createPadding(2523);
      helpFormatter0.setNewLine("S=");
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("8f");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.setOptPrefix(";jbe`;o~|%[c&Z");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, string0, "5(#DMTM=l>vI%j[fe5", (Options) null, ">", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("3ij>?$}^ZT5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-", options1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "%bnk5F5]kho5`BC", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-435), "xs^9mVm?]6T", "%bnk5F5]kho5`BC", (Options) null, 4082, 802, "%bnk5F5]kho5`BC");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q(f~]j!V");
      PrintWriter printWriter0 = mockPrintWriter0.append(']');
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, " ");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2273);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("", (-2045), (-3277));
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "Cannot add value, list full.");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append('g');
      int int0 = (-636);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-636), 3, "d:>J84rGBY,}LxhK");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Ps<HIX~|T[R)");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "Ps<HIX~|T[R)", true, (String) null);
      helpFormatter0.defaultNewLine = null;
      Options options3 = options2.addOption("", true, "Ps<HIX~|T[R)");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options4, "--");
      Options options5 = new Options();
      Options options6 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-695), "1y^mp))f(Ub[", "[ option: ", options6, "1y^mp))f(Ub[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-221);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append('A');
      int int1 = 11;
      helpFormatter0.printWrapped(printWriter0, 11, (-221), "");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultArgName = "8&}";
      helpFormatter0.setLeftPadding((-221));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("[ARG...]");
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("8&}", "{!6-97^P]$", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '8&}' contains an illegal character : '&'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", (Options) null, "}NhGqQ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.helpOptions();
      helpFormatter0.setNewLine("");
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options1, "");
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "<", true, "{wu!Bccf@3\"4");
      Option option0 = new Option("", "arg", false, "6lRA");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "5";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "arg";
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "5", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "l9x7Y!ZJN:d", false, ";]wQdIp1:V");
      helpFormatter0.printHelp(printWriter0, 921, "fvn]V])PTy}0S~", "KYp0m#", options1, 921, 921, "", true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "v,'O");
      helpFormatter2.printHelp(74, "5YNU*!.", " ", options1, "G\"6A");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(3, "P1vW#HY>QtpZ'", "&vG", options1, "65\"i\"Wff+&<");
      helpFormatter3.printHelp(74, " ", "<", options0, "arg", false);
      helpFormatter0.printHelp(">", options1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter2.printOptions((PrintWriter) null, 1, options0, (-1), 74);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, ")1NEe. `T{[bMGO[5_");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", false, "}{J~c##Z1Hwq33P9Te");
      Options options2 = options1.addOption("glH", true, "c2BSh3qBG,");
      helpFormatter0.printHelp(1056, ")1NEe. `T{[bMGO[5_", "org.apache.commons.cli.Option", options2, "org.apache.commons.cli.Option");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(74, (String) null, "|Jl<tYh{'Wp", options1, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ]");
      options0.addOption(option0);
      Options options1 = options0.addOption("", false, (String) null);
      helpFormatter0.printHelp((-1), "2',zF#l?^", " ]", options1, "");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "m", (String) null, options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2@$tc5");
      Option option0 = new Option((String) null, "?6:vusV?lW6n|+fskr");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("m", ":Fsde!~P-$V", options1, "org.apache.commons.cli.Util", false);
      // Undeclared exception!
//      try { 
        options1.addOption("?6:vusV?lW6n|+fskr", true, "zH7JYf7>");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '?6:vusV?lW6n|+fskr' contains an illegal character : '?'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "|]Arbdf/");
      helpFormatter0.printHelp(32, "vb,//$cRZ@x\"v2>,b?N", "|]Arbdf/", options1, "|]Arbdf/");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", (String) null, true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp("-", "vb,//$cRZ@x\"v2>,b?N", options2, "org.apache.commons.cli.Option", true);
      options2.addOption("arg", false, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 721, "u4th{Iz>nn> WiO", options1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "|]Arbdf/");
      helpFormatter0.printHelp(32, "vb,//$cRZ@x\"v2>,b?N", "|]Arbdf/", options1, "|]Arbdf/");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2730, 3, "9k'@B{r h'dcnt'sK");
      stringBuffer0.deleteCharAt(0);
      helpFormatter0.renderWrappedText(stringBuffer1, 3506, 358, "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "vb,//$cRZ@x\"v2>,b?N");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 2730, (-1962), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "org.apache.commons.cli.ParseException");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 853, "", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      options0.hasOption("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "Cannot add value, list full.";
      helpFormatter0.defaultNewLine = "Cannot add value, list full.";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.getOptions();
      options0.addOption("arg", "Cannot add value, list full.", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|]Arbdf/";
      String string1 = "   ";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("arg", "-");
      helpFormatter0.setLongOptPrefix("q\f^Bulh7Ye{,8V");
      options0.addOption(option0);
      String string2 = "S\\XbXXNH/MooA0qfeAj";
      helpFormatter0.setLeftPadding((-2));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("|]Arbdf/", "   ", options0, "|]Arbdf/", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "P;L}O", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(14, "' was specified but an option from this group ", " [ARG]", options0, " [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("", "<");
      helpFormatter0.setLongOptPrefix("' was specified but an option from this group ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("q\f^Bulh7Ye{,8V", "' was specified but an option from this group ", options0, "SXbXXNH/MooA0qfeAj", true);
      Options options2 = options1.addOption("", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-845), "\"", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg", 2, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 100;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "J3rFgzH%86", (String) null, options1, 2, 100, "j$aL!bCH#", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      // Undeclared exception!
//      try { 
        options0.addOption("|]Arbdf/", "cmdLineSyntax not provided", true, "~<E+%cv#H<~@O");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '|]Arbdf/' contains an illegal character : '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("arg", "-");
      helpFormatter0.setLongOptPrefix("q\f^Bulh7Ye{,8V");
      Options options2 = options0.addOption(option0);
      Options options3 = options1.addOption(option0);
      Options options4 = options3.addOption("", "Illegal option name '", true, "q\f^Bulh7Ye{,8V");
      OptionGroup optionGroup0 = new OptionGroup();
      options4.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-520), options2, 64, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.printHelp(6, "P;L=Us", "P;L=Us", options0, "4:a5t6zxtQ_ATc{t^/!");
      helpFormatter0.findWrapPos("]&20f{)^ow~", 0, 0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, (String) null, true, "|06U_M7h.SU");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("7", "-", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(18, "bMv5;", "7", options3, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((float) 74);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1290), 1, "org.apache.commons.cli.Util");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "-");
      helpFormatter0.setLongOptPrefix("q\f^Bulh7Ye{,8V");
      options0.addOption(option0);
      helpFormatter0.printHelp("|]Arbdf/", "   ", options0, "GIr(T", true);
      int int0 = 2834;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2834, "J3rFgzH%86");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(14, "' was specified but an option from this group ", " [ARG]", options0, " [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " [ARG]");
      helpFormatter0.printHelp(printWriter0, 14, "7;5I", "7;5I", options0, 14, 107, "", false);
      helpFormatter0.printUsage(printWriter0, 32, "", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.renderOptions((StringBuffer) null, 1769, options0, 0, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2, 0, "cmdLineSyntax not provided");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 1231, options1, 1, 74);
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 116, "\n");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-1945), options0, 1495, 34);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      String string1 = "uSM@h?";
      Options options0 = null;
      helpFormatter0.createPadding(112);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", "uSM@h?", (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fSm;po*F2YO,FAr");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "fSm;po*F2YO,FAr", "", options2, 1744, 1744, (String) null, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "org.apache.commons.cli.AlreadySelectedException", "HmI 'i8r$h|", options1, 28, (-3559), "exRvfsjYE-mu");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLeftPadding();
      String string1 = "/]dJ?||r:G4j2iT";
      MockFile mockFile0 = new MockFile("/]dJ?||r:G4j2iT", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 1, 1, "/]dJ?||r:G4j2iT");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "k+=R6_";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k+=R6_");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 870;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 870, "k+=R6_");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 6, 2309);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(27, "4:a5t6zxtQ_ATc{t^/!", "M68rKd@(;NRq$", options0, "org.apache.commons.cli.Options");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "|]Arbdf/");
      helpFormatter0.printHelp(32, "vb,//$cRZ@x\"v2>,b?N", "|]Arbdf/", options1, "|]Arbdf/");
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" | ", " ");
      File file0 = MockFile.createTempFile("usage: ", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2161), (String) null, " | ", options0, 6, (-5322), "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "--", "' contains an illegal character : '", options0, 3695, 0, "g;ssiM2nHl", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "u*atj'eWkDw";
      helpFormatter0.setOptPrefix("u*atj'eWkDw");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 3204;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      stringWriter0.write(3);
      helpFormatter0.printOptions(mockPrintWriter0, 3204, options0, 3204, 444);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string1 = "5 =d&'|\\I\\U .fp1";
      options0.hasShortOption("5 =d&'|IU .fp1");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1205, options0, 64, 64);
      stringBuffer1.append((long) 3204);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 3204, options0, 716, (-540));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultOptPrefix = "H0j0S;a)t[#gL6-%";
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.createPadding(0);
      helpFormatter1.createPadding(74);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter3.printHelp(32, "DlruLNSfe2oWb", "vSj`^$ceZximMWL", (Options) null, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.setNewLine("b<wpIP?8n@^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("-", 3, (-1));
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b<wpIP?8n@^");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+p8B\"*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "jV=gTOVS/2/2>_", "pfY`krC$GIV'g", options0, 3, (-1), "b<wpIP?8n@^", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(6, "P;L=Us", "P;L=Us", options0, "4:a5t6zxtQ_ATc{t^/!");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("usage: ");
      stringWriter0.append('e');
      int int1 = (-1);
      String string0 = "[)!jk9";
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        stringBuffer0.insert((-479), ']');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.setNewLine("b<wpIP?8n@^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("-", 3, (-1));
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b<wpIP?8n@^");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+p8B\"*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "+p8B\"*", "+p8B\"*", options0, 74, 101, "--", false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 8, "--", "`97}@f@,", options0, (-1), 15, "f");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.setNewLine("b<wpIP?8n@^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("-", 3, (-1));
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1723, "?R>wW%?HI", "lYb-]V$>W<O", options0, 0, 3, "koim", false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "b<wpIP?8n@^", "z-?bq", options0, 3, 34, "--");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append('e');
      String string0 = "[)!jk9";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "[)!jk9");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[x6);", options1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "-";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "[x6);";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("*", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-18), "*");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write((String) null);
      stringWriter0.append('e');
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 0, "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 688, "[ Options: [ short ");
      Options options0 = new Options();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.findWrapPos("+Ye!5mY\"6II}hV*/", 74, 0);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-/pvpnf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      mockPrintWriter0.print(1);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1241), "_Cl!?$", "-", options0, 74, 3, (String) null, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 626;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("-", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.setNewLine("b<wpIP?8n@^");
      String string0 = "org.apache.commons.cli.HelpFormatter";
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", 0, (-1561));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.setNewLine("b<wpIP?8n@^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("-", 3, (-1));
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b<wpIP?8n@^");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+p8B\"*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "{UfqOMbCaSHAJ", "b<wpIP?8n@^", options0, 74, 0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("arg", "-");
      helpFormatter0.setLongOptPrefix("q\f^Bulh7Ye{,8V");
      options0.addOption(option0);
      helpFormatter0.printHelp("|]Arbdf/", "   ", options0, "GIr(T", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2834, "%J3rF(gzH%86L");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[x6);", options1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "-";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "[x6);";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options1;
      helpFormatter0.printHelp(173, "*", (String) null, options0, "[]");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "-";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("   ");
      stringWriter0.append('n');
      String string0 = "[)!jk9";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      String string1 = "GWJ){C";
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), 91, "GWJ){C");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option("--", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1218);
      String string0 = "[s?.U-";
      Options options0 = null;
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setSyntaxPrefix("[s?.U-");
      String string2 = "Jmhd&W3jFV\"JN3";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1218), "[s?.U-", "[s?.U-", (Options) null, "Jmhd&W3jFV\"JN3");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.setNewLine("b<wpIP?8n@^");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", 1, 0);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b<wpIP?8n@^");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-5322), "", "org.apache.commons.cli.HelpFormatter", options0, 1, 0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2273);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getDescPadding();
      helpFormatter1.findWrapPos("", (-2045), (-3277));
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "Cannot add value, list full.");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-aHQzh";
      helpFormatter0.defaultSyntaxPrefix = "-aHQzh";
      String string1 = "^5{X>l9`Z?EdtP)th";
      Options options0 = new Options();
      int int0 = (-1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3717, 32, "^5{X>l9`Z?EdtP)th");
      helpFormatter0.renderWrappedText(stringBuffer1, 32, 1040, "");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "-", 3717, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2273);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.setDescPadding((-2409));
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2409), " ]", "", options0, ">", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptionComparator();
      String string0 = ">";
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", ">", options0, "P;L=Us", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "u++3";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      helpFormatter0.printHelp("u++3", options1, true);
      String string1 = "`TdQJbvq1%f4UkM3Pv";
      helpFormatter0.setLongOptSeparator("`TdQJbvq1%f4UkM3Pv");
      int int0 = (-5569);
      helpFormatter0.setWidth((-5569));
      helpFormatter0.setWidth((-5569));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("u++3", options1, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2273);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")(u{ 0^!}<v";
      helpFormatter0.setLongOptPrefix(")(u{ 0^!}<v");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "84";
      Option option0 = new Option("84", " ", true, "4aP/.?.D<Jc");
      optionGroup0.addOption(option0);
      options0.getOption(")(u{ 0^!}<v");
      // Undeclared exception!
      helpFormatter0.printHelp("2!|;/[\"=", "4aP/.?.D<Jc", options0, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")(u{ 0^!}<v");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("84", " ", true, "4aP/.?.D<Jc");
      optionGroup0.addOption(option0);
      options0.getOption(")(u{ 0^!}<v");
      optionGroup0.setSelected(option0);
      Option option1 = new Option("", "--", false, ")(u{ 0^!}<v");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      options1.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("69agwhJPKRrP0c(E<ce");
      helpFormatter0.setArgName("69agwhJPKRrP0c(E<ce");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|]Arbdf/";
      String string1 = "   ";
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("   ", "|]Arbdf/", options1, "   ", true);
      String string2 = "J3rF(gzH%86L@";
      // Undeclared exception!
//      try { 
        options0.addOption("MZOa:egACTO", true, "J3rF(gzH%86L@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'MZOa:egACTO' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-aHQzh";
      Options options0 = new Options();
      helpFormatter0.printHelp("^5{X>l9`Z?EdtP)th", "", options0, "6PPC4||s6-u?_");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2834, "8fESZzGKcEfR50,}5%");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")\"grtsqUVZ`mFm1";
      helpFormatter0.setOptPrefix(")\"grtsqUVZ`mFm1");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("b<wpIP?8n@^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("-", 3, (-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b<wpIP?8n@^");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter1.printHelp("qUQ (n]Y/,)dGqA5V", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      options0.hasOption("--");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      int int0 = (-1890);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultDescPad = (-1890);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[x6);", options1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "-";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "[x6);";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("*", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1), "*");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "UU*)";
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 44;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 44, (Options) null, 44, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(9);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getDescPadding();
      int int0 = 74;
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("arg", "arg", false, (String) null);
      OptionGroup optionGroup2 = new OptionGroup();
      String string2 = "'Nd-AhXY]-t";
      Option option1 = null;
//      try {
        option1 = new Option("'Nd-AhXY]-t", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ''Nd-AhXY]-t' contains an illegal character : '''
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.printHelp(64, "   ", "|]Arbdf/", options2, "   ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(64, (String) null, "!^iBp!]\"u^e$Hjqn", options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = ">";
      helpFormatter0.setDescPadding((-1));
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(">", objectArray0);
      int int0 = (-131);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "line.separator";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption(">", "line.separator", false, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '>'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-aHQzh";
      Options options0 = new Options();
      helpFormatter0.printHelp("^5{X>l9`Z?EdtP)th", "", options0, "6PPC4||s6-u?_");
      helpFormatter0.defaultNewLine = "-aHQzh";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("z5}t0knKB37Q", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "\n", options0, "+/B}^*Lo");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "4:a5t6zxtQ_ATc{t^/!", "org.apache.commons.cli.ParseException", options0, "=;7");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1218);
      String string0 = "";
      Options options0 = null;
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      String string2 = "Jmhd&W3jFV\"JN3";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1218), "", "", (Options) null, "Jmhd&W3jFV\"JN3");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "P;L}O", "P;L}O", options0, "-");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLeftPadding(0);
      String string0 = "=OWA*F;UtNT.";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, ", ", "=OWA*F;UtNT.", (Options) null, ", ");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.setNewLine("b<wpIP?8n@^");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", 2638, 0);
      helpFormatter0.getOptionComparator();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      String string0 = null;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(64);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      String string0 = "FDsaxEM-{gFz(;4X^#";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "Q)JAkV-";
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      options0.hasLongOption("Q)JAkV-");
      // Undeclared exception!
//      try { 
        options0.addOption("p]r4a0^FZx`#5", "-aI:NevE", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'p]r4a0^FZx`#5' contains an illegal character : ']'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2273);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Z\"UBA6]");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = "--";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "";
      options0.getMatchingOptions("");
      String string1 = " [ARG]";
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, " [ARG]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("usage: ");
      stringWriter0.append('e');
      int int1 = (-1);
      String string0 = "[)!jk9";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "[)!jk9");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1058, "");
      helpFormatter0.rtrim("'");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }
}
