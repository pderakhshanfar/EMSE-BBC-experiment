/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:47:19 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine(" ");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      int int0 = 0;
      helpFormatter0.findWrapPos(" ", 0, 0);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(74);
      int int1 = 1;
      String string0 = "c`MNoT)XWOd";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("c`MNoT)XWOd", "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.hasShortOption("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 8, "<9F`W?hP", "NE2nSOu}s|V;", options0, 8, 39, "<9F`W?hP");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6OW/*x,3p3z7{Yo^a");
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("", "):J", true, "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 993, " | ", "!f&QU)JPBb", options2, (-2), (-2), "line.separator");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      options0.getOption("");
      options0.addOption("", true, "-");
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "org.apache.commons.cli.Options", options0, "9o#Rh3~H!S-(T;9k");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, "org.apache.commons.cli.HelpFormatter");
      Option option0 = new Option("", true, "");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-3565), (String) null, "-", options3, (-3565), (-474), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " [ARG]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("7e-#\"l");
      options0.getOption("");
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 3, 3);
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      File file0 = null;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((File) null, "WlA-=");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Am&2+tG2bQ./");
      stringBuffer0.append('f');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3085), "Am&2+tG2bQ./", "Am&2+tG2bQ./", (Options) null, (-3085), (-3085), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultLeftPad = (-718);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, (-127), "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-465);
      helpFormatter0.getDescPadding();
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 578, 23);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("&-vt6-20M#", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-8), (-8), "&-vt6-20M#");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLongOptSeparator("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2397));
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("usage: ", "arg", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = new StringBuffer("arg");
      helpFormatter0.defaultLeftPad = 76;
      StringBuffer stringBuffer2 = new StringBuffer("YG%>u_1");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1285), "org.apache.commons.cli.HelpFormatter$1", "W!nw~B07/lo%#)", options0, "@2-(,");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(218);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "arg", " ", options0, 3, 218, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "V4CE5j$C/1<iF-@>");
      Option option0 = new Option("T", "arg", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOption("arg");
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 48, "T", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = null;
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) null, 1, "arg", "arg", options0, 126, 3, " ");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = "]";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "mZ2tWn(E<#{({)Em;9";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "t~L9nCZ/q/&");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 32, "usage: ", "", options1, 3, 382, "\n", false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 32, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("T", "arg", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOption("arg");
      optionGroup0.setRequired(true);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 48, "T", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 's';
      charArray0[2] = '4';
      charArray0[3] = '?';
      charArray0[4] = 'U';
      charArray0[5] = '+';
      charArray0[6] = 'f';
      charArray0[7] = 'G';
      mockPrintWriter0.print(charArray0);
      Options options0 = null;
      int int0 = 78;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2, (Options) null, 78, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("T", "arg", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOption("arg");
      option0.clearValues();
      String string0 = "";
      options0.hasShortOption("T");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 48, "T", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      helpFormatter2.printOptions(mockPrintWriter0, 1, options0, 1775, 74);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "|B;;d$l7!ln");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "|B;;d$l7!ln", options0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('v');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1);
      mockPrintWriter1.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "\n", (Options) null, 1, 3, "-", false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("Z", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "Z", "arg", options0, 1, 0, "arg");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 0, options0, 670, 1737);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", " ", options0, 32, 74, "-", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "org.apache.commons.cli.HelpFormatter", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      mockPrintWriter0.print((Object) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "QVJ:BZ-\"2Zwje$p", options0, "QVJ:BZ-\"2Zwje$p");
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 3, 36);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(20, "\"", "", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " | ", true, (String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "1J_2=.|", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 74, "rx;H8ZLQk");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "arg");
      options1.addOption(option0);
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", "--", options1, "F;~Z,Ra:qzH<KqEi");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "The option '";
      int int0 = (-2085);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("The option '", 31, (-2085));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      mockPrintWriter0.print((Object) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "--");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      mockPrintWriter0.println("-RI");
      Option option0 = new Option("arg", " ");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      options0.getOption("usage: ");
      option0.clearValues();
      options1.hasShortOption("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "org.apache.commons.cli.Options", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      mockPrintWriter0.print((Object) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "+BJ,NPVK7sw2~d");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      options0.getOption("usage: ");
      option0.clearValues();
      options1.hasShortOption("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "org.apache.commons.cli.Options", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-2416), 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasShortOption("org.apache.commons.cli.OptionGroup");
      int int0 = (-1146);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1146), "J_,,", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(1601, "'", " ", options1, "'", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("}|eeXZ[~[PErkOG\"", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "--", true, "-");
      Options options1 = options0.addOption(option0);
      String string0 = "GmjF";
      String string1 = "'";
      Options options2 = options1.addOption("GmjF", "--", false, "'");
      option0.setValueSeparator('6');
      int int0 = 1733;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1218), options2, 1733, 1733);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NH0+^'E");
      helpFormatter0.findWrapPos("pS:|H+k", 4392, 1272);
      helpFormatter0.rtrim("pS:|H+k");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "\n");
      Options options1 = new Options();
      helpFormatter0.setLeftPadding(38);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(74);
      StringBuffer stringBuffer0 = new StringBuffer(32);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1182, options0, 32, 32);
      helpFormatter0.renderOptions(stringBuffer1, 13, options0, 1, 14);
      StringBuffer stringBuffer2 = new StringBuffer(74);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding((-299));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 582, (Options) null, 16, 2120);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "\n");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption("", true, "");
      helpFormatter0.printHelp("cmdLineSyntax not provided", (String) null, options2, "8Z3zIePZE");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter1.createPadding(13);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-324);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("OMdt", "OMdt", options0, "'? ", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append('3');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "T", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "T", true, "7|!n");
      Option option0 = new Option("T", true, "T");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ">", "Y", options2, 32, 74, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1697), options1, (-332), 2703);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, (-311), "' contains an illegal character : '");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.flush();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "org.apache.commons.cli.HelpFormatter$1", "--", (Options) null, 13, 13, "org.apache.commons.cli.ParseException", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" dX", " ", options0, (String) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      Options options1 = new Options();
      helpFormatter0.printHelp("-", "usage: ", options1, "arg");
      Option option0 = new Option((String) null, "-", false, "]`(0nJkIWD0");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("arg", options2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      helpFormatter0.setLongOptPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "");
      helpFormatter0.setArgName(".}x%6r7e.UidwU;=k2e");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "", "c2zXTGy)Z>pVIG%UE^p", options0, 34, 34, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('.');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " 9Bt$BYG7:K49");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("gp%#cE'M;II7w_", options0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      int int0 = 3;
      helpFormatter0.findWrapPos("line.separator", 3, 3);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      stringWriter0.append('k');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("Z{F0eS", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Z{F0eS' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("arg", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "\"VdZw@", false, (String) null);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", false, (String) null);
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("", "w@\"r.G1@|0J");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 461, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 934, "-");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", (String) null, options3, 64, (-194), "-", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      Options options0 = new Options();
      helpFormatter0.setDescPadding(2236);
      StringBuffer stringBuffer2 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer1, 2, 2, "Ub");
      Options options1 = new Options();
      String string0 = "Y";
      Options options2 = new Options();
      Option option0 = new Option("", true, "");
      options1.addOption(option0);
      PrintWriter printWriter0 = null;
      int int0 = 31;
      String string1 = "8fr\\p";
      String string2 = "'";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "k@B15l`r5@P)4CdRY&K", options1, "k@B15l`r5@P)4CdRY&K", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2397));
      MockFile mockFile0 = new MockFile("arg");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("OMdt", "OMdt", options1, "'? ", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      Options options2 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 103, ".31oP0=8:(HsV", options1);
      Option option0 = new Option("arg", "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "   ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.flush();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2236, "org.apache.commons.cli.ParseException", "", (Options) null, 2236, 2236, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("OMdt", "OMdt", options1, "'? ", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options2 = new Options();
      String string0 = "";
      Option option0 = new Option("arg", "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2342), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 2236;
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      String string1 = ":Jo%+(#]>8Z%_so&[";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2236, "", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      Options options0 = new Options();
      helpFormatter0.setDescPadding(2236);
      StringBuffer stringBuffer2 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer1, 2, 2, "Ub");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.addOption((String) null, false, "");
      helpFormatter0.renderOptions(stringBuffer1, 2, options2, 31, 31);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2397));
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(74);
      helpFormatter1.setArgName("arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("OMdt", "OMdt", options1, "'? ", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options2 = new Options();
      Option option0 = new Option("arg", "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2252), "org.apache.commons.cli.ParseException", "OMdt", options2, (-1), (-610), "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("b ");
      boolean boolean0 = false;
      MockFile mockFile1 = new MockFile("-");
      mockFile0.renameTo(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1802), "eTywQt2m_63TG@");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2397));
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (String) null, (Options) null, "-r>6*?^p!(WV");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "";
      String string1 = "\"VdZw@";
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = (-1254);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1254), 444, "\"VdZw@");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "r;F@z:9@GC<:RcLWf";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "r;F@z:9@GC<:RcLWf");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "--");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "";
      String string1 = "-vr3EV:'[{F4Q{ G(`";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-vr3EV:'[{F4Q{ G(`", "", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-826);
      helpFormatter0.defaultOptPrefix = "";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 48, 3674, "nW;");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultNewLine = " a=@R.KCp\"Q4+.KO";
      helpFormatter0.rtrim("$uzThAC");
      int int0 = 31;
      helpFormatter0.setDescPadding(31);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Ub");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      Option option0 = new Option("arg", ">", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3079), options2, (-1), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "usage: ", true, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "", " ", options2, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(110, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, ">");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(":Jo%+(#]>8Z%_so&[", "", options1, ":Jo%+(#]>8Z%_so&[", false);
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix(":Jo%+(#]>8Z%_so&[");
      helpFormatter0.setLongOptPrefix(" | ");
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("  c> ", "BG6Dw#(hyR|R");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // BG6Dw#(hyR|R
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      stringBuffer0.append((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      String string0 = ".}x%6r7e.UidwU;=k2e";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2236, 0, ".}x%6r7e.UidwU;=k2e");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2397));
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      Option option0 = new Option("arg", "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(":LT|Q.hj#>^h8 E{", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "aMbrziOJ&E";
      helpFormatter0.setArgName("aMbrziOJ&E");
      helpFormatter0.setArgName("aMbrziOJ&E");
      helpFormatter0.setWidth((-1777));
      String string1 = "";
      Options options0 = new Options();
      String string2 = "?62";
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("aMbrziOJ&E", "?62", options0, "Xj");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2397));
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2397), (String) null, (String) null, options1, (-192), (-2397), (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1923, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      String string0 = "#03Qtx";
//      try { 
        MockURI.URI("#03Qtx", "--", "B'aa6@fmF|");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Illegal character in fragment at index 9: #03Qtx:--#B'aa6@fmF%7C
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("OMdt", "OMdt", options1, "'? ", true);
      helpFormatter0.setArgName(" | ");
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.setLongOptPrefix("IK%{Up/n,2");
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("-", "OMdt");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // OMdt
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultNewLine = "rO_Q[3:HI~|I4Kpl";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("w", "", true, "w");
      Options options3 = options2.addOption("", true, "");
      Option option0 = new Option("w", "/t*F'5?6@xxZKx+)q");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options4, "F93Zel)Jrym1CjN=C");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(", ");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(">");
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(190, ">", ">", (Options) null, (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(4815);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "QbG'";
      helpFormatter0.setSyntaxPrefix("QbG'");
      helpFormatter0.defaultLongOptPrefix = ", ";
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("");
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, (Options) null, "AIWb(k)x*?4G");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-618);
      helpFormatter0.setDescPadding((-618));
      helpFormatter0.setNewLine("");
      String string0 = "usage: ";
      helpFormatter0.setLongOptPrefix("usage: ");
      PrintWriter printWriter0 = null;
      String string1 = "L<[Fp+sskF}1'p@\"2";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      mockPrintWriter0.print((Object) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "--");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", "Bf:lmze<c", options0, "");
      options0.hasOption("");
      options0.helpOptions();
      options0.toString();
      helpFormatter0.printHelp("<", options0, false);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity((-2011));
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      // Undeclared exception!
//      try { 
        stringBuffer1.deleteCharAt(1046);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 1046
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "\"VdZw@", false, (String) null);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 74, "");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(" ]", ":Jo%+(#]>8Z%_so&[", options1, " ]", false);
      helpFormatter0.setArgName(":Jo%+(#]>8Z%_so&[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 74, "rx;H8ZLQk");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "WqD\"S");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "N'ynM?";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "N'ynM?");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "\"VdZw@", false, (String) null);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", false, (String) null);
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("", "w@\"r.G1@|0J");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("w@\"r.G1@|0J");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printHelp(printWriter0, (-1), "ap)kx>;I!bjet=JU,Cs", "org.apache.commons.cli.HelpFormatter$OptionComparator", options3, 74, 12, "");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2236, 2236, "");
      String string0 = ".}x%6r7e.UidwU;=k2e";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append('3');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "7|!n");
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, ">", "Y", options2, 32, 12, (String) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append('3');
      helpFormatter0.printWrapped(printWriter0, 1, "[ option: ");
      assertEquals(17L, mockFile0.length());
      
      helpFormatter0.rtrim((String) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultNewLine = " a=@R.KCp\"Q4+.KO";
      helpFormatter0.rtrim("$uzThAC");
      int int0 = 31;
      helpFormatter0.setDescPadding(31);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = 0;
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption("usage: ", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1431));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-256), "line.separator", "line.separator", options1, " ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      int int0 = 343;
      helpFormatter0.setWidth(343);
      String string1 = "";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "a!s{czqNnU";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("org.apache.commons.cli.Option", true, "%mM");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
