/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 08:43:18 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1605);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1605, "", "", (Options) null, 1605, 1605, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!EZA2$> eo:Y3";
      helpFormatter0.setArgName("!EZA2$> eo:Y3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VS}zm<A#YyKl/A<");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "!EZA2$> eo:Y3");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      int int0 = (-4657);
      helpFormatter0.setWidth((-4657));
      helpFormatter0.defaultLongOptPrefix = "[";
      helpFormatter0.getWidth();
      int int1 = 10;
      helpFormatter0.createPadding(10);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("-");
      // Undeclared exception!
//      try { 
        options1.addOption("usage: ", true, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('/');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = (-1364);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1364), options2, 3479, 638);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.rtrim("Gk");
      PrintWriter printWriter0 = null;
      int int0 = (-2477);
      String string0 = null;
      String string1 = null;
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, false, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options2.addOption("(RZEh3An,yg^", "ukb-/", false, "Gk");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '(RZEh3An,yg^' contains an illegal character : '('
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options1 = options0.addOption("", true, "!^qPg@^ADCv6K");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 19, 1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(111);
      helpFormatter0.defaultDescPad = (-1561);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.chars();
      stringBuffer0.append('o');
      helpFormatter0.renderWrappedText(stringBuffer0, 3405, 748, "                                                                                                               ");
      helpFormatter0.createPadding(74);
      helpFormatter0.createPadding(74);
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%\"TWC,]72w";
      helpFormatter0.setSyntaxPrefix("%\"TWC,]72w");
      helpFormatter0.findWrapPos("org.apache.commons.cli.ParseException", 0, 0);
      String string1 = "vY)>3J|W/`#";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "vY)>3J|W/`#");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // vY)>3J|W/`#
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "arg");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(63, "arg", "\n", options0, "l", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' contains an illegal character : '");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      helpFormatter0.printHelp("3 -f0sQ", options0);
      StringBuffer stringBuffer0 = new StringBuffer("2aEIa");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      int int0 = 1;
      int int1 = (-2);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), "h<q+dG-U?t");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultDescPad = (-609);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals("\n", string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.setNewLine("\n");
      String string1 = "]*DCk` ";
      helpFormatter0.setLongOptSeparator("]*DCk` ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      helpFormatter0.setLongOptSeparator("<");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(116);
      helpFormatter0.setDescPadding(116);
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setDescPadding(18);
      String string1 = "L]'CRbw\"^R@oKz8ng";
      helpFormatter0.defaultSyntaxPrefix = "L]'CRbw\"^R@oKz8ng";
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultLeftPad = (-1512);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.findWrapPos("[{qnQ[N4|C%J8kT?z", (-846), 860);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "\n");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, " ", " ", options0, (-2), 2274, "org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultLeftPad = 44;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-2580);
      helpFormatter0.setLeftPadding((-2580));
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("]A(#oL1&:k", "]A(#oL1&:k", (Options) null, "VLqPuF~", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Y", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption((String) null, "-", true, "--");
      options1.addOption("", true, "--");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "Cannot add value, list full.", "Cannot add value, list full.", options1, "^L9s,9KtIgf", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option("arg", "arg", true, "usage: ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "", false, "");
      options3.addOptionGroup(optionGroup0);
      Options options4 = options1.addOption("ww", false, (String) null);
      helpFormatter0.printHelp(2085, "Oz7+)o`v", "", options4, "S.1Gd#S-", false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("h`D@>9]|eIU&[*");
      Options options1 = options0.addOption("arg", "v>/dYU6s \"5", false, "v>/dYU6s \"5");
      helpFormatter0.setWidth((-1467));
      String string0 = "";
      options1.getMatchingOptions("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eAIBx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-410);
      helpFormatter0.getLeftPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.setLongOptSeparator("K3Y8nwh5hA M3Fz");
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      options0.addOption((String) null, false, " [ARG]");
      Options options2 = new Options();
      helpFormatter1.printHelp(3, "PV", "/VG", options2, "\n", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 32, options1, 1, 2267);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "5C@RR,wP!7k", "org.apache.commons.cli.HelpFormatter$1", options0, "org.apache.commons.cli.HelpFormatter$1", false);
      helpFormatter0.renderOptions((StringBuffer) null, 97, options0, 211, 97);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 46, (-1395));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("KgN=9{^BPsx", options0);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 31, "KgN=9{^BPsx");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-13);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(63, "5C@RR,wP!7k", "usage: ", options0, (String) null, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "5C@RR,wP!7k", "%;`b=F\\Ol}3>e7", options0, "usage: ", false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, 3, options0, 74, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter", true, "ul{E");
      options0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.printHelp((-1), "org.apache.commons.cli.ParseException", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option("3E", "--", false, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printOptions(mockPrintWriter0, (-1), options2, 63, 74);
      options2.getOptionGroups();
      options2.addOption(option0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      option0.setArgName("3E");
      helpFormatter0.printHelp((-1), "3E", "org.apache.commons.cli.ParseException", options1, "-", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2), "[-3E \n]", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("5C@RR,wP!7k", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "fy3YDk=m");
      optionGroup0.addOption(option0);
      Option option1 = new Option("3E", "--", true, "\n");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options1.addOption("arg", true, "3E");
      helpFormatter0.printHelp(109, "+", "3E", options1, "+", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("3E", "--", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Options options2 = options1.addOption("arg", true, "3E");
      options2.getOptionGroups();
      options2.addOption(option0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      option0.setArgName("\n");
      helpFormatter0.printHelp((-1), "3E", "org.apache.commons.cli.ParseException", options1, "-", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-609);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(32, "[ARG...]", "usage: ", (Options) null, "[ARG...]");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("3E", "--", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("25`r>l%\"b(>");
      options2.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(9, "   ", "-", (Options) null, "HQ{]RQz;PXslMn", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "VrV9j<wbmr[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("", "", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 21, "5C@RR,wP!7k", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1536;
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 2230, (-1), "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 1536, options0, 1536, 2230);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringBuffer2;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 47, "arg", options0);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1375), "", "line.separator", options0, 1536, 609, "z'?<yplI", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 21, "5C@RR,wP!7k", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("3E", "--", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Options options2 = options1.addOption("", true, "3E");
      Options options3 = options2.addOption(option0);
      option0.setArgName("\n");
      options3.getOptionGroups();
      options3.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options3.getOptions();
      helpFormatter1.printHelp("\n", "-", options3, "usage: ", true);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-2), "usage: ", "arg", options3, "-", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg", "A");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "[ Options: [ short ", "V", options0, "");
      helpFormatter1.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 103, "+<Gu68$<&", "org.apache.commons.cli.AlreadySelectedException", (Options) null, (-1082), 3, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("3E", "--", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      Options options2 = options1.addOption("", true, "3E");
      Options options3 = options2.addOption(option0);
      option0.setArgName("\n");
      options3.getOptionGroups();
      options3.helpOptions();
      option0.setArgs(1);
      String string1 = "()|YP4Aq0\"GM=<mN,";
      helpFormatter0.printHelp(8, "()|YP4Aq0\"GM=<mN,", "", options3, "3E", true);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("?%;3/0]r", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(32);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "_Esn,HYQ=");
      helpFormatter0.renderWrappedText(stringBuffer1, 32, 32, "_Esn,HYQ=");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 32, options0, (-6094), 32);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "!^qPg@^ADCv6K");
      helpFormatter0.renderOptions(stringBuffer0, 42, options1, 19, 42);
      helpFormatter0.rtrim("' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("qK", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "[dWnmY? VOCz]=5|M");
      optionGroup0.addOption(option0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7Y[rbgX9$d*_Q|1h");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 40, (-1), "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 40, (String) null, "[dWnmY? VOCz]=5|M", options0, (-2), 117, "7Y[rbgX9$d*_Q|1h", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("3E", "--", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "3E");
      Options options3 = options2.addOption(option0);
      options3.getOptionGroups();
      option0.setArgs(1482);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-405), "3E", "usage: ", options3, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append(3);
      int int0 = 31;
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "IU<ZhfX|&:X+ $}[");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("E{p~Y&4", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("6#tm.6fZ?+B(BaVYK7#");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6#tm.6fZ?+B(BaVYK7#");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      mockPrintWriter0.append((CharSequence) "6#tm.6fZ?+B(BaVYK7#");
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3046), "cmdLineSyntax not provided", "6#tm.6fZ?+B(BaVYK7#", options0, "6#tm.6fZ?+B(BaVYK7#");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("qK", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "[dWnmY? VOCz]=5|M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      helpFormatter0.printHelp(45, "[dWnmY? VOCz]=5|M", "[dWnmY? VOCz]=5|M", options2, "&k54", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("3E", "--", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "3E");
      Options options3 = options2.addOption(option0);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      options3.helpOptions();
      option0.setArgs(1482);
      option0.setArgs((-836));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((-1), "-", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3E";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("3E", "--", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options0.addOptionGroup(optionGroup1);
      options2.addOption("", false, "");
      Option option1 = new Option((String) null, false, "arg");
      Options options3 = options1.addOption(option1);
      options0.getOptionGroups();
      options3.helpOptions();
      option1.setArgs((-2));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("/Dqky7CHkiIxkHZ0LWn", (String) null, options1, "Y$\")|&z9N:!5L+");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      options0.hasOption("wk");
      Options options1 = new Options();
      options1.addOption("", "wk", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3729), (-380), "org.apache.commons.cli.Option");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      options1.helpOptions();
      helpFormatter0.printHelp("3E", "3E", options1, (String) null);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("3E", options2, false);
      options1.addOption("3E", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options3 = options0.addOption("", "yx\"Fo/Z", false, " ]");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 35, "3E", "q#~Z/@C4y]hK7-^Q8", options3, 35, 1717, "G@6tOI-X;2DpZ", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("6#tm.6fZ?+B(BaVYK7#");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6#tm.6fZ?+B(BaVYK7#");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "6#tm.6fZ?+B(BaVYK7#";
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter1 = mockPrintWriter1.format("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 56, "6#tm.6fZ?+B(BaVYK7#");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("6#tm.6fZ?+B(BaVYK7#", options0);
      helpFormatter0.printHelp(printWriter0, 3, "z;%|Tfzz", "6#tm.6fZ?+B(BaVYK7#", options1, 3, 1627, "z;%|Tfzz", true);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 3, "z;%|Tfzz", "6#tm.6fZ?+B(BaVYK7#", options1, 3, 3, "6#tm.6fZ?+B(BaVYK7#");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("3E", "--", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "3E");
      Options options3 = options2.addOption(option0);
      options3.getOptionGroups();
      options3.helpOptions();
      option0.setArgs(1482);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "zPhA7.C9+(2V:Q", "zPhA7.C9+(2V:Q", options2, "()|YP4Aq0\"GM=<mN,", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultOptPrefix = "9W}Sr9$x&khy/x";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 37, "/\"Oa]Em/l*:q$;q,", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options1 = new Options();
      options0.hasOption("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2779, "usage: ", "{&&c{0DR", options0, 2779, 2779, (String) null, true);
      mockPrintWriter0.println((long) 2779);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2779, "J*");
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2779, "", "", options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("6#tm.6fZ?+B(BaVYK7#");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6#tm.6fZ?+B(BaVYK7#");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "6#tm.6fZ?+B(BaVYK7#";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter1 = mockPrintWriter1.format("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 56, "6#tm.6fZ?+B(BaVYK7#");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("6#tm.6fZ?+B(BaVYK7#", options0);
      helpFormatter0.printHelp(printWriter0, 3, "z;%|Tfzz", "6#tm.6fZ?+B(BaVYK7#", options1, 3, 1627, "z;%|Tfzz", true);
      helpFormatter0.getLeftPadding();
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.findWrapPos("", (-7), (-1421));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", "", false, "");
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "");
      Options options3 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, (-543), " :: ", (String) null, options3, 427, (-543), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      options1.helpOptions();
      helpFormatter0.printHelp("3E", "3E", options1, (String) null);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("3E", options2, false);
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getArgName();
      optionGroup1.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UYC\"w");
      optionGroup1.toString();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, 44, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", (String) null, options1, (-1), (-2), "arg", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.setNewLine(">");
      helpFormatter0.setLongOptSeparator("I4kM&#[6LQ/");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "I4kM&#[6LQ/");
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1323, " ", "cmdLineSyntax not provided", (Options) null, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int0 = 2769;
      String string0 = "]*DCk` ";
      helpFormatter0.setLongOptSeparator("]*DCk` ");
      Options options0 = new Options();
      options0.hasOption("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2769, "\n", "", options0, 2769, 1, "", true);
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter(" ", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6#tm.6fZ?+B(BaVYK7#";
      helpFormatter0.setLongOptPrefix("6#tm.6fZ?+B(BaVYK7#");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6#tm.6fZ?+B(BaVYK7#");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "6#tm.6fZ?+B(BaVYK7#";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter1.append((CharSequence) "usage: ");
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-1542), "6#tm.6fZ?+B(BaVYK7#");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("6#tm.6fZ?+B(BaVYK7#");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6#tm.6fZ?+B(BaVYK7#");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "6#tm.6fZ?+B(BaVYK7#";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter1 = mockPrintWriter1.format("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 56, "6#tm.6fZ?+B(BaVYK7#");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("6#tm.6fZ?+B(BaVYK7#", options0);
      helpFormatter0.printHelp(printWriter0, 3, "z;%|Tfzz", "6#tm.6fZ?+B(BaVYK7#", options1, 3, 1627, "z;%|Tfzz", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(686);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos(", ", 3, (-1421));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = 2769;
      Options options0 = new Options();
      int int1 = (-444);
      options0.hasOption("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2769, "{&&c{0DR", "", options0, 2769, 2769, "", false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      mockPrintWriter1.println((long) 74);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-444), options0, 736, (-277));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.getSyntaxPrefix();
      int int0 = helpFormatter0.defaultDescPad;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("-");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(3, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options1, " | ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "[dWnmY? V\\OCz]=5|M";
      Option option0 = new Option("arg", false, "[dWnmY? VOCz]=5|M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("arg", false, "-");
      helpFormatter0.printHelp("[dWnmY? VOCz]=5|M", "[dWnmY? VOCz]=5|M", options2, "", false);
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "[dWnmY? VOCz]=5|M", objectArray0);
      int int0 = 1184;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "", "NO_ARGS_ALLOWED", options0, 34, 1184, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.setNewLine(">");
      helpFormatter0.setLongOptSeparator("CQ,wr[^$*Xt");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "CQ,wr[^$*Xt");
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "51y8nsZA$7:G)$", ">", options0, 0, 3, "\n", false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.setNewLine("\n");
      String string0 = "]*DCk` ";
      helpFormatter0.setLongOptSeparator("]*DCk` ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      helpFormatter0.setLongOptSeparator("<");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1945), "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      options1.helpOptions();
      helpFormatter0.printHelp("3E", "3E", options1, (String) null);
      options2.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup2);
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 986, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix(" :: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" :: ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLongOptSeparator("c?P");
      helpFormatter0.getWidth();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = new Options();
      options0.addOption((String) null, "--", false, "arg");
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter", (String) null, options0, "org.apache.commons.cli.HelpFormatter", false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "[dWnmY? VOCz]=5|M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      helpFormatter0.printHelp("[dWnmY? VOCz]=5|M", "[dWnmY? VOCz]=5|M", options2, "-", false);
      helpFormatter0.printHelp("usage: ", options2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("3E", "--", true, "\n");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "3E");
      Options options3 = options2.addOption(option0);
      options3.getOptionGroups();
      options3.helpOptions();
      helpFormatter0.printHelp("3E", (String) null, options0, "");
      options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setSyntaxPrefix(" :: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.defaultLongOptPrefix = null;
      String string0 = "";
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options0.getMatchingOptions(" ] [ long ");
      options0.getOptionGroups();
      options1.helpOptions();
      helpFormatter0.printHelp("3E", "3E", options1, (String) null);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("3E", options2, false);
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptPrefix();
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "[dWnmY? VOCz]=5|M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      helpFormatter0.printHelp("[dWnmY? VOCz]=5|M", "[dWnmY? VOCz]=5|M", options2, "", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 25;
      helpFormatter0.printHelp(95, "Illegal option name '", "Wv)mtrkM~^CQR:bR\"[", options0, "");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(63);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1253), 9, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      options1.helpOptions();
      helpFormatter0.printHelp("3E", "3E", options1, (String) null);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("3E", options2, false);
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UYC\"w");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", (String) null, options1, (-1), (-2), "arg", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1605);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1605, " ", " ", (Options) null, 1605, 1605, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      helpFormatter0.setSyntaxPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getDescPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.setNewLine("-");
      helpFormatter0.setLongOptSeparator("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "W,", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "W,", "arg", options1, 74, 3, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, int0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "arg", false, " ");
      optionGroup0.setRequired(false);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      options2.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options2, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options1.helpOptions();
      helpFormatter0.printHelp("3E", "3E", options1, (String) null);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("3E", options2, false);
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.printHelp((-1), "3E", "[ Options: [ short ", options1, "[ Options: [ short ", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("]");
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("[ARG...]", "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ARG...]' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 13, 74, "");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(", ", "Cannot add value, list full.");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-1);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      helpFormatter0.setSyntaxPrefix("~2x,k{<w`$.>8*jh,x_");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("~2x,k{<w`$.>8*jh,x_");
      String string0 = "\"P{";
      helpFormatter0.setLongOptSeparator("\"P{");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append('n');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append((CharSequence) "~2x,k{<w`$.>8*jh,x_");
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("[ Options: [ short ", "", false, "9t)a/[:E><Z>b$Wy");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ Options: [ short ' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\@C,oLZDh E7#Ms";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2844, 2844, "@C,oLZDh E7#Ms");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(781);
      helpFormatter0.setLeftPadding(781);
      helpFormatter0.setOptPrefix("5A]o,]>Kjw5O");
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.defaultDescPad = 1405;
      helpFormatter0.defaultOptPrefix
      helpFormatter0.setWidth(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix(">})T7s");
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("5A]o,]>Kjw5O", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "--", 0, 2460);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultArgName = "_(?E";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "_(?E");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 74);
      mockPrintStream0.write(74);
      mockPrintStream0.checkError();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      String string0 = "X,.+";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2768, "X,.+");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "arg");
      mockPrintStream0.append((CharSequence) charBuffer0);
      bufferedOutputStream0.flush();
      helpFormatter0.setLongOptPrefix("X,.+");
      bufferedOutputStream0.flush();
      mockPrintWriter0.print(0.0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2768, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      optionGroup0.setRequired(false);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      options1.helpOptions();
      helpFormatter0.printHelp("   ", "   ", options1, (String) null);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("   ", options2, false);
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getArgName();
      Options options3 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, (String) null, "", options3, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "[dWnmY? VOCz]=5|M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "", options3, "[dWnmY? VOCz]=5|M", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "NMC?;(=XO");
      option0.setValueSeparator('_');
      options1.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option1 = new Option("", true, "\n");
      options0.addOption(option1);
      options2.getOptionGroups();
      String string0 = " ]";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "", options2, " ]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 2056, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "[ option: ";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("[ option: ", "\n");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "c?P";
      helpFormatter0.setLongOptSeparator("c?P");
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.setLongOptSeparator((String) null);
      String string2 = "I";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, "--", false, "arg");
      // Undeclared exception!
//      try { 
        options1.addOption("DwcK<K2 WaJ]!o;2};p", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'DwcK<K2 WaJ]!o;2};p' contains an illegal character : '<'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = ".NxGy~;2l";
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      int int0 = 13;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1662, "Wv)mtrkM~^CQR:bR\"[", "Wv)mtrkM~^CQR:bR\"[", options0, "Wv)mtrkM~^CQR:bR\"[");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 1239, (-1), "D");
      assertEquals("D", stringBuffer0.toString());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1871);
      helpFormatter0.createPadding(1395);
      helpFormatter0.defaultWidth = (-1871);
      helpFormatter0.getDescPadding();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "org.apache.commons.cli.HelpFormatter$OptionComparator");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // org.apache.commons.cli.HelpFormatter$OptionComparator
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1700));
      assertEquals((-1700), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 7, 3217, "");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.setNewLine("--");
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("u_)m[YaDF:~g$4", "--", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'u_)m[YaDF:~g$4' contains an illegal character : ')'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = null;
//      try { 
        MockURI.URI("--", (String) null, "");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Illegal character in scheme name at index 0: --:#
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "}mo5E";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}mo5E");
      String string1 = "KbYRgZ";
      // Undeclared exception!
//      try { 
        mockPrintWriter0.write("/3K|Q78-&Mt'9X}", (-284), 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth((-2));
      String string1 = "";
      helpFormatter0.setOptPrefix("");
      String string2 = "cmdLineSyntax not provided";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("--", "cmdLineSyntax not provided");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg", "A");
      String string0 = "--";
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-3337));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "fH}BQG9";
      Options options0 = new Options();
      helpFormatter0.printHelp("fH}BQG9", options0, false);
      helpFormatter0.setLongOptPrefix("82`G2Hyc!7j,x!21GV2");
      helpFormatter0.printHelp("82`G2Hyc!7j,x!21GV2", "v*!`.X*Yc<T*", options0, "-6vF", false);
      helpFormatter0.setSyntaxPrefix("nJIR.");
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 2176;
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-5002), 2176, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2236);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2236));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }
}
