/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:47:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-388);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(" ", " ", options0, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 66;
      int int1 = 74;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3440, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "\"TvU[ZQ!e$9'Ykr%9";
      Option option0 = new Option("K", "-", false, "\"TvU[ZQ!e$9'Ykr%9");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1711), options1, 1227, 17);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "--");
      options0.addOption("", "usage: ", true, "--");
      helpFormatter0.defaultLeftPad = (-1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("GR[w6ph+ll{X83", "GR[w6ph+ll{X83", options1, "GR[w6ph+ll{X83", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\"g5]:! N9gTy", "\"g5]:! N9gTy", options0, "\"g5]:! N9gTy");
      helpFormatter0.findWrapPos("XSg0U86", 0, 0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("]", "]", options0, "");
      helpFormatter0.findWrapPos("org.apache.commons.cli.ParseException", 6, 6);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NO_ARGS_ALLOWED");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, "NO_ARGS_ALLOWED", (String) null, options0, 31, 63, "-", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "q S4Y dI#GW!=l");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "q S4Y dI#GW!=l";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "q S4Y dI#GW!=l";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "\n", true, "");
      helpFormatter0.printUsage(printWriter1, 835, "q S4Y dI#GW!=l", options2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "#)0szY0W", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 0, (String) null, "", options0, (-3783), (-1296), "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", true, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, "org.apache.commons.cli.HelpFormatter$1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("B@H+?R$GyP");
      helpFormatter0.getNewLine();
      int int0 = 79;
      String string1 = ")xnd#U[k$uYsgP`XX6";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("'{3`oCY'gvSU713rs", ")xnd#U[k$uYsgP`XX6", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ''{3`oCY'gvSU713rs' contains an illegal character : '''
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "--");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      options1.hasLongOption("dqUZx}#sS?$w[>");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "GR[w6ph+ll{X83";
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "--");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      optionGroup0.addOption(option0);
      String string1 = "dqUZx}#sS?$w[>";
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = null;
      int int0 = 22;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "~l|2", "GR[w6ph+ll{X83", options0, "GR[w6ph+ll{X83", true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter1.printHelp(">\"%r$Px784q,", "usage: ", options0, "--", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1450, "-", "NO_ARGS_ALLOWED", options0, 18, 3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-442));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.HelpFormatter$OptionComparator", "-", options0, 3, 1, "-");
      options0.getOption("--");
      options0.getOptions();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", "-", options0, "--", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        CharBuffer.wrap((CharSequence) "--", 3, (-2057));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      String string0 = ":Os`[jy9p4yXyP";
      helpFormatter0.printHelp(":Os`[jy9p4yXyP", options0);
      helpFormatter0.getNewLine();
      options0.getOption("-");
      String string1 = "-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 118, ":Os`[jy9p4yXyP", "\n", options0, (-1), 55, "5l~Y$$(y/clI;xW}F5", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "GR[w6ph+ll{X83";
      boolean boolean0 = true;
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "--");
      options0.addOption(option0);
      MockFile mockFile0 = new MockFile("bQERfd1[|QIwGoi", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "GR[w6ph+ll{X83";
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-2), " Q]`wlxY%DG");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      int int0 = 74;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 5, "{7u-z}1LN6'q<3c7,");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-409));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("n", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getNewLine();
      options0.getOption("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1350, "\n", "-", options0, 1350, 1350, "xN(RI_E.J", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1657), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("dtc7)^sA!$52Tof");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, "org.apache.commons.cli.Options", false, (String) null);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "org.apache.commons.cli.Options", options3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "C#X|");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "--");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("dqUZx}#sS?$B[`P");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      pipedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "cmdLineSyntax not provided", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      stringWriter0.write("--");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1418, "aYlo9i1aJ", "aYlo9i1aJ", options0, 8, 1663, "Kf)");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "-", options0, 3, 74, "\n");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "iU%$!j:WEi|e", options1);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "kr#z} jshld~};orsuR");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "", options0, 3, 74, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("iU%$!j:WEi|e");
      Options options1 = options0.addOption("", true, "swC l;D8:$!x");
      Option option0 = new Option("arg", false, "gW!/SSzRyf:");
      options1.addOption(option0);
      helpFormatter1.printHelp(5, " ", "", options1, "-", true);
      helpFormatter1.rtrim("1p");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 74);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "--");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options1.hasLongOption("dqUZx}#sS?$B[`P");
      helpFormatter0.printHelp("GR[w6ph+ll{X83", "GR[w6ph+ll{X83", options1, "GR[w6ph+ll{X83", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Option option0 = new Option("", "", false, "2K~6Xz~A x\"!o1Bs`ea");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", true, "NO_ARGS_ALLOWED");
      Options options3 = options2.addOption(option0);
      options3.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      Option option1 = new Option("arg", "");
      optionGroup0.addOption(option1);
      options2.addOptionGroup(optionGroup2);
      options3.hasLongOption("arg");
      helpFormatter0.printHelp("ha:yiBR8D^K8^OF", "", options0, (String) null, true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("zc_avgpUzK_");
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.findWrapPos((String) null, (-857), 74);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-619));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("'K<f", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "'K<f");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("x5jIBeJdj4]W2m6I", "AvT>@D", options0, "x5jIBeJdj4]W2m6I", false);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "AvT>@D";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "AvT>@D";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "[RC3\"lK3Jotk__Mkdl", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printOptions(printWriter0, 1, options1, 64, 64);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "");
      options0.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "3;!Q`ej(VU", options0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("3;!Q`ej(VU", "", options2, "V|d/ge:,0Su<7", true);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1654, 16, "");
      helpFormatter0.renderOptions(stringBuffer0, 16, options1, 1654, 16);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(798);
      StringWriter stringWriter1 = stringWriter0.append('s');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      helpFormatter0.printHelp(printWriter0, 286, "org.apache.commons.cli.HelpFormatter$1", "", options0, 798, 286, "org.apache.commons.cli.HelpFormatter$1", true);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.helpOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      Option option0 = new Option("", "");
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "org.apache.commons.cli.OptionGroup");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockFile1.mkdirs();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<String>();
      helpFormatter0.printHelp("G[N0C\"|<4buid/d", "-", options0, "G[N0C\"|<4buid/d", true);
      Options options1 = options0.addOption("", "G[N0C\"|<4buid/d", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "[ARG...]", "-", options1, 10, 10, "", true);
      // Undeclared exception!
//      try { 
        options0.addOption("\n", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.defaultNewLine = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), " ", "usage: ", options1, "k`s2+(1b}c=Agpev");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "sI", "", options0, 3, 10, (String) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.getOption("-");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ARG...]", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockFile1.mkdirs();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("G[N0C\"|<4buid/d", "-", options0, "G[N0C\"|<4buid/d", true);
      Options options1 = options0.addOption("", "G[N0C\"|<4buid/d", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "5r:", "RkCX_B7O~OZ", options1, 32, 32, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, " :: ", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter1.createPadding(44);
      helpFormatter0.createPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "-");
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("usage: ", "", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ARG...]", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      int int0 = 1;
      mockFile1.mkdirs();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4, "", options0);
      Option option0 = null;
//      try {
        option0 = new Option("O$GKuHB01DA.k(Z", "", true, "?>bLwh4p{V3B");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'O$GKuHB01DA.k(Z' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ARG...]", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockFile1.mkdirs();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("-");
      mockFile1.getCanonicalPath();
      helpFormatter0.printHelp("G[N0C\"|<4buid/d", "s-", options0, "G[N0C\"|<4buid/d", true);
      Options options1 = new Options();
      options0.getOption("");
      helpFormatter0.printHelp(3, "G[N0C\"|<4buid/d", "f2r`_<]eG>m", options1, "s-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-545), options1, (-545), 778);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getNewLine();
      options0.hasShortOption("-");
      helpFormatter0.printHelp(31, "\n", "", options0, " ", true);
      helpFormatter0.getOptPrefix();
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, (-2765), "", "arg", options0, 74, (-21), "usage: ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", (String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "usage: ");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setLongOpt("usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("S[~dQ<Lu", options2);
      helpFormatter0.getArgName();
      option0.setRequired(false);
      options0.addOption("", "Rz1J'8`?ER?!@OGO", true, "-");
      String string0 = "";
      Options options3 = new Options();
      helpFormatter0.printHelp("Rz1J'8`?ER?!@OGO", "", options3, ")v:i");
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options4 = options1.addOptionGroup(optionGroup2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options4, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("");
      Options options2 = new Options();
      Options options3 = options1.addOption((String) null, "[", true, "-");
      options3.getOption("");
      helpFormatter0.printHelp(148, "[", "=l<Gi28nV.*U@O", options0, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, 74, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.defaultLongOptPrefix = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      int int0 = (-1936);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1936), "3;!Q`ej(VU", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.findWrapPos("l$K", 2, 1548);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("!FN4 7B>JW2\"EB^'L#");
      helpFormatter0.findWrapPos("l$K", 1548, (-1));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.defaultArgName = "aSWuwU\")";
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("026b2%eha", 13, 74);
      helpFormatter1.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aSWuwU\")");
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) " ", 1, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "");
      options2.addOption(option0);
      helpFormatter0.printHelp("s>s", options2);
      helpFormatter0.getArgName();
      Options options3 = options0.addOption("arg", "", true, "-");
      helpFormatter0.printHelp("p i_kpzV", "{bIST_Bm-J;", options3, "arg");
      helpFormatter0.printHelp("s>s", options1, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "arg");
      Options options2 = options1.addOption("arg", true, ">xHCEEUc:+g)J");
      helpFormatter0.renderOptions(stringBuffer0, 378, options2, 378, 1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      stringWriter0.write(3);
      int int0 = 3;
      mockPrintWriter0.print('3');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "-");
      int int1 = 13;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("zQn<P0J&u", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'zQn<P0J&u' contains an illegal character : '<'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("jtS!03v{:Dz[;\"", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 16, "g?8~&U}7KC");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "usage: ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("9 |{!x@p+A%");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2327, 0, "KQgp2OwtUKKp");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GR[w6ph+ll{X83", false, " ] [ long ");
      options0.addOption(option0);
      String string0 = "kI_p";
      helpFormatter0.printHelp("kI_p", "arg", options0, "kI_p", true);
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile(" ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "GR[w6ph+ll{X83", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "");
      Option option0 = new Option((String) null, "");
      options1.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.printHelp("ZUGEK~@cL: _u5e:]4", options0);
      options0.hasShortOption((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.getWidth();
      helpFormatter0.optionComparator = null;
      StringBuffer stringBuffer0 = null;
      int int0 = 507;
      int int1 = 3328;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 608, "3;!Q`ej(VU", "868s3nf", (Options) null, 74, 0, "arg", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.findWrapPos("--", 74, (-1631));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      Option option0 = new Option("", "");
      options1.addOption(option0);
      helpFormatter0.printHelp("s>s", options1);
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("arg");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Options options2 = new Options();
      options2.getOptions();
      options2.getOption((String) null);
      int int0 = (-2);
      String string1 = "+@}^:1s/E5yw4LW)*6";
      String string2 = "Ts";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.format("arg", objectArray0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, (-21), "arg", "arg", options3, (-2), 74, "arg", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "");
      Option option0 = new Option("", "");
      options2.addOption(option0);
      helpFormatter0.printHelp("s>s", options2);
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("arg");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Options options3 = new Options();
      options3.getOption((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "+@}^:1s/E5yw4LW)*6", "Ts", options1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.defaultArgName = "aSWuwU\")";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "3;!Q`ej(VU");
      Option option0 = new Option("", "arg");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("aSWuwU\")", options3);
      helpFormatter0.getArgName();
      helpFormatter0.setArgName((String) null);
      Options options4 = new Options();
      options4.getOption("-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3;!Q`ej(VU", "3;!Q`ej(VU", options4, "k`s2+(1b}c=Agpev");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string0 = "MQW|aau@3=";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("i-|qC(GB,r", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("aSWuwU\")");
      Options options0 = new Options();
      options0.getOption(":c~r");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1537), "-9[CH0y'(2+,{.", (String) null, options0, ":c~r");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      stringWriter0.write(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "arg", (Options) null, (-1773), 3, (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("3;!Q`ej(VU");
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.defaultSyntaxPrefix = " ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("3;!Q`ej(VU", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("GR[w6ph+ll{X83", options0, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(86);
      helpFormatter0.createPadding(86);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "");
      options0.addOption(option0);
      helpFormatter0.printHelp("kI_p", "arg", options0, "kI_p", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(86);
      helpFormatter0.createPadding(74);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 21, 21, "");
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, (-321), (-321));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-4640), "\n", " ", options0, "^_)Z<S*Nl$", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      stringWriter0.write(3);
      int int0 = 1012;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-609), ",CGA]\u0002z@AEI", ",CGA]\u0002z@AEI", (Options) null, 1012, 13, ",CGA]\u0002z@AEI");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      stringWriter0.write(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ",CGA]\u0002z@AEI", ",CGA]\u0002z@AEI", (Options) null, (-1773), 3, (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockFile1.mkdirs();
      String string0 = "s-";
      Options options0 = new Options();
      options0.getOptionGroups();
      String string1 = "G[N0C\"|<4buid/d";
      helpFormatter0.printHelp("G[N0C\"|<4buid/d", "s-", options0, "G[N0C\"|<4buid/d", true);
      helpFormatter0.createPadding(0);
      Options options1 = options0.addOption("", "G[N0C\"|<4buid/d", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3254), "[ARG...]", "s-", options1, (-3254), (-3254), (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.getOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "(cf00U", "(*~/", (Options) null, "QKS7kkLez");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-2), "Illegal option name '", "arg", options0, " ] [ long ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(31, "5p,O?i,]Nrk", "\n", options0, "", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("\n", (String) null, options0, "-");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3;!Q`ej(VU";
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.getWidth();
      helpFormatter0.optionComparator = null;
      int int0 = 507;
      Options options0 = null;
      String string1 = "aSWuwU\")";
      helpFormatter0.defaultArgName = "aSWuwU\")";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 351, 1644, "Z0a:*I'B)I");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ARG...]", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockFile1.mkdirs();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("G[N0C\"|<4buid/d", "s-", options0, "G[N0C\"|<4buid/d", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setArgName("");
      Options options1 = new Options();
      options0.getOption("\n");
      // Undeclared exception!
      helpFormatter1.printHelp(1, "--", "usage: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 31, (Options) null, 712, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.findWrapPos("MQW|aau@3=", (-1045), (-1045));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.printHelp("ZUGEK~@cL: _u5e:]4", options0);
      options0.hasShortOption((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.optionComparator = null;
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 507, 3328);
      helpFormatter0.defaultArgName = "aSWuwU\")";
      helpFormatter0.printHelp(3328, "arg", "arg", options0, "F");
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName((String) null);
      Options options1 = new Options();
      options1.getOption("-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3;!Q`ej(VU", (String) null, options1, "k`s2+(1b}c=Agpev");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("L4<sd", ",CGA]\u0002z@AEI", (Options) null, "L4<sd", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      String string0 = "uyx4p~@Yhv\\q\"?w?$";
      String string1 = "<B-O[c3J7*)";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<B-O[c3J7*)");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "~p@BQbq~KO<&M";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-2820), (Options) null, 3, 112);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.getWidth();
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultArgName = "aSWuwU\")";
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.getOption("-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3;!Q`ej(VU", (String) null, options0, "k`s2+(1b}c=Agpev");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      helpFormatter0.printHelp(400, "<UD7d>1S", "UX&3PkO1z[*:aZ$Yp", options0, (String) null);
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName("JK?~#Ke");
      Options options1 = new Options();
      options0.getOption("JK?~#Ke");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(540, "", "k`s2+(1b}c=Agpev", options1, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "]\"<-!kF", true, "[TV");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3714), "", (String) null, options2, 64, 64, ".'x |_k!k=(G5YKrDE");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(31, "5p,O?i,]Nrk", "\n", options0, "", true);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 10, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GRw6ph+ll{X83", true, "");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "_3Xewu", options1, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      String string0 = "_1)->sBPQ9#]'S?]";
      helpFormatter0.setNewLine("_1)->sBPQ9#]'S?]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      int int0 = (-2515);
      mockPrintWriter0.print(false);
      mockPrintWriter0.print("rc^5<v'+0k%G{r~ri");
      String string1 = "[ option: ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2515), (-2515), "[ option: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "CV:In-D@i;gR4H|LU";
      helpFormatter0.setLongOptSeparator("CV:In-D@i;gR4H|LU");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = (-282);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(74, (-1));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 74
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = 222;
      String string0 = "(w";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("[", "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "");
      options0.addOption(option0);
      helpFormatter0.printHelp("kI_p", "arg", options0, "kI_p", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding((-1449));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1449), "", "", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("3;!Q`ej(VU");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(74, "3;!Q`ej(VU", "arg", options0, (String) null);
      helpFormatter0.printHelp(74, "arg", "", options0, (String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      helpFormatter0.setLeftPadding((-1188));
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9.'";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("9.'", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3;!Q`ej(VU";
      helpFormatter0.defaultLongOptPrefix = "3;!Q`ej(VU";
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.printHelp("ZUGEK~@cL: _u5e:]4", options0);
      options0.hasShortOption((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = null;
      helpFormatter0.optionComparator = null;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "arg", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6yD1";
      helpFormatter0.setSyntaxPrefix("6yD1");
      String string1 = "KXv";
      helpFormatter0.setArgName("KXv");
      int int0 = 2892;
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "[ARG...]";
      Options options1 = options0.addOption("KXv", true, "[ARG...]");
      // Undeclared exception!
//      try { 
        options1.addOption("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      int int0 = 0;
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options2 = options1.addOption("", "--", true, "@\\`OH~$yc}.Rt_B|`");
      optionGroup0.toString();
      String string2 = "";
      options1.hasShortOption((String) null);
      options2.addOption("", true, "-");
      Option option0 = null;
//      try {
        option0 = new Option("@\\`OH~$yc}.Rt_B|`", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '@\\`OH~$yc}.Rt_B|`' contains an illegal character : '@'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9 |{!x@p+A%");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2327, 0, "KQgp2OwtUKKp");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2327, "g?8~&U}7KC", "g?8~&U}7KC", (Options) null, "\"PJYmo?oK;0&Ik", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "GR[w6ph+ll{X83", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "_3Xewu", options1, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2778));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "j^O3m1Jnr", "j^O3m1Jnr", (Options) null, 31, 31, ",CGA]\u0002z@AEI");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "", options0, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ARG...]", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockFile1.mkdirs();
      String string0 = "s-";
      Options options0 = new Options();
      options0.getOptionGroups();
      String string1 = "G[N0C\"|<4buid/d";
      helpFormatter0.printHelp("G[N0C\"|<4buid/d", "s-", options0, "G[N0C\"|<4buid/d", true);
      helpFormatter0.createPadding(895);
      Options options1 = options0.addOption("", "G[N0C\"|<4buid/d", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "[ARG...]", "s-", options1, 1, 1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 3377;
      Options options0 = new Options();
      helpFormatter0.setNewLine("4#7QEJYZQnz$");
      // Undeclared exception!
//      try { 
        options0.addOption("4#7QEJYZQnz$", "--", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '4#7QEJYZQnz$' contains an illegal character : '#'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1913), (-1913), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";+X?^HR;A>a";
      helpFormatter0.rtrim(";+X?^HR;A>a");
      helpFormatter0.getWidth();
      int int0 = 1195;
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer(211);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options1, 74, 1195);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 211, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      options0.hasLongOption("<UD7d>1S");
      helpFormatter0.printHelp("uyx4p~@Yhvq\"?w?$", "~p@BQbq~KO<&M", options0, "~p@BQbq~KO<&M", true);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      int int0 = 88;
      helpFormatter0.setWidth(88);
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = null;
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Option option0 = null;
//      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-1404);
      Options options0 = new Options();
      options0.getMatchingOptions("[ Options: [ short ");
      options0.hasLongOption("");
      Options options1 = options0.addOption("arg", "", true, "arg");
      helpFormatter0.setLongOptPrefix("W%}?! |Gsw:");
      stringBuffer0.codePoints();
      // Undeclared exception!
//      try { 
        options1.addOption("L{vmuNgfU8.ok~5", true, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'L{vmuNgfU8.ok~5' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-DJy?g(k%f";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("--", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
