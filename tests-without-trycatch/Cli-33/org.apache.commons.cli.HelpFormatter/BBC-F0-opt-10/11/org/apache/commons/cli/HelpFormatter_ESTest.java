/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 03:24:45 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = 10;
      Options options0 = new Options();
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'e';
      charArray0[2] = 'A';
      charArray0[3] = '}';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 10, options0, (-1), (-5122));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "#=%5D.&f,av-";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "#=%5D.&f,av-");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("gc~^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "gc~^");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-5019), "gc~^");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-126), ")pZLiJ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1021);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1021), "b56JFlAF>zu#yUz", "b56JFlAF>zu#yUz", (Options) null, (-1021), (-1021), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-930));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "-", options0, "-");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", true, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options1.getOption("Yt:lWh\"~.T9U!/9I*nm");
      helpFormatter2.printHelp(3, "\n", "xJRhx<<", options0, "", true);
      helpFormatter1.printHelp("--", "--", options1, "usage: ");
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter2.renderOptions((StringBuffer) null, 0, options1, 6, 6);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-288);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("77ZeM:Y4c3GZ", "#k%7jf|=E!vVUul>", options0, "Cannot add value, list full.");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("M0EN:(n;H", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 119, "~*&D^o2$<@c");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-2132);
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "-X.b#WE<52", "-X.b#WE<52", options0, 44, 44, "-X.b#WE<52");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultLeftPad = (-958);
      Options options1 = options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "D2VVk2P", "-X.b#W0E<52", options1, "-X.b#W0E<52");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 142, (-3153));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      int int0 = (-3201);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 32, (-3201));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, ";#RxTukW4~7mJ1Z/", (String) null, options0, 74, 2271, ";#RxTukW4~7mJ1Z/", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      options0.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "hxK", "rel\"Kp", options0, 74, 24, (String) null, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter2.getOptPrefix();
      helpFormatter2.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      stringWriter1.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 967, "--", "<", options1, 1542, 3, "", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption((String) null, "-", false, "--");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.printHelp(31, "-", "-", options1, "-", false);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(9);
      helpFormatter0.getLongOptSeparator();
      stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)3, "EC!jH\"OYH0-A~3l", "W*Q.)j", options1, 74, 11, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("dDYcj9RqVN");
      helpFormatter1.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "dDYcj9RqVN", options0, 3058, (-1452), "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.defaultWidth = 1;
      // Undeclared exception!
      helpFormatter1.printHelp("--", options0, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) locale_FilteringMode0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) list0;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "A CloneNotSupportedException was thrown: ", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 1, "@1", options0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.defaultWidth = 1;
      helpFormatter0.printHelp(3, "arg", "-", options0, "usage: ");
      // Undeclared exception!
      helpFormatter1.printHelp("\n", "-", options0, "");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3268, 3268, "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      int int0 = 1235;
      String string1 = "{~m";
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      String string2 = "ry7(\\2\\xsl7fYujc";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options1.addOption("{~m", "ry7(\u0002xsl7fYujc", true, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '{~m' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("dDYcj9RqVN");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)64;
      byteArray0[2] = (byte)42;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption("arg", "--", false, "usage: ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.printHelp(3, "h\"RHORo*(.Bl;", " ", options1, "\n", false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(2981);
      stringWriter0.append((CharSequence) "--");
      helpFormatter2.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(647);
      // Undeclared exception!
//      try { 
        helpFormatter2.renderOptions(stringBuffer0, (byte) (-22), options2, 74, 63);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-691), (-691), " ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1786, 1786, "");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, (-80), options0, 1786, 586);
      helpFormatter0.renderOptions(stringBuffer2, 391, options0, 1786, 115);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("dDYcj9RqVN");
      helpFormatter1.defaultNewLine = "";
      Options options1 = options0.addOption("arg", "--", false, "usage: ");
      helpFormatter1.printHelp(3, "h\"RHORo*(.Bl;", " ", options1, "", false);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "(v62Uh5";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos("(v62Uh5", 1, 1);
      PrintWriter printWriter0 = null;
      int int0 = (-1);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("-", true, "mnGza`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("dDYcj9RqVN");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption("arg", "--", false, "usage: ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.printHelp(3, "h\"RHORo*(.Bl;", " ", options1, "\n", false);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(2981);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)3, "-", "--", options1, 11, 3336, "pOvbhL", false);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options0.helpOptions();
      options0.hasLongOption("[ option: ");
      helpFormatter0.setArgName("[ option: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      int int0 = 12;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setWidth(12);
      int int1 = (-794);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int2 = 286;
      Options options0 = new Options();
      mockPrintWriter0.append((CharSequence) "");
      mockPrintWriter0.print((double) (-794));
      Options options1 = options0.addOption("", "/E9_I6,_Q(", false, " :: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasShortOption("-");
      Option option0 = new Option("arg", "--", true, "/E9_I6,_Q(");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      int int3 = 1619;
      options2.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 286, (String) null, "", options2, (-2), 1619, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "";
      options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "\n", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "-)vL^E!";
      int int0 = 624;
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qn;%j{ <wE,i");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 289, "qn;%j{ <wE,i", "qn;%j{ <wE,i", (Options) null, 3265, (-147), ">");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = "4L7%U 3{vT)";
      helpFormatter0.setSyntaxPrefix("4L7%U 3{vT)");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("4L7%U 3{vT)");
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4L7%U 3{vT)", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, (String) null, " | ", options0, 675, 0, "<");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, "'H");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "-)vL^E!", options0, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "?<OfF^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "cmdLineSyntax not provided", true, "-");
      helpFormatter0.printHelp(243, "' was specified but an option from this group ", "Bk F7ei/t6`xHIa|", options4, "+anqAr1|t-yh5IGv");
      helpFormatter0.setArgName("org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "ng@;_ B\"{W";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      helpFormatter1.setArgName("dDYcj9RqVN");
      options0.addOption("arg", "--", false, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("-", "arg", (Options) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      String string1 = "mR#r9PFlm";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      options1.getOptions();
      String string2 = "GD{{zt]V'$qY`";
      String string3 = "xw0Lj\"oh<*f\\zP";
      String string4 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("ubly~yI'");
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.setLongOptSeparator("ubly~yI'");
      Options options0 = new Options();
      options0.getMatchingOptions("`btWJ");
      options0.hasLongOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "--", "usage: ", options0, "usage: ");
      helpFormatter2.setArgName("\n");
      helpFormatter2.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 742, "u>gPHXvJze/[2{_%", "", options0, 74, 953, "usage: ");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "-)vL^E!", options0, ")?]bp%xpd^~Qbf8,");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "?<OfF^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "--", true, "C>");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3376), "?<OfF^", "org.apache.commons.cli.OptionGroup", options4, (-1), (-2), "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("dDYcj9RqVN");
      Options options1 = options0.addOption("arg", "--", false, "usage: ");
      helpFormatter1.printHelp(3, "h\"RHORo*(.Bl;", " ", options1, "\n", false);
      MockFile mockFile0 = new MockFile(" ]");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("", "dDYcj9RqVN", false, "-");
      helpFormatter1.printHelp(4649, "--", (String) null, options2, "' was specified but an option from this group ");
      helpFormatter1.setArgName("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I.@Gw%RvmH=R,QU");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      int int0 = 6;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(6, "I.@Gw%RvmH=R,QU", "I.@Gw%RvmH=R,QU", (Options) null, "I.@Gw%RvmH=R,QU", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2539, "Uuja@sX");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.getMatchingOptions("WDIeiPVLi-r}0m3d:");
      helpFormatter0.printHelp((-1), " ", "", options0, ":3zkJXwf\"MqB");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("L.nxZwzXL,7xi");
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(32);
      Options options0 = new Options();
      helpFormatter1.printHelp(43, "usage: ", "-", options0, "cmdLineSyntax not provided");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("\n");
      options0.hasLongOption(")(,4nDN");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp(3, "org.apache.commons.cli.HelpFormatter$OptionComparator", "-", options0, "\n");
      String string0 = null;
      helpFormatter1.setArgName((String) null);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 27, "", (String) null, options0, (-746), (-1354), "-", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3461), "z(V6BmsQpwc9G=M_eu#");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.getMatchingOptions("j");
      options0.helpOptions();
      options0.hasLongOption("j");
      helpFormatter0.printHelp(7, "<", "<", options0, ";]qhaHZ/:");
      helpFormatter0.setArgName((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "?<OfF^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "--", true, "C>");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "--", "", options4, (-1), (-1288), "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("dDYcj9RqVN");
      Options options1 = options0.addOption("arg", "--", false, "usage: ");
      helpFormatter1.printHelp(3, "h\"RHORo*(.Bl;", " ", options1, "\n", false);
      MockFile mockFile0 = new MockFile("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(24, "dDYcj9RqVN", (String) null, options2, "usage: ");
      helpFormatter1.setArgName("dDYcj9RqVN");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.hasLongOption("org.apache.commons.cli.HelpFormatter");
      options0.addOption("", (String) null, false, "m};oY1@5fZpSg2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, (String) null);
      helpFormatter1.printHelp(1621, "x|17j^Uk~hEPK <7b", "", options1, (String) null, false);
      MockFile mockFile0 = new MockFile("");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      helpFormatter0.setDescPadding(47);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "$%x)`uVIod";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1284, "$%x)`uVIod", "arg", (Options) null, 1284, 2377, "-", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      String string0 = "N*D:+{hYQlzV}d|;`";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName("");
      options0.addOption("", "\n", true, "[ARG...]");
      Option option0 = new Option("", true, "lf24Z");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "[ option: ", ",F-!h;#oW2", (Options) null, "N*D:+{hYQlzV}d|;`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(32);
      Options options0 = new Options();
      helpFormatter1.printHelp(74, "cmdLineSyntax not provided", "", options0, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, "-");
      Option option0 = null;
//      try {
        option0 = new Option("--", true, "*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("ubly~yI'");
      helpFormatter0.defaultWidth = 758;
      int int0 = 32;
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.setLongOptSeparator("ubly~yI'");
      helpFormatter0.setDescPadding(32);
      PrintWriter printWriter0 = null;
      String string0 = "_'@@";
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 2422, (Options) null, 83, 76);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(32);
      Options options0 = new Options();
      helpFormatter1.printHelp(74, "cmdLineSyntax not provided", "", options0, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.setArgName(":1#Rb");
      Options options2 = options0.addOption("", (String) null, false, "cmdLineSyntax not provided");
      helpFormatter0.printHelp(1186, ":wqTl", " ", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      MockFile mockFile0 = new MockFile("ky'gD35M>Gz6.L");
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(21, "wr%Pho1)eI8j I", "]", options3, "-L^<?}bA'{%)wY4<&eQ");
      helpFormatter0.setArgName("\"");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "\n", "\n", options0, "N*D:+{hYQlzV}d|;`");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName("");
      options0.addOption("", (String) null, true, "[ARG...]");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, (String) null, "RZOP~?-l?24b", options1, "RZOP~?-l?24b");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName("");
      options0.addOption("", "\n", true, "[ARG...]");
      helpFormatter0.printHelp(74, "N*D:+{hYQlzV}d|;`", "                                                                          ", options0, "[ option: ", false);
      MockFile mockFile0 = new MockFile("%p[rm'K;PA$cJe$5");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("-", "", (File) mockFile1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setNewLine((String) null);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "z&_}m<", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("");
      Options options0 = null;
      boolean boolean0 = false;
      Options options1 = new Options();
      helpFormatter0.printHelp("45j)7h&#U;<f5w=yd", "usage: ", options1, "usage: ", false);
      Options options2 = new Options();
      String string0 = "&)p7V]GU{3r=?3]n(";
      options2.getMatchingOptions("usage: ");
      options2.getMatchingOptions("");
      options2.hasLongOption("");
      // Undeclared exception!
//      try { 
        options2.addOption("usage: ", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.hasLongOption("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp(33, "hemS7.", "org.apache.commons.cli.HelpFormatter", options0, " ");
      helpFormatter0.setArgName("ubly~yI'");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "                                                                          ", "                                                                          ", options0, "N*D:+{hYQlzV}d|;`");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName("");
      options0.addOption("", (String) null, true, "[ARG...]");
      helpFormatter0.printHelp(74, "N*D:+{hYQlzV}d|;`", "                                                                          ", options0, "[ option: ", false);
      MockFile mockFile0 = new MockFile("%p[rm'K;PA$cJe$5");
      helpFormatter0.setLongOptSeparator("                                                                          ");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter0.append('1');
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      options0.hasLongOption("-");
      options0.hasLongOption(" ");
      options0.hasShortOption(" ");
      int int0 = (-1);
      int int1 = (-4606);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options0, (-1), (-4606));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName("");
      options0.addOption("", (String) null, true, "[ARG...]");
      helpFormatter0.printHelp(74, "N*D:+{hYQlzV}d|;`", "                                                                          ", options0, "[ option: ", false);
      MockFile mockFile0 = new MockFile("%p[rm'K;PA$cJe$5");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("-", "", (File) mockFile1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      String string0 = "N*D:+{hYQlzV}d|;`";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-40), "                                                                          ", "                                                                          ", options0, "N*D:+{hYQlzV}d|;`");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2088));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "2R";
      helpFormatter0.setOptPrefix("2R");
      Options options0 = new Options();
      String string1 = "   ";
      helpFormatter0.findWrapPos("2R", (-1), (-1));
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("--", "  lq!e0-hc9E");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      Options options0 = new Options();
      String string0 = "Z\\qYX+8'l?N##s";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(187, "", "\"J9yMeJXa%", options0, "ZqYX+8'l?N##s");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("4L7%U 3{vT)");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("4L7%U 3{vT)");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName((String) null);
      options0.addOption((String) null, "", true, (String) null);
      helpFormatter0.printHelp(8, "d?5tU4", "d?5tU4", options0, "yi8A\".Ex", true);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName("S~gP@$aTt%Z9ls%j|U");
      options1.addOption("arg", " ", true, "-");
      int int0 = (-84);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-84), "cPe", "S~gP@$aTt%Z9ls%j|U", options1, "-", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "2R";
      helpFormatter0.setOptPrefix("2R");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, (String) null);
      String string1 = "   ";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1535), "2R", ", ", options2, "   ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(32);
      Options options0 = new Options();
      helpFormatter1.printHelp(74, "cmdLineSyntax not provided", "", options0, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.setArgName(":1#Rb");
      options0.addOption("", (String) null, false, "cmdLineSyntax not provided");
      helpFormatter0.printHelp(1186, ":wqTl", "", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      MockFile mockFile0 = new MockFile("ky'gD35M>Gz6.L");
      MockFile mockFile1 = new MockFile(mockFile0, "sY@YW)]45");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("ky'gD35M>Gz6.L");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(486);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      String string0 = "~h";
      MockPrintStream mockPrintStream0 = new MockPrintStream("~h");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "--";
      objectArray0[1] = (Object) "~h";
      objectArray0[2] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("d", objectArray0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      String string1 = "i(YBG]zW%h'X";
      mockPrintWriter0.printf("", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format("i(YBG]zW%h'X", objectArray0);
      helpFormatter0.printWrapped(printWriter0, (-1), "usage: ");
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((-1028));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      helpFormatter0.setWidth(113);
      helpFormatter0.createPadding(0);
      String string0 = "ubA";
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      String string2 = "";
      options0.getOption((String) null);
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("&)p7V]GU{3r=?3]n(");
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(1058, " ", "", options0, "j~|Z~%v");
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("4L7%U 3{vT)");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("4L7%U 3{vT)");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "4L7%U 3{vT)", "", options0, "4L7%U 3{vT)");
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "4L7%U 3{vT)", "", options0, "4L7%U 3{vT)");
      options0.hasShortOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      options0.addOption(option0);
      options0.addOption("", false, "");
      File file0 = MockFile.createTempFile("The option '", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-2), (String) null, options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("--");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      String string0 = "[";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "Q#T3KYQsu");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) " ";
      mockPrintWriter0.printf(" ", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 1, options0, 1, 1061);
      helpFormatter0.setLeftPadding(2423);
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped(printWriter0, 2423, (-228), "kn");
      helpFormatter0.rtrim("line.separator");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("kn", options0);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options0, "The option '", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "SaTc?{.pBq>SzK";
      helpFormatter0.defaultArgName = "SaTc?{.pBq>SzK";
      helpFormatter0.getWidth();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      String string2 = "pwQBP";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("--", "OA5yUCjCG%1_2b~JGxr");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultArgName = "org.apache.commons.cli.Options";
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.cli.Options");
      int int0 = (-2547);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("Ts&a>{|x2_hw", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Ts&a>{|x2_hw' contains an illegal character : '&'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      String string0 = "N*D:+{hYQlzV}d|;`";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "                                                                          ", "                                                                          ", options0, "N*D:+{hYQlzV}d|;`");
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I~fA=}H3Acaf{gjsU3O";
      helpFormatter0.setArgName("I~fA=}H3Acaf{gjsU3O");
      int int0 = 1535;
      helpFormatter0.defaultDescPad = 1535;
      String string1 = "ubly~yI'";
      helpFormatter0.setLongOptPrefix("ubly~yI'");
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.setLongOptSeparator("NO_ARGS_ALLOWED");
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      String string2 = "_'@@";
      Options options0 = null;
      int int1 = 1616;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "ubly~yI'", "_'@@", (Options) null, 1616, 0, ")-dp", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ARG...]");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("[ARG...]", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-920), (-920), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      options0.getMatchingOptions("u.sIlfI#-y*}C");
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '|';
      charArray0[2] = 'f';
      charArray0[3] = 'W';
      charArray0[4] = ' ';
      charArray0[5] = 'I';
      charArray0[6] = '=';
      charArray0[7] = '`';
      stringBuffer0.append(charArray0);
      options0.getOption("\n");
      options0.getOption("Cannot add value, list full.");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 0);
      assertEquals("[", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "cmdLineSyntax not provided";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultArgName = "usage: ";
      helpFormatter0.setNewLine("cmdLineSyntax not provided");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("45j)7h&#U;<f5w=yd", "usage: ", (Options) null, "45j)7h&#U;<f5w=yd", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.defaultNewLine = "cmdLineSyntax not provided";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultArgName = "usage: ";
      String string1 = "45j)7h&#U;<f5w=yd";
      helpFormatter0.setNewLine("cmdLineSyntax not provided");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("45j)7h&#U;<f5w=yd", "usage: ", (Options) null, "45j)7h&#U;<f5w=yd", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3268, 3268, "");
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getArgName();
      String string0 = "Qlq";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("a<t_$Y", "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", (String) null, false, " ");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options1);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      Options options2 = new Options();
      options2.getOptions();
      options0.toString();
      options1.addOption("d4I", "org.apache.commons.cli.ParseException", false, "usage: ");
      helpFormatter0.printHelp(31, "P2jh;gj^1Y", "d?bZ_~=Jh7", options2, "d4I", false);
      helpFormatter0.printHelp(31, "J8XgG%>q3cF", "d4I", options2, "J8XgG%>q3cF", false);
      helpFormatter0.setSyntaxPrefix("BXLDIVG#ONCh?");
      String string2 = "JQ4{+4aZV=";
      String string3 = "cmdLineSyntax not provided";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, (String) null, "JQ4{+4aZV=", options1, "cmdLineSyntax not provided", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "Ib0 HL$Kv7N/QA,4!S";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      Option option0 = null;
//      try {
        option0 = new Option("org.apache.commons.cli.Options", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.Options' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("]gKTz}:", options0, true);
      String string0 = "|KR";
      helpFormatter0.setLongOptSeparator("|KR");
      int int0 = (-1353);
      helpFormatter0.defaultWidth = (-1353);
      String string1 = "gAPwlNaea6";
      MockFile mockFile0 = new MockFile((File) null, "gAPwlNaea6");
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("-", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }
}
