/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:50 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("Illegal option name '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "]/]:79K'-Op<}[<1%", false, "");
      Options options3 = options2.addOption((String) null, false, "");
      // Undeclared exception!
//      try { 
        options3.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-768);
      String string0 = "[ Options: [ short ";
      String string1 = "--";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 8, (-768), "[ Options: [ short ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      String string1 = "U]";
      Options options0 = new Options();
      int int0 = 1743;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1743, "[ option: ", "has already been selected: '", options0, 584, 34, "U]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(9);
      String string0 = null;
      helpFormatter0.optionComparator = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-2), (-2));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      optionGroup1.setRequired(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1066), "D|H,&@NX`YUqgZq;", "D|H,&@NX`YUqgZq;", options2, 283, (-1066), "D|H,&@NX`YUqgZq;", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1066);
      String string0 = "D|H,&@NX`YUqgZq;";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = new Options();
      int int1 = 283;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1066), "D|H,&@NX`YUqgZq;", "D|H,&@NX`YUqgZq;", options2, 283, (-1066), "D|H,&@NX`YUqgZq;", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "AxEN7W", "AxEN7W", options0, 568, (-2088), "AxEN7W");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, "--", true, "-");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", options1, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("[fw7:e0tP:bc*d}", "", options1, "", false);
      options1.getOption("[fw7:e0tP:bc*d}");
      options1.addOption("arg", "m{Ht\f*iC<*@RcM>XM?Z", true, "-");
      helpFormatter0.printHelp(" ", " ", options1, " ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.findWrapPos("{\u0005_ 9iU~ZSMZ&S", 34, (-1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-944), " ] [ long ", (String) null, options0, "3/>;+DNrT", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 12, (Options) null, 12, 5828);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n");
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 27, "ud|");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "Jp2yh=HLY";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("qgO1L*w;[^5nB7", "Jp2yh=HLY", (Options) null, "org.apache.commons.cli.HelpFormatter$1", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 36, 36, "org.apache.commons.cli.Util");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = ".xWXV(`r'Xt<Q";
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".xWXV(`r'Xt<Q");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1210, 1210, "");
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, ">");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", true, "7`Q");
      options3.addOption((String) null, ">", false, "D`(A*oYoMT+f868/");
      String string0 = "{W1UoyTb^>$";
      helpFormatter0.printHelp("+jl_[?ad9b", "{W1UoyTb^>$", options1, "");
      String string1 = "(s\\,:Z8,;Gd^XA";
      options0.addOption("", "-", true, "7`Q");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ] [ long ");
      // Undeclared exception!
//      try { 
        options3.addOption("usage: ", "--", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("I8ej", true, "--");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      Options options3 = options2.addOption("arg", "m{Ht\f*iC<*@RcM>XMZ", true, "M5|s3'7c;mVG{");
      helpFormatter1.printHelp(",", "Ok", options3, "--");
      Options options4 = options3.addOption("", "\n", true, "(s,:Z8,;Gd^XA");
      options4.addOption("arg", true, "Wx;{BKHktEp[{/ha");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      options3.getMatchingOptions("lfC81U-i|Nh$");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1695, "Wx;{BKHktEp[{/ha");
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1695, options1, 1695, 1695);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<sP^A^aH");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "<sP^A^aH", "", options0, 74, 3, (String) null, true);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("BT");
      helpFormatter0.setArgName("BT");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W)0V");
      mockPrintWriter0.append((CharSequence) "W)0V");
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("W)0V");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(13, "Vm:N", "k/7:DNgs!X+", (Options) null, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2747);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", 23, 63);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      String string0 = ", ";
      helpFormatter0.printHelp(", ", "", options0, "");
      mockPrintWriter0.append('C');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 0, "YTjxCHt2j~|f%_u_6");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<s>L0^A^aH");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "5/?c", (String) null, options0, (-3357), (-3357), "5/?c", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp(3, "-", "-", options0, "-");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", " ", options1, " ");
      helpFormatter0.printHelp(" ", options1, true);
      options0.getMatchingOptions("4#ee");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, "cmdLineSyntax not provided");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 74, options1, 74, 74);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer2, 1, options1, 13, 5828);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      File file0 = MockFile.createTempFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('0');
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "arg", "", options1, 112, 74, "^1=2UU8j$%lBPI", false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp(70, "^G9", " ", options1, "]");
      Options options2 = new Options();
      options2.getMatchingOptions("]");
      helpFormatter0.setArgName(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 20, options0, 5473, 70);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 918, "org.apache.commons.cli.Options");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("", true, "--");
      stringWriter0.write((-432));
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options1, 1775, (-5312));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W)0V";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W)0V");
      mockPrintWriter0.append((CharSequence) "W)0V");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", false, (String) null);
      helpFormatter1.printHelp(74, "f^4M?WJqQ1B.rx#)C", "arg", options1, "-");
      // Undeclared exception!
//      try { 
        options1.getMatchingOptions((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      options1.getMatchingOptions("");
      helpFormatter0.setArgName("3MNe^VY|~|*bYe");
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.hasShortOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1694), options1, 3, 2215);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp("4#ee", options1, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)11;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, 3, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      options0.addOption((String) null, false, "");
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.Util");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.cli.ParseException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.Util");
      helpFormatter1.printUsage(printWriter0, 32, "", options0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printOptions(mockPrintWriter0, 44, options0, 21, 21);
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", (-3632), 9);
      helpFormatter0.setNewLine("BSM@.^ ??,**tc");
      helpFormatter0.createPadding(87);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3632), (-3632), "cmdLineSyntax not provided");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      helpFormatter0.printUsage(printWriter0, 1138, "");
      helpFormatter0.findWrapPos("j{j<`KRZ|_N<", 0, 1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("lSe", "-", true, "Wx;{BKHktEp[{/ha");
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      Options options3 = options1.addOption("", true, "arg");
      helpFormatter0.printHelp("~BR{P278[0u,e", "2W]wh%dW>JgEB", options3, "");
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2, (String) null, "4#ee", options3, "~4uK-,Bt");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      // Undeclared exception!
      helpFormatter1.printHelp(";q`RP@f4vT", "usage: ", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W)0V");
      mockPrintWriter0.append((CharSequence) "W)0V");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "0a\"2", options0, "");
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "-");
      helpFormatter0.printUsage(printWriter0, 10, "\n", options0);
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      Options options1 = options0.addOption((String) null, false, "");
      helpFormatter0.printHelp(3, "{/d", "pR*%Wmo\"z2)", options0, "l;-t:d,F8su.o");
      options0.getMatchingOptions((String) null);
      helpFormatter0.setArgName("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      options1.hasShortOption("]");
      helpFormatter0.renderOptions(stringBuffer0, 20, options1, 20, 3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<s>L0^A^aH");
      mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      mockPrintWriter1.append('');
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "[ Options: [ short ", "'XplvBZY", options0, 64, 44, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(14);
      helpFormatter1.getDescPadding();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" ");
      options1.getMatchingOptions("\n");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, " ", options1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp((-1), "4zh^Q@", "", options1, "Wx;{BKHktEp[{/ha");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      options0.addOption((String) null, false, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h");
      mockPrintWriter0.append('Z');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-784), "y6uuQ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(";q`RP@f4vT", "usage: ", options0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "\"";
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) ";q`RP@f4vT";
      objectArray0[5] = (Object) "\"";
      objectArray0[6] = (Object) helpFormatter1;
      objectArray0[7] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\"", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 10, "\"", "--", (Options) null, 3, 3, (String) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options3 = options1.addOption("", true, "arg");
      helpFormatter0.printHelp("~BR{P278[0u,e", "2W]wh%dW>JgEB", options3, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("zj'+Q&5Z46&Q?$vl");
      mockPrintWriter0.append('Z');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-869), "<[~J=g/*p!m7G", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "-", options0, "\n");
      Options options1 = options0.addOption((String) null, false, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      options0.getMatchingOptions((String) null);
      helpFormatter0.printHelp("rPC<Mk.`2Fp318|(W", "", options1, "", false);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "", options0, "   ", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<s>L0^A^aH");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      PrintWriter printWriter1 = mockPrintWriter1.append('t');
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter1, 14, "<s>L0^A^aH", "4", options1, 14, 74, (String) null, false);
      helpFormatter0.setLeftPadding(2583);
      String string0 = "hOf\\m)-F6PZc/2Z";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter1, 3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yb");
      int int0 = 66;
      helpFormatter0.defaultLeftPad = 66;
      helpFormatter0.createPadding(70);
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "--", 9, 48);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printHelp(" ", options1, true);
      mockPrintWriter1.append('H');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "[=rV");
      Option option0 = new Option("", "--", true, "[=rV");
      Options options2 = options1.addOption(option0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "]&di[", options2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 74, "4#ee", "org.apache.commons.cli.OptionGroup", options1, (-1), 1, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      int int0 = 1720;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1720, "", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      options0.addOption((String) null, false, "");
      helpFormatter0.printHelp(3, "{/d", "pR*%Wmo\"z2)", options0, "l;-t:d,F8su.o");
      options0.getMatchingOptions((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, (-944));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<s>L0^A^aH");
      mockPrintWriter0.close();
      mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = new Options();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter1;
      MockPrintWriter mockPrintWriter2 = (MockPrintWriter)mockPrintWriter1.format("usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 14, "<s>L0^A^aH", "4", options1, 14, 3, "arg", false);
      helpFormatter0.setLeftPadding(2583);
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptPrefix("<s>L0^A^aH");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("arg");
      mockPrintWriter2.append('$');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 0, "DK", options1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W)0V");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "W)0V");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "/kA#", options0, "");
      PrintWriter printWriter1 = mockPrintWriter0.append('C');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1721, "hOfm)-F6PZc/2Z");
      helpFormatter0.printUsage(printWriter1, 10, "\n", options0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 132, "", "\n", options0, 3515, (-1), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      MockPrintWriter mockPrintWriter2 = (MockPrintWriter)mockPrintWriter1.append('');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 74, " ");
      options0.getMatchingOptions(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderOptions(stringBuffer0, 1, options0, 74, 1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("arg", true, "oHv9{nE#JreL~@)Oe");
      helpFormatter0.printHelp("4#ee", "Wx;{BKHktEp[{/ha", options4, "4#ee");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z#Zu");
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 11, "Z#Zu", options1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "arg");
      mockPrintWriter0.flush();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      MockPrintWriter mockPrintWriter2 = (MockPrintWriter)mockPrintWriter1.append('q');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 74, " ");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "iC#owZ", options0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "'", "arg", options0, 3, 3, "");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "C(wX*^mJ*$ZdS]u*&S";
      MockFile mockFile0 = new MockFile("C(wX*^mJ*$ZdS]u*&S", "A.Vcw }E7-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      mockFile0.mkdirs();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "A.Vcw }E7-";
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1650, 1650, "A.Vcw }E7-");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("C(wX*^mJ*$ZdS]u*&S");
      int int0 = 30;
      String string1 = "5 d_]|lur^(";
      Options options0 = new Options();
      String string2 = null;
      Option option0 = new Option((String) null, "usage: ", false, "-");
      Options options1 = options0.addOption(option0);
      String string3 = "}C!&>Qp#)cd2";
      // Undeclared exception!
//      try { 
        options1.addOption("}C!&>Qp#)cd2", "arg", false, "6U");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '}C!&>Qp#)cd2' contains an illegal character : '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      MockPrintWriter mockPrintWriter2 = (MockPrintWriter)mockPrintWriter1.append('q');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 74, " ");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "iC#owZ", options0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "'", "arg", options0, 3, 3, "");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q o:vef')U+%  ");
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printWrapped(printWriter0, 1, 1, "org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<s>L0^A^aH");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      Options options1 = new Options();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter1;
      mockPrintWriter1.format("usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 14, "<s>L0^A^aH", "4", options1, 14, 3, "arg", false);
      helpFormatter0.setLeftPadding(2583);
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptPrefix("<s>L0^A^aH");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("arg");
      Locale locale0 = new Locale("usage: ", "--");
      printWriter0.format(locale0, "\n", objectArray0);
      mockPrintWriter2.println("<s>L0^A^aH");
      helpFormatter0.setSyntaxPrefix("6Q#3");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("\\qu|A");
      File file0 = MockFile.createTempFile("arg", "' contains an illegal character : '", (File) null);
      MockFile mockFile0 = new MockFile(file0, "\n");
      MockPrintWriter mockPrintWriter3 = null;
//      try {
        mockPrintWriter3 = new MockPrintWriter(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q o:vef')U+%  ");
      mockPrintWriter0.append('J');
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, ").7R]e$zb");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", true, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "snh_lcr4,i", true, "-");
      int int0 = 106;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 178, "", (String) null, options2, (-2), 106, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, (-1088), " ", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-666);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 137, (-666), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 17;
      helpFormatter0.defaultDescPad = 17;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int1 = 31;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("R/9fGo5$}9XnL4", true, "+u");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'R/9fGo5$}9XnL4' contains an illegal character : '/'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      options1.hasShortOption("W?({_I3!CS(d>W");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp("4#ee", options1, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)11;
      helpFormatter0.defaultLeftPad = (-5406);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 74, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q o:vef')U+%  ");
      mockPrintWriter0.append('J');
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, ").7R]e$zb");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      printWriter0.println(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      mockPrintWriter1.append('J');
      helpFormatter0.printWrapped(printWriter0, 279, "--");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      Options options2 = new Options();
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 110, (String) null, (String) null, options1, 110, 110, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      String string0 = "Wx;{BKHktEp[{/ha";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp("4#ee", options1, false);
      int int1 = 19;
      helpFormatter0.printHelp(19, "4#ee", "4#ee", options1, "Wx;{BKHktEp[{/ha", false);
      helpFormatter0.setDescPadding(19);
      String string1 = "[ option: ";
//      try { 
        MockURI.URI("4#ee", "org.apache.commons.cli.OptionValidator", " ", 936, "-", "usage: ", "Wx;{BKHktEp[{/ha");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: 4#ee://org.apache.commons.cli.OptionValidator@ :936-?usage:%20#Wx;%7BBKHktEp[%7B/ha
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(";q`RP@f4vT", "usage: ", options0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      helpFormatter0.printWrapped(printWriter0, 3, "");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, " ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3357), "org.apache.commons.cli.ParseException", "", options0, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp("4#ee", options1, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)11;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (int) (byte) (-92), "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Wx;{BKHktEp[{/ha";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp("4#ee", options1, true);
      byte[] byteArray0 = new byte[8];
      helpFormatter0.printHelp(" ", options1);
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)11;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("4#ee", 26, (-171));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T9p[}ywl('Jg]]lo");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "T9p[}ywl('Jg]]lo");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "T9p[}ywl('Jg]]lo");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      mockPrintWriter1.append('J');
      helpFormatter0.printWrapped(printWriter0, 279, "T9p[}ywl('Jg]]lo");
      helpFormatter0.printUsage(printWriter0, 279, "n8}[M&e_oUt:V/2?/", options0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T9p[}ywl('Jg]]lo");
      mockPrintWriter0.append((CharSequence) "T9p[}ywl('Jg]]lo");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "T9p[}ywl('Jg]]lo");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      mockPrintWriter1.append('J');
      int int0 = 0;
      helpFormatter0.getDescPadding();
      options0.addOption("", "\n", false, "' contains an illegal character : '");
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "-", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      mockPrintWriter0.write("arg");
      helpFormatter0.printHelp("-", "", options0, "\n");
      helpFormatter0.setWidth((-1));
      MockPrintWriter mockPrintWriter2 = (MockPrintWriter)mockPrintWriter1.append('q');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 74, " ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "iC#owZ", options0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.defaultArgName = "arg";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      options1.hasShortOption("@xO(IM");
      options1.hasShortOption("x~_");
      helpFormatter0.printHelp("arg", " ", options1, "arg");
      helpFormatter0.setWidth(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      int int0 = (-2853);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2853));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3357);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      char char0 = 't';
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      String string0 = "4";
      Options options0 = new Options();
      mockPrintWriter1.append('t');
      boolean boolean0 = false;
      helpFormatter0.setLeftPadding((-3357));
      helpFormatter0.getOptionComparator();
      String string1 = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptPrefix("");
      mockPrintWriter0.println("6Q#3");
      helpFormatter0.setSyntaxPrefix("");
      String string2 = "g!";
      helpFormatter0.setSyntaxPrefix("g!");
      String string3 = "A0(]&'3Wt,";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("A0(]&'3Wt,", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      int int0 = 2840;
      helpFormatter1.createPadding(3294);
      int int1 = 32;
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) null, 0, 32, "q=3AEN{F:Ozx)");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      mockPrintWriter1.append('J');
      helpFormatter0.printWrapped(printWriter0, 279, "--");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("--");
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "", options1, "");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      String string0 = "4#ee";
      options0.getMatchingOptions("4#ee");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "--", "--", options0, "--");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp("4#ee", options1, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)11;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-171), "0ip)zkee#xNf>;");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getMatchingOptions((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "S.", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "u`+L", "u`+L", (Options) null, "u`+L", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 59, "'");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("--");
      helpFormatter0.rtrim((String) null);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "}^K\"_+sv");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity((-882));
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "R6:$ezy-v;YoH/");
      helpFormatter0.setLongOptPrefix("/Ub?\"3BlX<");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.findWrapPos("", (-3115), 1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2035), "}^K\"_+sv", "$dKf~Uc(t2Im<IqT|\"X", options1, 1, 1, "$dKf~Uc(t2Im<IqT|\"X", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "~s}-LA15_Lu";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2042, (-1034), "~s}-LA15_Lu");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Wx;{BKHktEp[{/ha";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp("4#ee", options1, true);
      int int0 = 0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2264), (String) null, (String) null, options1, "Wx;{BKHktEp[{/ha", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3357);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      String string0 = "4";
      Options options0 = new Options();
      mockPrintWriter1.append('t');
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-3357), "k+-+:Jn*>Nu", "4", options0, (-1), 171, "k+-+:Jn*>Nu", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T9p[}ywl('Jg]]lo");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "T9p[}ywl('Jg]]lo");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-862), (-862), "T9p[}ywl('Jg]]lo");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.reverse();
      String string0 = "y";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2242), 1, "y");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      String string0 = "~G7o86k0;w";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option("}", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = ".xWXV(`r'Xt<Q";
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(".xWXV(`r'Xt<Q", ".xWXV(`r'Xt<Q", (Options) null, ".xWXV(`r'Xt<Q");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "V_.;]\\2C=:fdP_D";
      helpFormatter0.setLongOptSeparator("V_.;]\u0002C=:fdP_D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 74, (-2));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-2);
      helpFormatter0.defaultLeftPad = (-2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("\n");
      helpFormatter1.defaultWidth = 1;
      StringBuffer stringBuffer0 = new StringBuffer(1800);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-2), 1, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "", "", (Options) null, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      byte byte0 = (byte) (-107);
      byte byte1 = (byte) (-34);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "@V@HR;D\"-hK>", "@V@HR;D\"-hK>", (Options) null, "R1~s", false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("--");
      helpFormatter0.rtrim("6C^v8+I%eI &~W!");
      MockFile mockFile0 = new MockFile("6C^v8+I%eI &~W!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.defaultLeftPad = (-627);
      mockPrintWriter0.write("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", "OqQ>hQtD{+%zohQ*gG", options1, "6C^v8+I%eI &~W!");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("--");
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity((-870));
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, 3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Wx;{BKHktEp[{/ha";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      options0.getMatchingOptions("4#ee");
      helpFormatter0.printHelp((-1), "Wx;{BKHktEp[{/ha", "Wx;{BKHktEp[{/ha", options0, "Wx;{BKHktEp[{/ha");
      options0.getMatchingOptions("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("Wx;{BKHktEp[{/ha");
      helpFormatter0.setLongOptPrefix("4#ee");
      helpFormatter0.printHelp(" ", "Wx;{BKHktEp[{/ha", options1, "Wx;{BKHktEp[{/ha");
      helpFormatter0.printHelp("4#ee", options1, false);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2264), (String) null, (String) null, options1, "Wx;{BKHktEp[{/ha", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
//      try {
        option0 = new Option(" ", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\<s>L0^A^aH";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<s>L0^A^aH");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      PrintWriter printWriter1 = mockPrintWriter1.append('t');
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, 14, "<s>L0^A^aH", "4", options1, 14, (-3357), (String) null, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("-", true, "J3M?O>;<Mt");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("--");
      helpFormatter0.rtrim((String) null);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "}^K\"_+sv");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity((-882));
      int int0 = 13;
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "R6:$ezy-v;YoH/");
      helpFormatter0.setLongOptPrefix("/Ub?\"3BlX<");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option(" ", "--", true, ")#V");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      String string0 = "m>UD S_J1l|j]ElK+O";
      helpFormatter0.setDescPadding(31);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("=]tZ|", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "--", 3, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = (-726);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, (-726), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("d>", options0, false);
      helpFormatter0.findWrapPos(" ", 1780, 31);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "/Y+.TPcD");
  }
}
