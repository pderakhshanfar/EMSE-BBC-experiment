/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:23:12 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.stream.IntStream;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(":RN?-", ":RN?-", options0, "");
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      option0.setArgName("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("P3^6R58*i51#", options0, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-41);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(110, "z=>hH)mr:Ud']htGf", "Illegal option name '", options0, "z=>hH)mr:Ud']htGf");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(":RN?-", ":RN?-", options0, "");
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      option0.setArgName("--");
      helpFormatter0.printHelp("x(8CbZt2df`2F'~", options1, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) locale1;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 679, "[", "", options1, (-1787), 679, "[");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-500));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", options0, "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultOptPrefix = "g";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption("n:f$B ", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'n:f$B ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.findWrapPos("NU1m2U", 0, 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mp]$=kj");
      mockPrintWriter0.append('Y');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 453, "6@::fIw~vS>", "6@::fIw~vS>", options0, 453, 103, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setNewLine("5jNkk|@l)}u2yeH");
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('q');
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "5jNkk|@l)}u2yeH";
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) printStream0;
      mockPrintStream0.printf(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('q');
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-3082), " [ARG]");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(27);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      Option option0 = new Option("", (String) null, false, "]0b7p@CgZ");
      options1.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "]0b7p@CgZ", "jW", options1, (String) null, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter", "\n");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 12, 12);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(12, "--", "usage: ", (Options) null, "--", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("6#PWfa?@yAMZ4", (String) null, (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("Qb3C&;N|rrb");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append('}');
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 453, "RtV6", "-", options0, 74, 3, "6@::fIw~vS>", false);
      MockPrintWriter mockPrintWriter2 = (MockPrintWriter)mockPrintWriter1.append('3');
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 1, 3, "Qb3C&;N|rrb");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.trimToSize();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "j8:ticD-j|G;!]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 74, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      options0.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 2, "vc Sa#", "", options2, 2, 3, "vc Sa#", false);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      String string0 = "";
      String string1 = "H$uZKGmEbM3x1*PL";
      Options options0 = new Options();
      String string2 = "";
      Option option0 = new Option("", "-", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H$uZKGmEbM3x1*PL", options1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
      helpFormatter0.setLongOptSeparator("");
      Options options2 = new Options();
      options2.addOption("", false, "");
      int int0 = 0;
      helpFormatter0.renderOptions(stringBuffer1, (-1), options2, 2399, 0);
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int1 = (-228);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-228), "H$uZKGmEbM3x1*PL", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "";
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      String string1 = "qW.)Ur7>w7kq";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-532), "qW.)Ur7>w7kq", "", options1, 46, 124, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-877));
      String string0 = "3";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("3", "3", options0, "niC4~79{yG^T5\"");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", true, ";dJs#");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption(option0);
      StringWriter stringWriter0 = new StringWriter(2564);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.Util", options1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      String string1 = "-";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "", "kM", (Options) null, 63, 20, "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile(" :: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print('r');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) " | ";
      objectArray0[2] = (Object) " | ";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, " | ", objectArray0);
      String string0 = "[;lmp[P.7r n5rH]6h";
      int int0 = (-824);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 235, " :: ", "[;lmp[P.7r n5rH]6h", options1, 2, (-824), (String) null, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "^XCcHoIm");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) "^XCcHoIm";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 2, "<", (String) null, options2, 2, 54, "", true);
      helpFormatter0.setSyntaxPrefix("<");
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "H$uZKmEbMx1*PL", true, "<");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) stringWriter1;
      objectArray0[8] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      helpFormatter0.printHelp(printWriter0, 34, "GXlQLgu4{hHo7.oA", "vc Sa#", options1, 2, 2, "vc Sa#", true);
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "-", false, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      String string1 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "org.apache.commons.cli.Util", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "-");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 58, 32, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "", options2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp("arg", "arg", (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      options0.toString();
      Option option0 = new Option("", "-", true, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H$uZKmEbMx1*PL", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "-eky^m9#|{f", options1, (-2), (-802), "]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "B2A_-pD", false, "P\"%&jRnI.x^( h96`T");
      helpFormatter0.optionComparator = null;
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 3, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ] [ long ", " ", options1, 74, 1, " ");
      // Undeclared exception!
//      try { 
        helpFormatter2.createPadding((-1596));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-542), "arg", "8e", options0, (-542), 1, "L+fCT9");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Option option0 = new Option("arg", "--", false, (String) null);
      options0.addOption(option0);
      option0.toString();
      helpFormatter0.printHelp("X.", options0);
      helpFormatter0.printHelp("jBC`^9:OUm", options0, false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 3, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.ParseException", "--", options1, 74, 74, "]");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      boolean boolean0 = false;
      String string1 = "q8n'K?[Q{K4[PoFxM;";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "q8n'K?[Q{K4[PoFxM;", options1, "*A__&$hs#)vT9,", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2075, "(");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.defaultArgName = "LrDOv%77B'$NJ`";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (byte)2, 17);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg", true, "9lUx");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "Pun.", false, "?e nea");
      options3.hasLongOption("9lUx");
      helpFormatter0.printHelp("{oHN}hdp0", options3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "Ok5", options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\"y%:7\"2_*5up3X5i?L/");
      helpFormatter0.setSyntaxPrefix("");
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"y%:7\"2_*5up3X5i?L/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.print((double) 74);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1167, "<>", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.toString();
      Option option0 = new Option("arg", "usage: ", true, "cmdLineSyntax not provided");
      helpFormatter0.setNewLine("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      Option option1 = new Option("arg", true, "usage: ");
      options0.addOption(option1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(27);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      Option option0 = new Option("", (String) null, false, "]0b7p@CgZ");
      options1.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(26, "]0b7p@CgZ", "jW", options1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(74);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "--", "arg", options1, "+4?0|nbh>}hGm^]L9H");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(27);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 2235, "^S^\"^dc");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(27);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 2235, "^S^\"^dc");
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", "", true, "");
      Option option0 = new Option((String) null, "usage: ", true, "\n");
      Options options3 = options1.addOption(option0);
      helpFormatter1.printHelp("A CloneNotSupportedException was thrown: ", options2);
      helpFormatter0.printHelp("--", options3, true);
      MockFile mockFile0 = new MockFile("p^]#R?F ~?u>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "p^]#R?F ~?u>";
      objectArray0[5] = (Object) "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
//      try { 
        mockPrintWriter0.format((Locale) null, (String) null, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity((-16));
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1486), "");
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption("arg", "/f|r%", true, "WB'?69$T?");
      helpFormatter1.printHelp(3, "--", "arg", options1, "+4?0|nbh>}hGm^]L9H");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setWidth(3);
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter1.getArgName();
      helpFormatter1.getNewLine();
      helpFormatter0.findWrapPos("arg", 1, 74);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(27);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos(" ] [ long ", 63, (-84));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, ":&.frbePW}^97](I`z");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 34, options0, 697, 697);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println((double) 3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 34, ":&.frbePW}^97](I`z", options0);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2320), ":&.frbePW}^97](I`z");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
      int int0 = 31;
      String string1 = "";
      Options options0 = new Options();
      String string2 = "Sh";
      Options options1 = options0.addOption("Sh", false, "");
      options0.addOption("", false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, "", "", options1, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(31);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "(rdsbqVL]D'ucyu", "h_S9*m*mt 1Q", options0, 31, (-714), "h_S9*m*mt 1Q", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setWidth(600);
      int int0 = 0;
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 0, options1, 600, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "Cannot add value, list full.";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Cannot add value, list full.";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "Cannot add value, list full.";
      objectArray0[3] = (Object) null;
      helpFormatter0.setWidth((-1203));
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Cannot add value, list full.", objectArray0);
      int int0 = (-2034);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-2034), "Cannot add value, list full.");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = " ";
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      helpFormatter1.printHelp(3, "--", "arg", options1, "+4?0|nbh>}hGm^]L9H");
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setWidth(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "+4?0|nbh>}hGm^]L9H", options2, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      stringBuffer0.chars();
      stringBuffer0.ensureCapacity(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-3992), " ");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 18, "h_S9*m*mt 1Q", "(rdsbqVL]D'ucyu", options0, 1, 1, "2PBX7-DO", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(74);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = " ";
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      helpFormatter1.printHelp(3, "--", "arg", options1, "+4?0|nbh>}hGm^]L9H");
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setWidth(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", options0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      IntStream intStream0 = stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      int int0 = 1;
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6ub_Ousz.");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) intStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("6ub_Ousz.", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 27, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(27);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-1749);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 31, (-1749), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 84, options0, (-1), 84);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "C:Xrg`$4-<2s-};";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C:Xrg`$4-<2s-};");
      Options options0 = null;
      int int0 = 742;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 86, (Options) null, 86, 742);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      helpFormatter1.printHelp(3, "--", "arg", options1, "+4?0|nbh>}hGm^]L9H");
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      helpFormatter1.printHelp("-", "", options2, "");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", "usage: ", options0, "!WV'yCtDIc=B!7V");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      StringBuffer stringBuffer2 = new StringBuffer(27);
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer3 = new StringBuffer(3);
      StringBuffer stringBuffer4 = new StringBuffer("arg");
      stringBuffer2.append(false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'V';
      stringBuffer1.append(charArray0);
      StringBuffer stringBuffer5 = stringBuffer0.append(stringBuffer3);
      stringBuffer3.append((Object) stringBuffer5);
      options0.getOptionGroups();
      Options options1 = new Options();
      helpFormatter0.printHelp("z#FxVxIuV6_[k#z;'", " ", options1, "org.apache.commons.cli.HelpFormatter$1", false);
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setWidth(1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = " ";
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      helpFormatter1.printHelp(3, "--", "arg", options1, "+4?0|nbh>}hGm^]L9H");
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setWidth(3);
      helpFormatter0.printHelp("--", options0, true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(27);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      Option option0 = new Option("", (String) null, false, "]0b7p@CgZ");
      options1.addOption(option0);
      helpFormatter0.printHelp("&88Q+.z*Y5.{E@ySG<", options1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option((String) null, "line.separator", false, " ");
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", false, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H$uZKGmEbM3x1*PL", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1214), (-1214), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.printHelp("z(a0}qmoN$", options0, false);
      // Undeclared exception!
//      try { 
        options0.addOption("-", false, "r#");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      stringBuffer0.ensureCapacity(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, (-2422), "--");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      StringBuffer stringBuffer2 = new StringBuffer(27);
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(27, "", "/Y|r3E&", options0, "'");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Option option0 = new Option("", "-", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H$uZKGmEbM3x1*PL", options1);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "(z<c@u");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      String string0 = "(z<c@u";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      Option option0 = new Option("", "-", false, "--");
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("H$uZKGmEbM3x1*PL", options1);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      helpFormatter0.setLongOptSeparator("(z<c@u");
      Options options2 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, (-1), options2, 2399, 0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options3 = new Options();
      Option option1 = null;
//      try {
        option1 = new Option("H$uZKGmEbM3x1*PL", "usage: ", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'H$uZKGmEbM3x1*PL' contains an illegal character : '*'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-1475), "", " ", options0, 6, 9, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.hasLongOption("usage: ");
      options0.addOption("arg", true, "The option '");
      helpFormatter0.setSyntaxPrefix("w");
      Options options1 = options0.addOption("", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, " } ])HVvV7Dxjc", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      String string0 = "nW]Gbg6c#";
      mockPrintStream0.print("~Msd(u-*%ap");
      MockPrintStream mockPrintStream1 = new MockPrintStream("-");
      mockPrintStream1.close();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 815, (String) null, "~Msd(u-*%ap", (Options) null, 710, 815, " D*#J%Q%0_takA?Rv", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      helpFormatter1.printHelp(3, "--", "arg", options1, "+4?0|nbh>}hGm^]L9H");
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setWidth(3);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      String string0 = "";
      String string1 = "H$uZKGmEbM3x1*PL";
      Options options0 = new Options();
      String string2 = "";
      Option option0 = new Option("", "-", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H$uZKGmEbM3x1*PL", options1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
      helpFormatter0.setLongOptSeparator("");
      Options options2 = new Options();
      int int0 = 0;
      helpFormatter0.renderOptions(stringBuffer1, (-1), options2, 2399, 0);
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int1 = (-228);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-228), "H$uZKGmEbM3x1*PL", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, (-1475), "--");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      options0.getOptionGroups();
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((String) null, "t3h@B)V", options1, "arg", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.hasLongOption("usage: ");
      options0.addOption("arg", false, "The option '");
      Options options1 = options0.addOption("", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, " } ])HVvV7Dxjc", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-1475), "", " ", options0, 6, 9, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-2782);
      helpFormatter0.rtrim((String) null);
      String string0 = null;
      helpFormatter0.setLongOptPrefix("(z<c@u");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 29, 39, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption("-", "-", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      StringBuffer stringBuffer2 = new StringBuffer(27);
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      helpFormatter1.printHelp(3, "--", "arg", options1, "");
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", "usage: ", false, "%-yTm7A8fGA");
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.hasLongOption("usage: ");
      options0.addOption("arg", true, "The option '");
      Options options1 = options0.addOption("", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, " } ])HVvV7Dxjc", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"9{:hHg%0OL3Q,&0");
      int int0 = (-521);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-521), (-1266), "(");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1268, "' was specified but an option from this group ");
      helpFormatter0.setOptPrefix(" } ])HVvV7Dxjc");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1521);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dataOutputStream0, false);
      mockPrintStream0.print("[ option: ");
      String string0 = null;
      mockPrintStream0.close();
      int int0 = 559;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1687), "/ItK=I", "nW]Gbg6c#", (Options) null, (-1687), 559, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      mockPrintStream0.close();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("nW]Gbg6c#");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.ensureCapacity(27);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-1475), "");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "/Y|r3E&", true, "WB'?69$T?");
      helpFormatter1.printHelp(3, "--", "arg", options1, "+4?0|nbh>}hGm^]L9H");
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", "usage: ", false, "%-yTm7A8fGA");
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      PrintWriter printWriter0 = null;
      helpFormatter0.setWidth(600);
      int int0 = 0;
      helpFormatter0.createPadding(0);
      String string0 = "   ";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      String string0 = "(z<c@u";
      String string1 = "H$uZKGmEbM3x1*PL";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = false;
      Option option0 = new Option("", "-", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H$uZKGmEbM3x1*PL", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2782), (-2782), "(z<c@u");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      options0.getOptions();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      String string1 = "/$/e/v";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-667), " :: ", " :: ", options0, "/$/e/v");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|scxb%,";
      helpFormatter0.rtrim("|scxb%,");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      String string2 = "'Rx}k<&['h1qU";
      String string3 = "org.apache.commons.cli.HelpFormatter$1";
      options1.getOptionGroups();
      // Undeclared exception!
//      try { 
        options1.addOption("'Rx}k<&['h1qU", "\n", true, "org.apache.commons.cli.HelpFormatter$1");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ''Rx}k<&['h1qU' contains an illegal character : '''
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.ParseException";
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "g%@w'3Vq";
      boolean boolean0 = true;
      String string1 = "^(\\ i$?.:=d";
      // Undeclared exception!
//      try { 
        options1.addOption("g%@w'3Vq", "g%@w'3Vq", true, "^( i$?.:=d");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'g%@w'3Vq' contains an illegal character : '%'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      ObjectOutputStream objectOutputStream0 = null;
//      try {
        objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rnJD1@7dqk-4w";
      String string1 = "line.separator";
      Options options0 = new Options();
      String string2 = "";
      options0.getOption("");
      helpFormatter0.printHelp("rnJD1@7dqk-4w", "line.separator", options0, "rnJD1@7dqk-4w", false);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-735);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-735), (-735), "83m'5He6#*6^l ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      String string0 = "nW]Gbg6c#";
      mockPrintStream0.print("a_-E-L?\"4SzZS-");
      mockPrintStream0.close();
      String string1 = " ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "nW]Gbg6c#", (String) null, (Options) null, 0, 815, " ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      String string1 = "~G^9Y5x\\s!^a'zu|Q";
      helpFormatter0.setLongOptSeparator("~G^9Y5xs!^a'zu|Q");
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(74);
      PrintWriter printWriter0 = null;
      int int0 = (-1666);
      Options options0 = new Options();
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1666), options0, (-1), (-1666));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('H');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      String string0 = null;
      String string1 = "R1AQZ>.Nhe>=T|SUa(1";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("cmdLineSyntax not provided", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = (-521);
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-521), (-521), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      stringBuffer0.insert(1, (CharSequence) "-");
      stringBuffer0.chars();
      stringBuffer0.ensureCapacity(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 27, (-3992), " ");
      String string0 = "arg";
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.getSyntaxPrefix();
      String string1 = "?X-i??VfZJ51";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
//      try {
        option0 = new Option(" ", "arg", false, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "|>Q_00d)*s%axkg";
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '#';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'e';
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(1, charArray0, 3, (-1951));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // offset 3, len -1951, str.length 5
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      int int1 = 0;
      String string0 = "";
      Options options0 = new Options();
      boolean boolean1 = false;
      String string1 = "z(a0}qmoN$";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " } ])HVvV7Dxjc";
      helpFormatter0.setOptPrefix(" } ])HVvV7Dxjc");
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      options0.helpOptions();
      String string1 = "The option '";
      options0.hasLongOption("usage: ");
      options0.addOption("arg", true, "The option '");
      String string2 = "";
      Options options1 = options0.addOption("", true, "arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, " } ])HVvV7Dxjc", options1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = (-664);
      helpFormatter0.setWidth((-664));
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-664));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName(" ]");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.printf("-", objectArray0);
      int int0 = (-1779);
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("xy~0}QvL4=@11q%k,", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'xy~0}QvL4=@11q%k,' contains an illegal character : '~'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "5jNkk|@l)}2yeH";
      helpFormatter0.setNewLine("5jNkk|@l)}2yeH");
      String string1 = null;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile("-", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setWidth(600);
      helpFormatter0.createPadding(3);
      helpFormatter0.findWrapPos("z.", (-886), (-886));
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("V-)");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(1);
      int int0 = helpFormatter0.findWrapPos(" ] [ long ", (-1772), 0);
      assertEquals(600, helpFormatter0.defaultWidth);
      assertEquals((-1772), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      helpFormatter0.setLongOptPrefix(" ] [ long ");
      MockFile mockFile0 = new MockFile("w8\"%PlA4v>Co:^{GJOx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format((Locale) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", objectArray0);
      int int0 = 0;
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        optionGroup0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.OptionGroup", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0, 1, 1);
      stringWriter2.getBuffer();
      int int0 = (-1981);
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = 'z';
      charArray0[2] = 'x';
      charArray0[3] = '8';
      // Undeclared exception!
//      try { 
        stringWriter0.write(charArray0, 1, 74);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }
}
