/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:19 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("C$", "arg", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2, (String) null, " ", options1, "-", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(48);
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      stringWriter0.write("{2D^$]_ZDe");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.printWrapped(printWriter0, 48, (-443), "org.apache.commons.cli.ParseException");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 43;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        stringWriter1.write((String) null, (-443), 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "-", "usage: ", options0, "");
      helpFormatter0.findWrapPos("' contains an illegal character : '", 2, 2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      int int0 = 234;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 234, 0, " ] [ long ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", "oem}1K}#nF9JZm.)T@", options0, "p1?Q6VR", false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(34, "C$", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Option option0 = new Option("eJ", "%=':[`2");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 74, options1, 74, 34);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options0, 1, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 18, 18, "usage: ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      String string0 = " ";
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) " ";
      mockPrintWriter0.format(locale0, "", objectArray0);
      int int0 = (-368);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("Gw", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOptionGroup(optionGroup0);
      String string0 = "";
      Options options3 = options2.addOption("", false, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), "usage: ", options3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      int int0 = 53;
      String string1 = "'6Wz}y_T6C)8rV]p";
      String string2 = "";
//      try { 
        MockURI.URI("0mQGa.V8l*6Mn", (String) null, "' was specified but an option from this group ", "--", ".z<C=AE");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: 0mQGa.V8l*6Mn:'%20was%20specified%20but%20an%20option%20from%20this%20group%20?--#.z%3CC=AE
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.defaultArgName = "<";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos(">&C", 6, (-1371));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 14, "usage: ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.findWrapPos(":'uT5s!", 0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-2), options0, 1, 743);
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 743, 4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultDescPad = (-1383);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = null;
      int int0 = 90;
      helpFormatter0.findWrapPos("1", 9, 90);
      helpFormatter0.rtrim("~lf:bebwt5bhU~y");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "org.apache.commons.cli.OptionGroup";
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '&';
      charArray0[2] = 'a';
      charArray0[3] = '&';
      charArray0[4] = 'r';
      charArray0[5] = 'L';
      charArray0[6] = 'T';
      charArray0[7] = 'N';
      stringBuffer0.append(charArray0);
      Options options1 = options0.addOption((String) null, false, "org.apache.commons.cli.OptionGroup");
      String string1 = "";
      Options options2 = options1.addOption("", "usage: ", false, "i");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 86, options2, (-2513), 90);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 8;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(0, "a*:h", "-", (Options) null, " ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 97, (String) null, (String) null, options0, 33, (-1250), ")2Lx?3sr", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      String string0 = "usa: ";
      Options options0 = new Options();
      String string1 = "Cn!cAa_t=]";
      Options options1 = options0.addOption("", "Cn!cAa_t=]", true, (String) null);
      Option option0 = new Option("", true, "");
      options1.getOptions();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.defaultDescPad = (-1967);
      options1.addOption("arg", " ", false, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options4 = options3.addOption("WfBz", false, "usage: ");
      options0.getOptionGroups();
      option0.setOptionalArg(true);
      option0.setLongOpt("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "usa: ", options4, "\n", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      Options options0 = null;
      helpFormatter0.setLongOptPrefix("=JR");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", true, "' contains an illegal character : '");
      String string0 = "org.apache.commons.cli.Options";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-436);
      helpFormatter0.defaultWidth = (-436);
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("\n");
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("s qi");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      int int1 = 74;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "The option '");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("I!<8(wBVE&P[{9s", "", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'I!<8(wBVE&P[{9s' contains an illegal character : '!'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "0HRXn, Y+J");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption((String) null, true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2249), "", "", options3, (-1), (-2), "<R>t0&wZ]B$2jGy_");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~wjBV $D", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      dataOutputStream0.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, ";,j).lK9rov@", ";,j).lK9rov@", options0, 2057, 9, (String) null, false);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, " ", options1);
      int int0 = 600;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 1689, options0, 2, (-720));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultLeftPad = (-2304);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1689, "]", "", options0, "org.apache.commons.cli.ParseException");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "R s8(xNZo888L$tL";
      String string1 = ";Q+_FGaI<q3!E!fbp ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("nHb7.*f9f:|n2oF?", "Dzx[", (Options) null, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      mockFile0.setExecutable(false);
      Options options0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      String string0 = "Xn[(_V";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "Xn[(_V", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultOptPrefix = "\n";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("arg", "-", (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~wjBV $D", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 200, "p)lpzxCHS61", (String) null, options0, 32, 2531, "", false);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "NO_ARGS_ALLOWED", options1);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~wjBV $D", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Options options0 = new Options();
      mockFileOutputStream0.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "~wjBV $D", "", options0, 94, 119, " ", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      int int0 = 1655;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1189), "   ", ", ", options0, (-609), 1655, ", ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = "\\f=L5-J";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1153), "\f=L5-J");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Cn!cAa_t=]", true, (String) null);
      File file0 = MockFile.createTempFile("usage: ", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 43, "Cn!cAa_t=]", " ", options1, 43, 3973, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter1.write("' was specified but an option from this group ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, " ", options1);
      helpFormatter0.getArgName();
      int int0 = (-1386);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", (-637), (-1386));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(936);
      helpFormatter0.renderOptions(stringBuffer0, 936, options0, 1058, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "-", (Options) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "usage: ");
      Options options3 = options2.addOption((String) null, "   ", true, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 70, "=_3CWV;C>AOx^4;HD3]", "", options3, 32, 1, "p)lpzxCHS61", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = "Cn!cAa_t=]";
      Options options1 = options0.addOption("", "Cn!cAa_t=]", true, "usage: ");
      Option option0 = new Option("", true, "");
      options1.getOptions();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options1.addOption("arg", " ", false, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WfBz", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "WfBz", "c:h{W7XDfv'qbW;", options1, 967, 1, "", false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      options3.addOption("WfBz", false, "usage: ");
      option0.setOptionalArg(true);
      option0.setLongOpt("(ON[qTSeb`sh");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("usage: ", "MUEhjlm/8j4");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // MUEhjlm/8j4
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~wjBV $D", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2057, "152+:' *G:X", "~wjBV $D", options0, 1, 9, "152+:' *G:X", false);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer1, 2, options0, 2057, 74);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 0, ",E");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockFile mockFile0 = new MockFile("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-686), "qA", ">", (Options) null, 3, 1, "/$NqQ</-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Cn!cAa_t=]", true, (String) null);
      Option option0 = new Option("", true, "");
      options1.getOptions();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options1.addOption("arg", " ", false, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options4 = options3.addOption("WfBz", false, "usage: ");
      option0.setOptionalArg(true);
      option0.setLongOpt("arg");
      helpFormatter0.printHelp("--", "usa: ", options4, "\n", true);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usa: ", "Cn!cAa_t=]");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Cn!cAa_t=]
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "usage: ");
      String string0 = "p)lpzxCHS61";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "=_3CWV;C>AOx^4;HD3]", "", options2, 32, 1, "p)lpzxCHS61", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "usage: ", "[ Options: [ short ", options0, 3, 1, "", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "j+cc($", "j+cc($", (Options) null, 43, 1, "m");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", false, "\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.toString();
      options1.addOption("", false, "arg");
      Option option0 = new Option((String) null, false, " ");
      option0.setOptionalArg(false);
      option0.setLongOpt("-");
      options0.helpOptions();
      helpFormatter0.printHelp("arg", (String) null, options0, "", false);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "\n", "f+5`\"(", (Options) null, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options0 = new Options();
      int int0 = 2057;
      int int1 = (-609);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2057, "=hX4Z", "=hX4Z", options0, (-609), 13, "=hX4Z", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      objectOutputStream0.writeObject("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(81);
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 2592, " ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "=hX4Z", options0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("&4}tG1~");
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("IC");
      helpFormatter0.rtrim("&4}tG1~");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("&4}tG1~", 3, (-87));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h|TBh_Q", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      int int0 = 33;
      int int1 = 101;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "", "*.Ql}gY&v Zj", options0, 101, 35, "&(>Hr\"/{o", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ", "//a^RV+I}K7_x8#9");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "", "", options0, 44, 45, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp(14, "org.apache.commons.cli.HelpFormatter$OptionComparator", "w&<QP8k`SK^~n:-Wld}", options0, "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "' was specified but an option from this group ");
      StringWriter stringWriter0 = new StringWriter(64);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 64, (Options) null, 64, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4510);
      String string0 = helpFormatter0.defaultArgName;
      MockFile mockFile0 = new MockFile("-", "arg");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.OptionGroup", (String) null, (File) mockFile0);
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int1 = 0;
      String string1 = "Y&.]pQ//3F7uJ\\>:";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("|nd<,iK", "\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3139, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~wjBV $D", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Options options0 = new Options();
      int int0 = 43;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2057, "~wjBV $D", "[", (Options) null, (-496), (-496), (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "C.1t$_HIYUMMs73";
      MockFile mockFile0 = new MockFile((String) null, "C.1t$_HIYUMMs73");
      PrintWriter printWriter0 = null;
      int int0 = 2761;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2761, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Cn!cAa_t=]", true, (String) null);
      Option option0 = new Option("", true, "");
      options1.getOptions();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      String string0 = "WfBz";
      options1.addOption("arg", " ", false, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options4 = options3.addOption("WfBz", false, "usage: ");
      option0.setOptionalArg(true);
      option0.setLongOpt("arg");
      helpFormatter0.printHelp("--", "usage: ", options4, "\n", false);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "Cn!cAa_t=]");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Cn!cAa_t=]
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)36;
      byteArray0[0] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "org.apache.commons.cli.Option";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "org.apache.commons.cli.Option", "n", (Options) null, (int) (byte)36, (int) (byte)36, "<");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=hX4Z";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      String string1 = "6u";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "6u", options1, "=hX4Z", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Cn!cAa_t=]", true, (String) null);
      Option option0 = new Option("", true, "");
      options1.getOptions();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      String string0 = "WfBz";
      options1.addOption("arg", " ", false, "");
      Options options4 = options3.addOption("WfBz", false, "usage: ");
      option0.setOptionalArg(true);
      helpFormatter0.printHelp("--", "usage: ", options4, "\n", false);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "Cn!cAa_t=]");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Cn!cAa_t=]
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-513), "<_#Lwh*<eC9-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "Qs", options0);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("Qs", options0, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 43, "Q4+h~+5d", "Q4+h~+5d", (Options) null, 43, 43, "=hX4Z");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "<";
      Options options0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "<", "<", (Options) null, 34, 34, "org.apache.commons.cli.Option");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Fnx:cGGYq");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "E'{S*.qxcMA)!<");
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      helpFormatter0.printHelp("   ", options2);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("E'{S*.qxcMA)!<");
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "C.1t$_HIYUMMs73");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "<_#Lwh*<eC9-");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("&4}tG1~");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&MB7P");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 12, "");
      int int0 = 0;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 12, "");
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(101, "", (String) null, options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "C.1t$_HIYUMMs73");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1854, (-1435), "bLtQEGGHus&&zf4!@");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "<_#Lwh*<eC9-");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1297, "' contains an illegal character : '", options1);
      helpFormatter1.getArgName();
      helpFormatter1.rtrim("g,![3l,5HaPvs]i");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("&4d}tG1~");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "lm", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "KFk,>UPGT?owk");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "@^c8", (String) null, options2, "&4d}tG1~");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "C.1t$_HIYUMMs73");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "<_#Lwh*<eC9-");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Cn!cAa_t=]", true, (String) null);
      Option option0 = new Option("", true, "");
      options1.getOptions();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      String string0 = "WfBz";
      options1.addOption("arg", " ", false, "");
      Options options4 = options3.addOption("WfBz", false, "usage: ");
      option0.setOptionalArg(true);
      helpFormatter0.printHelp("--", "usage: ", options4, (String) null, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "Cn!cAa_t=]");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Cn!cAa_t=]
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3483, "&T|E4", "--", (Options) null, "9~i");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultLongOptPrefix = "D4#S $";
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine(" :: ");
      Option option0 = null;
//      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter", "j3d", false, " :: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("&4}tG1~");
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("&4}tG1~");
      assertEquals("", helpFormatter0.getOptPrefix());
      
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("&4}tG1~");
      helpFormatter0.getDescPadding();
      int int0 = 11;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(11, "", "", (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix("&T|E4");
      helpFormatter0.rtrim(" ");
      File file0 = MockFile.createTempFile("&T|E4", "[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "&T|E4";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "[ARG...]";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter0, 3395, options0, 9, 99);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = ',';
      charArray0[2] = 'V';
      charArray0[3] = 'G';
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "";
      Options options1 = options0.addOption("", "-", false, "");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = '%';
      mockPrintWriter0.println(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, (-92), 74, ">r:gq6j,(-7Ni3");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("The option '");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "%*<gKBR";
      String string1 = "";
      String string2 = "W>/1Y%3^3$Z";
      helpFormatter0.printHelp("W>/1Y%3^3$Z", "%*<gKBR", options0, "[6]zv4");
      String string3 = "f;5";
      options0.hasLongOption("GS*4*Tx.-eA");
      Option option0 = null;
//      try {
        option0 = new Option("f;5", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'f;5' contains an illegal character : ';'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=hX4Z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "=hX4Z", options0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "~mL+%FdI2ji%*z;b";
      Options options0 = new Options();
      String string1 = "]@L;";
      helpFormatter0.printHelp(22, "]@L;", "", options0, "HBCZqYa!&Q-Z~d9==RM", false);
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptPrefix("");
      boolean boolean0 = true;
      helpFormatter0.defaultLongOptPrefix = "D4#S $";
      String string2 = null;
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = ',';
      charArray0[2] = 'V';
      charArray0[3] = 'G';
      charArray0[4] = '0';
      charArray0[5] = '%';
      mockPrintWriter0.println(charArray0);
      int int0 = 3682;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 3682, "--");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "line.separator";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix("");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "line.separator";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 0, (Options) null, 1, 930);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("4W!,BKGRWydP2]6o", 31, 31);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4508);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-4508));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      int int0 = (-4078);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-438), options0, (-4078), 580);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.ParseException";
      boolean boolean0 = true;
      String string2 = "";
      // Undeclared exception!
//      try { 
        options0.addOption("org.apache.commons.cli.ParseException", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      int int0 = 234;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 234, 0, " ] [ long ");
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(74, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 74
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "`{@xB^bYcWcAE");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.Util");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "org.apache.commons.cli.Options");
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      helpFormatter0.printHelp("arg", options2);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-4512));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("VOdX @sx8Qr{!de");
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "`@k";
      String string1 = "6q&HN!E\\6?";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "";
      Option option0 = new Option("", true, " ");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        options3.addOption(" :: ", true, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' :: ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print(3);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      int int0 = 0;
      String string0 = "c8kAZ7{s<}";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 0, "c8kAZ7{s<}");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "`{@xB^bYcWcAE");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-548);
      helpFormatter0.setArgName(">");
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setDescPadding((-548));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = new StringBuffer();
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      char[] charArray1 = new char[8];
      charArray1[0] = 'i';
      charArray1[1] = 'i';
      charArray1[2] = 'i';
      charArray1[3] = 'i';
      charArray1[4] = 'i';
      charArray1[5] = 'i';
      charArray1[6] = 'i';
      charArray1[7] = 'i';
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(10, charArray1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 10
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "<";
      Options options0 = new Options();
      String string2 = "[6]zv4";
      boolean boolean0 = false;
      helpFormatter0.printHelp("%*<gKBR", "", options0, (String) null);
      Option option0 = null;
//      try {
        option0 = new Option("%*<gKBR", true, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '%*<gKBR' contains an illegal character : '%'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      helpFormatter0.defaultDescPad = (-513);
      helpFormatter0.setLongOptPrefix(" :: ");
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption(" ", "", true, "VIOl&D70Iy[`@9{|ti");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("arg");
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
//      try { 
        MockURI.URI("usage: ", "K*[", "arg");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Illegal character in opaque part at index 6: usage: :K*[#arg
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("'z");
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      String string0 = "}$hb";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("}$hb", true, "?Cv3X\"Z\"EY  Qw-q");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '}$hb' contains an illegal character : '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 277;
      helpFormatter0.setSyntaxPrefix("(,");
      String string0 = "";
      String string1 = "`iryiknw=o*DP'kT";
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption(" ", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2304), "&T|E4", " ", (Options) null, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2246);
      int int0 = (-136);
      helpFormatter0.setLeftPadding((-136));
      helpFormatter0.setLeftPadding((-1467));
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 0;
      String string0 = "Q#T:9B";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-136), 0, "Q#T:9B");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }
}
