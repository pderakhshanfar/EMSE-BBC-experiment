/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:39 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      helpFormatter0.setLongOptSeparator("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "]dTO!y<0!?/PSinM");
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-4945), (-4945));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      helpFormatter0.setLongOptSeparator("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 60, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.findWrapPos("Cannot add value, list full.", 13, 13);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 60, 1, "Cannot add value, list full.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      helpFormatter0.setLongOptSeparator("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.print("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-370), "r2;<q");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("'");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", "cmdLineSyntax not provided", options0, "cmdLineSyntax not provided");
      helpFormatter0.defaultNewLine = "cmdLineSyntax not provided";
      helpFormatter0.defaultNewLine = "cmdLineSyntax not provided";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getDescPadding();
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Q";
      objectArray0[1] = (Object) "'";
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.getLeftPadding();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("Q");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0j");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("e", false, "%[YY&c0f");
      Option option0 = new Option("", "|&fF)6@FL;z!z", true, "-");
      options0.addOption(option0);
      helpFormatter0.defaultNewLine = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "org.apache.commons.cli.OptionValidator", "30,`S<{Np", options1, 1, 1, "p");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(0);
      String string0 = "[ARG...]";
      String string1 = " :: ";
      MockFile mockFile0 = new MockFile(" :: ", "\n");
      File file0 = MockFile.createTempFile("[ARG...]", " :: ", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "-");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.print("usage: ");
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter1 = mockPrintWriter1.append('x');
      helpFormatter0.printHelp(printWriter1, 1340, "usage: ", "usage: ", options0, 1340, 1, (String) null, false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = 'v';
      charArray0[2] = '0';
      charArray0[3] = 'u';
      charArray0[4] = 'C';
      charArray0[5] = 'X';
      charArray0[6] = '{';
      charArray0[7] = '{';
      charArray0[8] = '6';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 63, "N#N1r_9P\"ys|");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1579, "   ", "XG!1.FxE", (Options) null, "XG!1.FxE", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("Ou", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("{1T]:QcX,~z#G=,NR", options3, true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-2002);
      helpFormatter0.setWidth((-2002));
      options0.addOption("Z", true, "-");
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp("0YM4*-nZ3r'=C)j-Fpaz", options0);
      Options options2 = options1.addOption("", "-", true, "[ option: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-351), options2, 2307, 2307);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      helpFormatter0.setLongOptSeparator("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 60, "]dTO!y<0!?/PSinM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, " ", (String) null, options1, 0, 74, "", false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1047, options0, 1047, 8);
      mockPrintWriter0.print("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2984, 2984, "V");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, (-1769), options2, 2984, 1929);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1769), options2, (-2151), 1929);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("C", "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOption("arg", "usage: ", true, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "C", options0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      MockPrintStream mockPrintStream1 = new MockPrintStream("NO_ARGS_ALLOWED");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 60, 60, "NO_ARGS_ALLOWED");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 60, "NO_ARGS_ALLOWED", "has already been selected: '", options0, 60, 1, "", true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("dkvAC7", " ", false, "usage: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      options1.helpOptions();
      Options options2 = options1.addOption("", false, "-");
      // Undeclared exception!
      helpFormatter0.printHelp("arg", options2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1418);
      String string0 = "!1>P p}%%]1vxE";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("!1>P p}%%]1vxE", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Locale locale0 = Locale.JAPANESE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      options0.getOptions();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options0;
      mockPrintWriter1.printf("--", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 3, "NO_ARGS_ALLOWED", "-", options0, 48, 74, "--");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, " ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLeftPad = (-1348);
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", " ", options0, " ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M0Cvwj_1+BP-Mleu";
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 63, "M0Cvwj_1+BP-Mleu");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M0Cvwj_1+BP-Mleu");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("V", "M0Cvwj_1+BP-Mleu", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Locale locale0 = Locale.JAPANESE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      options0.getOptions();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter1.println();
      objectArray0[2] = (Object) options0;
      mockPrintWriter1.printf("--", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 59, "--");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1974, "--", "--", options0, 49, 636, "3", true);
      helpFormatter2.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options1 = new Options();
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 22, options1, 64, 1);
      helpFormatter1.renderOptions(stringBuffer1, 74, options1, 636, 3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Locale locale0 = Locale.JAPANESE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.getOptions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter1.printf("", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage(printWriter0, 3, "NO_ARGS_ALLOWED");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 50, "usage: ", "usage: ", options2, 59, 12, "-", true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.KOREAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M0Cvwj_1+BP-Mleu");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("V", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 74, "' contains an illegal character : '");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 74, " | ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      Options options1 = new Options();
      options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("/{M", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 5, (-134));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      helpFormatter0.setLongOptSeparator("[ARG...]");
      MockPrintStream mockPrintStream1 = new MockPrintStream("arg");
      mockPrintStream1.println((float) 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("[ARG...]", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "M0Cvwj_1+BP-Mleu";
      mockPrintStream0.format(locale0, "usage: ", objectArray0);
      Locale locale1 = Locale.JAPANESE;
      Object[] objectArray1 = new Object[0];
      mockPrintStream0.printf(locale1, "-", objectArray1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M0Cvwj_1+BP-Mleu");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "(Qoo3W>~$o*", objectArray1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 117, ")9tU!*#t\u0006Qr");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 49, (String) null, ":de'.sT69 vpGlQt@", options0, 1, 41, "!Rd7E@O=iyl", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) options0;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.renderOptions((StringBuffer) null, 74, options0, (-1), 44);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printOptions(mockPrintWriter0, 74, options2, 31, 15);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, " ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Z\":-WQHKnO<IB'@5kR,", "-", options2, 74, 37, "Z\":-WQHKnO<IB'@5kR,", true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("0zAhDgm/", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1021, "P)j*p~|Vq7{qnE", "Xh7`C9u`M4W3", (Options) null, 1, 3, "/}b*/+9u&=d3}FzFE");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.setLongOptSeparator("                                                                          ");
      Options options0 = new Options();
      helpFormatter0.printHelp("]g0'ykqP[Zgjp3", "Q(0Q.=b`h6", options0, "`?chNe", true);
      Options options1 = new Options();
      Options options2 = new Options();
      options1.hasOption("`?chNe");
      Option option0 = new Option((String) null, true, "]g0'ykqP[Zgjp3");
      Options options3 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "4tUdS~SX[xT^3Ua:\"Jq", "", options3, (-2), (-2615), "2EHNHu", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9;c-";
      Options options0 = null;
      int int0 = (-3286);
      helpFormatter0.setDescPadding((-3286));
      helpFormatter0.defaultOptPrefix = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("9;c-", "", (Options) null, "Y/yp", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp("-z#!x>?:l", options1, false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3155, "-z#!x>?:l", "-z#!x>?:l", options0, 3, 3, "7Hn&*ht7LrzP&DV");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printOptions(printWriter0, 13, options0, 13, 891);
      helpFormatter0.printUsage(printWriter0, 32, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 37, "Z\":-WQHKnO<IB'@5kR,", " ", (Options) null, 37, 13, "Fs,hkt_8~rd(&", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 9;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "NO_ARGS_ALLOWED");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp("-z#!x>?:l", options1, false);
      helpFormatter0.getLeftPadding();
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-z#!x>?:l");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1481), (-1417), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options1;
      mockPrintWriter1.printf("--", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter1, 10, options1, 3494, 13);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-2066), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "", false, "--");
      helpFormatter0.printHelp("~F(ZS3k", options3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter1.getWidth();
      helpFormatter1.findWrapPos("arg", 13, 44);
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp("-z#!x>?:l", options1, false);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3155, "-z#!x>?:l", "-z#!x>?:l", options0, (-2), (-2), "7Hn&*ht7LrzP&DV");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.JAPANESE;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "M0Cvwj_1+BP-Mleu", (Object[]) null);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "M0Cvwj_1+BP-Mleu";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.lookupTag(linkedList0, set0);
      locale0.stripExtensions();
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) helpFormatter0;
      printStream0.printf(locale1, "-", objectArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("arg", true, "X2");
      helpFormatter0.printHelp("UR<)LV &", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3555, "", "", options1, 64, 3555, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 64, 1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter1.renderOptions(stringBuffer0, 207, options1, 1, 37);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.JAPANESE;
      mockPrintStream0.printf(locale1, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped(printWriter0, 3, (-540), "sI4}sT_4aF&*<cI{");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Option option0 = new Option("", "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "");
      helpFormatter1.getWidth();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3505, " ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      String string0 = "]g0'ykqP[Zgjp3";
      helpFormatter0.setLongOptSeparator("]g0'ykqP[Zgjp3");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOption("");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 31, options0, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.setLongOptSeparator("                                                                          ");
      Options options0 = new Options();
      helpFormatter0.printHelp("]g0'ykqP[Zgjp3", "Q(0Q.=b`h6", options0, "`?chNe", true);
      Options options1 = new Options();
      Options options2 = new Options();
      options1.hasOption("`?chNe");
      Option option0 = new Option((String) null, true, "]g0'ykqP[Zgjp3");
      Options options3 = options0.addOption(option0);
      helpFormatter0.printHelp("o]", options3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("igYtA8PDZ4LBwb<.", " ", options0, " ");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(63, "$yXo7T&1>", "igYtA8PDZ4LBwb<.", options0, (String) null, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, (String) null, "g5G]o>@%", options1, "TZ>9Jdc]{d~J", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "&dk'AFAH]zGz;R J";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "&dk'AFAH]zGz;R J", "]", options0, "F");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.JAPANESE;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "M0Cvwj_1+BP-Mleu", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.printf(locale0, "arg", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "sI4}sT_4aF&*<cI{");
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 64, 1);
      File file0 = MockFile.createTempFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 0, " ", "usage: ", options2, 31, 64, "arg", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-2546), " p^6@baG*&=,#L", "org.apache.commons.cli.HelpFormatter", options0, (-2546), (-2546), "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptSeparator("YC");
      helpFormatter0.createPadding(108);
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "igYtA8PDZ4LBwb<.";
      helpFormatter0.printHelp("igYtA8PDZ4LBwb<.", "", options0, (String) null);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-436), "B4VOd9QvjH|(}f(J2", "                                                                                                            ", options0, " ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      optionGroup0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 9, "", "", options2, 9, 9, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 64, 1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 37, "boD4$WVS5vd9", "\n", options0, (-1), 74, (String) null, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mbleu");
      Locale locale0 = Locale.JAPANESE;
      String string0 = "";
      helpFormatter0.findWrapPos("", 2, 2);
      helpFormatter0.rtrim("7t_d(6kV=cc/22W*6o");
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      String string1 = " | ";
      Option option0 = null;
//      try {
        option0 = new Option("-", false, " | ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "X==y`+_*wxG0", "X==y`+_*wxG0", options0, "X==y`+_*wxG0");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("X==y`+_*wxG0");
      String string0 = "us#;qT";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      options1.getOptionGroups();
      helpFormatter0.printHelp("1L[?cm;", "", options0, "");
      helpFormatter0.getWidth();
      String string1 = " :: ";
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      helpFormatter0.printHelp(1, " :: ", "X==y`+_*wxG0", options1, "X==y`+_*wxG0", false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Locale locale0 = Locale.JAPANESE;
      mockPrintStream0.println((double) 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      options0.getOptions();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("usage: ");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 924, 74, "Cannot add value, list full.");
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "S:'+G_H{p";
      helpFormatter0.setLongOptPrefix("S:'+G_H{p");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "Sl/<BU$M<o", "", options0, "Bor36G3q]k");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      options1.getOptionGroups();
      helpFormatter0.printHelp("arg", "arg", options1, "arg");
      helpFormatter0.getWidth();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      Options options2 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" :: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "*Nl/{", objectArray0);
      mockPrintWriter0.print(3);
      helpFormatter0.printWrapped(printWriter0, 17, " :: ");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter1.setSyntaxPrefix("*Nl/{");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      mockPrintWriter0.printf("usage: ", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2066), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptSeparator("YC");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("_wJ1Nw[Z&4}@(", true, "org.apache.commons.cli.OptionValidator");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '_wJ1Nw[Z&4}@(' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bx5b");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, 74, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options0;
      String string0 = " :: ";
      String string1 = "'";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(63, "", "", options1, "'", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options1;
      mockPrintWriter1.printf("--", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter1, 10, options1, 3494, 13);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 57, "--");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1964, "--", "--", options1, 49, 636, "3", true);
      Options options2 = options0.addOption("", "org.apache.commons.cli.Option", true, "[");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 1832, "arg", "arg", options2, 57, 788, "-", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = new Options();
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printOptions(mockPrintWriter0, 204, options0, 919, 204);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "(Qoo3W>~$o*", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 32;
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      stringBuffer0.codePoints();
      String string0 = "*{";
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 1560, "*{");
      helpFormatter0.setLeftPadding(1560);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1919));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("igYtA8PDZ4LBwb<.", " ", options0, " ");
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "igYtA8PDZ4LBwb<.", "arg", options1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string0 = "'2)v+=l";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("'2)v+=l", "", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      String string0 = "e.qn_:n:?~JR/%}";
      options1.hasLongOption("e.qn_:n:?~JR/%}");
      boolean boolean0 = true;
      String string1 = "";
      helpFormatter0.getArgName();
      int int0 = 1;
      helpFormatter0.createPadding(1);
      Options options2 = new Options();
      options2.getOptionGroups();
      String string2 = "1L[?cm;";
      String string3 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "e.qn_:n:?~JR/%}", options2, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 1;
      helpFormatter0.createPadding(35);
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "";
      String string1 = "waa4>kBTe!3x9;-<+(";
      helpFormatter0.printHelp("waa4>kBTe!3x9;-<+(", "1L[?cm;", options0, "1L[?cm;");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "Gc", "--", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "X==y`+_*wxG0", "X==y`+_*wxG0", options0, "X==y`+_*wxG0");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("X==y`+_*wxG0");
      String string0 = "us#;qT";
      options0.hasLongOption("\n");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      options1.getOptionGroups();
      helpFormatter0.printHelp("1L[?cm;", "", options0, "");
      helpFormatter0.getWidth();
      String string1 = " :: ";
      // Undeclared exception!
      helpFormatter0.printHelp(1, " :: ", "X==y`+_*wxG0", options1, "X==y`+_*wxG0", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("S:'+G_H{p");
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "S:'+G_H{p";
      options0.getOption("\n");
      options0.hasOption((String) null);
      options0.getOptions();
      helpFormatter0.printHelp("Bor36G3q]k", options0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      String string0 = "YC";
      helpFormatter0.setLongOptSeparator("YC");
      helpFormatter0.getLeftPadding();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "arg", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options0;
      mockPrintStream0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter1.printf("--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 21, "-", options1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "(Qoo3W>~$o*", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 74, 74, "V");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = '\'';
      charArray0[2] = 'a';
      charArray0[3] = '-';
      charArray0[4] = 'x';
      charArray0[5] = '}';
      charArray0[6] = 'h';
      charArray0[7] = '8';
      mockPrintStream0.println(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 64, 1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      int int0 = 0;
      String string0 = "I+/vLh(iCe[";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "I+/vLh(iCe[");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      URI uRI0 = MockURI.URI("-");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      CharBuffer charBuffer0 = CharBuffer.allocate(535);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0, 1, 535);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-2365), (-2365), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = 1797;
      helpFormatter0.defaultSyntaxPrefix = "^<fGuaxl>@6J)>e!9";
      helpFormatter0.renderWrappedText(stringBuffer0, 1797, 13, "");
      StringBuffer stringBuffer1 = new StringBuffer(1);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 2289, (Options) null, 2289, 2289);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1797, 13, "");
      StringBuffer stringBuffer1 = new StringBuffer(1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 2289, (Options) null, 2289, 2289);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "";
      Option option0 = new Option("", "--", false, "");
      Options options1 = options0.addOption(option0);
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "X==y`+_*wxG0";
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "X==y`+_*wxG0", "X==y`+_*wxG0", options0, "X==y`+_*wxG0");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("X==y`+_*wxG0");
      String string1 = "us#;qT";
      options0.hasLongOption("\n");
      String string2 = "";
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      String string1 = " | ";
      helpFormatter0.setNewLine("   ");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.cli.AlreadySelectedException");
      stringBuffer0.reverse();
      stringBuffer0.trimToSize();
      // Undeclared exception!
//      try { 
        stringBuffer0.append((CharSequence) "   ", (-1161), 74);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // start -1161, end 74, s.length() 3
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "arg", options1, " ", true);
      Options options2 = new Options();
      Options options3 = new Options();
      options0.hasOption("usage: ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("\"", options3);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "'";
      helpFormatter0.setLongOptSeparator("'");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", "cmdLineSyntax not provided", options0, "cmdLineSyntax not provided");
      helpFormatter0.defaultNewLine = "cmdLineSyntax not provided";
      helpFormatter0.defaultNewLine = "cmdLineSyntax not provided";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getDescPadding();
      String string1 = "Q";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "Q");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Q
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1418);
      String string0 = "!1>P p}%%]1vxE";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("!1>P p}%%]1vxE", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      helpFormatter1.printHelp("usage: ", options1, true);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-686), " ", "", options0, (-187), 3, "7Hn&*ht7LrzP&DV");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      option0.setRequired(true);
      Options options1 = new Options();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printOptions(mockPrintWriter0, 204, options0, 919, 204);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-109);
      helpFormatter0.rtrim("H{`.7},_@a;=C*)Q{m");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 2742, "");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("S:'+G_H{p");
      String string0 = "Bor36G3q]k";
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "S:'+G_H{p";
      options0.hasOption((String) null);
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Bor36G3q]k", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M0Cvwj_1+BP-Mleu";
      MockPrintStream mockPrintStream0 = new MockPrintStream("M0Cvwj_1+BP-Mleu");
      Locale locale0 = Locale.JAPANESE;
      String string1 = "";
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      String string2 = "(Qoo3W>~$o*";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "(Qoo3W>~$o*", objectArray0);
      int int0 = 0;
      String string3 = "V";
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "V");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-415);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      int int0 = 0;
      String string0 = "{^BR]p\"~s9L}:G1";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", false, "{^BR]p\"~s9L}:G1");
      String string1 = ",S=a-7]Y=*y51";
      String string2 = "";
      Option option0 = null;
//      try {
        option0 = new Option(",S=a-7]Y=*y51", "--", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ',S=a-7]Y=*y51' contains an illegal character : ','
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1426);
      helpFormatter0.setOptPrefix((String) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1";
      Options options0 = null;
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "1";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "+u)lW`E<UN", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-3689), (Options) null, (-3689), (-3689));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      String string0 = "<";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      options1.addOption("arg", "", false, "--");
      String string2 = ";\"JKL^5kIiptXQ^Lz<";
      String string3 = "--";
      Option option0 = null;
//      try {
        option0 = new Option(";\"JKL^5kIiptXQ^Lz<", "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ';\"JKL^5kIiptXQ^Lz<' contains an illegal character : ';'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "--");
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, "");
      String string1 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      String string2 = null;
      helpFormatter0.setLeftPadding(1657);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("=", "QR^uuzT%oG#%A[", options0, "", false);
      Options options1 = new Options();
      Options options2 = new Options();
      options0.hasOption("Q(0Q.=b`h6");
      Option option0 = new Option("", false, (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("QR^uuzT%oG#%A[", options2);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.printHelp("-=*pPzy@&", options1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      mockPrintWriter0.append((CharSequence) "usage: ", 3, 3);
      Options options0 = new Options();
      options0.getMatchingOptions("V'.l#3,78");
      helpFormatter0.printHelp("'2)v+=l", "V'.l#3,78", options0, "'2)v+=l", true);
      options0.getOption("`v+Qla|V");
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "", "%[A5`nkU ]6`#6LLk!", options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 64, 1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 3, 3);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, ",+Nkm_04", options0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+y,!WQ_&ni!=";
      int int0 = (-2429);
      helpFormatter0.setWidth((-2429));
      helpFormatter0.defaultArgName = "+y,!WQ_&ni!=";
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("+y,!WQ_&ni!=", "", (Options) null, "4WVk$+At)YaD7Q$");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options2, 1, 44);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+y,!WQ_&ni!=";
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultArgName = "+y,!WQ_&ni!=";
      // Undeclared exception!
      helpFormatter0.printHelp("+y,!WQ_&ni!=", "", (Options) null, "4WVk$+At)YaD7Q$");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2857));
      helpFormatter0.getLongOptSeparator();
      int int0 = 32;
      String string0 = "has already been selected: '";
      String string1 = "T~5C]:Hn";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "--");
      // Undeclared exception!
//      try { 
        options1.addOption("[", false, "2#T");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultNewLine = "Cannot add value, list full.";
      helpFormatter0.defaultDescPad = 0;
      String string0 = "<Z\\dH\\^~-]NL0Ed{NzJ";
      String string1 = "line.separator";
      String string2 = "";
      Options options0 = new Options();
      String string3 = "[ Options: [ short ";
      boolean boolean0 = false;
      String string4 = "";
      Option option0 = null;
//      try {
        option0 = new Option("[ Options: [ short ", "Cannot add value, list full.", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ Options: [ short ' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setArgName((String) null);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "]";
      helpFormatter0.setArgName("]");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "b^\"1Gc\"1^{+";
      MockFile mockFile0 = new MockFile("", "b^\"1Gc\"1^{+");
      helpFormatter0.setLongOptSeparator("b^\"1Gc\"1^{+");
      String string2 = ":<Ab$RsT.5sD";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, ":<Ab$RsT.5sD");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // :<Ab$RsT.5sD
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = "YC";
      helpFormatter0.setLongOptSeparator("YC");
      helpFormatter0.getLeftPadding();
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      PrintWriter printWriter0 = null;
      int int0 = (-76);
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("-", "usage: ", true, "w[5L~rc");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
