/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:29:15 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3022, "8TP", "8TP", options1, "8TP");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 63, 63);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption(option0);
      helpFormatter0.defaultOptPrefix = "arg";
      helpFormatter0.printHelp(3, "usage: ", "-", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, false, "]");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(50, "J;KF*F", "", options3, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "cmdLineSyntax not provided");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 0, "Z>", options1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = " 6,#97gHr3uDI";
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 25, options1, 25, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = new Locale("", "wQ&k&&%ovoKDkW", "wQ&k&&%ovoKDkW");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CQ'?=RJ&g5=bwy:Daa");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Option option0 = new Option("", "krjCf", true, "@o");
      option0.setArgName("");
      options0.addOption(option0);
      helpFormatter0.printHelp(2454, "wQ&k&&%ovoKDkW", "wQ&k&&%ovoKDkW", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printUsage(printWriter0, (-1), "[ARG...]", options0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":q()@[K^,E]m");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("[ARG...]", (-1), (-1));
      String string0 = "\"";
      helpFormatter0.printUsage(printWriter0, 36, "\"", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "\"", options0);
      int int0 = 64;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "-", "-", options0, 64, 2, "-");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "cmdLineSyntax not provided");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(8, "6>!c`f8e", "6>!c`f8e", options0, "6>!c`f8e", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " [ARG]", false, "{P_/ig&N:-7");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1574), options0, 1, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("--");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("f$ei8,;$Fk(<d~", "org.apache.commons.cli.HelpFormatter", (Options) null, "OIr\"", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-1219);
      helpFormatter0.setLeftPadding((-1219));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(32, "6>!c`f8e", "6>!c`f8e", options0, "6>!c`f8e", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 2;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "nr{R5/lf/9_BP", true, "");
      helpFormatter0.defaultWidth = 1;
      options0.addOption("", true, "^");
      options1.helpOptions();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn(54).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      helpFormatter0.printHelp("n_YlkW%~Zewq7A", "\n", options1, "\n", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 1490;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1643), options0, (-4796), (-821));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "cmdLineSyntax not provided";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "org.apache.commons.cli.AlreadySelectedException", " ] [ long ", (Options) null, "org.apach.commons.cl.OptionValidator", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nr{R5/lf/9_BP";
      boolean boolean0 = true;
      options0.getOptionGroups();
      helpFormatter0.setLeftPadding(19);
      Option option0 = new Option("", "-{Xg//t2)c|+YOSG)>", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-{Xg//t2)c|+YOSG)>", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("arg", "", false, "--");
      Option option0 = new Option("", " ] [ long ");
      options1.addOption(option0);
      helpFormatter0.printHelp("-", options1, false);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, ", ");
      options0.addOption(option0);
      Option option1 = new Option("arg", true, "-");
      option1.setArgName("UG}Spd9LQHVRe");
      Options options1 = options0.addOption(option1);
      option1.setRequired(true);
      helpFormatter0.printHelp(8, "arg", "arg", options1, "6>!kc`f8e", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('=');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (-286), ",$$=-$;$");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      option0.setArgName("UG}Spd9LQHVRe");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(8, "arg", "arg", options1, "6>!kc`f8e", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "arg", "arg", options1, "6>!kc`f8e", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "usage: ", (String) null, options0, 31, 1973, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, "arg", true, "usage: ");
      helpFormatter1.printHelp("<", options1, true);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-841), "arg", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, " ", "!_87T4", options0, 3, 463, "The option '", false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      int int0 = 64;
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1442, "The option '", "", options0, 1442, 64, "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(" ", "", (Options) null, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("HZhN!PwLkj", options0, false);
      Option option0 = new Option("", "6#jZ");
      helpFormatter0.defaultWidth = (-3627);
      option0.setRequired(false);
      Options options1 = options0.addOption(option0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 36, "", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1990));
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("' was specified but an option from this group ", (String) null, options0, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      StringWriter stringWriter0 = new StringWriter(11);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 8, (-2357), "G2{Hq|?w;Ro1`<B'");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("", "\n", true, "--");
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " ";
      Options options0 = new Options();
      options0.getOption(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "6>!c`f8e", options0, "0N'TVW>xT4fv", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "nr{R5/lf/9_BP", true, "");
      helpFormatter0.defaultWidth = (-2098);
      options0.addOption("", true, "");
      options1.helpOptions();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("n_YlkW%~Zewq7A", "\n", options1, "\n", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 104;
      String string0 = "q7t7zI\"dyS";
      Options options0 = new Options();
      String string1 = "HZhN!PwLkj";
      helpFormatter0.printHelp("HZhN!PwLkj", options0, false);
      Option option0 = new Option("", "6#jZ");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 104, "q7t7zI\"dyS", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(8, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options1, "6>!c`f8e", false);
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4968), "<[UTY brn8-", "The option '", options0, 184, (-4968), "+Ufs#-w's#^0[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.KOREAN;
      options0.getOption("usage: ");
      helpFormatter0.setWidth((-2));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("$3%L", "", options0, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 74);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1082;
      helpFormatter0.defaultWidth = 1082;
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1082, (Options) null, 1082, 1082);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 808, "Zt@HK.R<zn#c <GncZO", options1);
      helpFormatter0.printOptions(mockPrintWriter0, 808, options1, 0, 0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 22, "}GmcM{RP^q");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.CANADA_FRENCH;
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[0];
      stringBuffer0.append(charArray0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer3 = new StringBuffer(stringBuffer1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer3, (-1), options0, 33, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Option option0 = new Option("", false, "");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1045), "6>!c`f8e", "cmdLineSyntax not provided", options0, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      options0.addOption(option0);
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 97, 1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("p.sL-<DZ1Jzy84", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.print((double) 74);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.ITALY;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " ";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "2Sh,Z(t", "org.apache.commons.cli.Options", options0, 2310, 1698, (String) null, false);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 2353, "org.apache.commons.cli.Options", "", options0, 0, 0, (String) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(8, "org.apache.commons.cli.HulpFormatter$1", "org.apache.commons.cli.HulpFormatter$1", options1, "6>!c`f8e", false);
      helpFormatter0.defaultLeftPad = 8;
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-518), "usage: ", "", options1, "6>!c`f8e");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 8, "\"", "6>!c`f8e", options1, 12, 8, (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("&Vt");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.FRENCH;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object[] objectArray0 = new Object[2];
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 15, "E\"ofe$JO>Mck{", "E\"ofe$JO>Mck{", options1, 15, 32, " ]", false);
      objectArray0[0] = (Object) "&Vt";
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, " ]", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      locale0.getDisplayCountry();
      helpFormatter1.printHelp(printWriter0, 74, "--", "", options0, 1, 424, ":mW9ek>p;`j?", false);
      helpFormatter1.getArgName();
      helpFormatter0.findWrapPos("", 64, 2);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "", "/Xnuq]i^RPa)2v<~h6.", options1, 102, 32, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-329);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("usage: ", "5PgOkMB");
      File file0 = MockFile.createTempFile("' contains an illegal character : '", "' contains an illegal character : '", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('@');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1859, "usage: ", "' was specified but an option from this group ", options0, (-2703), 1859, ":e7");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-9);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("V|{0j5nGqzB/yv", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-14));
      helpFormatter0.createPadding(26);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 2446, (-1), "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      helpFormatter0.findWrapPos("\n", 0, 0);
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-2538));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("&Vt");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.FRENCH;
      mockPrintWriter1.append((CharSequence) "--");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "&Vt";
      objectArray0[1] = (Object) mockFile0;
      mockPrintWriter1.printf(locale0, " ]", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      locale0.getDisplayCountry();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 80, ")f}vHr>|\"oQ}$+B", "", options0, 303, 1, "2e61N%wd>c%-M`p", false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, (-281), "", "arg", options0, 80, 80, "' was specified but an option from this group ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("&Vt");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.FRENCH;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "&Vt";
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, " ]", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      locale0.getDisplayCountry();
      helpFormatter1.printHelp(printWriter0, 74, "--", "", options0, 1, 424, ":mW9ek>p;`j?", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3609);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 110, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-5143), 1041, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "line.separator";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) helpFormatter1;
      objectArray0[7] = (Object) "   ";
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "line.separator", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped(printWriter0, (-164), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(15);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append('^');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 15, "dW1FMG0");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 1;
      StringWriter stringWriter0 = new StringWriter(1);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      boolean boolean1 = true;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "org.apache.commons.cli.HelpFormatter$1", options0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      options0.addOption((String) null, false, " ");
      helpFormatter0.printHelp("$", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("&Vt");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "&Vt";
      objectArray0[1] = (Object) mockFile0;
      mockPrintWriter1.printf(locale0, " ]", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3379, "2Sh,Z(t", "&Vt", options0, 2858, 3379, (String) null, false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, (-1614), options0, 13, 13);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 13, 74, "dWg.eyS[= nsIL");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "nr{R5/lf/9_BP", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$.");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "nr{R5/lf/9_BP";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "$.", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2490, "nr{R5/lf/9_BP", "oq[FJqjrYG`", options1, 31, 2490, "0A z#rn}94g?Sl15|`", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      String string0 = "Zt@HK.R<zn#c <GncZO";
      Options options0 = new Options();
      helpFormatter0.findWrapPos("Zt@HK.R<zn#c <GncZO", 0, 0);
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("-", "\n", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(37, "qSLE{I;TczR=9h]A/{", "g=+ccf", options0, "9\">~RTfA2", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      stringWriter0.append('P');
      stringWriter0.append('P');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "dW1FMG0");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("*", 3126, 37);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      options0.helpOptions();
      Option option0 = new Option("", "*B8^z[raYyLM", true, " ");
      options0.addOption(option0);
      helpFormatter0.printHelp(236, "A0P6gJ9(Is}Da", "$e|'#H@Ln", options0, "*B8^z[raYyLM");
      options0.addOption(option0);
      option0.setDescription("-A>IqoN6R$bV3qQI$Op");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "0N'TVW>xT4fv");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, true, "");
      Options options1 = options0.addOption(option0);
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "", options1, "-4X%A)ufYx0({U(");
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((-1140));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "dW1FMG0");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-854);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "\n", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3371), (-3371), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      options0.addOption("", "--", false, "--");
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "usage: ");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      helpFormatter0.printHelp(", ", "<", options1, "<");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 1, (byte)9);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      mockFileOutputStream0.release();
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "Zt@HK.R<zn#c <GncZO", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 0, (-1739));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("u&r*_uZ-Kvxr");
      helpFormatter0.defaultDescPad = 9;
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("e`hUt/nVgi0e<s4t$06");
      int int0 = 3;
      String string0 = "&4";
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "c-Zil K");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("--", false, "QC$W^R()@#,");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      char[] charArray0 = new char[0];
      mockPrintWriter0.print(charArray0);
      int int0 = (-1);
      String string0 = ">x/&4Xd1+F`'S$qPh";
      helpFormatter0.printUsage(printWriter0, 1689, ">x/&4Xd1+F`'S$qPh");
      Options options0 = new Options();
      String string1 = "A CloneNotSupportedException was thrown: ";
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ");
      Options options1 = options0.addOption(option0);
      String string2 = "dd{GGJDqGrC";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("usage: ", "dd{GGJDqGrC", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "dW1FMG0");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("", "*B8^z[raYyLM", true, " ");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "0N'TVW>xT4fv");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "btA";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 1787;
      int int1 = 140;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1787, 140, "");
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = ']';
      charArray0[3] = 'n';
      charArray0[4] = '1';
      charArray0[5] = '3';
      charArray0[6] = '}';
      // Undeclared exception!
//      try { 
        stringBuffer1.insert(44, charArray0, 44, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 44
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultOptPrefix = "D5";
      helpFormatter0.setWidth(1);
      helpFormatter0.setLeftPadding(1032);
      helpFormatter0.setDescPadding(10);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2459;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(2459);
      helpFormatter0.createPadding(2459);
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1497), (-1497), "org.apache.commons.cli.Options");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("TZ(oOJ_VRjS)N");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('Z');
      int int0 = 1328;
      String string0 = "";
      String string1 = "<`Z%,l%4p`11D\"_mB7";
      Options options0 = new Options();
      mockFile0.setWritable(true, true);
      String string2 = "";
      // Undeclared exception!
//      try { 
        options0.addOption(" ", (String) null, true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      URI uRI0 = MockURI.URI("arg");
      String string0 = "D5Gw=d#qI";
      helpFormatter0.setOptPrefix("D5Gw=d#qI");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("|RB", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '|RB' contains an illegal character : '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("&Vt");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.forLanguageTag("arg");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "&Vt";
      objectArray0[1] = (Object) mockFile0;
      mockPrintWriter1.printf(locale0, " ]", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3379, "2Sh,Z(t", "&Vt", options0, 2858, 3379, (String) null, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1728), " LHrg/+Ry", "", options0, (-1728), 2858, "oq[FJqjrYG`", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultSyntaxPrefix = "Cannot add value, list full.";
      Options options0 = new Options();
      options0.hasOption("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("`B", options0, true);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((String) null, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("`?d]_}~k<g6r!<AHs", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer(21);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = " ";
      int int0 = (-854);
      String string2 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-854), (String) null, "", options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nr{R5/lf/9_BP";
      Options options1 = options0.addOption("arg", "nr{R5/lf/9_BP", true, "");
      Option option0 = new Option("B", true, "Khah@xK#T1PE");
      options0.addOption(option0);
      options0.addOption("", true, "");
      options1.helpOptions();
      helpFormatter0.printHelp("n_YlkW%~Zewq7A", (String) null, options1, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "f.60]wfNWRz'ak;");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "P,a-5ZTF$ksqz4490", true, "usage: ");
      Options options2 = options1.addOption("", true, "");
      options2.addOption("", true, "'");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options1, true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(", ", "<", options1, "<");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "nr{R5/lf/9_BP", true, "");
      options0.addOption("", true, "");
      options1.helpOptions();
      helpFormatter0.printHelp("n_YlkW%~Zewq7A", (String) null, options1, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "f.60]wfNWRz'ak;");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.setLeftPadding((-714));
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "h^DtUTxW>?l");
      Options options2 = options1.addOption("", (String) null, false, (String) null);
      String string0 = "L};[u//(vJdL?J#xb";
      options0.getOption("");
      Option option0 = new Option("", "L};[u//(vJdL?J#xb");
      options1.addOption("", false, (String) null);
      Options options3 = options2.addOption(option0);
      options3.hasLongOption("--");
      options0.getOptionGroups();
      option0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options3, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("<", options0);
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.HelpFormatter$1", false);
      mockFileOutputStream0.release();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "Zt@HK.R<zn#c <GncZO", options0);
      helpFormatter0.defaultArgName = "Zt@HK.R<zn#c <GncZO";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5, "]");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "P,a-5ZTF$ksqz4490", true, "usage: ");
      Options options2 = options1.addOption("", true, "");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "BE", options2, "P,a-5ZTF$ksqz4490", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("", "-", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.helpOptions();
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("&9zF~M;<AD", options2);
      helpFormatter0.getSyntaxPrefix();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("E", options1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "-";
      helpFormatter0.printHelp("-", options2);
      MockFile mockFile0 = new MockFile(" ", "arg");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "*2miG)r!X2h<P;<Jq");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // *2miG)r!X2h<P;<Jq
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-4680), "dW1FMG0");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = "";
      String string1 = "org.apache.commons.cli.OptionValidator";
      options1.addOption("arg", "arg", true, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.printHelp("?^=2YZ$]8", options1, true);
      Option option0 = new Option("", true, "2&,C::b|6N~`$f>}");
      Options options3 = options2.addOption(option0);
      String string2 = "mB";
      options3.hasLongOption("mB");
      boolean boolean0 = false;
      String string3 = "";
      Options options4 = options3.addOption("r", "--", false, "");
      options4.getOption((String) null);
      String string4 = "";
      helpFormatter0.printHelp(34, "sR<", "sR<", options4, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-183);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-183));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.setWidth(9);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = "44Q[NK\\YfBg*";
      Options options0 = new Options();
      String string2 = "";
      // Undeclared exception!
//      try { 
        options0.addOption(" ", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(44);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("--");
      int int0 = (-194);
      String string0 = "";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("--", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1573, 1573, "");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix("[nf.Mo'<H?dfa");
      helpFormatter0.defaultArgName = "[nf.Mo'<H?dfa";
      String string0 = "THl9?H:";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2602, 0, "THl9?H:");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'U';
      charArray0[2] = 'n';
      charArray0[3] = '8';
      charArray0[4] = '7';
      mockPrintWriter0.write(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      String string0 = "*k\\t]b^Jt";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-735), "*k\t]b^Jt");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3211;
      helpFormatter0.getOptPrefix();
      String string0 = "-";
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "~{#I?");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      PrintWriter printWriter0 = null;
      int int0 = 9;
      String string0 = "51<Fwn)u)+qGz~;@";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "PMLh0j<?";
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "", true, "PMLh0j<?");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
