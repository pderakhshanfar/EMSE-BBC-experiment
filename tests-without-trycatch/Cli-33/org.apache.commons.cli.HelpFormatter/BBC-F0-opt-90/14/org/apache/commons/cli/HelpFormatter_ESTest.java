/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 03:47:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-129));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", " ", options0, " ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("?", "--");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      helpFormatter0.printHelp((-1), "r|", (String) null, options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      options0.addOption("arg", "--", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1828), "org.apache.commons.cli.ParseException");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLeftPadding(536);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 4773, 4773, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.defaultWidth = (-617);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("vd!q", "vd!q", (Options) null, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultNewLine = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 77, 2, "zAJz>#P$3W~{S:R");
      helpFormatter0.renderWrappedText(stringBuffer1, 77, 2, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "4g ";
      Options options0 = new Options();
      String string1 = "|hO\"-\"i!c~\"~=0M%";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 13, (-244));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "NMHdpdN:5x !tAoG");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "<", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "NMHdpdN:5x !tAoG");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp(102, "usage: ", "usage: ", options2, "-", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("X]", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "org.apache.commons.2li.HelpFormatter$OptionComparator";
      int int0 = 48;
      helpFormatter0.renderOptions((StringBuffer) null, 48, options0, 3749, 3749);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 48, 48, "org.apache.commons.2li.HelpFormatter$OptionComparator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.defaultNewLine = "\t%E4s1g#9'SG+N0P";
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 9, "arg");
      helpFormatter0.defaultArgName = "\t%E4s1g#9'SG+N0P";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "++{&1sAV0\";$'Tf[");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("55+5:Yr", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ITALIAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "J+V,", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1283, "55+5:Yr", ">~h", options0, 31, (-1834), "BtTS,^R*mIB\"V][");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options2 = options1.addOption("I", "arg", true, "usage: ");
      Options options3 = options2.addOption("", "", true, "--");
      options3.getOption("<TW");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("I", options3);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.AlreadySelectedException", options1);
      helpFormatter0.findWrapPos("U9?t\"'Xf5i+Yv[9", 74, 9);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1838), "org.apache.commons.cli.ParseException", "", (Options) null, "' was specified but an option from this group ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "", false, "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 148;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 148, options0, 148, 148);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("O4h!N~C3`9Uv`<(");
      Options options1 = options0.addOption("arg", "?>N", true, "usage: ");
      helpFormatter0.printHelp(29, "ynTx-1n-0*", "ynTx-1n-0*", options0, "ynTx-1n-0*", false);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.printf("usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 29, options1, 29, 1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("S?L>Ih&n,`");
      helpFormatter0.defaultLongOptPrefix = "sL.O&5(oZ4{dmo`,";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("S?L>Ih&n,`", "sL.O&5(oZ4{dmo`,", (Options) null, "#v6h]co8m<KzN'ZLWi?");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.printHelp(2, "   ", "<", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@@");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 311, "org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null, options0, 311, 70, "@@", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setLeftPadding((-140));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("ewu", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("\n");
      helpFormatter0.getArgName();
      helpFormatter1.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1021, "", "arg", options0, 1456, 1456, " ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("N&En~");
      Options options0 = new Options();
      options0.addOption((String) null, "", true, "-");
      helpFormatter0.findWrapPos("Q?FB5jj65K<9", (-1), 2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "$v\"do!q", "<", options0, "<", false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-3230));
      helpFormatter0.setOptPrefix("has already been selected: '");
      helpFormatter0.setNewLine("org.apache.commons.cli.OptionValidator");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2728, "Cannot add value, list full.", " ", options0, (String) null, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 70;
      StringBuffer stringBuffer0 = new StringBuffer(70);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) helpFormatter1;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 74, (Options) null, 7, 13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options2 = options1.addOption("I", "arg", true, "usage: ");
      options2.toString();
      options2.addOption("", "", true, "--");
      Options options3 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-114), "Illegal option name '", "I", options1, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("N&En~");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("N&En~");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptionComparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("NO_ARGS_ALLOWED");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(70);
      StringBuffer stringBuffer1 = stringBuffer0.append((long) 74);
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 74, "\n");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "", "arg", options0, "\n", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(137);
      stringBuffer0.append(0L);
      int int0 = 5;
      String string0 = "org.apache.commons.cli.ParseException";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1387), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("has already been selected: '");
      helpFormatter0.setNewLine("org.apache.commons.cli.OptionValidator");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(2728, "Cannot add value, list full.", " ", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      options0.hasLongOption("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gB'8h)XM");
      int int0 = helpFormatter0.defaultLeftPad;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 110, 1, " | ");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options1 = new Options();
      int int1 = 1846;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "]", "J2", options1, 1846, 0, "[", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(74);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(9, " ]", "", (Options) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      File file0 = MockFile.createTempFile("usage: ", "--", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      int int0 = (-3874);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1066, "", "", options0, (-3874), 1066, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      File file0 = MockFile.createTempFile("usage: ", "--", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "[ARG...]", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1066, "", "", options2, 696, 696, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      String string0 = "arg";
      options0.hasLongOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.setOptPrefix("5_@;nMsc#8L ");
      helpFormatter0.getArgName();
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 925, "5_@;nMsc#8L ", "ZU5{CpAw", options1, 74, 925, (String) null, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, ":5=$3n");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 64, "");
      helpFormatter0.getLeftPadding();
      options1.addOption("arg", true, " ");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      stringBuffer0.append(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1464), 921, "Ux/i");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-239), "'eYlm\"5;6O}'");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 17;
      StringBuffer stringBuffer0 = new StringBuffer(17);
      int int1 = 4705;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 17, 4705, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      options0.hasLongOption("\n");
      options0.hasLongOption("\"");
      helpFormatter0.printHelp(74, "arg", "", options0, "arg");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 5, "]B>MRpy", ", ", options0, 5, 5, ", ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options2 = options1.addOption("I", "arg", true, "usage: ");
      Options options3 = options2.addOption("", "", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("I", options3);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("-", options4, true);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "N", options1, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "C{=?tFC*3vu)A[]bRL[";
      helpFormatter0.setSyntaxPrefix("C{=?tFC*3vu)A[]bRL[");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      int int0 = 10;
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix("C{=?tFC*3vu)A[]bRL[");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",h>3W#60");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1846, "[", "[", options1, 0, 0, "Ynz\"f1cxnc", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1508), "Ynz\"f1cxnc");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption((String) null, "", false, "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options2 = options1.addOption("I", "arg", true, "usage: ");
      options2.addOption("", "", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("ghreiH[+jj=|7o0", options2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = new StringBuffer(33);
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("N-");
      helpFormatter0.getArgName();
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "", "--", options1, 3, 1, "%]Bp]m9@k9\"", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("C{=?tFC*3vu)A[]bRL[");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix("C{=?tFC*3vu)A[]bRL[");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options1 = new Options();
      int int1 = 1846;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "]", "J2", options1, 1846, 0, "[", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(137);
      helpFormatter1.renderWrappedText(stringBuffer0, 20, 137, "\n");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1526, options0, 1, (-2098));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append(true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", options1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.ensureCapacity(1);
      StringBuffer stringBuffer1 = stringBuffer0.append(true);
      int int0 = 10;
      helpFormatter0.renderOptions(stringBuffer0, 18, options1, 67, 10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) stringBuffer1;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      helpFormatter0.findWrapPos(" ", 67, 1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 108, (String) null, "", options0, 108, 10, "has already been selected: '", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 12;
      helpFormatter0.defaultWidth = 12;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("P65", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("has already been selected: '");
      helpFormatter0.setNewLine("org.apache.commons.cli.OptionValidator");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.OptionValidator", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", true, "-");
      helpFormatter0.printHelp(63, "W95xV{<qn*#uP!D", "o-:!Ei", options3, "bTAnYVQ9}KTq");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 2926, 0, "org.apache.commons.cli.AlreadySelectedException");
      Options options1 = new Options();
      Options options2 = options0.addOption("", true, (String) null);
      helpFormatter0.renderOptions(stringBuffer0, 32, options2, 32, 1889);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      options1.getMatchingOptions("sZYDa:PO_|X[~s)z4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      options2.addOption((String) null, "   ", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options2 = options1.addOption("I", "arg", true, "usage: ");
      options2.addOption("", "", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("ghreiH[+jj=|7o0", options2);
      Option option0 = new Option((String) null, "ghreiH[+jj=|7o0", false, "rM2(gI<B5W");
      Options options3 = options0.addOption(option0);
      helpFormatter0.printHelp("cmdLineSyntax not provided", " ;_!p%.!a", options3, "\n", true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.printHelp("f&cURBcoX?n&#yadlh", "[i~@5UCY?>y", options0, "OHwraP0H*4sbFqUv", true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      options0.addOption("arg", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer2, 3, options0, 2772, 3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(10, "--", "-", options0, "usage: ", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", " ", options1, "&", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append(true);
      helpFormatter0.renderOptions(stringBuffer0, 18, options1, 67, 10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) stringBuffer1;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 108, (String) null, "", options0, 108, 10, "has already been selected: '", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.getLeftPadding();
      Options options1 = options0.addOption("arg", "r[", false, "$?");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      StringBuffer stringBuffer3 = stringBuffer2.append(false);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer3, 1, options1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption((String) null, "", false, "-");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      int int0 = 11;
      helpFormatter0.printHelp(printWriter0, 96, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, 64, 11, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 29, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("C{=?tFC*3vu)A[]bRL[");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.getLeftPadding();
      Options options1 = options0.addOption("arg", "r[", false, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(811);
      stringWriter1.getBuffer();
      StringBuffer stringBuffer3 = stringBuffer2.append(false);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer3, (-2294), options1, 1, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("$HQx!NiAEe\"uyupg2J");
      helpFormatter0.rtrim("-");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("$HQx!NiAEe\"uyupg2J", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      options1.addOption("", false, "");
      String string2 = " ";
      String string3 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-607), "arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, (-607), 21, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(32);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 32, options0, 32, 10);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      options0.getMatchingOptions("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Options options1 = new Options();
      String string1 = "8%/<0boiewm,&&x";
      String string2 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "8%/<0boiewm,&&x", "", options0, 614, (-1), "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", "-").when(comparator0).toString();
      int int0 = 31;
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasLongOption("\n");
      helpFormatter0.printHelp(31, "Z::w{yEXlnm}7'jR6 $", "", options0, "Z::w{yEXlnm}7'jR6 $");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "usage: ";
      String string1 = ":CJe3^KZ<*hDc\\{G";
      helpFormatter0.printHelp("Z::w{yEXlnm}7'jR6 $", "usage: ", options0, ":CJe3^KZ<*hDc{G", false);
      String string2 = null;
      options0.addOption((String) null, false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("usage: ");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "org.apache.commons.cli.OptionValidator", "arg", options0, "j=F~`\"T:D.$");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.printHelp("8.P*3..wzS{LAIRr3W", "--", options0, "--", false);
      helpFormatter0.printHelp(5191, " ", "<", options0, "org.apache.commons.cli.OptionValidator");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "8.P*3..wzS{LAIRr3W", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.hasLongOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "org.apache.commons.cli.OptionValidator", "arg", options0, "j=F~`\"T:D.$");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.printHelp("8.P*3..wzS{LAIRr3W", "--", options0, "--", false);
      helpFormatter0.printHelp(5191, " ", "<", options0, "org.apache.commons.cli.OptionValidator");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "8.P*3..wzS{LAIRr3W", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 96, options0, 816, 0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(u5^f6xU\u0000AgRtu:a\"c");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-4307), "-", (String) null, options0, (-1536), 1, "-", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      Options options0 = new Options();
      String string0 = "";
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "P|%tCD";
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) " ] [ long ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = (-1000);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1000), "--", "wDIW", options0, 1173, 1173, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("]h!Dno:", options1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1000);
      String string0 = "<";
      Options options0 = new Options();
      options0.hasLongOption("<");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1000), "<", "<!Q)Hq<9~|s>dg/v", options0, "<");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("C{=?tFC*3vu)A[]bRL[");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      options0.getMatchingOptions("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = ']';
      charArray0[2] = '~';
      charArray0[3] = 'r';
      stringWriter1.write(charArray0, 3, 0);
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "TwKHIAB", objectArray0);
      helpFormatter0.printHelp(printWriter0, 10, "arg", "-", options0, 10, 0, "u{Z&#cudl");
      helpFormatter0.setLongOptSeparator("C{=?tFC*3vu)A[]bRL[");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "l0h5gLJ+", options1, "-");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptPrefix("r,B1@yY~! ");
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("\n", "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options0, "G-tn?pI");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Option option0 = new Option("arg", false, "\n");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        options2.addOption("org.apache.commons.cli.HelpFormatter$1", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      int int1 = 1;
      helpFormatter0.setWidth(1);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "";
      Option option0 = null;
//      try {
        option0 = new Option("\n", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      int int0 = 31;
      Options options0 = new Options();
      options0.addOption("", "", false, " ");
      Option option0 = null;
//      try {
        option0 = new Option("-", "X[R#tgT~", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "C{=?tFC*3vu)A[]bRL[";
      helpFormatter0.setSyntaxPrefix("C{=?tFC*3vu)A[]bRL[");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "C{=?tFC*3vu)A[]bRL[");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\t%E4s1g#9'SG+N0P";
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1), 3);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "The option '";
      helpFormatter0.setLongOptSeparator("line.separator");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("f!wh");
      int int0 = 0;
      String string0 = " :: ";
      String string1 = "[ option: ";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "etn^}=@mPy*r'3e");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasLongOption((String) null);
      Option option0 = null;
//      try {
        option0 = new Option("[ option: ", "etn^}=@mPy*r'3e", false, "Cannot add value, list full.");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ option: ' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("C{=?tFC*3vu)A[]bRL[");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix("C{=?tFC*3vu)A[]bRL[");
      helpFormatter0.getArgName();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("C{=?tFC*3vu)A[]bRL[", "arg", options0, "arg", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "mc+Y+:z\"8-M|P<", "-", options0, "]");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.append((long) 74);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", (String) null, options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("C{=?tFC*3vu)A[]bRL[");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 10);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix("C{=?tFC*3vu)A[]bRL[");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "]", "J2", options1, 1846, 0, "[", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1846, "arg");
      options1.getOptions();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile(" ", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("N&En~");
      int int0 = (-1);
      String string0 = null;
      Options options0 = new Options();
      options0.addOption((String) null, "", true, "-");
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(44);
      helpFormatter0.setArgName("l+4Lyyf'`^");
      helpFormatter0.defaultLeftPad = 2046;
      helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "'");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Z::w{yEXlnm}7'jR6 $";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("Z::w{yEXlnm}7'jR6 $");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string1 = "P|%tCD";
      Options options0 = new Options();
      int int0 = 614;
      boolean boolean0 = true;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "P|%tCD", "--", options0, 614, 614, "", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 614, "P|%tCD");
      options0.getOptions();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "--", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("h-2Eg^Eyq.T9f/vkDj");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = null;
//      try {
        mockPrintStream1 = new MockPrintStream(objectOutputStream0, true, "AZ8rsU?VR+U-TF@!,1R");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // AZ8rsU?VR+U-TF@!,1R
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "--", false, "org.apache.commons.cli.HelpFormatter$1");
      options2.toString();
      Option option0 = new Option("wW", "j", false, "\n");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options3, (-1), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("9ht^;hgG\"A(");
      int int0 = (-1691);
      String string0 = "--";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      // Undeclared exception!
//      try { 
        options1.addOption("--", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1021, "<", "[Y3%I[X4xW", options0, 20, 74, "<", true);
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, (-3610), options0, 13, 20);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", "                                                                          ", (Options) null, "org.apache.commons.cli.Option", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1000);
      String string0 = "<!Q)Hq<9~|s>dg/v";
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1021, "--", "<", options0, (-1000), 1021, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(32);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 32, options0, 32, 10);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      options0.getMatchingOptions("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = ']';
      charArray0[2] = '~';
      charArray0[3] = 'r';
      stringWriter1.write(charArray0, 3, 0);
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "TwKHIAB", objectArray0);
      helpFormatter0.printHelp(printWriter0, 10, "arg", "-", options0, 10, 0, "u{Z&#cudl");
      helpFormatter0.setLongOptSeparator("");
      assertEquals("", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("R");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      helpFormatter0.printWrapped(printWriter0, 0, 1, "");
      helpFormatter0.defaultLongOptPrefix = "+";
      helpFormatter0.setNewLine("+");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("R");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("[ARG...]");
      assertEquals("+", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "\n");
      Options options2 = options1.addOption("", false, "");
      Option option0 = new Option((String) null, "arg", false, "J&o3r(o+__--=O6");
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$OptionComparator", options2, " ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "l0h5gLJ+";
      helpFormatter0.setOptPrefix("l0h5gLJ+");
      Options options0 = null;
      helpFormatter0.defaultArgName = "l0h5gLJ+";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("l0h5gLJ+", "l0h5gLJ+", (Options) null, "l0h5gLJ+", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ] [ long ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) " ] [ long ";
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " ] [ long ";
      objectArray0[5] = (Object) "4dT,CT!7P]d3&1+s";
      objectArray0[6] = (Object) "4dT,CT!7P]d3&1+s";
      PrintWriter printWriter0 = mockPrintWriter0.printf("4dT,CT!7P]d3&1+s", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.PRC;
      mockPrintWriter1.printf(locale0, "-", objectArray0);
      int int0 = 655;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("B-t)9nz~KvUuM", "\"", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'B-t)9nz~KvUuM' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
