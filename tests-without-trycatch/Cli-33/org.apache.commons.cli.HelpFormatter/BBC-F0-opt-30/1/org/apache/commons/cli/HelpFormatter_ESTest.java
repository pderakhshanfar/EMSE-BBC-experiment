/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:44:15 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultOptPrefix = "2^KU$Xk,a";
      Option option0 = new Option("", true, "a!l)");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "464aEoJ-7D_|JEU%");
      option1.clone();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp(16, " ", " ", options0, "usage: ", true);
      helpFormatter0.rtrim("464aEoJ-7D_|JEU%");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultOptPrefix = "0a8F\"";
      helpFormatter0.getLongOptSeparator();
      int int0 = 32;
      helpFormatter0.createPadding(32);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
//      try { 
        MockURI.URI("                                ", "--", "Rvg1~", "", "                                ");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI:                                 ://--Rvg1~?#%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(73);
      helpFormatter0.createPadding(73);
      helpFormatter0.findWrapPos("F\"S]", 1811, 1811);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("                                                                         ", options0, false);
      helpFormatter0.getOptPrefix();
      String string0 = "";
      helpFormatter0.findWrapPos("", 73, 1811);
      options0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "[ Options: [ short ", options0, "                                                                         ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, ";t[<@*=m?84o1");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      optionGroup0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "%SRzh+`CbB", "%SRzh+`CbB", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      helpFormatter0.defaultDescPad = (-2);
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(16, " ", " ", options0, "usage: ", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "usage: ", false, "KbB_28AM4>9+K*7 ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "--", options0, 74, 3, "-", true);
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
      String string0 = "lZ fw@~5=wt3$R~Bh|h";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P@G^3`QA-$rS");
      int int0 = (-1129);
      helpFormatter0.findWrapPos("lZ fw@~5=wt3$R~Bh|h", (-1129), (-1129));
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "P@G^3`QA-$rS", 3, (-786));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), (Options) null, 18, 117);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("arg", "arg", options0, "arg");
      options0.hasOption("'\"kG'ZQ.1o");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 19, 74);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[3];
      mockPrintWriter0.println((-1.0F));
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-2050), "w9>");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "464aEoJ-7D_|JEU%");
      option0.clone();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp(16, " ", " ", options0, "usage: ", true);
      helpFormatter0.rtrim("464aEoJ-7D_|JEU%");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, ".'.^tI4F", true, "");
      options0.addOption(option0);
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("arg", "arg", options0, "arg");
      helpFormatter0.findWrapPos("", (-1), 3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setWidth(0);
      options1.addOption("", false, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", "usage: ", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "464aEoJ-7D_|JEU%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", ");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) option0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "464aEoJ-7D_|JEU%";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 115, "", options1);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      String string0 = helpFormatter0.defaultNewLine;
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 788;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1115), "=W_knR`", "2,54Q", options0, "_|-!7Tf6|W");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 27;
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1100), (-1325), "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", true, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-2), "arg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "464aEoJ-7D_|JEU%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp(16, "arg", "arg", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "arg";
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("arg", "arg", options0, "arg");
      Option option0 = new Option("", true, "\"HsHrx");
      options0.addOption(option0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.append('j');
      helpFormatter0.defaultSyntaxPrefix = "";
      MockFile mockFile0 = new MockFile((String) null, "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 'j', (-2978));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('h');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 4623, "-", options0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter1.printHelp("\n", "usage: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "r}");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "Nv");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-854), options1, 74, 564);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-79));
      Options options1 = options0.addOption("", false, "usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "", "arg", options1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ":r";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 2767, (Options) null, 2767, 2767);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(36);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      helpFormatter0.renderOptions(stringBuffer1, 36, options0, 2, 16);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("arg", "arg", options0, "arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-915);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("/x*<}'uueBx", "", options0, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", false, "line.separator");
      helpFormatter0.printHelp("arg", " :: ", options1, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "org.apache.commons.cli.ParseException", "", options0, (-1), (-1), "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter1.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "Z?S)p8Xf|gNd&", "arg", options1, "--", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "line.separator");
      helpFormatter0.printHelp("--", options2, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(" (XV4#inoSFYaI", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setDescPadding((-258));
      helpFormatter2.setArgName("-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("E~-~/-/no}Oom}'r{9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "g6%]2'}9+fm", options0, 1, 2, (String) null, false);
      options0.getMatchingOptions("--");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 9, "eU^%d", "QRgb8Zd}\"^Ztn", options0, 1740, (-258), "SeVlosk");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setLongOptSeparator("\n");
      helpFormatter1.printHelp(" (XV4#inoSFYaI", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(1);
      helpFormatter2.setArgName("org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "The option '");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2145, " ", "dG;uNl7lUKd7a#", (Options) null, "[ option: ", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(44);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "=sL#2e)M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "|K-f^<LkLc$", (String) null, options2, 44, (-1), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(44);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, (String) null);
      helpFormatter1.printHelp(" :: ", " ", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 24, options0, 24, 24);
      helpFormatter0.setDescPadding(24);
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-6848));
      helpFormatter0.setArgName("--");
      MockFile mockFile0 = new MockFile("-", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      mockFile0.setExecutable(true, false);
      mockFile0.toPath();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 23, "usage: ", "org.apache.commons.cli.AlreadySelectedException", options0, 43, 43, "-", false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 23, "usage: ", "-", options0, (-1675), 43, "-");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printOptions(mockPrintWriter0, 74, options0, 1, 66);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setLongOptSeparator("\n");
      helpFormatter1.printHelp(" (XV4#inoSFYaI", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(1);
      helpFormatter2.setArgName("org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "--", options0, (-2303), 74, "-", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      helpFormatter0.setArgName("#{r%lL^TPe(]!mK+");
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      mockFile0.setExecutable(false, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "", options0, (-820), 2306, "ci:3nCb3[D ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(74);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.findWrapPos("", 948, 948);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 948, "                                                                          ");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(44);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("-", "-", options0, "");
      MockFile mockFile0 = new MockFile("P", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      options0.getOption("aKK:lPstPu");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter1.printHelp(printWriter0, 74, "Mn?y_P)`!6_!o=F", "t($v]c@^|}vx~k?", options0, 74, 1, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(260);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(260);
      helpFormatter1.setArgName("q1Y+yq4PE]g(");
      MockFile mockFile0 = new MockFile("Vk?", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "k{");
      Options options1 = options0.addOption("arg", false, "jX.[W\"h%0 U");
      options1.addOption((String) null, "FLP:/lkYU.", false, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "q1Y+yq4PE]g(", " ", options1, 1, 2864, "--");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 354, "^:O6}~(Sc>}Me=cO", "^:O6}~(Sc>}Me=cO", options0, (-2141), 2584, "7`DONPI78!\"?", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      Option option0 = new Option("", ".vbg\"M_-`GBD[rVGyb%");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3, "}>,HNLS", "}>,HNLS", options0, "5pNUkk", false);
      helpFormatter0.setLongOptPrefix("5pNUkk");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.createPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("qd[:[");
      helpFormatter0.setDescPadding((-1622));
      helpFormatter0.setArgName(" ");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "", options1, "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(260);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(260);
      helpFormatter1.setArgName("q1Y+yq4PE]g(");
      MockFile mockFile0 = new MockFile("Vk?", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "jX.[W\"h%0 U");
      Options options2 = options1.addOption((String) null, "FLP:/lkYU.", false, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options2, 3, 1, "", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, true);
      helpFormatter0.setDescPadding(43);
      helpFormatter1.setArgName("z=CZw<A($yZ<d");
      options0.toString();
      MockFile mockFile0 = new MockFile("oCx4", "O%`5CFtBQj?)zW%dT");
      MockFile mockFile1 = new MockFile("kH1&|uNesWeaGX09{>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "M|pmY(Q_RYD,i/~gd\"", "6K!\"e]F", options0, 74, (-1), "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-45));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", "--", options0, "arg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      helpFormatter0.setDescPadding(44);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(376);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "                               ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 585, options0, 31, 1183);
      helpFormatter1.rtrim("&>3V| iNuByNMtV");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("DMI1)", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setDescPadding((-2078));
      helpFormatter0.setArgName("r) ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("o3oo3rtK'dAV2[&}tz", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setArgName(" ");
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setArgName(" ");
      helpFormatter0.printHelp("|R", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 8, 2291, " ");
      helpFormatter0.createPadding(17);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(44);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("\n", "", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")CI%4C:(8y v[m!^");
      helpFormatter0.defaultNewLine = ")CI%4C:(8y v[m!^";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer("HHVG^Y");
      int int0 = 2795;
      stringBuffer0.reverse();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")CI%4C:(8y v[m!^");
      helpFormatter0.renderWrappedText(stringBuffer0, 2795, 2795, "CGL}`'tmZ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "&~;OA#_M]xq", true, "--");
      options1.getMatchingOptions("/@&a;]=y@{rtB[{/-PR");
      helpFormatter0.printHelp("HHVG^Y", options1, true);
      helpFormatter0.printHelp("&~;OA#_M]xq", options0, true);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.optionComparator = null;
      String string0 = "7`DONPI78!\"?";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      String string2 = "j#v6G ZAmj<d)Od";
      Options options1 = options0.addOption("arg", " ", true, "j#v6G ZAmj<d)Od");
      helpFormatter0.printHelp("j#v6G ZAmj<d)Od", options1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(41);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      CharBuffer.allocate(3);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "7`DONPI78!\"?", 3555, 3555);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(652, "arg", "arg", options1, "arg", true);
      helpFormatter0.setDescPadding((-36));
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setArgName(" ");
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "arg", " ", options0, 3, (-2141), "^:O6}~(Sc>}Me=cO", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      int int0 = 35;
      String string0 = "";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 35, "", "", (Options) null, 9, 9, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp("v<DZ", options1);
      helpFormatter0.defaultWidth = 16;
      helpFormatter0.rtrim("b?&'[0Sz%X>HpvGAp9");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "XD@>_", "b?&'[0Sz%X>HpvGAp9", options1, 16, 3, "3tY&+E2&A)>.7y yW", false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = options2.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jz!/XQS6");
      mockPrintWriter0.print((Object) optionGroup0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printWrapped(printWriter0, 86, "z/'f) )kG@K/2E=");
      helpFormatter1.findWrapPos("arg", (-17), 2107);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1894, (String) null, ":}YDN&JqHCmeC", options3, 0, 0, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      Option option0 = new Option("", ".vbg\"M_-`GBD[rVGyb%");
      Options options0 = new Options();
      options0.addOption((String) null, true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".vbg\"M_-`GBD[rVGyb%");
      mockPrintWriter0.print((Object) "");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos("", 1, 1482);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, (-1320), "[", "6OdkPT~lj);>=o|@yE", options0, 74, (-462), ")Kz7");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("5<i)[*oQ;3+pl+", options0, true);
      helpFormatter1.setArgName("5<i)[*oQ;3+pl+");
      helpFormatter1.printHelp("arg", "", options0, "-", false);
      helpFormatter1.getArgName();
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("v<DZ", options1);
      helpFormatter0.defaultWidth = 3;
      options0.hasLongOption("");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("15A'8|=Wv$t{h");
      Options options2 = new Options();
      options1.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "v<DZ", options2, "15A'8|=Wv$t{h", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.getLeftPadding();
      Options options2 = new Options();
      Options options3 = options1.addOption((String) null, true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((Object) options3);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter1.printWrapped(printWriter0, 1, "[1n%Vir<nkm");
      helpFormatter0.findWrapPos("[1n%Vir<nkm", 3, 74);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "i)^$gjBSR~& jR$Un", "usage: ", options0, 74, 3, "i)^$gjBSR~& jR$Un");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1482;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ] [ long ", "", options0, ".vbg\"M_-`GBD[rVGyb%");
      PrintWriter printWriter0 = null;
      helpFormatter0.printHelp("   ", "O", options0, "}>,HNLS");
      int int1 = 13;
      int int2 = (-1889);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1482, options0, (-1889), 125);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      Option option0 = new Option("", ".vbg\"M_-`GBD[rVGyb%");
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", "", false, "usage: ");
      helpFormatter0.printHelp(" ", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = 1;
      CharBuffer charBuffer0 = CharBuffer.allocate(74);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0, 74, 74);
      option0.getValues();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, (-2), "}>,HNLS", "--", options2, 0, 116, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(3, "+p`(-r#w>i1u5IK|", ")E`%YDH(bl", options0, ")E`%YDH(bl", false);
      helpFormatter0.createPadding(738);
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName((String) null);
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[ Options: [ short ", "", options3, "[ Options: [ short ", true);
      helpFormatter0.rtrim("[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.helpOptions();
      options0.hasOption("\n");
      helpFormatter0.setDescPadding(63);
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      int int0 = 0;
      Option option0 = new Option("", ".vbg\"M_-`GBD[rVGyb%");
      String string0 = "}>,HNLS";
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "";
      options1.addOption("", "", false, "usage: ");
      helpFormatter0.printHelp(" ", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int1 = 1;
      // Undeclared exception!
//      try { 
        CharBuffer.wrap((CharSequence) "6Yk6Rfpt`", 1, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      Option option0 = new Option("", ".vbg\"M_-`GBD[rVGyb%");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "}>,HNLS", "}>,HNLS", options0, "5pNUkk", false);
      helpFormatter0.createPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("qd[:[");
      helpFormatter0.setDescPadding((-1622));
      helpFormatter0.setArgName(" ");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "", options1, "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("v<DZ", options1);
      helpFormatter0.defaultWidth = 16;
      helpFormatter0.findWrapPos("1I~O[.~yNs", 1, 1);
      helpFormatter0.rtrim("b?&'[0Sz%X>HpvGAp9");
      helpFormatter0.printHelp("b?&'[0Sz%X>HpvGAp9", options1);
      helpFormatter0.printHelp(23, "pE@M(FN", "org.apache.commons.cli.Option", options0, "   ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2541), "=X", "!i7e'", options0, "=X", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "5pNUkk", "5pNUkk", options0, "cmdLineSyntax not provided", true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "", (String) null, options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.optionComparator = null;
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      String string0 = "dn4wo}";
      int int0 = (-413);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-413), options0, 738, (-836));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.findWrapPos("qG&YxzUO;%>Q_", 0, 56);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("p)(<R\" v)K");
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, " ", false, "--");
      options1.hasOption("p)(<R\" v)K");
      StringBuffer stringBuffer0 = new StringBuffer(1848);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 6, 6, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1848, options0, (-2769), (-2769));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-685), options1, (-685), (-1932));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.helpOptions();
      options0.hasOption("\n");
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 14, "   ");
      helpFormatter0.findWrapPos("", 31, 31);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-6848));
      helpFormatter0.setArgName("arg");
      MockFile mockFile0 = new MockFile("-", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter1.setArgName("--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile1 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 27, " ", "}Dm'U+qxh", options1, 3, 74, "n/2xJL]PUO0", true);
      // Undeclared exception!
//      try { 
        helpFormatter1.findWrapPos((String) null, 3, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      Option option0 = new Option("", ".vbg\"M_-`GBD[rVGyb%");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "}>,HNLS", "}>,HNLS", options0, "5pNUkk", false);
      helpFormatter0.createPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("qd[:[");
      Options options1 = new Options();
      options1.getOptionGroups();
      helpFormatter0.printHelp(";!3", options1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setDescPadding(9);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.defaultArgName = "`9+AKW[pEErSd4";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("`9+AKW[pEErSd4", "`9+AKW[pEErSd4", (Options) null, "`9+AKW[pEErSd4");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.addOption("arg", true, "dn4wo}");
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 10;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, "7`DONPI78!\"?");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.getLeftPadding();
      Options options2 = new Options();
      options1.helpOptions();
      Options options3 = options1.addOption((String) null, true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options3.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((Object) options3);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter1.printWrapped(printWriter0, 1, "[1n%Vir<nkm");
      helpFormatter0.findWrapPos("[1n%Vir<nkm", 3, 74);
      String string0 = "i)^$gjBSR~& jR$Un";
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "--");
      helpFormatter1.findWrapPos("arg", 3, 832);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.helpOptions();
      options0.hasOption("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(9);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.defaultArgName = "*H`]n@g";
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.createPadding(31);
      helpFormatter0.setLeftPadding((-1406));
      helpFormatter0.setNewLine("Nn(k.'/xz5}DneI,");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), 9, "a<P}jvV&,+V!i|K5");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append('j');
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      int int0 = 10;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 10, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append('j');
      String string0 = "mp'1'";
      helpFormatter0.defaultLongOptPrefix = "mp'1'";
      int int0 = 10;
      String string1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 10, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", " ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //  
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.append((CharSequence) "");
      objectArray0[0] = (Object) mockPrintWriter0;
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '}';
      charArray0[2] = 'Z';
      charArray0[3] = 'p';
      charArray0[4] = '$';
      charArray0[5] = '<';
      charArray0[6] = 'F';
      charArray0[7] = 'I';
      charArray0[8] = '0';
      mockPrintWriter0.write(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1253, "");
      helpFormatter0.setLeftPadding(4316);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1482);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Option option0 = new Option("", ".vbg\"M_-`GBD[rVGyb%");
      mockPrintWriter0.print((Object) option0);
      String string0 = "}>,HNLS";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "}>,HNLS");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, " ", false, "--");
      options1.hasOption("p)(<R\" v)K");
      options0.hasLongOption("--");
      options1.getOptions();
      Options options2 = options0.addOption("", false, "--");
      options2.addOption((String) null, false, "arg");
      options1.hasShortOption((String) null);
      options0.hasOption((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("#", "", options0, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("]");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      Option option0 = new Option((String) null, "S~p! T");
      Options options2 = options1.addOption(option0);
      String string0 = "";
      Options options3 = options2.addOption("", "pyIYZ$", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("]", (String) null, options4, (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultWidth = 0;
      int int0 = helpFormatter0.findWrapPos("cmdLineSyntax not provided", 1, 1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      int int0 = (-1613);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1613), (-1613), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      String string0 = "EdM1dnr! voD";
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "YWP");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("--", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.createPadding(9);
      helpFormatter0.setDescPadding(9);
      helpFormatter0.getLongOptSeparator();
      String string0 = "`\\9+AKW[pEErSd4";
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.defaultArgName = "`9+AKW[pEErSd4";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ARG...]");
      File file0 = MockFile.createTempFile("[ARG...]", "", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("`mjoMB|&[[;9mi{", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 305, 305, "`mjoMB|&[[;9mi{");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(44);
      helpFormatter0.rtrim("");
      assertEquals(44, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[");
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      boolean boolean0 = false;
      String string1 = "";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Ap00@=8}_";
      String string1 = "6WjP-hFK@&";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("bhg1=&&o1M46y1", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("6;YC};!%c");
      helpFormatter0.rtrim("[ Options: [ short ");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-kb|}\"%V";
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-873), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.setOptPrefix("l)&cHF0'='p");
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      // Undeclared exception!
//      try { 
        mockPrintStream0.append((CharSequence) stringBuffer0, 31, 2692);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 2692
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("p)(<R\" v)K");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, " ", false, "--");
      options1.hasOption("p)(<R\" v)K");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      int int1 = helpFormatter0.getDescPadding();
      assertEquals(3, int1);
      
      String string1 = helpFormatter0.rtrim((String) null);
      assertNull(string1);
      
      Options options1 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("7`DONPI78!\"?", options0);
      helpFormatter0.getSyntaxPrefix();
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      String string0 = "e!\\uek;;uX";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName("");
      String string1 = " x";
      Option option0 = null;
//      try {
        option0 = new Option("--", " x");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = helpFormatter0.createPadding(1139);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultArgName = string0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "6oMoIo}9Jr})J4";
      // Undeclared exception!
//      try { 
        options0.addOption("-", "arg", true, "6oMoIo}9Jr})J4");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setWidth(31);
      helpFormatter0.defaultWidth = 359;
      helpFormatter0.defaultOptPrefix = "";
      int int1 = (-1173);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
//      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">O>lH";
      int int0 = (-1549);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1549));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1683;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 1683, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "|+FA";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("|+FA", "|+FA", (Options) null, "|+FA", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+!c4.+rg5agl5w)";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("-", "usage: ", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
