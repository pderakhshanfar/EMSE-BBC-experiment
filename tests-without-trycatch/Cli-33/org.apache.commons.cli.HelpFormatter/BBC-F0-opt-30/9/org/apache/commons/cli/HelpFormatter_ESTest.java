/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:49:05 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", options0, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2497, "CFj/PFXAs_!", (String) null, options0, " ] [ long ", false);
      Option option0 = new Option("", false, "--");
      Object object0 = new Object();
      option0.setType(object0);
      Options options1 = options0.addOption(option0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options2 = options1.addOption("arg", true, "wTr?2>,k3h0s=.&");
      Options options3 = options2.addOption("", (String) null, false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1581), "CFj/PFXAs_!", "CFj/PFXAs_!", options3, "wTr?2>,k3h0s=.&", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("DnnDX.x");
      options0.hasShortOption("org.apache.commons.cli.OptionGroup");
      helpFormatter0.setDescPadding((-522));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("t3a(Ft TW^<#Lm", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "T_7<fE{u<";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 37, ">=5=CgUMp{QNR+waHr");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "has already been selected: '");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultWidth = (-416);
      int int0 = (-2);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "tgZaAS>bvI/");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "", true, "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("tgZaAS>bvI/", "", options3, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F\"U4rH[(U}vGPcc@`e");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "!t_Q\\#EGbfB$9W>^";
      PrintWriter printWriter0 = null;
      String string1 = "   ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 1778, ".9S2");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, (-532), "|joZ-~H`m");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 94, "arg", (String) null, options0, 94, 34, "@", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!t_Q\\#EGbfB$9W>^";
      String string1 = "org.apache.commons.cli.Util";
      Options options0 = null;
      String string2 = "^'@ ,_7^JzQ}>KMU<I4";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(24, "[", "", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "arg", options0, 3, 3, " ", false);
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.printHelp(1, " ] [ long ", " ] [ long ", options0, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(32, (String) null, (String) null, options0, "VS", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "(QB";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 282, "(QB", "(QB", options0, 0, 0, "NO_ARGS_ALLOWED");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1181;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", "Cannot add value, list full.", (Options) null, "Cannot add value, list full.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((String) null, "", options0, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("yVp\"M", 2, 2);
      helpFormatter0.getLongOptPrefix();
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      int int0 = 5758;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption(" ", "-", false, "C7.YR^");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", "", options0, "-", false);
      helpFormatter1.renderOptions((StringBuffer) null, 3, options0, 3, 13);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", " ", options0, " ", true);
      helpFormatter0.setWidth((-1));
      helpFormatter0.printHelp(" ", "", options0, "-", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "(QB", true, "\n");
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("line.separator");
      int int0 = 2;
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-1), "(QB");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1144, " ]");
      mockPrintWriter0.print(1252L);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1144, " ]", (String) null, options0, (-675), (-36), "NMFV/bwd*`}c7h");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(537);
      helpFormatter0.rtrim("W`~.T[Ivf0-)XW9");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 537, 102);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3Ytdq|/$");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 73, 488, "3Ytdq|/$");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.rtrim("vk");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 488, (int) (byte) (-70), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byte byte1 = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setNewLine("3$k%i");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("org.apache.commons.cli.OptionValidator");
      helpFormatter0.defaultDescPad = 1296;
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      helpFormatter0.printHelp("Q", options1, true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-675));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.flush();
      char char0 = '9';
      StringWriter stringWriter1 = stringWriter0.append('9');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 840;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 840, (Options) null, 840, 840);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = new Locale("-", "\n", "");
      Object object0 = new Object();
      Option option0 = new Option("q", "", true, "org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2), options1, 74, 13);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-908));
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.Options", 1282, (-2662));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("OzGWUUF4I3q", "UenYI8)$.->V$LjX3", true, " ");
      Options options3 = options1.addOption("arg", true, "UenYI8)$.->V$LjX3");
      helpFormatter0.printHelp("#BEO>o4OSZHG[r20<2G", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options3, "LW=3Q&[g?c", true);
      MockFile mockFile0 = new MockFile(".(}eP`YN]\"");
      MockFile mockFile1 = new MockFile("OzGWUUF4I3q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "~za-", options2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "   ", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options2, "", false);
      MockFile mockFile0 = new MockFile("   ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Q=(f", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.printf("usage: ", objectArray0);
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, 101, (String) null, "org.apache.commons.cli.OptionValidator", options1, 101, (-1344), "   ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = new Locale("-", "\n", "");
      Object object0 = new Object();
      helpFormatter0.setWidth((-162));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" :: ", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "9C.}!e+DAbbb5", "9C.}!e+DAbbb5", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.defaultWidth = 1767;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options2, "", false);
      MockFile mockFile0 = new MockFile("   ");
      mockFile0.createNewFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 56, "[", "", options2, 56, 83, (String) null, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "[", "", options0, 83, 83, "q_]2z");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      helpFormatter0.printHelp("gUDm,=`.v)W*JSdG", "cmdLineSyntax not provided", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = new Locale("-", "\n", "");
      Object object0 = new Object();
      Option option0 = new Option("q", "", true, "org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, false);
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "~8VN_s3wu-Oce-J", "", options1, 1687, 34, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter$1", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options2, "", false);
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2577));
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("JqDLy%7pa4#IV", options0, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = new Locale("-", "\n", "");
      Object object0 = new Object();
      Option option0 = new Option("q", "", true, "org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, false);
      helpFormatter1.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "A9j+m,[", options1);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("/T");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options2, 0, 28);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options2, "", false);
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 56, "   ", options2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "T67V)zQqe";
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('5');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "T67V)zQqe");
      mockPrintWriter0.println((Object) pipedOutputStream0);
      int int0 = (-1774);
      helpFormatter0.setDescPadding((-1774));
      String string1 = "<~Z_N#tYT:=#;#v";
      helpFormatter0.printWrapped(printWriter0, 553, "<~Z_N#tYT:=#;#v");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("T67V)zQqe", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "%'6");
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter$1", false, "arg");
      options1.hasOption(" ");
      boolean boolean0 = true;
      options1.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 74, "-", "arg", options1, 3, (-1110), "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      Locale locale0 = new Locale("usage: ", " ", "");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter1.printHelp(printWriter0, 2294, "7{vBs}+lcMZ", " ", options0, 1, 34, " ", true);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("\n");
      stringBuffer0.setLength(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp("--", "", (Options) null, "--", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("", "--", true, "");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("7Ap%D95oPQzl", options0, false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-", "\n", "");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      Option option0 = new Option("", "\n", true, "arg");
      options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0, true);
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-", "\n", "");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "~!?e}xUFT9(FTn";
      objectArray0[1] = (Object) "~!?e}xUFT9(FTn";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "~!?e}xUFT9(FTn";
      objectArray0[6] = (Object) "";
      mockPrintWriter0.format("~!?e}xUFT9(FTn", objectArray0);
      int int0 = (-1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      Options options2 = options1.addOption((String) null, false, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "~!?e}xUFT9(FTn", "", options2, (-1), (-1), "~!?e}xUFT9(FTn", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-", "\n", " :: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 197, " :: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[ARG...]", "", options0, 24, 1, "3E!l/K$A@yu3MJ5-", false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3397);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getLongOptPrefix();
      stringWriter0.write("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      stringWriter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) "";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "x-:cI8%wD";
      objectArray0[7] = (Object) "3t%";
      mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printHelp(printWriter0, 32, "x-:cI8%wD", "x-:cI8%wD", options0, 0, 0, "3t%", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2, options0, 622, 3);
      String string0 = "";
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2098, 1505, "");
      helpFormatter1.setDescPadding(2);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, (-5262), (-1), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-", "\n", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 47;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 47, 74, "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) stringBuffer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "LwUMP*B";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) stringBuffer1;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("LwUMP*B", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-108), "/.ceFh&n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "org.apache.commons.cli.OptionValidator";
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xx>WHwYA`-#]Utj");
      String string1 = "%'6";
      Option option0 = new Option("arg", true, "%'6");
      Options options1 = options0.addOption(option0);
      String string2 = null;
      Options options2 = options1.addOption((String) null, "org.apache.commons.cli.HelpFormatter$1", false, "arg");
      options1.helpOptions();
      options2.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      options1.hasOption("-");
      String string3 = "";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i:%$}E,7tIn@n%Vav2");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2831), "", " ", options1, 804, (-2), "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-817));
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("\n");
      stringBuffer0.setLength(1);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-", "\n", " :: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 197, " :: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "--", options0, 74, (-1169), "--", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "r@1b7G";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      Options options1 = options0.addOption("arg", "WX~\"d^ahpSNqsVrP$W", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("r@1b7G", options2, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1255));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-", "\n", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 47, 197, "");
      Options options0 = new Options();
      options0.getOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2), "-", "--", options0, 5900, 74, "!K039>_\";Y9F(z&H", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      options1.getOption("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null, options0);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setDescPadding(71);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2), "   ", (String) null, options0, 74, 911, "_'d_e9)FBIIhM,5 s");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(31);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      stringBuffer0.setLength(1);
      helpFormatter0.setDescPadding(71);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " ] [ long ");
      stringBuffer0.insert(1, (CharSequence) " ] [ long ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "--", "0#x>MmR(KY!f4)Zb1", options1, 0, 1, "--");
      StringBuffer stringBuffer1 = new StringBuffer(1);
      stringBuffer0.insert(1, false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 525, 10, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.setOptPrefix("\n");
      helpFormatter0.setLongOptPrefix("\"y");
      int int1 = 74;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 3, options1, 74, (-193));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      byteArrayOutputStream0.flush();
      options0.getOption("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "cmdLineSyntax not provided", options0);
      helpFormatter0.setLongOptSeparator("_'d_e9)FBIIhM,5 s");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "--", options0, "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(31);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      StringBuffer stringBuffer1 = new StringBuffer(" ");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 31, 477, "");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      options2.addOption("", "KI[TbPj'AnI{BvU7z@", true, "--");
      helpFormatter0.printHelp("cmdLineSyntax not provided", options2);
      helpFormatter0.printHelp(3422, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options1, "uj");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer2, 74, options0, 1397, 1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.findWrapPos("usage: ", 3548, 2149);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3953, "-", (String) null, options0, "");
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp(74, "--", "org.apache.commons.cli.HelpFormatter$1", options0, "YkSl0/B'", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("-", "\n", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptPrefix("\"y");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, "-");
      options0.addOption(option0);
      helpFormatter0.printHelp("\"y", options0, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "(e: UnIzvY`jJI&zk}Y");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(31);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      StringBuffer stringBuffer1 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer1, 31, 477, "");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options2);
      helpFormatter0.printHelp(3422, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options1, "uj");
      helpFormatter0.printHelp("uj", "", options2, "-");
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(3422);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(31);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      stringBuffer0.setLength(1);
      helpFormatter0.setDescPadding(71);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " ] [ long ");
      stringBuffer0.insert(1, (CharSequence) " ] [ long ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "--", "0#x>MmR(KY!f4)Zb1", options1, 0, 1, "--");
      StringBuffer stringBuffer1 = new StringBuffer(1);
      stringBuffer0.insert(1, false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(71);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 71, 739, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 71, 71, "L.VqEpF");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      helpFormatter0.printHelp("uj", options2);
      helpFormatter0.printHelp(3422, " ", "L.VqEpF", options2, "uj");
      helpFormatter0.printHelp("w,?mcgghd", "-", options1, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.findWrapPos("", 739, 74);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("P-*H5F");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3221, options0, 3221, 97);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, (-1), 97, "-");
      stringBuffer2.append("arg");
      stringBuffer0.setLength(1392);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, (-834), 104, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(31);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      stringBuffer0.setLength(1);
      helpFormatter0.setDescPadding(71);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " ] [ long ");
      stringBuffer0.insert(1, (CharSequence) " ] [ long ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "--", "0#x>MmR(KY!f4)Zb1", options1, 0, 1, "--");
      StringBuffer stringBuffer1 = new StringBuffer(1);
      stringBuffer0.insert(1, false);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 71, 71);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setSyntaxPrefix("--");
      Options options0 = new Options();
      String string0 = "%'6";
      Option option0 = new Option("arg", true, "%'6");
      Options options1 = options0.addOption(option0);
      String string1 = null;
      String string2 = "org.apache.commons.cli.HelpFormatter$1";
      Options options2 = options1.addOption((String) null, "org.apache.commons.cli.HelpFormatter$1", true, "arg");
      options2.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      Options options3 = options2.addOption("arg", true, "%'6");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options3, "", false);
      String string3 = "line.separator";
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "arg", (-1), 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      byteArrayOutputStream0.flush();
      options0.getOption("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-895), "cmdLineSyntax not provided", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(31);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      stringBuffer0.setLength(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 118, 31, ")tl6,m");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, ")tl6,m");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "--");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 71;
      StringBuffer stringBuffer0 = new StringBuffer(71);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 71, 739, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 71, 71, "L.VqEpF");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option(" ", "L.VqEpF");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("\n");
      stringBuffer0.setLength(1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("The option '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintWriter0.printf(locale0, " ]", (Object[]) null);
      helpFormatter0.setNewLine("   ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 9, options0, 1429, 74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "hQ2BGi-@)", options0);
      options0.getMatchingOptions("|Ws`gP|k^5t_F\"gNm~");
      helpFormatter0.printHelp("The option '", "d5", options0, "[", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1052), (-2), "   ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-829), " :: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.setOptPrefix("\n");
      helpFormatter0.setLongOptPrefix("\"y");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "\"y");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "Sff|=");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(31);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      stringBuffer0.setLength(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 118, 31, ")tl6,m");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "--", options0, "D'p !B3;TsG", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      Object[] objectArray1 = new Object[9];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) mockFileOutputStream0;
      objectArray1[2] = (Object) helpFormatter0;
      objectArray1[3] = (Object) mockPrintWriter0;
      objectArray1[4] = (Object) mockPrintWriter0;
      objectArray1[5] = (Object) mockPrintWriter0;
      objectArray1[6] = (Object) helpFormatter0;
      objectArray1[7] = (Object) mockPrintWriter0;
      objectArray1[8] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "VM=D=E'9VM}3$mO");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      Locale locale0 = new Locale("-", "\n", "");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp("*%!S+_`", options0, false);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "Kfg]Kl>22\"5b^JFGF", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      byteArrayOutputStream0.flush();
      options0.getOption("?FW9xmgh1~8*DwJ[T_");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "cmdLineSyntax not provided", options0);
      helpFormatter0.defaultLeftPad = 2577;
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("_'d_e9)FBIIhM,5 s");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.setLongOptSeparator((String) null);
      int int0 = (-445);
      int int1 = 1049;
      helpFormatter0.setLeftPadding(1049);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        options0.addOption("--", "_'d_e9)FBIIhM,5 s", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.setOptPrefix("\n");
      helpFormatter0.setLongOptPrefix("\"y");
      Options options0 = new Options();
      helpFormatter0.printHelp("\"y", options0, true);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "\"y");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("|K`^LJt`!A=%C{D,7");
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(1979);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(3);
      MockFile mockFile0 = new MockFile("");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("-t%QMY", "mE=a]]JcAOY;Dqlk");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ":Lq.NETN$<|>`L";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "-t%QMY";
      mockPrintWriter0.printf(":Lq.NETN$<|>`L", objectArray0);
      int int1 = 9;
      String string0 = "?LFB`(/@3Q3,Ny";
      String string1 = ">";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption(".O", " :: ", false, "[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '.O' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      byteArrayOutputStream0.flush();
      options0.getOption("?FW9xmgh1~8*DwJ[T_");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "cmdLineSyntax not provided", options0);
      helpFormatter0.defaultLeftPad = 2577;
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("_'d_e9)FBIIhM,5 s");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1399, options0, (-2530), (-1628));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0.optionComparator;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0.optionComparator;
      objectArray0[3] = (Object) helpFormatter0.optionComparator;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      int int1 = (-1335);
      int int2 = (-1725);
      options0.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 13, options0, (-1335), (-1725));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setArgName(">");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, (String) null);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", options3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1046, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setNewLine(" ");
      int int1 = 4432;
      helpFormatter0.defaultDescPad = 0;
      String string0 = "xs$";
      String string1 = "-\\[";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("-", false, "RCcNK<");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 2394;
      helpFormatter0.defaultDescPad = 2394;
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.rtrim("arg");
      String string0 = "\">eec[lZuLy<Z;I";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "\">eec[lZuLy<Z;I");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // \">eec[lZuLy<Z;I
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2A?9i4<&n+8qFRtPW";
      helpFormatter0.defaultLongOptPrefix = "2A?9i4<&n+8qFRtPW";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption(" }E)_Ao?s)K;)O", "", true, "2A?9i4<&n+8qFRtPW");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' }E)_Ao?s)K;)O' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      byteArrayOutputStream0.flush();
      options0.getOption("?FW9xmgh1~8*DwJ[T_");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "cmdLineSyntax not provided", options0);
      helpFormatter0.defaultLeftPad = 2577;
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("_'d_e9)FBIIhM,5 s");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "?FW9xmgh1~8*DwJ[T_", "0#x>MmR(KY!f4)Zb1", options0, 2577, 2577, "0#x>MmR(KY!f4)Zb1");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      MockFile mockFile0 = new MockFile("The option '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "d`P92t`OWmlfF");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "o";
      int int0 = 1;
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.defaultNewLine = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("usage: ", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1358);
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "N";
      helpFormatter0.setSyntaxPrefix("N");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(31);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("arg");
      stringBuffer0.setLength(1);
      String string0 = ")tl6,m";
      helpFormatter0.renderWrappedText(stringBuffer0, 118, 31, ")tl6,m");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, ")tl6,m");
      StringBuffer stringBuffer1 = new StringBuffer(31);
      String string1 = "cmdLineSyntax not provided";
      helpFormatter0.printHelp(")tl6,m", options0);
      int int0 = 3422;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-971), "", "", options0, ")tl6,m");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      Options options0 = new Options();
      byteArrayOutputStream0.flush();
      options0.getOption("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "cmdLineSyntax not provided", options0);
      helpFormatter0.setLongOptSeparator("qj&;$9I");
      helpFormatter0.setDescPadding(2577);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 56;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), (String) null, (String) null, options0, 56, 32, "_'d_e9)FBIIhM,5 s");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      byteArrayOutputStream0.flush();
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(19);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(3);
      MockFile mockFile0 = new MockFile("?FW9xmgh1~8*DwJ[T_");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 602, options0, 4076, 19);
      helpFormatter0.setLeftPadding(34);
      options0.addOption("arg", "DU", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "%'6");
      Options options1 = options0.addOption(option0);
      String string0 = null;
      Options options2 = options1.addOption((String) null, "org.apache.commons.cli.HelpFormatter$1", false, "arg");
      options2.addOption((String) null, "org.apache.commons.cli.OptionValidator", true, "\n");
      Options options3 = options2.addOption("arg", true, "%'6");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options3, "", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "line.separator", "--", options3, "%'6");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("r]J\"Q,");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultArgName = "4l";
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "", options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("\n");
      stringBuffer0.setLength(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 104, 0, ")tl6,m");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("65<'<y(TYy[z&m", "<", options0, "[ARG...]", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      File file0 = MockFile.createTempFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = new Locale("-", "\n", "");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "%B)p5{ufWjZ@ilF=|c", (Object[]) null);
      int int0 = 0;
      mockPrintWriter0.write(3);
      String string1 = " ]";
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, " ]");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
//      try { 
        MockFile.createTempFile((String) null, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("\"y");
      helpFormatter0.setLongOptPrefix("\"y");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile(" :: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "-");
      assertEquals("\"y", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "x-:cI8%wD\\";
      helpFormatter0.setNewLine("x-:cI8%wD");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "--", 2223, 2223);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }
}
