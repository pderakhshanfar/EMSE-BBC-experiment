/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 03:56:55 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding((-2377));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", false, "-");
      Option option0 = new Option("", "V%dp%J");
      Options options3 = options2.addOption(option0);
      int int0 = 31;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-530), "", "-", options3, (-2377), 31, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("/Dx", "/Dx", (Options) null, "Bq(c", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?n{9-`^6&";
      MockPrintStream mockPrintStream0 = new MockPrintStream("?n{9-`^6&");
      char char0 = '<';
      int int0 = (-17);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-17), "?n{9-`^6&");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2, "s|N", "s|N", (Options) null, "s|N");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultLongOptPrefix = "Cannot add value, list full.";
      helpFormatter0.defaultNewLine = " hZ.{+r$ug-$C9C";
      Options options0 = new Options();
      options0.hasShortOption("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "\n", " hZ.{+r$ug-$C9C", options0, " hZ.{+r$ug-$C9C");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 41;
      helpFormatter0.createPadding(41);
      helpFormatter0.rtrim("[Cs@*pSxaZ;t-`7e");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int1 = 0;
      helpFormatter0.findWrapPos("[Cs@*pSxaZ;t-`7e", 0, 0);
      helpFormatter0.setDescPadding(0);
      String string0 = "HqkVuyvDl7?Qr=-#S3m";
      File file0 = MockFile.createTempFile("Ig-hbJ(myRL6xe", "arg");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "Ig-hbJ(myRL6xe");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Ig-hbJ(myRL6xe
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = 7;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 7, (Options) null, 7, 1348);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.addValueForProcessing("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), " [ARG]", options1);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-492), options1, 3, 4019);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "\n");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((-1), "{", "{", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "\n");
      option0.setArgName(" ");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "S(~yvD";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options2 = new Options();
      options2.getMatchingOptions("k<}DTASj=y@;j>4C");
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 639, options2, 323, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("LtpW> 6.Qb/+X7* ");
      helpFormatter0.printHelp(7, "!r13@|&u!Ca$=dx%", "!r13@|&u!Ca$=dx%", options0, "\n", true);
      helpFormatter0.renderOptions((StringBuffer) null, 7, options0, 1394, 1200);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-Y", true, (String) null);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("A>mZ5]~8", options1, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-108), "-Y", "", options0, "P>Jf8Sa_?AS5-f?", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.addValueForProcessing("-");
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "--", options1);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 1, (-627));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("!4p3S9U");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      optionGroup1.setRequired(true);
      optionGroup2.setSelected(option0);
      options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "--", options1);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.printHelp(3, "\n", "-", options0, "Vpq3:HQ3)87\"q:v<{");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d");
      Option option0 = new Option("", true, "-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.printHelp("slmu_", options1, true);
      helpFormatter0.printHelp(3, "\n", "", options1, "", true);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      helpFormatter0.printWrapped(printWriter0, 0, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("F", true, "");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOption("F", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("pDZr_'", options1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("!4p3S9U");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      optionGroup0.setSelected(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "!4p3S9U", options2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("!4p3S9U");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      optionGroup2.setSelected(option0);
      Options options2 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "--", options1);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.AlreadySelectedException", "]r;-?J[~U_1Eu@)-jO", options2, 74, 1, (String) null, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 0, 1);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      Options options2 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "--", options1);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, (String) null, "^#!Smg}@3(fy", options2, 74, 63, "^#!Smg}@3(fy", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "&a=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("", false, "org.apache.commons.cli.Option");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      optionGroup1.setRequired(false);
      Options options2 = options1.addOption("arg", " [ARG]", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3280), "!T|UZ{2b", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "$\\>wH\"R+\"uQ%<";
      Options options1 = options0.addOption("", "usage: ", true, "$>wH\"R+\"uQ%<");
      int int0 = 1;
      int int1 = 3;
      options1.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options1, 1, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options1);
      helpFormatter0.getWidth();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 805, "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      mockPrintWriter0.write("WG", 32, 0);
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printWrapped(printWriter0, 19, "-");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(2197);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 3, options1, 19, 74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "W-'LtBD^> c!", options0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "eBT7$#2", options1);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 1;
      String string0 = "   ";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "   ", "   ", options0, "\"!@&-x84d}wx2^XSjv");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "   ", "-", (Options) null, "   ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Option option0 = new Option("d6AM8uQA", false, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("VK^E'}MU]Qf>v_$|>l", options1, false);
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter1.renderOptions(stringBuffer0, 651, options0, 1904, 1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 563, 34, "M=q!L+jl)Y1b?U}j");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1320);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 40, string0, string0, (Options) null, 13, 13, "p80JE&gu");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 683;
      String string1 = "";
      Options options0 = null;
      String string2 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("@.", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 32, "usage: ", options0);
      helpFormatter0.getWidth();
      String string0 = "O+q*P";
      String string1 = "line.separator";
      // Undeclared exception!
//      try { 
        options0.addOption("gg`f85 7mCLuO*", true, "line.separator");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'gg`f85 7mCLuO*' contains an illegal character : '`'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1320);
      Options options0 = new Options();
      helpFormatter0.printHelp(1320, "{e~!-+?*H4", "|l|9-{Lc;qq}", options0, "", false);
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "|l|9-{Lc;qq}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1207, "' was specified but an option from this group ", "", options0, 1320, 8, "]", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1532));
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(8, "0\"[vXl;3", "-kQ#Kbhnk7Q>,Z", options0, "-kQ#Kbhnk7Q>,Z", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("1$h", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "f@Jy1gm\"s", "\"y*xPXP_Uc]Gj", options0, "f@Jy1gm\"s", true);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "`,t7M=dO\"kN9", "f@Jy1gm\"s", options0, 658, 74, "\"y*xPXP_Uc]Gj", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1320);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append('<');
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1320, "--", "T[/W", (Options) null, (-1144), 1, "--", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("!4p3S9U");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      optionGroup2.setSelected(option0);
      options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "--", options1);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.printHelp(3, "\n", "-", options0, "Vpq3:HQ3)87\"q:v<{");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("slmu_", options1, true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.createPadding(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = (-488);
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-488), (String) null, options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, "arg", "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp("usage: ", "", options0, "1", true);
      Option option0 = new Option((String) null, true, "[");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "arg", "[", options0, 88, (-2016), (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("?n{9-`^6&");
      MockFile mockFile0 = new MockFile("WFt`. 2:-ci`QXE#CSB", "W;=lYE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2276, "usage: ", "", options0, "usage: ", false);
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "WFt`. 2:-ci`QXE#CSB", (String) null, options0, 6, 1294, "arg", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?n{9-`^6&";
      MockPrintStream mockPrintStream0 = new MockPrintStream("?n{9-`^6&");
      char char0 = '<';
      int int0 = 11;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 11, "?n{9-`^6&");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "WoGOxp#%RnjhWUu");
      helpFormatter0.printHelp("\"", options0);
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      helpFormatter0.printHelp("VK^E'}MU]Qf>v_$|>l", options1, true);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, " ] [ long ", "arg", options0, "arg", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp("usage: ", "", options0, "1", true);
      Option option0 = new Option((String) null, true, "[");
      options0.addOption(option0);
      helpFormatter0.printHelp("U5}Pf`v7m,{4?G~m", options0, true);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "VK^E'}MU]Qf>v_$|>l";
      Options options0 = new Options();
      Option option0 = new Option("d6AM8uQA", false, "\n");
      options0.addOption(option0);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2), "BR@mt5d/<2ux;|${]+", "VK^E'}MU]Qf>v_$|>l", options0, (-588), (-5), "usage: ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOption("usage: ");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "", "-", options0, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "slmu_";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      Options options0 = new Options();
      options0.getOptions();
      String string1 = "line.separator";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "SF7", false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      String string0 = "P<lVN&";
      // Undeclared exception!
      helpFormatter1.printHelp(1, "arg", "arg", (Options) null, "P<lVN&", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(">ccgvBl2.1%Ah");
      Options options0 = new Options();
      options0.getOption("arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1497, "wzzgc rHC%*P)Podx<", " ", options0, "arg");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1497);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 2994);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true, "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "']ZOV{Xsv0:&\\uqC";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp(">", "", options0, "1", true);
      helpFormatter0.setArgName("El<3ai");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('6');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1310), "org.apache.commons.cli.ParseException", "", options0, 2612, 9, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "0TT<g@rTM@vK$Ws|";
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "0TT<g@rTM@vK$Ws|");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      int int0 = (-2310);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-2310), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(585);
      helpFormatter0.findWrapPos(";1]T6Me5G", 2, 2);
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, ";1]T6Me5G");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options2, (-731), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp(">", "", options0, "1", true);
      helpFormatter0.setArgName("El<3ai");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('6');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1769, "1", "+i4-Nq Pd~3=tAz5", options0, 97, 5179, "El<3ai");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("2(bOi:]P)5hfUFU", 932, (-1170));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp(2, "VK^E'}MU]Qf>v_$|>l", "Q J", options1, "\"y*xPXP_Uc]Gj", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      helpFormatter0.printHelp(2, "VK^E'}MU]Qf>v_$|>l", "Q J", options1, "\"y*xPXP_Uc]Gj", false);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.printHelp(">", "", options0, "1", true);
      helpFormatter0.setWidth((-4678));
      helpFormatter0.setLongOptSeparator(string0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("pK4G~g420");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('#');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " ");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-4678), 1769, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp(">", "", options0, "1", true);
      helpFormatter0.setArgName("El<3ai");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('6');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      Options options1 = new Options();
      Options options2 = options0.addOption("1", "4xhn]&@T{g/wJ%7R", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options2, 1511, 1331);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      String string1 = "[";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp(">", "", options0, "1", true);
      helpFormatter0.setArgName("El<3ai");
      int int0 = (-888);
      String string2 = "=Suh";
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-888), "1", "[", options0, 536, (-888), "El<3ai");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1769;
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = false;
      int int1 = (-2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "[", "[", options0, string0, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      options0.getOption("arg");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1783), "arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "o");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(870, "", "", options1, "\"y*xPXP_Uc]Gj", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp(">", "", options0, "1", true);
      helpFormatter0.setArgName("El<3ai");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('6');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1769, "", "El<3ai", options0, 447, 5179, "<WQ)pE>md6K9HJ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1320);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.append('<');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) printWriter0;
      PrintWriter printWriter1 = printWriter0.printf(locale0, "w^@r0ds", objectArray0);
      int int0 = 4580;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter1, (-1787), 4580, "w^@r0ds");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp(">", "", options0, "1", true);
      helpFormatter0.setArgName("El<3ai");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('6');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "/[8", "pK4G~g420", options0, 1769, 1851, "", true);
      helpFormatter0.rtrim("El<3ai");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = new Object();
      stringBuffer0.append(object0);
      int int0 = (-27);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-27), "gU<}-kU<\rZ+{62\"j");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.println(0.0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      locale0.toLanguageTag();
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '\"';
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 327, 327, "");
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = 'Y';
      charArray0[5] = 'k';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.defaultLongOptPrefix = ";n6AKHO4xJ+E";
      mockPrintWriter0.println(74);
      helpFormatter0.printWrapped(printWriter0, 10, 10, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.setDescPadding(10);
      helpFormatter0.rtrim("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 95, " ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.println(0.0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      locale0.toLanguageTag();
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '\"';
      mockPrintWriter0.write(",OZ");
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = 'Y';
      charArray0[5] = 'k';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.defaultLongOptPrefix = ";n6AKHO4xJ+E";
      mockPrintWriter0.println(74);
      helpFormatter0.printWrapped(printWriter0, 10, 10, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.setDescPadding(10);
      helpFormatter0.rtrim("");
      helpFormatter0.printWrapped(printWriter0, 93, "zh-CN");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getWidth();
      byte[] byteArray0 = new byte[1];
      helpFormatter0.setNewLine("arg");
      byteArray0[0] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("53n8{)\"Q!d3x1Ioi\"p");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "@", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "@");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("slmu_", options1, false);
      helpFormatter0.printHelp(3, "r`GJ9IOFS}5'JJk|Py", "T;`+\n>b;%tJP", options0, "-", true);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("slmu_", options1, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1111), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("slmu_", options1, false);
      helpFormatter1.printHelp(3, "\n", "", options1, "", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "\n", "usage: ", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("gU<}-kU<\rZ+{62\"j");
      int int0 = 34;
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultWidth = 9;
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer3 = stringBuffer2.append(0);
      stringBuffer2.append((CharSequence) stringBuffer3);
      stringBuffer2.append(667.9F);
      helpFormatter0.renderWrappedText(stringBuffer2, 0, 44, "");
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      String string0 = "ahNO{.LOYv'0-";
      MockFile mockFile0 = new MockFile((String) null, "org.apache.commons.cli.Option");
      String string1 = null;
      MockFile mockFile1 = null;
//      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = new Object();
      stringBuffer0.append(object0);
      int int0 = 0;
      helpFormatter0.renderWrappedText(stringBuffer0, 11, 0, "gU<}-kU<\rZ+{62\"j");
      helpFormatter0.getNewLine();
      helpFormatter0.defaultWidth = 9;
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer2 = stringBuffer1.append(0);
      stringBuffer1.append((CharSequence) stringBuffer2);
      stringBuffer1.append(667.9F);
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 44, "");
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      String string0 = "ahNO{.LOYv'0-";
      MockFile mockFile0 = new MockFile((String) null, "org.apache.commons.cli.Option");
      String string1 = null;
      MockFile mockFile1 = null;
//      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZoV{Xsv0:&\\u/C";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printHelp("usage: ", "", options0, "1", true);
      Option option0 = new Option((String) null, true, string0);
      options0.addOption(option0);
      helpFormatter0.printHelp("   ", options0, false);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.println(0.0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      locale0.toLanguageTag();
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '\"';
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = 'Y';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[5] = 'k';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.defaultLongOptPrefix = ";n6AKHO4xJ+E";
      mockPrintWriter0.println(74);
      helpFormatter0.printWrapped(printWriter0, 10, 10, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.setDescPadding(10);
      helpFormatter0.rtrim("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 93, " ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      helpFormatter0.printOptions(printWriter0, 10, options1, 980, 980);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Option option0 = new Option("d6AM8uQA", false, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("VK^E'}MU]Qf>v_$|>l", options1, false);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayCountry(locale1);
      Object object0 = new Object();
      locale0.hasExtensions();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ">ccgvBl2.1%Ah";
      mockPrintWriter0.printf(locale0, "Hu*fgxNljS'ap3M&+3", objectArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4028, ">ccgvBl2.1%Ah", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      String string1 = "[";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp(">", "", options0, "1", true);
      helpFormatter0.setArgName("El<3ai");
      String string2 = "org.apache.commons.cli.HelpFormatter$1";
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('6');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "", "pK4G~g420", options0, 1769, 1851, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.println(0.0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      locale0.toLanguageTag();
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '\"';
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = 'Y';
      charArray0[5] = 'k';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.defaultLongOptPrefix = ";n6AKHO4xJ+E";
      mockPrintWriter0.println(74);
      helpFormatter0.printWrapped(printWriter0, 10, 10, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.setDescPadding(10);
      helpFormatter0.rtrim("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 93, " ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^]ZOV{Xsv0:&\\u/C";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(1769, string0, "[", options0, "[", false);
      helpFormatter0.setOptPrefix("pK4G~g420");
      helpFormatter0.printHelp("y{mxi;jLXw|jv:[", "[", options0, (String) null, true);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-613), (-613), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("gU<}-kU<\rZ+{62\"j");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "gU<}-kU<\rZ+{62\"j");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Jj:0B");
      int int0 = 1344;
      helpFormatter0.setLeftPadding(1344);
      String string0 = "hy;i;mGpx'@e81";
      File file0 = MockFile.createTempFile("hy;i;mGpx'@e81", "org.apache.commons.cli.Options");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.append((CharSequence) "Jj:0B", 1, 1);
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        options0.addOption("-", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setDescPadding((-2846));
      helpFormatter0.setWidth((-2846));
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      stringBuffer0.insert(0, (Object) "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, (-2952));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(">ccgvBl2.1%Ah");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      helpFormatter0.setArgName((String) null);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayCountry(locale1);
      Object object0 = new Object();
      locale0.hasExtensions();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ">ccgvBl2.1%Ah";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Hu*fgxNljS'ap3M&+3", objectArray0);
      mockPrintWriter0.print((long) 1);
      Options options0 = null;
      int int0 = 0;
      String string0 = "=Suh";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 32, "Hu*fgxNljS'ap3M&+3", ">ccgvBl2.1%Ah", (Options) null, (-888), 0, "=Suh");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      int int0 = (-1196);
      helpFormatter0.findWrapPos("org.apache.commons.cli.Options", (-1196), (-1196));
      String string1 = "qttbkmN94; .Nzv";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile(" ", "qttbkmN94; .Nzv");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      helpFormatter0.setOptPrefix(" ]");
      helpFormatter0.setNewLine("zB");
      helpFormatter0.setNewLine(" ]");
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string2 = "P.ujy7x-TlT~l";
      String string3 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption(">", true, " ]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '>'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "_}U[h", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "kLm`sHu`1<+uebq";
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultOptPrefix = "kLm`sHu`1<+uebq";
      helpFormatter0.getSyntaxPrefix();
      String string1 = "'";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("'", "}Ikj!ss<~8z#lF");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // }Ikj!ss<~8z#lF
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      int int0 = 2971;
      Options options0 = new Options();
      String string0 = "dYw!";
      boolean boolean0 = false;
      String string1 = "-";
      // Undeclared exception!
//      try { 
        options0.addOption("--", "dYw!", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 2330;
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 2330, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getWidth();
      int int1 = 0;
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = '-';
      charArray0[2] = 'u';
      charArray0[3] = '+';
      charArray0[4] = 'm';
      charArray0[5] = 'k';
      charArray0[6] = 'z';
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(9, charArray0, 74, 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // offset 74, len 74, str.length 7
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "   ";
      int int0 = 2;
      String string1 = "";
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 2, 60, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(">ccgvBl2.1%Ah");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      helpFormatter0.setArgName((String) null);
      Object[] objectArray0 = new Object[3];
      Locale locale0 = Locale.ENGLISH;
      Object object0 = new Object();
      objectArray0[2] = (Object) ">ccgvBl2.1%Ah";
      mockPrintWriter0.print((long) 1);
      helpFormatter0.setLongOptSeparator("=Suh");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "line.separator", "T'iZV,|o'WgiU&RH0", (Options) null, 1538, 1538, "-");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, ",J@<");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
//      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1320);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.append('<');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "0(1");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-1193);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1193), "\n", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("`,t7M=dO\"kN9", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "#Rq;43\"PUj3");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]'U]w`wzS%ZnSdl=|";
      helpFormatter0.setWidth(1);
      helpFormatter0.setLongOptSeparator("]'U]w`wzS%ZnSdl=|");
      int int0 = (-1587);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1587));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.optionComparator = comparator0;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1535, 1535, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = 1;
      helpFormatter0.setSyntaxPrefix("' contains an illegal character : '");
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      String string0 = "=_:#g";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=_:#g", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.GERMAN;
      mockPrintWriter1.format(locale0, "usage: ", (Object[]) null);
      String string1 = " ] [ long ";
      String string2 = "P";
      Options options0 = new Options();
      String string3 = "/vlB!-}%:K1_(S";
      // Undeclared exception!
//      try { 
        options0.addOption(" ", "/vlB!-}%:K1_(S", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultNewLine = "";
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
//      try {
        option0 = new Option("~onz|~l,@r", "--", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '~onz|~l,@r' contains an illegal character : '~'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }
}
