/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 03:40:43 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("\n");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos(" ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "ezB(}0~UgCE");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("a", "", true, "zg&T[O2oGQuz'k9^");
      OptionGroup optionGroup2 = optionGroup0.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup2);
      options1.helpOptions();
      Options options3 = options2.addOption("ktp1qT8", "", true, "a");
      helpFormatter0.printHelp("P", " ", options3, "", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2, (Options) null, 2, 3550);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "NO_ARGS_ALLOWED", (String) null, options0, 2, (-1345), "'", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("PTaSF");
      helpFormatter0.defaultArgName = "PTaSF";
      helpFormatter0.defaultDescPad = (-1165);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.defaultArgName = "hN&J";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "h4_w#Y0RHmQvf{@xO";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "h4_w#Y0RHmQvf{@xO");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      options0.getOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("a", true, "a");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", "O#+*(ehih", options1, "arg", true);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      option0.setDescription("[");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 32, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "cJf\"f9sl2J5sFF");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("arg", "a", options2, "arg", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Object object0 = new Object();
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      helpFormatter0.defaultLeftPad = (-2);
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("arg", "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", "O#+*(ehih", options1, "arg", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1636, 1636, "T6La@y,%=uM+o3~");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 68, 68);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" :: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, " :: ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-92));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Object object0 = new Object();
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("arg", "\n");
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", "O#+*(ehih", options1, "arg", true);
      int int0 = helpFormatter0.defaultWidth;
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-7), 74, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setWidth((-265));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("$LEU{G9u2]G9#_2:AZ", "$LEU{G9u2]G9#_2:AZ", options0, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Object object0 = new Object();
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("arg", "\n");
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", "O#+*(ehih", options1, "arg", true);
      options1.hasLongOption("-");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "arg", options1, "");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2103);
      Options options0 = new Options();
      options0.hasLongOption("[Y2#Ml{-Op:-OHG");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-2103));
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter", "y*]=eFdeO/U&kYDbp?<", options0, "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 102, "-", "-", options0, 1, 900, (String) null, true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.setNewLine("");
      String string0 = "Y%-IImdh";
      Options options1 = options0.addOption("arg", false, "Y%-IImdh");
      String string1 = "u:vz9l9_mS";
      Options options2 = options1.addOption((String) null, "arg", false, "u:vz9l9_mS");
      String string2 = null;
      options2.getOption((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "NO_ARGS_ALLOWED", options2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6^H^kl@Hwvm|W";
      Options options0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("6^H^kl@Hwvm|W", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("\n");
      options0.addOption("7", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      helpFormatter0.setNewLine("9=-]P");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "9=-]P", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter1;
      mockPrintWriter1.format("X8P", objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 102, "-", "-", options0, 1, 900, "arg", true);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "4.", "", options1, 10, 900, "");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      options0.addOption("7", true, "\n");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("do");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "c?8En}V%N`qQ{@E", options1, 3, 72, "7");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Object>();
      Object object0 = new Object();
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("arg", "\n");
      optionGroup1.addOption(option1);
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", "O#+*(ehih", options1, "arg", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 26, "\n");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "org.apache.commons.cli.HelpFormatter$1");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.printf("-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, 97, "org.apache.commons.cli.HelpFormatter$1", "", (Options) null, 97, 2166, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setArgName("usage: ");
      Options options1 = options0.addOption("", "n>bbQ9[Pm*N", true, "arg");
      Option option0 = new Option("arg", " ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, 14, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "u]5P)^]b");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "-", options1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Object object0 = new Object();
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("arg", "\n");
      options0.addOption(option0);
      options2.hasShortOption("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "O#+*(ehih", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.ITALIAN;
      String string0 = "-";
      Options options0 = new Options();
      int int0 = (-1086);
      String string1 = "!6`:F6/`njI?";
      int int1 = 1248;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1086), "-", "!6`:F6/`njI?", options0, (-1086), 1248, (String) null, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "DMbLaj!qd'");
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "|pM]dU-8BDdsEZb", options0);
      StringBuffer stringBuffer0 = new StringBuffer("/'q3mc");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1710), ";3<QjV");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Object object0 = new Object();
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", true, "\n");
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("arg", "\n");
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", "O#+*(ehih", options1, "arg", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), 35, " ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "usage: ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, false, (String) null);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      options0.toString();
      Options options1 = new Options();
      helpFormatter0.printHelp("--", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter1.println((-1.0));
      helpFormatter2.getSyntaxPrefix();
      helpFormatter0.setLeftPadding(2478);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 63, "'");
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.createPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter2.renderOptions(stringBuffer0, 3, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 102, options0, 1091, 1091);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("B((66Bz#-YUD[FEwNC", (Object[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp(printWriter1, 102, "-", "-", options0, 1, 900, "7W*:8m>#O|0ezS", true);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 440, (-524), "bT");
      helpFormatter1.renderOptions(stringBuffer1, (-2066), options0, 32, 3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.ITALIAN;
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter1, 3, options1, 1091, 3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1091, "", "iJ<o4\"d#xz_F4m(`i@", options0, (-1), 3, "}N4i .SLZ;Vw", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      options0.getOptions();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" [ARG]");
      Locale locale0 = Locale.ITALIAN;
      helpFormatter0.printOptions(mockPrintWriter1, 3, options0, 3, 1091);
      int int0 = (-2603);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, " [ARG]", "", options0, (-270), 74, "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, 9, options0, 3, 114);
      helpFormatter1.renderOptions((StringBuffer) null, 3, options0, 1, 74);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      pipedOutputStream0.flush();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-1502), "--", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1904));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object object0 = new Object();
      int int0 = 3;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      boolean boolean0 = false;
      String string1 = "org.apache.commons.cli.OptionGroup";
      options0.addOption("arg", "", false, "org.apache.commons.cli.OptionGroup");
      int int1 = 1;
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("\n");
      options0.addOption("7", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "-", options0, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      Options options1 = options0.addOption((String) null, true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "w$Ntibu(r");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options3 = new Options();
      Options options4 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("T>4gYR|#q Wx0", "", options4, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2494, (-177), "   ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      int int0 = (-1107);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2130), 40, "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 102, options0, 1091, 1091);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.append((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 102, (String) null, "", options0, 900, 102, "org.apache.commons.cli.Option", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      String string0 = ">";
      helpFormatter0.printOptions(printWriter0, 102, options0, 1091, 1091);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("B((66Bz#-YUD[FEwNC", (Object[]) null);
      mockPrintWriter1.append((CharSequence) "--");
      helpFormatter0.printHelp(printWriter1, 1091, "B((66Bz#-YUD[FEwNC", ">", options0, 1091, 102, ">", true);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 32, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 102, options0, 1091, 1091);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format("B((66Bz#-YUD[FEwNC", (Object[]) null);
      mockPrintWriter1.append((CharSequence) "--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3326, "7W*:8m>#O|0ezS", "\"pqUklfXXRu%;zk&`GH", options0, 102, 900, "(Dt1Js`^r:J5t8(`.", false);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped(printWriter0, (-2296), "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", "", false, "org.apache.commons.cli.OptionGroup");
      Option option0 = new Option("arg", "", true, "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 3, options2, 3, 1);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-1), "&", options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-875), "lWpiSe]_");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "!tB{=r2|cm[<+Fh[");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter1.setOptionComparator(comparator1);
      helpFormatter1.printHelp("arg", "--", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("]");
      Options options1 = options0.addOption((String) null, true, "B#");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      helpFormatter0.printHelp("c!:SF]$", "", options1, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 86, "Q*kF\"CelZ", " ", (Options) null, 13, (-286), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 102, options0, 1091, 1091);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter1 = mockPrintWriter0.format("-", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, 5, "B((66Bz#-YUD[FEwNC", "Z4yC60R>", options0, (-3156), 1091, "Z4yC60R>", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      String string0 = "org.apache.commons.cli.Util";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter3.format("A CloneNotSupportedException was thrown: ", (Object[]) null);
      PrintWriter printWriter0 = mockPrintWriter2.append((CharSequence) "A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(printWriter0, 2, "A CloneNotSupportedException was thrown: ", "--", options0, 3, 0, "F70 OmKj<ij!sA0", true);
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter2, 0, "F70 OmKj<ij!sA0");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "arg", objectArray0);
      int int0 = 3;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      options1.addOption("arg", "", false, "org.apache.commons.cli.OptionGroup");
      Option option0 = new Option("arg", "", true, "arg");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options2, (-1060), (-1060));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 102, options0, 1091, 1091);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("/");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.setDescPadding((-3690));
      helpFormatter0.printHelp("/", options0, true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 102, options0, 1091, 1091);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format("B((66Bz#-YUD[FEwNC", (Object[]) null);
      mockPrintWriter1.append((CharSequence) "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n", 0, 1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter1.close();
      options0.getOptions();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.US;
      Locale locale1 = locale0.stripExtensions();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "arg", (Object[]) null);
      boolean boolean0 = true;
      helpFormatter1.printHelp(printWriter0, 3190, "--", "' contains an illegal character : '", options0, 1, 3190, "", true);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, " ");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "", "RJ", options0, "\n", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "", false, "org.apache.commons.cli.OptionGroup");
      Option option0 = new Option("arg", "", true, "arg");
      Options options3 = options2.addOption(option0);
      options2.toString();
      helpFormatter0.printOptions(mockPrintWriter0, 3, options3, 3, 1);
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "B((66Bz#-YUD[FEwNC", options2, (-2603), (-1484), "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 1052;
      helpFormatter0.renderWrappedText(stringBuffer0, 1052, 1052, "");
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options1.addOption("{75\b", "-", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '{75\b' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 102, options0, 1091, 1091);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("B((66Bz#-YUD[FEwNC", (Object[]) null);
      mockPrintWriter1.append((CharSequence) "--");
      helpFormatter0.printHelp(printWriter1, 102, ">", ">", options0, 2, 900, "7W*:8m>#O|0ezS", true);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultOptPrefix = "7W*:8m>#O|0ezS";
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 15, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "", "", options0, "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.setDescPadding((-235));
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("\n", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.");
      mockPrintWriter0.print((float) 3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("9VP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp("9VP", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      int int0 = (-5817);
      Options options0 = new Options();
      Option option0 = new Option("arg", ">");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-5817), "F", "F", options0, (-5817), (-5817), "F");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2494, "A(5Nk1P/", (String) null, options1, 2494, (-403), "_j!{wJwSpXDd}$Al[J", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 1, "--");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter0, 3, options0, 3, 3);
      int int0 = 84;
      helpFormatter0.printHelp(printWriter0, 1091, "B((66Bz#-YUD[FEwNC", " 1c+{=#P=`_`}N1,WV", options1, 3, 84, "B((66Bz#-YUD[FEwNC", true);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      // Undeclared exception!
//      try { 
        printWriter0.append((CharSequence) "\n", (-4722), 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 63;
      int int1 = (-1438);
      String string0 = "has already been selected: '";
      helpFormatter0.setOptPrefix("has already been selected: '");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 63, (-1438));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setLeftPadding(290);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "igpP'V0TZJXOm!");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1658, (Options) null, 290, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.ITALIAN;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "--", options0, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-679), 1, "   ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 31;
      Options options0 = null;
      String string0 = "~Z";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, "~Z", (Options) null, "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1381), "~Z", "", options0, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = " | ";
      helpFormatter0.printHelp(31, " | ", "}wVqo$ZL9I+!wz-vS", options0, "-", true);
      helpFormatter0.printHelp(" | ", options0);
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 74);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = 31;
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(31, " | ", "}wVqo$ZL9I+!wz-vS", options0, "-", true);
      helpFormatter0.printHelp(" | ", options0);
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 74);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 1, "   ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName(".0Y A7rFGt");
      helpFormatter0.rtrim(".0Y A7rFGt");
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("--", ".0Y A7rFGt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = 0;
      String string0 = "SC$FUSfnpI o6XwLs";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option(".0Y A7rFGt", " ", true, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '.0Y A7rFGt' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      Options options1 = options0.addOption("7", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "cXFP27");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(">QN97rw>x1@pIrn.ui.", "7", options3, "fX);I'*^([l*je:", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("h", false, "--");
      helpFormatter0.printHelp(64, "org.apache.commons.cli.Option", "", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 31;
      String string0 = "7#L~'_39/";
      String string1 = "8CMM5Va";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, "7#L~'_39/", "8CMM5Va", (Options) null, "~Z", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n", 0, 1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter1.close();
      options0.getOptions();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}N4i .SLZ;Vw");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringBuffer1;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter0, 24, options0, 0, 1091);
      helpFormatter0.printHelp("}N4i .SLZ;Vw", "HhcZga^)R<)", options0, "i9");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", ">");
      Options options1 = options0.addOption(option0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", "", options1, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n", 0, 1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter1.close();
      options0.getOptions();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("|ZBI>J{n0L*s", "--", options0, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n", 0, 1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter1.close();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.printHelp("}N4i .SLZ;Vw", "", options0, (String) null);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2136), "<", (String) null, options0, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n", 0, 1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter1.close();
      options0.getOptions();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}N4i .SLZ;Vw");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringBuffer1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 0, 1091);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "B((66Bz#-YUD[FEwNC", "}N4i .SLZ;Vw", options0, 1091, (-2603), "", true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "&{.aBi9vV";
      int int0 = 1;
      String string0 = "";
      String string1 = "org.apache.commons.cli.Option";
      int int1 = (-2132);
      helpFormatter0.setDescPadding((-2132));
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "&{.aBi9vV", false, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "&{.aBi9vV");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-139), options1, (-1), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.defaultSyntaxPrefix = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.defaultOptPrefix = "";
      String string1 = "org.apache.commons.cli.Options";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Options", "org.apache.commons.cli.Options", options0, " | ", true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("8`6:k8)X&9aOnZ_", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "&{.aBi9vV";
      int int0 = 1;
      int int1 = (-2132);
      helpFormatter0.setDescPadding((-2132));
      Options options0 = new Options();
      String string0 = null;
      options0.addOption((String) null, "arg", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "&{.aBi9vV", "org.apache.commons.cli.Option", options0, "");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "", false, "org.apache.commons.cli.OptionGroup");
      Option option0 = new Option("", "", true, "");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 3, options3, 3, 1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "B((66Bz#-YUD[FEwNC", options2, (-2603), (-1484), "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      String string0 = "vZdy,l\"R5$.#n5fIH";
      MockFile mockFile0 = new MockFile("vZdy,l\"R5$.#n5fIH", "ko)w <Tdj-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 3, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "' was specified but an option from this group ";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "' was specified but an option from this group ";
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, (-2603), options0, 26, 2346);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(13);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n", 0, 1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter1.close();
      options0.getOptions();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      String string0 = null;
      helpFormatter0.printHelp("}N4i .SLZ;Vw", "", options0, (String) null);
      // Undeclared exception!
//      try { 
        options0.addOption("}N4i .SLZ;Vw", false, "}N4i .SLZ;Vw");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '}N4i .SLZ;Vw' contains an illegal character : '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n", 0, 1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter1.close();
      options0.getOptions();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.printHelp("}N4i .SLZ;Vw", "", options0, (String) null);
      helpFormatter0.getLeftPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLeftPadding(0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(448);
      String string0 = "]";
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("--", true, "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1723), (String) null, (String) null, options2, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "&{.aBi9vV";
      helpFormatter0.setDescPadding((-2132));
      Options options0 = new Options();
      options0.addOption((String) null, "arg", true, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "", "org.apache.commons.cli.Option", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", ">");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-5817), "", "", options0, (-5817), (-5817), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("XrCXZW+`Vg/");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(".2%C!%c+f*r7S1");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append((CharSequence) "usage: ");
      String string0 = "%*Uz!";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("`B|c", "[", false, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '`B|c' contains an illegal character : '`'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.setArgName("<");
      int int0 = 5397;
      String string1 = null;
      Options options0 = new Options();
      String string2 = "org.apache.commons.cli.OptionGroup";
      Option option0 = null;
//      try {
        option0 = new Option(" :: ", "--", true, "org.apache.commons.cli.OptionGroup");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' :: ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintWriter1.format((Locale) null, "arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2603), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      Options options1 = options0.addOption((String) null, true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "w$Ntibu(r");
      options1.addOption(option0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("\n", "w$Ntibu(r", options2, "`6?{LsQ", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      Options options1 = options0.addOption("7", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "cXFP27");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(">QN97rw>x1@pIrn.ui.", "7", options3, "fX);I'*^([l*je:", true);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0MSE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printHelp(printWriter0, 10, "7", "7", options2, 31, 2, "?1y`f^s1l+{N", true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 31;
      int int1 = 0;
      String string0 = "l`";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "7#L~'_39/", "l`", (Options) null, "~Z", false);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "' was specified but an option from this group ";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "' was specified but an option from this group ";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-2603), "Bq");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultArgName = "hM@2URw%?EQlJ0,tg";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = "hV9m:~J5";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "hV9m:~J5";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "hV9m:~J5", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("--", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 43;
      helpFormatter0.setNewLine("86Qy$ 7,9yqk_Z%");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLongOptPrefix("86Qy$ 7,9yqk_Z%");
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(43);
      helpFormatter0.getOptionComparator();
      assertEquals("86Qy$ 7,9yqk_Z%", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "vO+n&HLA3s9\\+C1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vO+n&HLA3s9+C1");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "vO+n&HLA3s9+C1");
      helpFormatter0.setSyntaxPrefix("TaLz5!");
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "J81cUZ,^n0!)B[z=r";
      int int0 = (-1103);
      helpFormatter0.findWrapPos("J81cUZ,^n0!)B[z=r", (-1103), (-1103));
      String string2 = ";l\\Yrj9 ";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", "", true, "%(5e}9s");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption(";lYrj9 ", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ';lYrj9 ' contains an illegal character : ';'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n", 0, 1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter1.close();
      options0.getOptions();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.setOptPrefix("");
      assertEquals("", helpFormatter0.getOptPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.setDescPadding(0);
      assertEquals("-", helpFormatter1.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      String string0 = "24\"'6Y/XrSVklj";
      helpFormatter0.setOptPrefix("24\"'6Y/XrSVklj");
      helpFormatter0.setNewLine((String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.setWidth(1);
      helpFormatter0.setSyntaxPrefix("24\"'6Y/XrSVklj");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("org.apache.commons.cli.ParseException", "Xz9Kud|M0mX-s@m,", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getNewLine();
      assertEquals("", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(31);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("E*@:", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
//      try { 
        MockURI.URI("\n");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Illegal character in path at index 0: 
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }
}
