/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:10:42 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasShortOption("arg");
      Option option0 = new Option("", false, "--");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp("--", options1, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.setWidth((-655));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "--");
      helpFormatter0.printHelp("-", "\n", options1, " ");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("usage: ", " ", options0, "--", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-515);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", "\n", (Options) null, "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.ITALY;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "[ Options: [ short ", (Object[]) null);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3073);
      helpFormatter0.setLeftPadding((-3073));
      helpFormatter0.getLeftPadding();
      String string0 = null;
      String string1 = "s>@}|*";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "|9gDGlR<Jr", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Option option0 = new Option((String) null, false, "");
      Options options3 = options2.addOption(option0);
      options3.addOption(option0);
      // Undeclared exception!
//      try { 
        options3.addOption("usage: ", false, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 22, (-226), "LUJq2JnkC/0h");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(64, "org.apache.commons.cli.Util", (String) null, (Options) null, "Dkvu8b/6uH%~(o_C!(=", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "uIXX6?r";
      int int0 = 276;
      helpFormatter0.defaultDescPad = 276;
      helpFormatter0.defaultLongOptPrefix = "uIXX6?r";
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 13, 1004, "The option '");
      Options options0 = new Options();
      stringWriter0.append((CharSequence) stringBuffer1);
      helpFormatter0.defaultWidth = (-1565);
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.renderOptions(stringBuffer1, 1004, options1, 13, 13);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("The option '", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      String string0 = helpFormatter0.defaultOptPrefix;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "26+J*", (Options) null, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-120), options0, 31, (-1251));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "Ed9p");
      Option option0 = new Option("LI", (String) null, false, " ");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1736), options3, 630, 2557);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "[ Options: [ short ";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("Kv^_4#q:\"+");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-2), "Kv^_4#q:\"+");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.flush();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "\n");
      byteArrayOutputStream0.flush();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "y&P%+*_'|");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, "   ", "2|':g;DB*s;8", (Options) null, "2|':g;DB*s;8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 754;
      helpFormatter0.setWidth(3039);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "0U nZQy");
      helpFormatter0.printHelp(" | ", " | ", options1, "0U nZQy");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\"');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 103, 3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 6, 10, "");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 70, 70, "$';~Wrf#Dpv7");
      helpFormatter0.setSyntaxPrefix("$';~Wrf#Dpv7");
      helpFormatter0.getOptionComparator();
      String string0 = null;
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string2 = "s(,ls";
      // Undeclared exception!
//      try { 
        options1.addOption("[ARG...]", "--", false, "s(,ls");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ARG...]' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("arg");
      helpFormatter0.defaultSyntaxPrefix = "<";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "arg", "-", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      Collection collection0 = options0.getOptionGroups();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = new Locale("]");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) collection0;
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter1 = mockPrintWriter1.append('U');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, 1950, "Cannot add value, list full.", (String) null, options0, 12, (-1025), " ", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", true, "6qDEFdt}");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("[", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      options1.addOption("arg", false, "usage: ");
      Options options2 = options0.addOption("C", "DyHE^ANt4", true, (String) null);
      helpFormatter0.printHelp("arg", "<k@F^+{l", options2, "-");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, " ");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~&C{", options0, true);
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "jD~1!dGq25N8F67Jc6", "]CY1", options0, 12, 12, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "CKr>3{&vSp8;Y31f";
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "", options0);
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 1, 74);
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("usage: ", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("J", true, "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1, true);
      helpFormatter1.setLongOptPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter0.printHelp(74, "arg", "v%eR]|[", options1, (String) null, false);
      helpFormatter1.findWrapPos("*R4\"DISw", 3, 3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~&C{", options0, true);
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "jD~1!dGq25N8F67Jc6", "]CY1", options0, 12, 12, "", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 12, " ]", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "~&C{", (Options) null, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "p=1SsUv%%";
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, 74, options0, 3, 74);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", true, "arg");
      options1.hasShortOption("--");
      options2.getOptionGroups();
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.setNewLine("rNo9=Ue");
      helpFormatter0.findWrapPos("fS\":p6u}s;qy>", (-886), 1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options1, 784, (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "$D!2sX$1M", options0, "p", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~&C{", options0, true);
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter1.defaultWidth = 3;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1268, "usage: ", "&(\"qs", options1, 1838, 74, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "~&C{";
      boolean boolean0 = false;
      helpFormatter0.printHelp("~&C{", options0, false);
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string1 = "]CY1";
      String string2 = null;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 55, "]CY1", "", options1, 2, 12, (String) null, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 55, " ]", options1);
      helpFormatter0.getNewLine();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      Options options1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("'", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1, true);
      helpFormatter1.setLongOptPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 63, "arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption((String) null, (String) null, false, "GZ9%h>).o5MHM_`kKMC");
      StringWriter stringWriter0 = new StringWriter(6);
      stringWriter0.append((CharSequence) "GZ9%h>).o5MHM_`kKMC");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 58, "0", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("IS");
      Option option0 = new Option("", "0m?QD ZnU{ 6=");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      Options options3 = options0.addOption("arg", "", true, " ");
      options3.hasShortOption("");
      String string0 = "HJ7T9L6Xi-K";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1122), "fS\":p6u}s;qy>", "HJ7T9L6Xi-K", options2, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", true, "arg");
      options1.hasShortOption("--");
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.setNewLine("rNo9=Ue");
      helpFormatter0.findWrapPos("fS\":p6u}s;qy>", (-886), 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1494), options0, 717, 5);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption((String) null, (String) null, false, "GZ9%h>).o5MHM_`kKMC");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.printHelp("q^@<7Yq", "", options0, "0");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.getArgName();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "\n", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "arg", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      options1.addOption("arg", "rNo9=Ue", true, "arg");
      options1.hasShortOption("--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.printf("Illegal option name '", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("--", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1494), "rNo9=Ue", "rNo9=Ue", options0, (-1494), 12, "--", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 195, (String) null, "<", options0, 64, 1, "?Z_", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "\n", options0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "\n", options0, 15, 12, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("i", true, "i");
      helpFormatter0.printHelp("]", "i", options1, "31f2~");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "", true, "u2a*/");
      options2.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.printHelp("u2a*/", "u2a*/", options2, "-");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      helpFormatter0.rtrim("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Vm;LR*DK");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("HWm>e8zCgv ]g>");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "Vm;LR*DK";
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 3303, "=zpCB", "lWMi:Do`+un", options0, (-389), (-389), "&5~|Jh7 >OcpgLn({", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("H>2\fr{WuLn+!B");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1.zDog1QVUMi.&*0Fa$", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 127, "H>2\fr{WuLn+!B", "!^;2z\"-hKY(,/c", options0, 2, 13, "!^;2z\"-hKY(,/c", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", true, "arg");
      options1.hasShortOption("--");
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.printHelp("fS\":p6u}s;qy>", "rNo9=Ue", options1, "");
      helpFormatter0.printHelp("$T)", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options3 = options0.addOption((String) null, false, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 64, options3, 1, 50);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      helpFormatter0.rtrim("]");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("]", 74, (-1243));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("line.separator", "MUd,2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("]");
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 690, "&!`=t;S", "", options0, 1, 1583, "\n", false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "PIj@", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 195, "arg", "P@&Jyg`y]", options0, 1808, 1, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      helpFormatter0.rtrim("]");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 195, (String) null, options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "Ur>", "", options0, 1808, 85, "]", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", true, "arg");
      options1.hasShortOption("--");
      helpFormatter0.defaultLeftPad = 2919;
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.setNewLine("rNo9=Ue");
      helpFormatter0.findWrapPos("fS\":p6u}s;qy>", (-886), 1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("fS\":p6u}s;qy>", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "[ARG...]");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "arg");
      Options options1 = options0.addOption(option1);
      Options options2 = new Options();
      options1.hasShortOption("usage: ");
      helpFormatter0.printHelp((-1), "fS\":p6u}s;qy>", "", options0, "tWOtB_mxu@'%", true);
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("fS\":p6u}s;qy>", 3, 3);
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("", 3, 1293);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.renderOptions(stringBuffer0, (-540), options0, 1, 1);
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.printHelp(">", "p.%&A@1qc}OBZ%`i", options0, "8yQZin@a/ ;ik!'");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((int) (byte)34, "", "arg", options0, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      helpFormatter0.rtrim("]");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 195, (String) null, options0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "Ur>", "", options0, 1808, 85, "]", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~&C{", options0, true);
      helpFormatter0.setLongOptPrefix("}],l");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      helpFormatter0.renderOptions(stringBuffer1, 1513, options1, 64, 1513);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 35, "", options1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "s5%%,O^U-c$yr@F,<P ", options1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rNo9=Ue";
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", true, "arg");
      options1.hasShortOption("--");
      String string1 = "fS\":p6u}s;qy>";
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.setNewLine("rNo9=Ue");
      options0.hasShortOption("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "' contains an illegal character : '", "fS\":p6u}s;qy>", options2, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "[ARG...]");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", "arg");
      Options options1 = options0.addOption(option1);
      Options options2 = new Options();
      options1.hasShortOption("%A<yDP1gE9{Q");
      options1.addOption("arg", "\n", false, "arg");
      options1.hasShortOption("--");
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "-", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = " ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.setLongOptPrefix("~&C{");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      stringWriter0.flush();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 404, "");
      mockPrintWriter0.close();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "~&C{", options1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "~&C{", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("}],l");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rNo9=Ue";
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", true, "arg");
      options1.hasShortOption("--");
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.setNewLine("rNo9=Ue");
      options0.hasShortOption("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "fS\":p6u}s;qy>");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = stringBuffer0.append((long) 3);
      stringBuffer1.append(1297);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("}],l", options0, false);
      helpFormatter0.setLongOptPrefix("~&C{");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('X');
      stringWriter2.flush();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2105, "");
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "}],l", options1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = " ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      StringBuffer stringBuffer1 = stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~&C{", options0, true);
      helpFormatter0.setLongOptPrefix("}],l");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer0);
      stringBuffer1.append(stringBuffer2);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 85, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, (-1), "--");
      helpFormatter0.findWrapPos("]", (-1), 1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~&C{", options0, true);
      helpFormatter0.setLongOptPrefix("}],l");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      options0.hasShortOption("}],l");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp(13, "}],l", "s5%%,O^U-c$yr@F,<P ", options1, "");
      helpFormatter0.printHelp("G", options1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "HO4N'9Q+~r@", options1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = " ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("usage: ", "<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "--");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rNo9=Ue";
      Options options0 = new Options();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.flush();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 59;
      helpFormatter0.defaultWidth = 59;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = " ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      int int0 = 2276;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2276, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("", false, "usage: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 19, "1;ElM>xwL|slg;e", "", options0, 64, 1677, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      StringWriter stringWriter0 = new StringWriter(32);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((long) 32);
      stringBuffer1.append(9);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", options1, true);
      helpFormatter0.setLongOptPrefix("}],l");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(74);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) stringBuffer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter3);
      stringWriter2.flush();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 887, " ", options0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~&C{", options0, true);
      helpFormatter0.setLongOptPrefix("}],l");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp(13, "}],l", "s5%%,O^U-c$yr@F,<P ", options1, "");
      helpFormatter0.printHelp("s5%%,O^U-c$yr@F,<P ", (String) null, options1, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", false, "arg");
      options1.hasShortOption("--");
      String string0 = "fS\":p6u}s;qy>";
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("rNo9=Ue");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1677, options1, (-2), 1677);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-861);
      helpFormatter0.findWrapPos(" ] [ long ", (-293), (-293));
      MockFile mockFile0 = new MockFile((File) null, ">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 574, " ] [ long ", " ] [ long ", options0, 63, (-293), " ] [ long ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("");
      MockFile mockFile0 = new MockFile("ujw3_B=El;|VFm^*", "");
      MockFile mockFile1 = new MockFile(mockFile0, "ujw3_B=El;|VFm^*");
      File file0 = MockFile.createTempFile("usage: ", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3046), "qh(=}]J7HTqkmaQ8");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.flush();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1690, "Y^tm", "N&[Q,\"D", options0, 4457, 2105, "-\ftkT:Gh");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "N&[Q,\"D");
      helpFormatter0.findWrapPos("Y^tm", 63, 74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1830);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 71, "gGt[S![");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1677;
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "[ARG...]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", "arg");
      Options options1 = options0.addOption(option1);
      Options options2 = new Options();
      options1.hasShortOption("%A<yDP1gE9{Q");
      options1.addOption("arg", "\n", false, "arg");
      options1.hasShortOption("--");
      String string0 = "6Lq;fQEY+Z<";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 35, "", "wO\"@t", options1, (-2), 9, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      helpFormatter0.printHelp(338, "6Lq;fQEY+Z<", (String) null, options0, "6Lq;fQEY+Z<", false);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine(" | ");
      options0.hasShortOption("(m|u_`(k");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(":+fHpga^dvQx9lK", "usage: ", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 885, 1, "cmdLineSyntax not provided");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1339), 338, "Fj?z=d_1y]+");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "udQ[4H?(=[P";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Q;NtuJ21", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1677;
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(2098, "rNo9=Ue", "yR^", options1, "~W2Ji]*uqz9i3Ot", true);
      helpFormatter0.getArgName();
      String string0 = "line.separator";
      options1.hasShortOption("line.separator");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.Util", options1, " ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-539), 10, "S9,Hc.-]tU");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1463;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int1 = 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "qh(=}]J7HTqkmaQ8", options2, 1129, 63, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.mark(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_R59+Wr[}C;U2Ecr");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "_R59+Wr[}C;U2Ecr");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      file0.mkdirs();
      helpFormatter0.rtrim("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1363, "I7L=@cy(s");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, " ");
      Options options1 = new Options();
      helpFormatter0.findWrapPos("9ti465\"pYh", 3124, 9);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = " ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~&C{", options0, true);
      helpFormatter0.setLongOptPrefix("}],l");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.flush();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2314, "");
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-902), "~&C{", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rNo9=Ue";
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", false, "arg");
      options1.hasShortOption("--");
      Options options3 = options0.addOption(option0);
      helpFormatter0.printHelp("-", "", options3, "", true);
      option0.setOptionalArg(false);
      options2.addOption(option0);
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("rNo9=Ue");
      options0.hasShortOption("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "fS\":p6u}s;qy>");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1463;
      String string0 = "";
      Options options0 = new Options();
      options0.addOption("arg", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int1 = 1966;
      int int2 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "m@g117K~&CDvlgc4k_d", "m@g117K~&CDvlgc4k_d", options0, 1463, 1463, "!T;A,y{xiN;6'");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 879);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1463;
      String string0 = "m@g117K~&CDvlgc4k_d";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "");
      optionGroup0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1463, "m@g117K~&CDvlgc4k_d", "", options2, 1966, 0, "m@g117K~&CDvlgc4k_d");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "m@g117K~&CDvlgc4k_d";
      int int0 = (-695);
      String string1 = "";
      Options options0 = new Options();
      options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1966, "", "JQu!mLn", options1, 1966, (-1741), "m@g117K~&CDvlgc4k_d");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      int int0 = 0;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 35, "qh(=}]J7HTqkmaQ8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3);
      helpFormatter0.createPadding(412);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1474), 1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 240, (-1474), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 527, 527);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 2105, "");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "--", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1463;
      String string0 = "m@g117K~&CDvlgc4k_d";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-695), "m@g117K~&CDvlgc4k_d", "", options2, 1966, 0, "m@g117K~&CDvlgc4k_d");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("<6gFW=rA387p9e", options0, true);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, " <UNuJDRdL", options1, " <UNuJDRdL");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.flush();
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 2105, "");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2105, "", "--", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setArgName("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding(3579);
      helpFormatter0.setDescPadding((-724));
      helpFormatter0.setArgName("--");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      helpFormatter0.rtrim("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, ".szG");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("}],l", options1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      assertEquals("\n", stringWriter0.toString());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      
      int int1 = helpFormatter0.getLeftPadding();
      assertEquals(1, int1);
      
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "h");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = "}],l";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options1, false);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "RqXU`po)B U[N8;W)");
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("RqXU`po)B U[N8;W)\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding((-1233));
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 31;
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "arg", 31, (-1255));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]so>7L?L";
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.setLongOptPrefix((String) null);
      Option option0 = null;
//      try {
        option0 = new Option(" ", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = " ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((-1L));
      stringBuffer0.append(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-881), (-881), " ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      
      int int1 = helpFormatter0.getLeftPadding();
      assertEquals(1, int1);
      
      File file0 = MockFile.createTempFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)64;
      mockFileOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setOptPrefix("line.separator");
      PrintWriter printWriter0 = null;
      int int0 = 1;
      String string1 = "I*f$";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", true, (String) null);
      Options options1 = options0.addOption(option0);
      String string2 = "usage: ";
      // Undeclared exception!
//      try { 
        options1.addOption(" ", "usage: ", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptPrefix((String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`9\"|\\\\";
      String string1 = " :: ";
      Options options0 = new Options();
      String string2 = "--";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(521, (String) null, "--", options0, "_b5@", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rNo9=Ue";
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", "rNo9=Ue", false, "arg");
      options1.hasShortOption("--");
      helpFormatter0.printHelp(1677, "rNo9=Ue", "rNo9=Ue", options2, "fS\":p6u}s;qy>", true);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("rNo9=Ue");
      options0.hasShortOption("usage: ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "fS\":p6u}s;qy>");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-708), "", (String) null, options0, "O]HJY'cWoxlpJ5", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3809));
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3809), (-3809), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "";
      String string1 = "org.apache.commons.cli.OptionGroup";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.hasLongOption("usage: ");
      // Undeclared exception!
//      try { 
        options0.addOption("--", false, "t',((j");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", "org.apache.commons.cli.Option", (Options) null, "org.apache.commons.cli.Option", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      String string0 = "$';~Wrf#Dpv7";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(1, 'v');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }
}
