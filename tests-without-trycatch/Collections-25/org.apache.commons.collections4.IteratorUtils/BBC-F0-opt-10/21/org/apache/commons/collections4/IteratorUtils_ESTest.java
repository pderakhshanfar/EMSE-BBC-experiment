/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:06:13 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Integer>) singletonIterator0, 2410);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2409
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<DataTruncation, ArrayList<SQLException>> hashtable0 = new Hashtable<DataTruncation, ArrayList<SQLException>>();
      EntrySetMapIterator<DataTruncation, ArrayList<SQLException>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, ArrayList<SQLException>>(hashtable0);
      OrderedMapIterator<DataTruncation, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) resettableListIterator0);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2072), (-623));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<Predicate<Object>, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Predicate<Object>, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Predicate<Object>, SQLTransactionRollbackException>(orderedMapIterator0);
      MapIterator<Predicate<Object>, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Predicate<Object>, ? extends SQLTransientException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<Predicate<Object>, SQLTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.FilteringMode>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Iterator<Locale.FilteringMode>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Iterator<Locale.FilteringMode>, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Iterator<Locale.FilteringMode>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<Locale.FilteringMode>, SQLIntegrityConstraintViolationException>(hashMap0);
      List<Iterator<Locale.FilteringMode>> list0 = IteratorUtils.toList((Iterator<? extends Iterator<Locale.FilteringMode>>) entrySetMapIterator0, 7);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, class0);
      assertNotSame(sQLTransientConnectionExceptionArray1, sQLTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<Predicate<SQLIntegrityConstraintViolationException>, Transformer<SQLTransientConnectionException, Hashtable>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, false);
      SkippingIterator<Locale.FilteringMode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.FilteringMode>) singletonIterator0, (long) 1);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) null);
      Integer integer0 = IteratorUtils.get((Iterator<Integer>) singletonIterator0, 0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Properties> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Properties>) predicate0);
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[4] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 4);
      Properties properties1 = IteratorUtils.find((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate1);
      assertEquals(0, properties1.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, StringTokenizer>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) mapIterator0, (Transformer<? super SQLException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<SQLDataException>[] arrayListArray0 = (ArrayList<SQLDataException>[]) Array.newInstance(ArrayList.class, 9);
      ResettableListIterator<ArrayList<SQLDataException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLNonTransientException>[] hashtableArray0 = (Hashtable<SQLClientInfoException, SQLNonTransientException>[]) Array.newInstance(Hashtable.class, 0);
      ResettableListIterator<Hashtable<SQLClientInfoException, SQLNonTransientException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashtableArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(5);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<?>) singletonIterator0, (Iterator<?>) null, (Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1640));
      integerArray0[0] = integer0;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Integer, String> invokerTransformer0 = new InvokerTransformer<Integer, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) resettableListIterator0, (Transformer<? super Integer, String>) invokerTransformer0, "<", "Max parameter must not be negative.", "34;Fc2Bb@trx");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add(integer0);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) loopingIterator0, 332);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException((String) null, "@;d{Qk|.", mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ni{[*`o_sC`vN@Yo,3", "S ", 4768, sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("4`O1T/-|A+$yrU", "", sQLTimeoutException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("", classArray0, sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends BatchUpdateException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      Integer integer0 = new Integer(377);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(predicate0, (Transformer<? super Object, ? extends Integer>) null, (Transformer<? super Object, ? extends Integer>) null);
      Iterator<Integer> iterator1 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) iterator1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(loopingIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      linkedList0.offerLast(sQLDataException0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) listIteratorWrapper0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.FilteringMode>) singletonIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Object[] objectArray0 = new Object[5];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) objectArrayListIterator0, (Iterator<?>) objectArrayListIterator0, (Iterator<?>) singletonIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Integer>) null, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(onePredicate0, onePredicate0);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      predicateArray0[1] = (Predicate<Object>) transformerPredicate0;
      Predicate<SQLException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLException>) onePredicate0, (Predicate<? super SQLException>) predicateArray0[1]);
      // Undeclared exception!
      IteratorUtils.find((Iterator<SQLNonTransientException>) singletonIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>((Predicate<? super SQLException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLWarning>) objectArrayIterator0, (Predicate<? super SQLWarning>) nullIsExceptionPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Transformer<SQLException, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("XPD65s{,O");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, (Transformer<? super SQLFeatureNotSupportedException, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.contains(iterator0, (Object) stack0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'XPD65s{,O' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      arrayList0.add(iIOMetadataNode0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<IIOMetadataNode>) resettableListIterator0, (Object) enumeration0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      arrayList0.add(iIOMetadataNode0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("cA)o]RbX+xPF?>\"dHz", "cA)o]RbX+xPF?>\"dHz", 1499, intArray0, sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.contains((Iterator<IIOMetadataNode>) resettableListIterator0, (Object) batchUpdateException0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableIterator0, (-1690L), (-1690L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Predicate<Object>[]) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(clientInfoStatusArray0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1, 8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 2087);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 6);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      linkedListArray0[0] = linkedList0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) linkedListArray0[0], (-1), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedIterator<ServiceLoader<SQLTransientConnectionException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, 1890);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(")]u9J!\"gRg?W6", "+`Mqe(*4-@4");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, (-36));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 1369, 91);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 113);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-667), (-40));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 2363);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Object>(orderedMapIterator0);
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<String>) abstractOrderedMapIteratorDecorator0, (Transformer<? super String, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) null, (Transformer<? super Vector<IIOMetadataNode>, String>) transformer0, "i@J6b,H|%=N$os", "i@J6b,H|%=N$os", "i@J6b,H|%=N$os");
      assertEquals("i@J6b,H|%=N$osi@J6b,H|%=N$os", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      Integer integer0 = new Integer(5);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(sQLTransientConnectionExceptionArray0, 5);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonIterator0, (Iterator<?>) objectArrayListIterator0, (Iterator<?>) objectArrayListIterator0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) instanceofPredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 5, 5);
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, 0L, 0L);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super String, String>) transformer0, "n}`", "", "#1ys8SHF");
      assertEquals("null#1ys8SHF", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("#&DSRj@bo,Cv");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) resettableIterator0, (Transformer<? super StringTokenizer, String>) factoryTransformer0, "#&DSRj@bo,Cv", "#&DSRj@bo,Cv", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) null, (Transformer<? super Vector<IIOMetadataNode>, String>) transformer0, "Iterator must not be null", (String) null, "s<~MrRCKw{yU");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Object>(orderedMapIterator0);
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) abstractOrderedMapIteratorDecorator0, (Transformer<? super String, String>) transformer0, (String) null, "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLException sQLException0 = new SQLException(":l@Wz;&@'phZ!6%7");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":l@Wz;&@'phZ!6%7", ":l@Wz;&@'phZ!6%7", sQLException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1570), true, true, (-1570), (-1570), sQLFeatureNotSupportedException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(vector0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      vector0.add(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) loopingListIterator0, 555);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0, 4279);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`77/B-");
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) anyPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Transformer must not be null");
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(listIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>(">M", classArray0, classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '>M' on 'class java.util.Locale$FilteringMode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 6);
      ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>>(linkedListArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<LinkedList<SQLInvalidAuthorizationSpecException>>) objectArrayIterator0, (Object) linkedListArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformedPredicate<SQLClientInfoException> transformedPredicate0 = new TransformedPredicate<SQLClientInfoException>(transformer0, (Predicate<? super SQLClientInfoException>) null);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) transformedPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("transformer may not be null");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Properties> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Properties>) predicate0);
      Properties[] propertiesArray0 = new Properties[5];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 4);
      Properties properties0 = IteratorUtils.find((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate1);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      Predicate<SQLTransientException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLTransientException>) orPredicate0, (Predicate<? super SQLTransientException>) orPredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLTransientException>) predicate1);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Properties properties0 = IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) nullIsTruePredicate0);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>((Predicate<? super SQLException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLWarning>) objectArrayIterator0, (Predicate<? super SQLWarning>) nullIsExceptionPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", ">[*3'4cI :rX2V", mockThrowable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) priorityQueue0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) listIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) priorityQueue0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) null, (Closure<? super SQLSyntaxErrorException>) closure0);
      assertFalse(priorityQueue0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.InstanceofPredicate");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Transformer must not be null", "%zMI&Y2sl~F", 2037);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("H}srgBTF@M8$%!yR|", "null keys not allowed", (int[]) null, sQLTransientConnectionException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(batchUpdateException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<Integer, PriorityQueue<HashSet>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0, (-1276));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (-241));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, TreeSet<ClientInfoStatus>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Class<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(loopingIterator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) listIteratorWrapper0, class0);
      assertEquals(0, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends Iterator<Locale.FilteringMode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("SmwA$}&#B-6W1{Q?F]", "SmwA$}&#B-6W1{Q?F]", sQLClientInfoException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Class<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) treeSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Properties properties0 = new Properties();
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("", (Class<?>[]) null, (Object[]) null);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) invokerTransformer0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("<");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      iteratorArray0[4] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicateArray0[0]);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("j<dj%=d9*vq+GBP");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTransactionRollbackException0);
      priorityQueue0.add(sQLClientInfoException0);
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      Predicate<SQLClientInfoException> predicate1 = AnyPredicate.anyPredicate((Predicate<? super SQLClientInfoException>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) resettableListIterator0, (Predicate<? super Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) orderedIterator0, (Predicate<? super Integer>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) singletonIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLException sQLException0 = new SQLException("Cannot remove from list until next() or previous() called", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLException0);
      ConstantTransformer<Object, SQLInvalidAuthorizationSpecException> constantTransformer0 = new ConstantTransformer<Object, SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends SQLInvalidAuthorizationSpecException>) constantTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Object[] objectArray0 = new Object[2];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) objectArrayListIterator0, (Iterator<?>) objectArrayListIterator0, (Iterator<?>) singletonIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) allPredicate0);
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*efbvTg4'M_hZRC");
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 1008L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer(3115);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Factory<String> factory0 = ConstantFactory.constantFactory("List must not be null");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, factoryTransformer0, factoryTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) singletonIterator0, (Transformer<? super Integer, String>) ifTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) singletonIterator0, 2218, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, (-103));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("jQUs;zr5Q2!FVlXN=B!", "jQUs;zr5Q2!FVlXN=B!", (Throwable) null);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) singletonListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("", classArray0, sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends BatchUpdateException>) invokerTransformer0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException>(orderedMapIterator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, (-97L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableListIterator<DataInputStream> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataInputStream>) resettableListIterator0, (Transformer<? super DataInputStream, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 6);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>>(linkedListArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<LinkedList<SQLInvalidAuthorizationSpecException>>) objectArrayIterator0, (Object) linkedList0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 50);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) anyPredicate0, 1078);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Locale.FilteringMode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }
}
