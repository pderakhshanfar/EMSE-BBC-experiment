/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:47:13 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>((Locale.Category) null);
      IteratorUtils.get((Iterator<Locale.Category>) singletonIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) orderedIterator0, (Class<SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Transformer<Object, Locale.Category> transformer1 = ConstantTransformer.constantTransformer(locale_Category0);
      Transformer<Object, Locale.Category> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) transformerPredicate0, (Transformer<? super Object, ? extends Locale.Category>) transformer1, (Transformer<? super Object, ? extends Locale.Category>) transformer1);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer2);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      String string0 = "org.apache.commons.collections4.iterators.SingletonIterator";
      Transformer<String, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("org.apache.commons.collections4.iterators.SingletonIterator", (Transformer<? super String, ? extends String>) transformer0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 7);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      Class<SQLIntegrityConstraintViolationException> class6 = SQLIntegrityConstraintViolationException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, Transformer<BatchUpdateException, SQLInvalidAuthorizationSpecException>> invokerTransformer0 = new InvokerTransformer<Object, Transformer<BatchUpdateException, SQLInvalidAuthorizationSpecException>>("org.apache.commons.collections4.iterators.SingletonIterator", classArray0, classArray0);
      Iterator<Transformer<BatchUpdateException, SQLInvalidAuthorizationSpecException>> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends String>) iterator0, (Transformer<? super String, ? extends Transformer<BatchUpdateException, SQLInvalidAuthorizationSpecException>>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Transformer<BatchUpdateException, SQLInvalidAuthorizationSpecException>>) iterator1, 1L, 0L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) mapIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("iI|h(%t");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "iI|h(%t");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'iI|h(%t' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("4", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("4", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException((String) null, "", 1);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 44, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%d5rzHNIkkm[T9nGd");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("4", "!nIZE+y_^", 44);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Iterator<SQLException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableIterator0, (Predicate<? super SQLException>) nonePredicate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLException>) nonePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) mapIterator0, 0L);
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) skippingIterator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) transformedPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IteratorUtils.get((Iterator<Locale.Category>) singletonListIterator0, 0);
      IteratorUtils.pushbackIterator((Iterator<?>) singletonListIterator0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "R7D|", true);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("R7D|", "R7D|");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("R7D|", "suffix may not be null");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("R7D|", "");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("", "");
      stringTokenizerArray0[5] = stringTokenizer5;
      int int0 = (-959);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 0, (-959));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) transformedPredicate0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation0 = new DataTruncation((-83), true, true, (-1), (-1));
      dataTruncationArray0[0] = dataTruncation0;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      Transformer<DataTruncation, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) zippingIterator0, (Transformer<? super DataTruncation, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KM8-s}V9sJC|");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("KM8-s}V9sJC|");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 20);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(list0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) loopingIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("f/n+l]55S^", "f/n+l]55S^", hashMap0);
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Transformer<? super IIOMetadataNode, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLException>) iterator1, class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) stack0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cw-n:5{{1{MJ4nC|");
      stack0.removeElement(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      stack0.add(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "yFx7hnsymSx ", "", "_Da5yQstJ");
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) orderedIterator0, (Transformer<? super BatchUpdateException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Boolean[]) null, 780, 780);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Node must not be null");
      HashMap<DataTruncation, Properties> hashMap0 = new HashMap<DataTruncation, Properties>();
      EntrySetMapIterator<DataTruncation, Properties> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, Properties>(hashMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.toList((Iterator<? extends SQLWarning>) entrySetMapIterator0);
      int int0 = 1145;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = 1009;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1145, 1009);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 154;
      Integer integer0 = new Integer(154);
      IteratorUtils.getIterator(integer0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableIterator0);
      LoopingIterator<Locale.Category> loopingIterator0 = new LoopingIterator<Locale.Category>(list0);
      IteratorUtils.get((Iterator<Locale.Category>) loopingIterator0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, LinkedHashSet<DataTruncation>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NullPredicate.nullPredicate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 5);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[2];
      intArray0[0] = (-3069);
      intArray0[1] = (-3069);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Enumeration must not be null", (-3069), intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator0;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<BatchUpdateException>) resettableListIterator1;
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) iteratorArray0[1]);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) listIterator0;
      ResettableListIterator<BatchUpdateException> resettableListIterator2 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      iteratorArray0[3] = (Iterator<BatchUpdateException>) resettableListIterator2;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(">KRH;]UGEN");
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(">KRH;]UGEN");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, constantTransformer0, constantTransformer0);
      IteratorUtils.toString((Iterator<SQLTransientException>) listIterator0, (Transformer<? super SQLTransientException, String>) ifTransformer0, "np%odCCk3E*4", "org.apache.commons.collections4.set.ListOrderedSet", "()-W`HTX'4]/");
      OrderedMapIterator<SQLTimeoutException, ArrayList<Hashtable>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      Integer integer0 = new Integer(669);
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.size(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      IteratorUtils.emptyListIterator();
      int int0 = 2193;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 2193);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<HashSet<LinkedHashSet>>) null, (Closure<? super HashSet<LinkedHashSet>>) closure0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      IteratorUtils.singletonListIterator((Properties) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      IteratorUtils.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 32);
      DefaultEquator.defaultEquator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((ArrayList<SQLInvalidAuthorizationSpecException>[]) null, 3143, (-2525));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      IteratorUtils.singletonListIterator((Properties) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      IteratorUtils.emptyOrderedMapIterator();
      Class<Locale.Category>[] classArray0 = (Class<Locale.Category>[]) Array.newInstance(Class.class, 4);
      Class<Locale.Category> class0 = Locale.Category.class;
      classArray0[0] = class0;
      Class<Locale.Category> class1 = Locale.Category.class;
      classArray0[1] = class1;
      Class<Locale.Category> class2 = Locale.Category.class;
      classArray0[2] = class2;
      Class<Locale.Category> class3 = Locale.Category.class;
      classArray0[3] = class3;
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0, (String) null, (String) null, "PKf!");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Properties> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Properties>>) arrayDeque0);
      Stack<Properties> stack0 = new Stack<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) stack0);
      IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 3);
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      classArray0[2] = class0;
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory0 = null;
//      try {
        instantiateFactory0 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class0, classArray0, objectArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // InstantiateFactory: The constructor must exist and be public 
//         //
//         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyListIterator();
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) orderedIterator0);
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("'1+", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0, "", "", "");
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      HashMap<Object, SQLNonTransientException> hashMap1 = new HashMap<Object, SQLNonTransientException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.removeChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // oldChild == null!
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyListIterator();
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) orderedIterator0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0, "", "", "NgTl.xW");
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      HashMap<Object, SQLNonTransientException> hashMap1 = new HashMap<Object, SQLNonTransientException>();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) objectArrayListIterator0, (Transformer<? super SQLException, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.Category>) null, (-503));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -503
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) resettableIterator0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 3);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[0] = class1;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      classArray0[1] = class2;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      classArray0[2] = class3;
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("NgTl.xW", classArray0, classArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(instanceofPredicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) ifTransformer0, "", "Map is empty", "org.apache.commons.collections4.IteratorUtils");
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientException>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator((Properties) null);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.size(iterator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) orderedIterator0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("NgTl.xW", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0, "Iterator must not be null", "", "Iterator must not be null");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NgTl.xW", "Iterator must not be null", 0, sQLNonTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "org.apache.commons.collections4.list.TreeList", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("NgTl.xW");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException((String) null, "Iterator must not be null", 0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("NgTl.xW", "Iterator must not be null");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("Iterator must not be null");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("", "Fc|]&X\"R&i", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException(sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("Set must not be null", "", 100, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 3, (-533));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      MapIterator<Properties, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator((Properties) null);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.size(iterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) orderedIterator0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("NgTl.xW", classArray0, objectArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0, "Iterator must not be null", "NgTl.xW", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      Vector<IIOMetadataNode> vector1 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector1);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) predicate1);
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer0 = new PredicateTransformer<SQLFeatureNotSupportedException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Iterator<?> iterator0 = IteratorUtils.getIterator("k");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator((Properties) null);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.size(iterator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) orderedIterator0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      int[] intArray0 = new int[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ExceptionPredicate invoked", "NgTl.xW", intArray0, sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 379, (-1), sQLIntegrityConstraintViolationException0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator1);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends DataTruncation>) listIterator1, 1073741824);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator((Properties) null);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.size(iterator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) orderedIterator0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("NgTl.xW", classArray0, classArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NgTl.xW");
      iIOMetadataNode0.getAttributeNodeNS("Iterator must not be null", "Iterator must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator((Properties) null);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.size(iterator0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) orderedIterator0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("NgTl.xW", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0, "Iterator must not be null", "", "Iterator must not be null");
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLNonTransientException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientException>) hashMap0);
      Iterator<Object> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Transformer<? super SQLException, ?>) transformer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("(7t]F_<OW~", "k6}a]FDq\"?)2rC");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("(7t]F_<OW~", sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("k6}a]FDq\"?)2rC");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("org.apache.commons.Yollections4.iterators.ZippingIterator", "", 3351);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyIterator();
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) orderedMapIterator0, class0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      arrayList0.containsAll(stack0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      IteratorUtils.singletonListIterator((Iterator<SQLTimeoutException>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size((Iterator<?>) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(7t]F_<OW~", "(7t]F_<OW~");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException2);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(" is invalid for size ", "D_[.DY@%");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("Unsupported object type: ", "Z:A.qI_h^:Qsk|::.", 3351);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException(")(F`\fuD<;G~=WZ");
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 26);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) instanceofPredicate0);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.matchesAny((Iterator<SQLDataException>) orderedIterator0, (Predicate<? super SQLDataException>) instanceofPredicate0);
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Initial capacity must be a non negative number", "Initial capacity must be a non negative number", 1, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator2 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator2.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      Locale.Category locale_Category1 = IteratorUtils.get((Iterator<Locale.Category>) resettableIterator0, 0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[0];
      IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0);
      ArrayListIterator<String> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<String>(locale_Category1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      int int0 = 3;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      instanceofPredicateArray0[1] = instanceofPredicate1;
      instanceofPredicateArray0[3] = instanceofPredicate2;
      instanceofPredicateArray0[6] = instanceofPredicate0;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) objectArrayIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicateArray0[2]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      MapIterator<StringTokenizer, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) resettableIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      MapIterator<SQLSyntaxErrorException, String> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) priorityQueue0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("TYH^6},<l%Z+`l");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Transformer<SQLTimeoutException, SQLDataException>[]) null, (-1362));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyIterator.resettableEmptyIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      MapIterator<StringTokenizer, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) mapIterator0);
      IteratorUtils.toArray(iterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<SQLSyntaxErrorException, String> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) mapIterator1;
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[0], (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) priorityQueue0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      Iterator<SQLSyntaxErrorException> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator1);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyIterator.resettableEmptyIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M-<cs*Te4,", "");
      DataTruncation dataTruncation0 = new DataTruncation((-2102), true, true, (-2102), 916);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      EmptyIterator.emptyIterator();
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(linkedHashSet0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) loopingIterator0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("M-<cs*Te4,");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "Xf$.m", sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      IteratorUtils.singletonListIterator((Properties) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      IteratorUtils.emptyOrderedMapIterator();
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer0 = new PredicateTransformer<SQLFeatureNotSupportedException>(uniquePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0);
      Predicate<SQLFeatureNotSupportedException> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsTruePredicate<SQLFeatureNotSupportedException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLFeatureNotSupportedException>(predicate0);
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer0 = new PredicateTransformer<SQLFeatureNotSupportedException>(nullIsTruePredicate0);
      predicateTransformer0.transform((SQLFeatureNotSupportedException) null);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=;Ya", "=;Ya");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=;Ya", "=;Ya", 100, sQLTransientConnectionException0);
      Transformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M-<cs*Te4,", "M-<cs*Te4,");
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, 100, 100, sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator(iterable0);
      EmptyIterator.emptyIterator();
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(linkedHashSet0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) loopingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLWarning sQLWarning0 = new SQLWarning("Xf$.m", (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Properties properties0 = new Properties();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Object object0 = new Object();
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = 100;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@G4mdt3E'", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@G4mdt3E'", intArray0, sQLTransactionRollbackException0);
      properties0.put(class0, batchUpdateException0);
      properties0.put(instanceofPredicate0, object0);
      IteratorUtils.singletonIterator(properties0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyIterator.resettableEmptyIterator();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      MapIterator<StringTokenizer, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) mapIterator0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, (-870));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-870), sQLNonTransientException0);
      stack0.add(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLException> class1 = SQLException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      MapIterator<StringTokenizer, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) mapIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-4717));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "^yh)VsfuUV_76?}", 503, sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Dt<WI}BBi)/", "Dt<WI}BBi)/", 503, sQLFeatureNotSupportedException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("!\"3$->$W-%i0N!:3rv", "j<.N<[R<yIS17u.%7Jv", 2694, hashtable0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("j<.N<[R<yIS17u.%7Jv", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv", "!\"3$->$W-%i0N!:3rv", 2694);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.size(resettableListIterator0);
      assertTrue(resettableListIterator0.hasPrevious());
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator1, 176L);
      assertNotNull(boundedIterator0);
      
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      EmptyListIterator.emptyListIterator();
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) iterator0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataTruncation dataTruncation0 = new DataTruncation((-2942), false, false, 0, 0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 8);
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<Locale.Category>) resettableListIterator0;
      Iterator<Locale.Category> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) resettableListIterator0);
      iteratorArray0[1] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Class<SQLException> class2 = SQLException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class2);
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class3);
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      Class<DataTruncation> class4 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class4);
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class2);
      int int0 = 3;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      instanceofPredicateArray0[0] = instanceofPredicate5;
      instanceofPredicateArray0[1] = instanceofPredicate2;
      instanceofPredicateArray0[2] = instanceofPredicate5;
      instanceofPredicateArray0[3] = instanceofPredicate3;
      instanceofPredicateArray0[4] = instanceofPredicate1;
      instanceofPredicateArray0[5] = instanceofPredicate4;
      instanceofPredicateArray0[6] = instanceofPredicate0;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0, 3);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) objectArrayIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate5);
      IteratorUtils.toList((Iterator<? extends Predicate<Object>>) objectArrayIterator0, 3);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 5);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      vector0.add(iIOMetadataNode0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Integer>) predicate0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 10, 1, sQLTimeoutException0);
      IteratorUtils.getIterator(dataTruncation0);
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) iterator0, class0);
      Iterator<BatchUpdateException>[] iteratorArray1 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray1[0] = (Iterator<BatchUpdateException>) resettableListIterator1;
      iteratorArray1[1] = (Iterator<BatchUpdateException>) resettableListIterator1;
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator2 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      iteratorArray1[2] = (Iterator<BatchUpdateException>) resettableListIterator2;
      iteratorArray1[3] = iterator1;
      iteratorArray1[4] = (Iterator<BatchUpdateException>) resettableListIterator1;
      Iterator<BatchUpdateException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray1);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":.!l6P7o^;JHwF`e", ":.!l6P7o^;JHwF`e");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=;Ya", "=;Ya", 100, sQLTransientConnectionException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M-<cs*Te4,", "M-<cs*Te4,");
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, 100, 100, sQLFeatureNotSupportedException0);
      Class<Integer> class0 = Integer.class;
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray((Iterator<? extends Integer>) iterator0, class0);
      IteratorUtils.emptyListIterator();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLException sQLException0 = new SQLException("", "Load factor must be greater than 0", sQLSyntaxErrorException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLException0);
      IteratorUtils.toString((Iterator<SQLException>) singletonListIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      SQLException sQLException1 = new SQLException();
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 0, 0, sQLException1);
      dataTruncationArray0[1] = dataTruncation1;
      IteratorUtils.arrayIterator(dataTruncationArray0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("a_C{rD1", "a_C{rD1");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTimeoutException0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(orPredicate0, equalPredicate0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) andPredicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      DataTruncation dataTruncation0 = new DataTruncation(3216, false, false, 3216, 10, (Throwable) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      Class<Integer> class1 = Integer.class;
      Integer integer0 = new Integer(1);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.toArray((Iterator<? extends Integer>) iterator1, class1);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator0;
      Iterator<BatchUpdateException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertFalse(iterator2.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Integer>) predicate0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category2;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 10, 1, sQLTimeoutException0);
      IteratorUtils.getIterator(dataTruncation0);
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) iterator0, class0);
      Iterator<BatchUpdateException>[] iteratorArray1 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray1[0] = (Iterator<BatchUpdateException>) resettableListIterator1;
      iteratorArray1[1] = (Iterator<BatchUpdateException>) resettableListIterator1;
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator2 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      iteratorArray1[2] = (Iterator<BatchUpdateException>) resettableListIterator2;
      iteratorArray1[3] = iterator1;
      iteratorArray1[4] = (Iterator<BatchUpdateException>) resettableListIterator1;
      Iterator<BatchUpdateException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray1);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Class<SQLException> class2 = SQLException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class2);
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class3);
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      Class<DataTruncation> class4 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class4);
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class2);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      instanceofPredicateArray0[0] = instanceofPredicate5;
      instanceofPredicateArray0[1] = instanceofPredicate2;
      instanceofPredicateArray0[2] = instanceofPredicate5;
      instanceofPredicateArray0[3] = instanceofPredicate3;
      instanceofPredicateArray0[4] = instanceofPredicate1;
      instanceofPredicateArray0[5] = instanceofPredicate4;
      instanceofPredicateArray0[6] = instanceofPredicate0;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0, 3);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) objectArrayIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate5);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) objectArrayIterator0, 3);
      assertFalse(list0.isEmpty());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 1);
      ListIterator<BatchUpdateException> listIterator1 = EmptyListIterator.emptyListIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator1);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.Category>) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1, (-652));
      DataTruncation dataTruncation1 = new DataTruncation(3, true, true, 1, 1, dataTruncation0);
      dataTruncation1.getDataSize();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      SkippingIterator<InstanceofPredicate> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableIterator0, 2210L);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) skippingIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>[]) iteratorArray0);
      MapIterator<BatchUpdateException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "t");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("t", "", 61, sQLTransientConnectionException0);
      Transformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Q8z9+j;84Zl-a", "[Y59t{E!@)1");
      DataTruncation dataTruncation0 = new DataTruncation(7, true, false, 1206, 128, sQLInvalidAuthorizationSpecException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      Integer integer0 = new Integer((-1));
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 9);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[5] = class5;
      Class<Properties> class6 = Properties.class;
      classArray0[6] = class6;
      Class<Properties> class7 = Properties.class;
      classArray0[7] = class7;
      Class<Properties> class8 = Properties.class;
      classArray0[8] = class8;
      Transformer<Object, Integer> transformer1 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Integer> iterator2 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator2, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator((SQLException[]) batchUpdateExceptionArray0, 0, 1);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation0 = new DataTruncation(3213, true, true, (-1339), 93, batchUpdateException0);
      dataTruncationArray0[0] = dataTruncation0;
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv", "7u", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(", ", sQLIntegrityConstraintViolationException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", ")P^^y@x'`Dn+[", 2694, hashtable0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((SQLException) sQLClientInfoException0, comparator0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(comparator1).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLClientInfoException0, comparator1);
      SQLDataException sQLDataException0 = new SQLDataException("OHMZ(al6?K&KbD*r*", "", 2694, sQLNonTransientConnectionException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$Mj_[0R:1&<JK", "org.apache.commons.collections4.map.SingletonMap$SingletonValues", sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation(2694, false, false, 2694, 1, (Throwable) null);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator2, (Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      IteratorUtils.getIterator(sQLDataException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation((-3410), false, true, (-3410), (-3410), sQLTimeoutException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<SQLWarning> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      assertTrue(listIterator1.hasNext());
      
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Integer>) predicate0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      DataTruncation dataTruncation1 = new DataTruncation(10, false, false, 10, 1, sQLTimeoutException0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(dataTruncation1);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":.!l6P7o^;JHwF`e", ":.!l6P7o^;JHwF`e");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=;Ya", "=;Ya", 100, sQLTransientConnectionException0);
      Transformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M-<cs*Te4,", "M-<cs*Te4,");
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, 100, 100, sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator(iterable0);
      Class<Integer> class0 = Integer.class;
      Iterator<Integer> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray((Iterator<? extends Integer>) iterator1, class0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<BatchUpdateException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLNonTransientConnectionException, LinkedHashSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>>(orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, 536L, 2192L);
      EmptyIterator.resettableEmptyIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.find((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) instanceofPredicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1298);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 1298, sQLTransactionRollbackException0);
      ArrayListIterator<String> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<String>(sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation((-3410), false, true, (-3410), (-3410), sQLTimeoutException0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      Iterator<?> iterator0 = IteratorUtils.getIterator("{Url");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation((-3410), false, true, (-3410), (-3410), sQLTimeoutException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Integer>) predicate0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, (-3410));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsFalsePredicate0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator((SQLInvalidAuthorizationSpecException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.isEmpty(resettableListIterator0);
      EntrySetToMapIteratorAdapter<SQLFeatureNotSupportedException, SQLTimeoutException> entrySetToMapIteratorAdapter0 = null;
//      try {
        entrySetToMapIteratorAdapter0 = new EntrySetToMapIteratorAdapter<SQLFeatureNotSupportedException, SQLTimeoutException>((Set<Map.Entry<SQLFeatureNotSupportedException, SQLTimeoutException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv", "7u", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(", ", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", ")P^^y@x'`Dn+[", 2694, hashtable0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((SQLException) sQLClientInfoException0, comparator0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLClientInfoException0, comparator1);
      SQLDataException sQLDataException0 = new SQLDataException("OHMZ(al6?K&KbD*r*", "", 2694, sQLNonTransientConnectionException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("'xG|W?y5hYR^Lz(8", (Throwable) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      EmptyIterator.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null.", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null.", 8, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Predicate must not be null.", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      reverseListIterator0.nextIndex();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      String string0 = "";
      int int0 = 2694;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("!\"3$->$W-%i0N!:3rv", "j<.N<[R<yIS17u.%7Jv", 2694, hashtable0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("j<.N<[R<yIS17u.%7Jv", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv", "!\"3$->$W-%i0N!:3rv", 2694);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.size(resettableListIterator0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator1, 176L);
      IteratorUtils.toArray((Iterator<?>) boundedIterator0);
      int int1 = (-446);
      ArrayListIterator<Iterator<SQLTimeoutException>> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Iterator<SQLTimeoutException>>(sQLIntegrityConstraintViolationException3, (-446), (-1780));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("!\"3$->$W-%i0N!:3rv", "j<.N<[R<yIS17u.%7Jv", 2694, hashtable0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("j<.N<[R<yIS17u.%7Jv", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationExceptionArray0[1]);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv", "!\"3$->$W-%i0N!:3rv", 2694);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLNonTransientConnectionException, LinkedHashSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>>(orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, 2192L, (long) 0);
      EmptyIterator.resettableEmptyIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      ExceptionPredicate.exceptionPredicate();
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) iterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.Category>) resettableIterator0, 4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (int[]) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      batchUpdateExceptionArray0[5] = batchUpdateException0;
      batchUpdateExceptionArray0[7] = batchUpdateException0;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) iterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.Category>) resettableIterator0, 8);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 7
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("aU2e_.1QGUCR9", "aU2e_.1QGUCR9", 0, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("aU2e_.1QGUCR9", "aU2e_.1QGUCR9", hashtable0, sQLTransientException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put("?}%:c#", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("1oC+|QWv?i*", "aU2e_.1QGUCR9", 0, hashtable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "?}%:c#", (int[]) null, sQLClientInfoException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("aU2e_.1QGUCR9", (int[]) null);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(sQLClientInfoException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      batchUpdateExceptionArray0[0] = batchUpdateException2;
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      EmptyListIterator.emptyListIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 2694);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      EmptyListIterator.resettableEmptyListIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iterator1);
      Iterator<?> iterator2 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation((-3410), false, true, (-3410), (-3410), sQLTimeoutException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super Integer>) predicate0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = (-3410);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("k", "", intArray0, mockThrowable0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.getIterator((Object) null);
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator1);
      assertEquals("[]", string0);
      
      boolean boolean1 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 100;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":.!l6P7o^;JHwF`e", ":.!l6P7o^;JHwF`e");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLRecoverableException0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=;Ya", "=;Ya", 100, sQLTransientConnectionException0);
      Transformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{Url", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("L", "transformer may not be null", sQLTransientConnectionException0);
      int int1 = 1;
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 100, 100, sQLSyntaxErrorException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      Vector<IIOMetadataNode> vector1 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector1);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IteratorUtils.getIterator("k");
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLException sQLException0 = new SQLException("", "Load factor must be greater than 0", sQLSyntaxErrorException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLException0);
      IteratorUtils.toString((Iterator<SQLException>) singletonListIterator0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EmptyIterator.emptyIterator();
      EmptyIterator.resettableEmptyIterator();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      ListIterator<Properties> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer0 = new PredicateTransformer<SQLFeatureNotSupportedException>(instanceofPredicate0);
      IteratorUtils.find((Iterator<Properties>) listIterator1, (Predicate<? super Properties>) instanceofPredicate0);
      OrderedMapIterator<SQLClientInfoException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EmptyIterator.emptyIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, LinkedHashSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>>(orderedMapIterator0);
      EmptyIterator.resettableEmptyIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.find((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) instanceofPredicate0);
      OrderedMapIterator<SQLClientInfoException, BatchUpdateException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLNonTransientConnectionException, LinkedHashSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>>(orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, 2192L, (long) 0);
      EmptyIterator.resettableEmptyIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      ListIterator<Properties> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Properties>) listIterator1, (Predicate<? super Properties>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      EmptyIterator.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null.", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null.", 8, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Predicate must not be null.", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0, "Predicate must not be null.", "wx@:)@q", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, 128, (-1607), batchUpdateException0);
      assertEquals("22001", dataTruncation0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":.!l6P7o^;JHwF`e", ":.!l6P7o^;JHwF`e");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLRecoverableException0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=;Ya", "=;Ya", 100, sQLTransientConnectionException0);
      Transformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0, 100, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      EmptyIterator.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null.", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null.", 8, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Predicate must not be null.", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 31);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) list0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      Iterator<?> iterator1 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLException sQLException0 = new SQLException("", "Load factor must be greater than 0", sQLSyntaxErrorException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLException0);
      IteratorUtils.toString((Iterator<SQLException>) singletonListIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      SQLException sQLException1 = new SQLException();
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 0, 0, sQLException1);
      dataTruncationArray0[1] = dataTruncation1;
      IteratorUtils.arrayIterator(dataTruncationArray0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      Predicate<SQLFeatureNotSupportedException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLFeatureNotSupportedException>>) list0);
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer0 = new PredicateTransformer<SQLFeatureNotSupportedException>(predicate0);
      predicateTransformer0.transform((SQLFeatureNotSupportedException) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Load factor must be greater than 0", "", false);
      IteratorUtils.getIterator(stringTokenizer0);
      EmptyMapIterator.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 1);
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[0] = class1;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = null;
//      try {
        instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class0, classArray0, dataTruncationArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // InstantiateFactory: The constructor must exist and be public 
//         //
//         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      EmptyIterator.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null.", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null.", 8, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Predicate must not be null.", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 31);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) list0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator1, 1086L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 31;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 31);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      EmptyIterator.emptyIterator();
      String string0 = "Predicate must not be null.";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null.", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null.", 8, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Predicate must not be null.", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 31);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) list0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) linkedHashSet0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0);
      ExceptionPredicate.exceptionPredicate();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<SQLFeatureNotSupportedException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLFeatureNotSupportedException>(predicate0);
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer0 = new PredicateTransformer<SQLFeatureNotSupportedException>(nullIsTruePredicate0);
      predicateTransformer0.transform((SQLFeatureNotSupportedException) null);
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "ListIterator must not be null", (String) null, 1770);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "org.apache.commons.collections4.iterators.LoopingIterator", 0, intArray0, sQLWarning0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      sQLWarning0.spliterator();
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.get(iterator0, 0);
      IteratorUtils.size(resettableIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.LoopingIterator");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLWarning0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 31);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null, (Collection<? super BatchUpdateException>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null, (Collection<? super SQLWarning>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("The parameter types m#st match the arguments", "", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("The parameter types m#st match the arguments", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException1.setNextException(sQLNonTransientConnectionException0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.printStackTrace();
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLIntegrityConstraintViolationException1);
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      sQLExceptionArray0[0] = (SQLException) sQLIntegrityConstraintViolationException1;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      IteratorUtils.contains((Iterator<SQLException>) objectArrayIterator0, (Object) sQLIntegrityConstraintViolationException1);
      OrderedMapIterator<String, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<String, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      Iterator<String> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<String>) mapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends String>) iterator1);
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      // Undeclared exception!
//      try { 
        EnumSet.copyOf((Collection<Locale.Category>) priorityQueue0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Collection is empty
//         //
//         verifyException("java.util.EnumSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "{Url", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      DefaultEquator<SQLDataException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLDataException> equalPredicate0 = new EqualPredicate<SQLDataException>(sQLDataException0, defaultEquator0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) equalPredicate0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "ListIterator must not be null", (String) null, 1770);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "org.apache.commons.collections4.iterators.LoopingIterator", 0, intArray0, sQLWarning0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      sQLWarning0.spliterator();
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableIterator0);
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)IteratorUtils.get(iterator0, 0);
      IteratorUtils.size(resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.LoopingIterator");
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("iterator", "+n'wNs<W", intArray0, batchUpdateException1);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "iterator", intArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      EmptyIterator.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null.", 8, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Predicate must not be null.", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 31);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) list0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLTimeoutException sQLTimeoutException0 = IteratorUtils.find((Iterator<SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      assertNull(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) mapIterator0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0);
      MapIterator<Properties, SQLTransientException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Properties>) mapIterator1);
      OrderedMapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = null;
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = null;
//      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException>((OrderedMapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // OrderedMapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLNonTransientConnectionException, LinkedHashSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, LinkedHashSet<Object>>(orderedMapIterator0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, 2192L, (long) 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) boundedIterator0, 31);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 31
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.iterators.LoopingIterator";
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.printStackTrace();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<SQLNonTransientConnectionException, TreeSet<ArrayDeque>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) orderedMapIterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MapIterator<Object, Class<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      IteratorUtils.toString((Iterator<Object>) mapIterator0, (Transformer<? super Object, String>) factoryTransformer0, "", "Entry does not exist: ", "Entry does not exist: ");
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      DataTruncation dataTruncation0 = new DataTruncation(44, false, false, 44, 44, sQLTransactionRollbackException0);
      hashSet0.add(dataTruncation0);
      Iterator<SQLWarning> iterator0 = hashSet0.iterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) iterator0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Entry does not exist: ";
      stringArray0[1] = "Entry does not exist: ";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, 0);
      Iterator<String> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<String>) objectArrayIterator0);
      assertNotNull(iterator1);
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cannot store a duplicate value (\"", dataTruncation0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("Entry does not exist: Entry does not exist: ", "X45J'", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("You must invoke setComparator() to set a comparator first.", "", 0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) iterator0);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<Object, SQLWarning> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLWarning>) hashtable0);
      TransformerClosure.transformerClosure((Transformer<? super SQLIntegrityConstraintViolationException, ?>) transformer0);
      EmptyIterator.resettableEmptyIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedList0);
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      IteratorUtils.find((Iterator<Properties>) resettableIterator1, (Predicate<? super Properties>) instanceofPredicate0);
      ArrayListIterator<String> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<String>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 2;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("aU2e_.1QGUCR9", "aU2e_.1QGUCR9", 0, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("aU2e_.1QGUCR9", "aU2e_.1QGUCR9", hashtable0, sQLTransientException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put("?}%:c#", clientInfoStatus0);
      int int0 = 0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("1oC+|QWv?i*", "aU2e_.1QGUCR9", 0, hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      String string0 = "NodeList must not be null";
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("NodeList must not be null", "nf", 0, hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("The parameter types m#st match the arguments", "", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("The parameter types m#st match the arguments", sQLIntegrityConstraintViolationException0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((SQLException) sQLIntegrityConstraintViolationException1, comparator1);
      Comparator<SQLException> comparator2 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((SQLException) null, comparator2);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", ")nyn%.Vn_n9zWH", 9);
      properties0.replace((Object) singletonListIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      singletonListIterator0.forEachRemaining(consumer0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLException>) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1, 5);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, 10, 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-1), true, false, 0, 10);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1803, false, true, 1620, 10, dataTruncation0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(3935, true, false, (-1), 1);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(1, true, true, 1054, 1783, dataTruncation0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(1, true, true, 1, 3935, dataTruncation5);
      dataTruncationArray0[6] = dataTruncation6;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      EmptyIterator.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null.", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null.", 8, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Predicate must not be null.", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 31);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "rE>QL3s#uOz+%9De6CX", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("rE>QL3s#uOz+%9De6CX", "", (int[]) null);
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayList0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) loopingIterator0, 2304);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertNotNull(resettableIterator0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("[]");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.ObjectGraphIterator", (Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      EmptyIterator.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null.", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null.", 8, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Predicate must not be null.", (int[]) null, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException2;
      batchUpdateExceptionArray0[1] = batchUpdateException2;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 31);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) list0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      IteratorUtils.arrayIterator(dataTruncationArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 2458);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, BatchUpdateException>(orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "ListIterator must not be null", (String) null, 1770);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      sQLWarning0.spliterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.LoopingIterator");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((String[]) null, 31);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 1786, (-94));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 4);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>("Closure must not be null", classArray0, classArray0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Closure must not be null");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.ComparatorPredicate");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      MockPrintStream mockPrintStream0 = new MockPrintStream("FB\"d#|1OIn~");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Closure must not be null", 0, 0);
      sQLSyntaxErrorException1.printStackTrace(printStream0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 5576);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "ListIterator must not be null", (String) null, 1770);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", (-1148));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "org.apache.commons.collections4.iterators.LoopingIterator", 0, intArray0, sQLWarning0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      sQLWarning0.spliterator();
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.get(iterator0, 0);
      IteratorUtils.size(resettableIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLWarning0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "@7T\"rh9", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", "Ol9aydQ6WyugQ\"", (-1148));
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException(sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException(", ", ", ", 128, sQLTransientConnectionException5);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayListIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonIterator(locale_Category0);
      int int0 = 128;
      int int1 = 93;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException[]) null, 128, 93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Object object0 = new Object();
      int int0 = (-3410);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0, (-3410));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.TruePredicate", hashtable0);
      Throwable throwable0 = null;
      sQLClientInfoException0.initCause((Throwable) null);
      String string0 = null;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLClientInfoException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      sQLClientInfoException0.setNextException(sQLDataException0);
      int int0 = 14;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 523);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      long[] longArray0 = new long[6];
      longArray0[0] = 1049L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, longArray0, sQLNonTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("$MRR$)x&", (int[]) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("$MRR$)x&", "The predicate and closure map must not be null", 0, (int[]) null);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("PZfk3.", "", (int[]) null, batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("PZfk3.", (int[]) null);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException();
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(sQLNonTransientException0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":.!l6P7o^;JHwF`e", ":.!l6P7o^;JHwF`e");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("=;Ya", "=;Ya", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{Url", "", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(100, false, true, 100, 100, (Throwable) null);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      long[] longArray0 = new long[8];
      longArray0[0] = 3579L;
      longArray0[1] = (long) 4414;
      longArray0[2] = (long) 4414;
      longArray0[3] = (long) 4414;
      longArray0[4] = (long) 4414;
      longArray0[5] = (long) 4414;
      longArray0[6] = (-4416L);
      longArray0[7] = (long) 4414;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Set must not be null", "Set must not be null", 4414, longArray0, sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Set must not be null", batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("ck+*", "/DBo)B:u", 14, batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("ck+*", ").");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-1347));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) linkedHashSet0, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("~$s'#;SX=4YF{0e");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("~$s'#;SX=4YF{0e");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) iterator0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 9);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("m", (String) null, 9, sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAny((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("The parameter types must match the arguments", "GQlb)/b^", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("The parameter types must match the arguments", sQLIntegrityConstraintViolationException0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((SQLException) sQLIntegrityConstraintViolationException1, comparator1);
      Comparator<SQLException> comparator2 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((SQLException) null, comparator2);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLDataException>) comparatorPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLExceptionArray0[0] = (SQLException) sQLTimeoutException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":&RT>'\"v9hr:j[M(=4", sQLExceptionArray0[1]);
      sQLExceptionArray0[2] = (SQLException) sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0);
      sQLNonTransientException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLFeatureNotSupportedException0);
      IteratorUtils.contains((Iterator<SQLException>) objectArrayListIterator0, (Object) sQLTransactionRollbackException0);
      OrderedMapIterator<String, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<String, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) mapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends String>) iterator0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 3);
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      // Undeclared exception!
//      try { 
        EnumSet.copyOf((Collection<Locale.Category>) priorityQueue0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Collection is empty
//         //
//         verifyException("java.util.EnumSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      int int0 = 91;
      Class<String> class1 = String.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      int int1 = 5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, 91, 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<Locale.Category, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, Predicate<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, Predicate<Object>>(orderedMapIterator0);
      MapIterator<Locale.Category, Predicate<Object>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, Predicate<Object>>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) mapIterator0, (Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(", ");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(", ");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode(", ");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, 497);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLExceptionArray0[0] = (SQLException) sQLTimeoutException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":&RT>'\"v9hr:j[M(=4", sQLExceptionArray0[1]);
      sQLExceptionArray0[2] = (SQLException) sQLFeatureNotSupportedException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, 2192L, 2192L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, 0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "{Url", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", mockThrowable0);
      DataTruncation dataTruncation0 = new DataTruncation((-3410), false, true, (-3410), (-3410), sQLSyntaxErrorException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("HFt[Q");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedMapIterator<Locale.Category, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.Category>) orderedMapIterator0, (-2348));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -2348
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String string0 = "#jrRs*h";
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("#jrRs*h", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string1 = "4V7_V^.>sc3?,;[1";
      String string2 = "]F;\"8:{W~ak";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "4V7_V^.>sc3?,;[1", (String) null, "]F;\"8:{W~ak");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, BatchUpdateException>(orderedMapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      List<SQLNonTransientException> list0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<HashMap<SQLDataException, PriorityQueue>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Class<SQLNonTransientConnectionException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&4t -", "m,u#DON*OF@i~o[M", 1553);
      arrayList0.add(sQLFeatureNotSupportedException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 3943);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Iterator<Locale.Category> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(">\"Hn>d_BF&KwAr", "", 2694, hashtable0);
      SQLDataException sQLDataException0 = new SQLDataException(">\"Hn>d_BF&KwAr", sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv", sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("!\"3$->$W-%i0N!:3rv", sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("_");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "", (-714));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException(">\"Hn>d_BF&KwAr");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException6;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0, (-2062L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("T9#-0=J(T,4`", "aU2e_.1QGUCR9", 0, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("aU2e_.1QGUCR9", "aU2e_.1QGUCR9", hashtable0, sQLTransientException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put("?}%:c#", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("1oC+|QWv?i*", "aU2e_.1QGUCR9", 0, hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("NodeList must not be null", "nf", 0, hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0);
      Predicate<SQLClientInfoException> predicate0 = FalsePredicate.falsePredicate();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) iterator0, 0L, 0L);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) boundedIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(boundedIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "nf", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("z,C7t,/S`fcg`\"8{Ai,", "?}%:c#", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 9);
      MapIterator<BatchUpdateException, LinkedList<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (-558L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }
}
