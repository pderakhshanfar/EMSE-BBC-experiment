/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:57:29 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) loopingIterator0, (Transformer<? super Object, String>) invokerTransformer0, "suffix may no #e null", (String) null, "next() must have been called for remove() to function");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "B", 1472);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLException> predicate2 = NotPredicate.notPredicate((Predicate<? super SQLException>) predicate1);
      IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) predicate2);
      OrderedMapIterator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      EmptyIterator.resettableEmptyIterator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      EmptyIterator.resettableEmptyIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(3, true, true, 3, 3);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1557, true, true, 2130, 3, sQLSyntaxErrorException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1557, true, true, 2130, 3);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1557, true, true, 1557, 1543);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(31, true, false, 31, (-2173));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(1143, true, true, 1557, 6);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(8, true, false, 3, 10);
      dataTruncationArray0[6] = dataTruncation6;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(dataTruncation0);
      DataTruncation dataTruncation7 = new DataTruncation((-3750), true, true, 1152, 10, sQLTimeoutException0);
      dataTruncationArray0[7] = dataTruncation7;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.contains((Iterator<DataTruncation>) objectArrayIterator0, (Object) dataTruncation5);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super IIOMetadataNode>) predicate0);
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 5);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) loopingIterator0, (Transformer<? super Object, String>) invokerTransformer0, "Zq2Ih}AaaJ)lC", "suffix may not be null", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyMapIterator();
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      String string0 = "Z^kySSI<.?IIt)mrMI";
      Throwable throwable0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("8", "Z^kySSI<.?IIt)mrMI", (Throwable) null);
      sQLSyntaxErrorException0.getSuppressed();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vector0.add(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) vector0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ListIterator<SQLRecoverableException> listIterator0 = linkedList0.listIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      Predicate<SQLRecoverableException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLRecoverableException>) identityPredicate0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends SQLDataException>) transformer0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Class<Object> class8 = Object.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("jsd", classArray0, classArray0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(arrayDeque0);
      IteratorUtils.toString((Iterator<Object>) loopingIterator0, (Transformer<? super Object, String>) invokerTransformer0, "jsd", "0aSq7reks", "0aSq7reks");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLTransactionRollbackException0, false);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 6);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      sQLTransactionRollbackException0.spliterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) null, "Predicate must not be null.", "atp1R=}?/e r2", "ts#X_:+aMsR`$7w0\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLNonTransientConnectionException0, false);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 5);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) invokerTransformer0, (String) null, "QKa", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends SQLDataException>) transformer0);
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      String string1 = "|7x";
      int int0 = 10;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|7x", "W{$FrR0|q", 10, sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("c<D`gxN.n}3u{A,rk", "", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("[kBF9(n5~6o`", sQLTransactionRollbackException0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException1;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("W{$FrR0|q", "", 10, sQLTransientConnectionException0);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransientConnectionException0;
      IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(resettableIterator0, false);
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 3);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      Class<SQLTransientException> class2 = SQLTransientException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("P<rj_$!Y8", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) invokerTransformer0, "P<rj_$!Y8", "P<rj_$!Y8", "P<rj_$!Y8");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'P<rj_$!Y8' on 'class org.apache.commons.collections4.iterators.LoopingIterator' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("os]TO");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ListIterator<SQLRecoverableException> listIterator0 = linkedList0.listIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      Predicate<SQLRecoverableException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLRecoverableException>) identityPredicate0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      IteratorUtils.size(listIterator1);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "[kBF9(n5~6o`", sQLTransientConnectionException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException1;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) identityPredicate0);
      ArrayIterator<SQLIntegrityConstraintViolationException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLIntegrityConstraintViolationException>((Object) null, 493, 1382);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedList0.listIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      NullIsExceptionPredicate<SQLSyntaxErrorException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLSyntaxErrorException>(identityPredicate0);
      OrderedMapIterator<SQLSyntaxErrorException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Properties>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Properties>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<LinkedList<ArrayDeque>>) singletonListIterator0, 0);
      EmptyIterator.resettableEmptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 410, 127);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      iteratorArray0[0] = (Iterator<DataTruncation>) objectArrayIterator0;
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableIterator0;
      int int0 = 0;
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0);
      SQLException sQLException0 = new SQLException("wt:GN'3|n(y\"*P&7k1L", sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 2370, 0, sQLException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(arrayList0);
      IteratorUtils.apply((Iterator<SQLDataException>) reverseListIterator0, (Closure<? super SQLDataException>) closure1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate.anyPredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      NullIsExceptionPredicate<SQLSyntaxErrorException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLSyntaxErrorException>(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ? extends SQLDataException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>((SQLClientInfoException) null);
      sQLClientInfoException0.initCause((Throwable) null);
      IteratorUtils.get((Iterator<LinkedList<ArrayDeque>>) singletonListIterator0, 0);
      EmptyIterator.resettableEmptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null, 410, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      UniquePredicate.uniquePredicate();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) vector0);
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 1481, 1481);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      UniquePredicate.uniquePredicate();
      Factory<IIOMetadataNode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(factory0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) reverseListIterator0, (Closure<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResettableListIterator<Iterator<String>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      UniquePredicate.uniquePredicate();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) vector0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) iterator0, (Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator("");
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends String>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, String>(orderedMapIterator1);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) orderedMapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator1);
      IteratorUtils.size(orderedMapIterator1);
      IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) orderedMapIterator1, (Iterator<?>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(arrayList0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0, 0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) objectArrayIterator0;
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iteratorArray0[0]);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(list0);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) loopingListIterator0;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode3);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) singletonIterator0;
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) listIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) zippingIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      UniquePredicate.uniquePredicate();
      Factory<IIOMetadataNode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(factory0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator0);
      IteratorUtils.loopingListIterator(list0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) vector0);
      EmptyIterator.resettableEmptyIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLDataException sQLDataException0 = new SQLDataException(" ", "ml0h4", 16, batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (-1392), sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" ", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 16, sQLWarning0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer>(orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Enumeration must not be null", "uScAs/B#p9-O#B8K4", 19);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("The predicate array must not be null", "The predicate array must not be null", 19, sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The predicate array must not be null", sQLNonTransientException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) singletonIterator0, 19);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("uN-L&?Z #cqat1k?MQ", "uN-L&?Z #cqat1k?MQ");
      reverseListIterator0.add(sQLTransientConnectionException1);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.singletonListIterator(linkedList0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 19, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
      Enumeration<SQLTransientConnectionException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration1);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0, 1543);
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(stack0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vP_.p`8", "vP_.p`8");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("vP_.p`8", "", 269);
      reverseListIterator0.add(sQLTransientConnectionException1);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.singletonListIterator(linkedList0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer>(orderedMapIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1, 1);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      Stack<SQLTransientConnectionException> stack1 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration1 = stack1.elements();
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration1, (Collection<? super SQLTransientException>) vector0);
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends String>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, String>(orderedMapIterator1);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator1, (Iterator<? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.size(orderedMapIterator1);
      IteratorUtils.size(zippingIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, iterator0, iterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(arrayList0);
      IteratorUtils.apply((Iterator<SQLDataException>) reverseListIterator0, (Closure<? super SQLDataException>) closure1);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super IIOMetadataNode>) predicate0);
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>((Properties) null);
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(constantFactory0);
      TransformerClosure<SQLDataException> transformerClosure0 = new TransformerClosure<SQLDataException>(factoryTransformer0);
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) transformerClosure0);
      Properties properties0 = new Properties();
      UniquePredicate.uniquePredicate();
      int int0 = (-1775);
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException[]) null, (-1775));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0, 19);
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(list0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator");
      reverseListIterator0.add(sQLTransientConnectionException0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.singletonListIterator(linkedList0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) null, (Predicate<? super ArrayList<Stack>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "{";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{", sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("GVd[2C>R)B={}", "GN)y2/SkB");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException1);
      Transformer<SQLTransientException, SQLTransientException> transformer0 = NOPTransformer.nopTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, transformerPredicate0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "GVd[2C>R)B={}";
      stringArray0[1] = "";
      stringArray0[2] = "#6e=(qoW4r!KbekPb?6";
      stringArray0[3] = "GN)y2/SkB";
      stringArray0[4] = "GN)y2/SkB";
      stringArray0[5] = "";
      stringArray0[6] = "GVd[2C>R)B={}";
      stringArray0[7] = "GVd[2C>R)B={}";
      IteratorUtils.arrayListIterator(stringArray0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.pushbackIterator((Iterator<? extends String>) singletonListIterator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(list0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) orderedMapIterator0, (Predicate<? super ArrayList<Stack>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      StringValueTransformer.stringValueTransformer();
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = (-3433);
      intArray0[2] = 118;
      intArray0[3] = (-2274);
      intArray0[4] = 100;
      intArray0[5] = 10;
      intArray0[6] = 127;
      intArray0[7] = 4;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", ")p]L+ e.QCO%WsQVRm@", intArray0, sQLNonTransientConnectionException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.size(singletonIterator0);
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>("", 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("e0;pn_y");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("e0;pn_y", "Node must not be null", 1, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Node must not be null");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&{/Y6[+2?", sQLNonTransientConnectionException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, sQLTimeoutException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("Map.Entry.setValue is not supported", "&{/Y6[+2?");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">\"SVY*~5<");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iIOMetadataNode0, (Equator<Object>) defaultEquator0);
      Predicate<SQLException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer>(orderedMapIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Node node0 = iIOMetadataNode0.cloneNode(true);
      Node node1 = iIOMetadataNode0.insertBefore(node0, node0);
      IteratorUtils.nodeListIterator(node1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator("?BGs] nD4");
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "?BGs] nD4", (Map<String, ClientInfoStatus>) null, sQLTransientException0);
      IteratorUtils.contains((Iterator<HashSet<Locale.Category>>) null, (Object) "");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-3028));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 2472, (-3028));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      UniquePredicate.uniquePredicate();
      Factory<IIOMetadataNode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) factoryTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "haiFc0wAks`y)(Sg~";
      SQLTransientException sQLTransientException0 = new SQLTransientException("haiFc0wAks`y)(Sg~");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("haiFc0wAks`y)(Sg~");
      String string1 = "Closure must not be null";
      String string2 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Closure must not be null", "");
      sQLNonTransientConnectionException0.addSuppressed(sQLTransactionRollbackException0);
      int int0 = 61;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "", 61, sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException1);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) listIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-89), (-1189));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      UniquePredicate.uniquePredicate();
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">\"SVY*~5<");
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>(">\"SVY*~5<");
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLWarning sQLWarning0 = null;
      IteratorUtils.singletonListIterator((SQLWarning) null);
      int int0 = (-2117);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-2117));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      stack0.elements();
      UniquePredicate.uniquePredicate();
      Factory<IIOMetadataNode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, StringTokenizer>(orderedMapIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) stack0);
      Enumeration<SQLTransientConnectionException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration1);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) fileSystemHandling0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      ExceptionFactory.exceptionFactory();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) vector0);
      SkippingIterator<SQLTransientException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 2338L);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) skippingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) vector0);
      Properties properties0 = new Properties();
      vector0.add(properties0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) transformerPredicate0);
      Iterator<Object> iterator0 = null;
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) transformerPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null, 1156);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&6daIsm[FM14EEsS$GZK", "&0e@E3h[\"pbEP-B(");
      StringTokenizer stringTokenizer0 = new StringTokenizer(", ", ", ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("&6daIsm[FM14EEsS$GZK", "org.apache.commons.collections4.functors.NonePredicate");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException1);
      Transformer<SQLTransientException, SQLTransientException> transformer0 = NOPTransformer.nopTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, transformerPredicate0);
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, (Predicate<? super SQLTransientException>) null);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "org.apache.commons.collections4.functors.NonePredicate";
      stringArray0[2] = "2X$iReV8]/b?!VJ";
      stringArray0[3] = ", ";
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator("?BGs] n#c");
      long long0 = 3295L;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("GVd[2C>R)B={}", "GN)y2/SkB");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException1);
      Transformer<SQLTransientException, SQLTransientException> transformer0 = NOPTransformer.nopTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, transformerPredicate0);
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, transformerPredicate0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GVd[2C>R)B={}";
      stringArray0[1] = "org.apache.commons.collections4.functors.NonePredicate";
      stringArray0[2] = "GN)y2/SkB";
      stringArray0[3] = "2X$iReV8]/b?!VJ";
      stringArray0[4] = "2X$iReV8]/b?!VJ";
      IteratorUtils.arrayListIterator(stringArray0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("2X$iReV8]/b?!VJ");
      IteratorUtils.pushbackIterator((Iterator<? extends String>) singletonListIterator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) iterator0, (Predicate<? super ArrayList<Stack>>) transformerPredicate0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "}Y1-wuQ 9|+h>");
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.functors.NonePredicate", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException1);
      Transformer<SQLTransientException, SQLTransientException> transformer0 = NOPTransformer.nopTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, transformerPredicate0);
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, uniquePredicate0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2X$iReV8]/b?!VJ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = null;
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) resettableListIterator0, (Predicate<? super ArrayList<Stack>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) resettableListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("?&k,oAvW+6=", "?&k,oAvW+6=");
      StringTokenizer stringTokenizer0 = new StringTokenizer("?&k,oAvW+6=", "26E<!|`\"SU~2T%Rt:}2");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      sQLSyntaxErrorException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("B8gLtx[i&", "org.apache.commons.collections4.map.AbstractReferenceMap");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException1);
      Transformer<SQLTransientException, SQLTransientException> transformer0 = NOPTransformer.nopTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, (Predicate<? super Object>) null);
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, andPredicate0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E^l`\"5Ev^IcCb68=Gc";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) resettableListIterator0, (Predicate<? super ArrayList<Stack>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator("?BGs] nD4");
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)19;
      byte byte0 = (byte)19;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      SQLWarning sQLWarning0 = new SQLWarning("Closure must not be null", (String) null, 0);
      sQLWarning0.fillInStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("SHfLK'[e+vriX?g9/", sQLWarning0);
      arrayDeque0.remove((Object) sQLIntegrityConstraintViolationException0);
      IteratorUtils.singletonIterator((ArrayDeque<ArrayDeque>) arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("]aG+");
      FactoryTransformer<Iterator<String>, String> factoryTransformer0 = new FactoryTransformer<Iterator<String>, String>(constantFactory0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "");
      IteratorUtils.getIterator(sQLSyntaxErrorException1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientConnectionException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      DefaultEquator.defaultEquator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedList<ArrayDeque>>) resettableIterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedMapIterator<Integer, Iterator<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Integer>) orderedMapIterator0, (Transformer<? super Integer, String>) transformer0);
      IteratorUtils.size(mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", (String) null, 0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<LinkedList<ArrayList>>) mapIterator0, (Predicate<? super LinkedList<ArrayList>>) predicate1);
      Stack<Object> stack0 = new Stack<Object>();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      stack0.add((Object) batchUpdateException0);
      IteratorUtils.loopingListIterator((List<Object>) stack0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      String string0 = "^g3u";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^g3u");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("[]");
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      int int0 = 1156;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, 1156);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedMapIterator<Integer, Iterator<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringValueTransformer.stringValueTransformer();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<Integer>) orderedMapIterator0, (Transformer<? super Integer, String>) transformer0);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(stack0);
      IteratorUtils.size(loopingIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("|qoIhv%", "", 0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) transformer0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Stack<Object> stack1 = new Stack<Object>();
      IteratorUtils.loopingListIterator((List<Object>) stack1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Zsat\"S[HQTY.f?Q[c");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, (-1500));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedMapIterator<Integer, Iterator<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Integer>) orderedMapIterator0, (Transformer<? super Integer, String>) transformer0);
      IteratorUtils.size(mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", (String) null, 0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<LinkedList<ArrayList>>) mapIterator0, (Predicate<? super LinkedList<ArrayList>>) predicate1);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.loopingListIterator((List<Object>) stack0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      String string0 = "^g3u";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^g3u");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("[]");
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      int int0 = 1156;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, 1156);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&6daIsm[FM14EEsS$GZK", "&0e@E3h[\"pbEP-B(");
      StringTokenizer stringTokenizer0 = new StringTokenizer(", ", ", ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("&6daIsm[FM14EEsS$GZK", "org.apache.commons.collections4.functors.NonePredicate");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException1);
      Transformer<SQLTransientException, SQLTransientException> transformer0 = NOPTransformer.nopTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, transformerPredicate0);
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, (Predicate<? super SQLTransientException>) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "suffix may not be null";
      stringArray0[1] = "org.apache.commons.collections4.functors.NonePredicate";
      stringArray0[2] = "2X$iReV8]/b?!VJ";
      stringArray0[3] = "Iterator setValue() can only be called after next() and before remove()";
      stringArray0[4] = ", ";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) iterator0, (Predicate<? super ArrayList<Stack>>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&6daIs[FM14EEsS$GZK", "&0e@E3h[\"pbEP-B(");
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator((SQLClientInfoException) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      Factory<IIOMetadataNode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(factory0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) factoryTransformer0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.loopingListIterator(list0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<SQLTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator1, (long) (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ListIterator<SQLRecoverableException> listIterator0 = linkedList0.listIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      Predicate<SQLRecoverableException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLRecoverableException>) identityPredicate0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      Iterator<Locale.Category> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends Locale.Category>) iterator0);
      MapIterator<SQLDataException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) identityPredicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      IteratorUtils.apply((Iterator<SQLDataException>) mapIterator0, (Closure<? super SQLDataException>) closure1);
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">*GKrRf|Q_*@D2gy7";
      stringArray0[1] = "<zs\"@d$=L` ";
      stringArray0[2] = "iterator";
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("");
      MapIterator<SQLNonTransientException, ClientInfoStatus> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) mapIterator1, (Transformer<? super SQLNonTransientException, String>) constantTransformer0);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 19, int0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">\"SVY*~5<");
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      IteratorUtils.loopingListIterator((List<LinkedHashSet<LinkedList>>) stack0);
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator1);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>(orderedMapIterator0, 3241);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Vector<SQLException> vector0 = new Vector<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) vector0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.IteratorUtils", "List must not be null", 93, hashMap0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("org.apache.commons.collections4.IteratorUtils", clientInfoStatus0, biFunction0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      UniquePredicate.uniquePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientConnectionException0);
      sQLSyntaxErrorException0.printStackTrace();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) listIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("]aG+");
      FactoryTransformer<Iterator<String>, String> factoryTransformer0 = new FactoryTransformer<Iterator<String>, String>(constantFactory0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("NCOgk+>n6^R", "NCOgk+>n6^R");
      IteratorUtils.getIterator(sQLSyntaxErrorException1);
      IteratorUtils.emptyMapIterator();
      Vector<String>[] vectorArray0 = (Vector<String>[]) Array.newInstance(Vector.class, 0);
      IteratorUtils.arrayIterator(vectorArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<LinkedHashSet<LinkedList>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends SQLDataException>) transformer0);
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ListIterator<SQLRecoverableException> listIterator0 = linkedList0.listIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      Predicate<SQLRecoverableException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLRecoverableException>) identityPredicate0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      Iterator<Locale.Category> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends Locale.Category>) iterator0);
      MapIterator<SQLDataException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) identityPredicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      IteratorUtils.apply((Iterator<SQLDataException>) mapIterator0, (Closure<? super SQLDataException>) closure1);
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">*GKrRf|Q_*@D2gy7";
      stringArray0[1] = "<zs\"@d$=L` ";
      stringArray0[2] = "iterator";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) listIterator1, (Predicate<? super ArrayList<Stack>>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
      OrderedMapIterator<HashSet<Locale.Category>, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<HashSet<Locale.Category>, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<HashSet<Locale.Category>, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0, sQLIntegrityConstraintViolationException0);
      IteratorUtils.contains((Iterator<HashSet<Locale.Category>>) abstractOrderedMapIteratorDecorator0, (Object) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      Factory<IIOMetadataNode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(factory0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) factoryTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      iIOMetadataNode0.hasAttributes();
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", (String) null);
      IteratorUtils.nodeListIterator(nodeList0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      NodeList nodeList1 = iIOMetadataNode1.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList1);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<Boolean>) orderedIterator0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashtable0.put("", clientInfoStatus0);
      iteratorArray0[1] = (Iterator<Boolean>) orderedIterator0;
      iteratorArray0[2] = (Iterator<Boolean>) orderedIterator0;
      Iterator<Boolean> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) iterator1);
      IteratorUtils.isEmpty(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ", (String) null);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      IteratorUtils.getIterator(sQLClientInfoException1);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(arrayList0);
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator0, (-1L), 2328L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) listIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Iterator<String>, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Iterator<String>, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("]aG+");
      FactoryTransformer<Iterator<String>, String> factoryTransformer0 = new FactoryTransformer<Iterator<String>, String>(constantFactory0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]aG+";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      Transformer<Object, Iterator<String>> transformer0 = InvokerTransformer.invokerTransformer("]aG+", (Class<?>[]) classArray0, (Object[]) classArray0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class4);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) orPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) iterator0, (Predicate<? super ArrayList<Stack>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method ']aG+' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = 3138;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) vector0);
      String string0 = "Array class must not be null";
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      DataTruncation dataTruncation0 = new DataTruncation((-2227), false, true, 3138, (-2227));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      long long0 = 23L;
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) null, 23L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", (String) null);
      IteratorUtils.nodeListIterator(nodeList0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      NodeList nodeList1 = iIOMetadataNode1.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList1);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<Boolean>) orderedIterator0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashtable0.put("", clientInfoStatus0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.toString((Iterator<Closure<Object>>) null);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", ", ");
      stringTokenizerArray0[1] = stringTokenizer1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1NVCT=Y)x@y", "1NVCT=Y)x@y");
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Transformer<SQLTransientException, SQLTransientException> transformer0 = NOPTransformer.nopTransformer();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformerPredicate0, (Predicate<? super Object>) null);
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, andPredicate0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "u1qPF^?w=P9";
      stringArray0[1] = "prefix may not be null";
      stringArray0[2] = "[]";
      stringArray0[3] = "prefix may not be null";
      stringArray0[4] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      stringArray0[5] = "[]";
      stringArray0[6] = "1NVCT=Y)x@y";
      stringArray0[7] = "1NVCT=Y)x@y";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<Stack>>) resettableListIterator0, (Predicate<? super ArrayList<Stack>>) andPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.toString((Iterator<Closure<Object>>) null);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null", "prefix may not be null");
      stringTokenizerArray0[1] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", ", ");
      stringTokenizerArray0[1] = stringTokenizer1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1NVCT=Y)x@y", "1NVCT=Y)x@y");
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      NOPTransformer.nopTransformer();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]");
      IteratorUtils.getIterator(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) listIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Iterator<String>, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Iterator<String>, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("]qG+");
      FactoryTransformer<Iterator<String>, String> factoryTransformer0 = new FactoryTransformer<Iterator<String>, String>(constantFactory0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("]qG+", "]qG+");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("NCOgk+>n6^R", "NCOgk+>n6^R");
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedList0.listIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, (-1736));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(";4mnv()sRGR");
      String string0 = ">\"SVY*~5<";
      iIOMetadataNode0.getElementsByTagNameNS(";4mnv()sRGR", ">\"SVY*~5<");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(">\"SVY*~5<");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      listIteratorWrapper0.nextIndex();
      Iterator<DataTruncation> iterator0 = hashSet0.iterator();
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) orderedMapIterator0;
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(orderedMapIterator2);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[3] = (Iterator<DataTruncation>) mapIterator0;
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      stringTokenizerArray0[0] = stringTokenizer0;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      IteratorUtils.asIterable((Iterator<? extends StringTokenizer>) objectArrayIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("UH", "", 0, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Y7'@}C0>", "Y7'@}C0>", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0, (-3138));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.toString((Iterator<Closure<Object>>) null);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", ", ");
      stringTokenizerArray0[1] = stringTokenizer1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1NVCT=Y)x@y", "1NVCT=Y)x@y");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Transformer<SQLTransientException, SQLTransientException> transformer0 = NOPTransformer.nopTransformer();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformerPredicate0, (Predicate<? super Object>) null);
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, andPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) transformedPredicate0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "1NVCT=Y)x@y");
      IteratorUtils.getIterator(stringTokenizer1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("List must not be null", (String) null, 0, hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.FunctorUtils", "4o~rA", 1, sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.FunctorUtils", sQLClientInfoException0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[21];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "org.apache.commons.collections4.functors.FunctorUtils", 0, sQLClientInfoException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("org.apache.commons.collections4.functors.FunctorUtils");
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("?BGs] nD4", "");
      IteratorUtils.getIterator("?BGs] nD4");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      iIOMetadataNode0.hasAttributes();
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O2EJ!z{=_Oi/ph$8Q");
      IteratorUtils.nodeListIterator(nodeList0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      NodeList nodeList1 = iIOMetadataNode1.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "]");
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "Entry does not exist: ", false);
      StringTokenizer stringTokenizer2 = null;
//      try {
        stringTokenizer2 = new StringTokenizer((String) null, "iterator", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", (String) null);
      IteratorUtils.nodeListIterator(nodeList0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      NodeList nodeList1 = iIOMetadataNode1.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList1);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<Boolean>) orderedIterator0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashtable0.put("", clientInfoStatus0);
      iteratorArray0[1] = (Iterator<Boolean>) orderedIterator0;
      iteratorArray0[2] = (Iterator<Boolean>) orderedIterator0;
      Iterator<Boolean> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) iterator1);
      IteratorUtils.isEmpty(zippingIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(";4mnv()sRGR");
      iIOMetadataNode0.getElementsByTagNameNS(";4mnv()sRGR", ">\"SVY*~5<");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(">\"SVY*~5<");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      IteratorUtils.emptyOrderedIterator();
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 2);
      IteratorUtils.isEmpty(mapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1!}CkL:+I(1ERfkh";
      stringArray0[1] = "1!}CkL:+I(1ERfkh";
      stringArray0[2] = ">\"SVY*~5<";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      listIteratorWrapper0.nextIndex();
      Iterator<DataTruncation> iterator0 = hashSet0.iterator();
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) orderedMapIterator0;
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(orderedMapIterator2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "iterator";
      stringArray0[1] = "The collection must not be null";
      stringArray0[2] = "Ckg";
      stringArray0[3] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      listIteratorWrapper0.nextIndex();
      Iterator<DataTruncation> iterator0 = hashSet0.iterator();
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) orderedMapIterator0;
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(orderedMapIterator2);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[3] = (Iterator<DataTruncation>) mapIterator0;
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      LinkedHashSet<Locale.Category>[] linkedHashSetArray0 = (LinkedHashSet<Locale.Category>[]) Array.newInstance(LinkedHashSet.class, 6);
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<Locale.Category> linkedHashSet1 = new LinkedHashSet<Locale.Category>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<Locale.Category> linkedHashSet2 = new LinkedHashSet<Locale.Category>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<Locale.Category> linkedHashSet3 = new LinkedHashSet<Locale.Category>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<Locale.Category> linkedHashSet4 = new LinkedHashSet<Locale.Category>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<Locale.Category> linkedHashSet5 = new LinkedHashSet<Locale.Category>();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Rjw1,I15rVD+8>)");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "", 0, hashMap0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("List must not be null", (String) null, 0, hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.FunctorUtils", "4o~rA", 1, sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.FunctorUtils", sQLClientInfoException0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[21];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "org.apache.commons.collections4.functors.FunctorUtils", 0, sQLClientInfoException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Transformer<SQLException, String> transformer0 = new ConstantTransformer<SQLException, String>("org.apache.commons.collections4.functors.FunctorUtils");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iteratorArray0, 0, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      listIteratorWrapper0.nextIndex();
      Iterator<DataTruncation> iterator0 = hashSet0.iterator();
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) orderedMapIterator0;
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(orderedMapIterator2);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[3] = (Iterator<DataTruncation>) mapIterator0;
      Iterator<DataTruncation> iterator1 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      IteratorUtils.getIterator(iterator1);
      SQLWarning sQLWarning0 = new SQLWarning("GREATER", "suffix may not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<String>, SQLFeatureNotSupportedException>) orderedMapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("8]aGz");
      FactoryTransformer<Iterator<String>, String> factoryTransformer0 = new FactoryTransformer<Iterator<String>, String>(constantFactory0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("8]aGz", "8]aGz");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", (String) null);
      IteratorUtils.getIterator(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector<DataTruncation>[] vectorArray0 = (Vector<DataTruncation>[]) Array.newInstance(Vector.class, 8);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      vectorArray0[0] = (Vector<DataTruncation>) stack0;
      Stack<DataTruncation> stack1 = new Stack<DataTruncation>();
      vectorArray0[1] = (Vector<DataTruncation>) stack1;
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 3);
      stack0.add(dataTruncation0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      vectorArray0[2] = vector0;
      Vector<DataTruncation> vector1 = new Vector<DataTruncation>();
      vectorArray0[3] = vector1;
      Stack<DataTruncation> stack2 = new Stack<DataTruncation>();
      vectorArray0[4] = (Vector<DataTruncation>) stack2;
      Stack<DataTruncation> stack3 = new Stack<DataTruncation>();
      vectorArray0[5] = (Vector<DataTruncation>) stack3;
      Vector<DataTruncation> vector2 = new Vector<DataTruncation>();
      vectorArray0[6] = vector2;
      int int0 = 1359;
      DataTruncation dataTruncation1 = new DataTruncation(1708, false, true, 1708, 1359);
      vector2.add(dataTruncation1);
      Vector<DataTruncation> vector3 = new Vector<DataTruncation>();
      vectorArray0[7] = vector3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(vectorArray0, 100, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 599;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) null, 599);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (-670));
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      String string0 = "Enumeration must not be null";
      int int0 = 535;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Enumeration must not be null", 535, sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0, 0);
      Boolean[] booleanArray0 = new Boolean[8];
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      // Undeclared exception!
//      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 2 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("List must not be null", "List must not be null", (-4848));
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, true);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0, (-4848), (-913));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 595, (-1516));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) resettableIterator0);
      int int0 = 1629;
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 1629);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1629
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedMapIterator<Integer, Iterator<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Integer>) orderedMapIterator0, (Transformer<? super Integer, String>) transformer0);
      IteratorUtils.size(mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", (String) null, 0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<LinkedList<ArrayList>>) mapIterator0, (Predicate<? super LinkedList<ArrayList>>) predicate1);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate1, (-1210));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SqfCo\"Ywd_r";
      stringArray0[1] = "YR}nC~^eJ#6{";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "4!N#Q";
      stringArray0[4] = "";
      stringArray0[5] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) objectArrayListIterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.toString((Iterator<Closure<Object>>) null);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", ", ");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("", ", ", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = null;
//      try {
        stringTokenizer3 = new StringTokenizer((String) null, (String) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = serviceLoader0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedMapIterator<Integer, Iterator<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Integer>) orderedMapIterator0, (Transformer<? super Integer, String>) transformer0);
      IteratorUtils.size(mapIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", (String) null, 0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<LinkedList<ArrayList>>) mapIterator0, (Predicate<? super LinkedList<ArrayList>>) predicate1);
      Stack<Object> stack0 = new Stack<Object>();
      Factory<IIOMetadataNode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(factory0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) mapIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) factoryTransformer0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.loopingListIterator(list0);
      Stack<SQLTransientConnectionException> stack1 = new Stack<SQLTransientConnectionException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stack1.elements();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterable0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("List must not be null", (String) null, 0, hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLNonTransientConnectionException>) mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      int int0 = 1439;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 1439, 1439);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Rjw1,I15rVD+8>)");
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, true);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      String string0 = "4Id5Dasf";
      int int0 = (-1);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(">5w.{Oe{`R1TWA", "4Id5Dasf", (-1));
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(">5w.{Oe{`R1TWA");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("ACvO4D M HkkN#rJXP", "", (-1));
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      String string1 = "org.apache.commons.collections4.functors.ComparatorPredicate$Criterion";
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("", "org.apache.commons.collections4.functors.ComparatorPredicate$Criterion", (-1), sQLRecoverableException4);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("4Id5Dasf", "ACvO4D M HkkN#rJXP", 0, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ListIterator<SQLRecoverableException> listIterator0 = linkedList0.listIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      Predicate<SQLRecoverableException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLRecoverableException>) identityPredicate0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      Iterator<Locale.Category> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends Locale.Category>) iterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedList0);
      MapIterator<SQLDataException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) identityPredicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      IteratorUtils.apply((Iterator<SQLDataException>) mapIterator0, (Closure<? super SQLDataException>) closure1);
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 4);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Object> treeSet1 = new TreeSet<Object>();
      treeSetArray0[1] = treeSet1;
      TreeSet<Object> treeSet2 = new TreeSet<Object>();
      treeSetArray0[2] = treeSet2;
      treeSet2.retainAll(treeSet1);
      TreeSet<Object> treeSet3 = new TreeSet<Object>();
      treeSet1.spliterator();
      treeSetArray0[3] = treeSet3;
      int int0 = 125;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(treeSetArray0, 125);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = 3127;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) orderedMapIterator0, 3127);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3127
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      SQLException sQLException0 = new SQLException("!", "!");
      MockPrintStream mockPrintStream0 = new MockPrintStream("<!StoLjl$");
      // Undeclared exception!
//      try { 
        mockPrintStream0.append((CharSequence) "<!StoLjl$", 278, (-535));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&6daIs[FM14EEsS$GZK", "&0e@E3h[\"pbEP-B(");
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 1693);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P7A26<o!}}sq2?";
      stringArray0[1] = "";
      int int0 = 0;
      IteratorUtils.arrayIterator(stringArray0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
//      try { 
        iIOMetadataNode0.setIdAttribute("S'& p3l79", false);
//        fail("Expecting exception: DOMException");
      
//      } catch(DOMException e) {
//         //
//         // Method not supported
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Throwable throwable0 = sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) listIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Iterator<String>, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Iterator<String>, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      String string1 = "]aG+";
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("]aG+");
      FactoryTransformer<Iterator<String>, String> factoryTransformer0 = new FactoryTransformer<Iterator<String>, String>(constantFactory0);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) orderedIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, 5, 0, throwable0);
      ConstantFactory.constantFactory(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) iterator0, (-2997L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, 0L);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLTransactionRollbackException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, Properties> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends Properties>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Properties>(orderedMapIterator2);
      MapIterator<SQLTransactionRollbackException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, Properties>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) mapIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(resettableIterator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("DeCf1 da");
      assertEquals(2, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(transformer0);
      
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(iterator0);
      
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(enumeration0);
      
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedIterator<Boolean> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put("wLJxX\"Rqn!(K=+%/4", clientInfoStatus0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<Boolean>) orderedIterator1;
      iteratorArray0[1] = (Iterator<Boolean>) orderedIterator1;
      iteratorArray0[2] = (Iterator<Boolean>) orderedIterator1;
      iteratorArray0[3] = (Iterator<Boolean>) orderedIterator1;
      Iterator<Boolean> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) null, (Iterator<? extends Boolean>[]) iteratorArray0);
      assertNotNull(iterator1);
      assertEquals(4, iteratorArray0.length);
      
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator1, (Iterator<? extends Boolean>) iteratorArray0[1], (Iterator<? extends Boolean>) iteratorArray0[2]);
      assertNotNull(zippingIterator0);
      assertEquals(4, iteratorArray0.length);
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLClientInfoException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
      
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      int int0 = listIteratorWrapper0.nextIndex();
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertEquals(0, int0);
      
      Iterator<DataTruncation> iterator0 = hashSet0.iterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      iteratorArray0[2] = (Iterator<DataTruncation>) orderedMapIterator0;
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertNotNull(orderedMapIterator2);
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(orderedMapIterator2);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertNotNull(mapIterator0);
      
      iteratorArray0[3] = (Iterator<DataTruncation>) mapIterator0;
      Iterator<DataTruncation> iterator1 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(4, iteratorArray0.length);
      
      LinkedHashSet<Locale.Category>[] linkedHashSetArray0 = (LinkedHashSet<Locale.Category>[]) Array.newInstance(LinkedHashSet.class, 6);
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<Locale.Category> linkedHashSet1 = new LinkedHashSet<Locale.Category>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotNull(linkedHashSet1);
      
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<Locale.Category> linkedHashSet2 = new LinkedHashSet<Locale.Category>();
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertNotNull(linkedHashSet2);
      
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<Locale.Category> linkedHashSet3 = new LinkedHashSet<Locale.Category>();
      assertEquals(0, linkedHashSet3.size());
      assertTrue(linkedHashSet3.isEmpty());
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet1));
      assertNotNull(linkedHashSet3);
      
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<Locale.Category> linkedHashSet4 = new LinkedHashSet<Locale.Category>();
      assertEquals(0, linkedHashSet4.size());
      assertTrue(linkedHashSet4.isEmpty());
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet3));
      assertNotNull(linkedHashSet4);
      
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<Locale.Category> linkedHashSet5 = new LinkedHashSet<Locale.Category>();
      assertTrue(linkedHashSet5.isEmpty());
      assertEquals(0, linkedHashSet5.size());
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet3));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet4));
      assertNotNull(linkedHashSet5);
      
      linkedHashSetArray0[5] = linkedHashSet5;
      ResettableIterator<LinkedHashSet<Locale.Category>> resettableIterator1 = IteratorUtils.arrayIterator(linkedHashSetArray0, 0, 0);
      assertNotNull(resettableIterator1);
      assertEquals(6, linkedHashSetArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLDataException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends SQLDataException>) transformer0);
      assertNotNull(iterator0);
      
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<Integer, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends BatchUpdateException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      iteratorArray0[0] = (Iterator<Integer>) mapIterator0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      int int0 = (-2761);
      ArrayListIterator<Integer> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Integer>(locale_Category0, (-2761));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 725;
      intArray0[1] = 725;
      intArray0[2] = 725;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("QR:q/", "QR:q/", 725, intArray0);
      assertEquals("java.sql.BatchUpdateException: QR:q/", batchUpdateException0.toString());
      assertEquals("QR:q/", batchUpdateException0.getSQLState());
      assertEquals(725, batchUpdateException0.getErrorCode());
      assertEquals("QR:q/", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {725, 725, 725}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = batchUpdateException0.getUpdateCounts();
      assertEquals("java.sql.BatchUpdateException: QR:q/", batchUpdateException0.toString());
      assertEquals("QR:q/", batchUpdateException0.getSQLState());
      assertEquals(725, batchUpdateException0.getErrorCode());
      assertEquals("QR:q/", batchUpdateException0.getMessage());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {725, 725, 725}, intArray0);
      assertArrayEquals(new int[] {725, 725, 725}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) null);
      assertEquals("java.sql.BatchUpdateException: QR:q/", batchUpdateException0.toString());
      assertEquals("QR:q/", batchUpdateException0.getSQLState());
      assertEquals(725, batchUpdateException0.getErrorCode());
      assertEquals("QR:q/", batchUpdateException0.getMessage());
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(iterator0);
      assertArrayEquals(new int[] {725, 725, 725}, intArray0);
      assertEquals(3, intArray0.length);
      
      OrderedMapIterator<DataTruncation, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (long) 725, (long) 725);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(boundedIterator0);
      
      Predicate<DataTruncation> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<DataTruncation>) boundedIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLDataException sQLDataException0 = new SQLDataException("kn[>7&U", "kn[>7&U");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("kn[>7&U", "kn[>7&U", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("nue^k]-Cl?=f4Q", "kn[>7&U");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("nue^k]-Cl?=f4Q", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("P6", "P6", 0, sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("P6", sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("nue^k]-Cl?=f4Q");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.map.AbstractHashedMap$Values");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("nue^k]-Cl?=f4Q", sQLDataException1);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }
}
