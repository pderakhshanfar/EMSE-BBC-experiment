/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:59:56 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      LoopingIterator<InstanceofPredicate> loopingIterator0 = new LoopingIterator<InstanceofPredicate>(treeSet0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) loopingIterator0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Iterator<? extends InstanceofPredicate>) loopingIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(singletonListIterator0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) listIteratorWrapper0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>((Properties) null);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Estimated size must be greater than 0");
      FactoryTransformer<IIOMetadataNode, String> factoryTransformer0 = new FactoryTransformer<IIOMetadataNode, String>(constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, String>) factoryTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      List<Object> list0 = IteratorUtils.toList(iterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MapIterator<SQLDataException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      ListIterator<TreeSet<SQLNonTransientException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>(hashSet0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      linkedList0.add(batchUpdateException0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<TreeSet<SQLNonTransientException>, InstanceofPredicate> hashMap0 = new HashMap<TreeSet<SQLNonTransientException>, InstanceofPredicate>();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMap0.put((TreeSet<SQLNonTransientException>) null, instanceofPredicate0);
      EntrySetMapIterator<TreeSet<SQLNonTransientException>, InstanceofPredicate> entrySetMapIterator0 = new EntrySetMapIterator<TreeSet<SQLNonTransientException>, InstanceofPredicate>(hashMap0);
      TreeSet<SQLNonTransientException> treeSet0 = IteratorUtils.get((Iterator<TreeSet<SQLNonTransientException>>) entrySetMapIterator0, 0);
      assertNull(treeSet0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      SingletonIterator<HashSet<SQLInvalidAuthorizationSpecException>> singletonIterator0 = new SingletonIterator<HashSet<SQLInvalidAuthorizationSpecException>>(linkedHashSet0, true);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.PushbackIterator");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, hashtable0, sQLNonTransientConnectionException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) singletonIterator0, (Object) sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableIterator0);
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(list0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) loopingListIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[9];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<SQLDataException, Stack<SQLTimeoutException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) orderedMapIterator0, (Transformer<? super SQLDataException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Transformer<SQLException, SQLTransientConnectionException>[] transformerArray0 = (Transformer<SQLException, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 4);
      ConstantTransformer<SQLException, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLException, SQLTransientConnectionException>(sQLTransientConnectionException0);
      transformerArray0[0] = (Transformer<SQLException, SQLTransientConnectionException>) constantTransformer0;
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) linkedHashSet0);
      predicateArray0[0] = predicate0;
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate0);
      predicateArray0[1] = (Predicate<SQLException>) nullIsFalsePredicate0;
      SwitchTransformer<SQLException, SQLTransientConnectionException> switchTransformer0 = new SwitchTransformer<SQLException, SQLTransientConnectionException>(predicateArray0, transformerArray0, constantTransformer0);
      transformerArray0[1] = (Transformer<SQLException, SQLTransientConnectionException>) switchTransformer0;
      Factory<SQLTransientConnectionException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransientConnectionException>) factory0);
      transformerArray0[2] = transformer0;
      transformerArray0[3] = transformerArray0[1];
      Transformer<SQLTransientConnectionException, SQLTransientConnectionException> transformer1 = ChainedTransformer.chainedTransformer((Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>[]) transformerArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("\") in this Map", "\") in this Map", 0, (int[]) null, (Throwable) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Transformer<SQLException, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("*uLl7h%G4}[5D", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Transformer<? super BatchUpdateException, ? extends DataTruncation>) transformer0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '*uLl7h%G4}[5D' on 'class java.sql.BatchUpdateException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedMapIterator<Properties, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<InstanceofPredicate> enumeration0 = (Enumeration<InstanceofPredicate>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) orderedMapIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) iterator0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) list0);
      Enumeration<InstanceofPredicate> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) iterator1);
      Iterator<InstanceofPredicate> iterator2 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration1);
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTimeoutException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException>(orderedMapIterator2);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.matchesAny((Iterator<SQLWarning>) orderedIterator0, (Predicate<? super SQLWarning>) onePredicate0);
      IteratorUtils.size(iterator2);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<TreeSet<SQLNonTransientException>>) null, 802);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0, (-1454L), 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 0, (-203));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashSet<Object>[] hashSetArray0 = (HashSet<Object>[]) Array.newInstance(HashSet.class, 8);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, (-953), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, (-2706));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, (-742));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-2613), (-2597));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, (int) 2, (int)  (-55));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(objectArray0, (-2223), (-2223));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 755);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, (-4109));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((TreeSet<SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, 0, 512);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, 10);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, (-318));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Enumeration must not be null", sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTimeoutException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) singletonIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1882, false, false, 0, 1884);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, dataTruncation0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", classArray0, classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) resettableIterator0, (Closure<? super BatchUpdateException>) transformerClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.BatchUpdateException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("set() is not supported");
      FactoryTransformer<IIOMetadataNode, String> factoryTransformer0 = new FactoryTransformer<IIOMetadataNode, String>(constantFactory0);
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator0, (Transformer<? super IIOMetadataNode, String>) factoryTransformer0, "2uD>Me|2Re5 1IHoz`i", "Collection must not be null", "Entry does not exist: ");
      assertEquals("Collection must not be nullEntry does not exist: ", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";IkyX0>,q*at`zCV", ";IkyX0>,q*at`zCV");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) singletonIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonIterator0);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) zippingIterator0, 10);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 91);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(list0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0, 0L, 1142L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      SingletonListIterator<LinkedList<SQLDataException>> singletonListIterator0 = new SingletonListIterator<LinkedList<SQLDataException>>(linkedList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<LinkedList<SQLDataException>>) singletonListIterator0, (Transformer<? super LinkedList<SQLDataException>, String>) transformer0, "+", "W", "+");
      assertEquals("Wnull+", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>(")&r:|97QY");
      FactoryTransformer<IIOMetadataNode, String> factoryTransformer0 = new FactoryTransformer<IIOMetadataNode, String>(constantFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, String>) factoryTransformer0, "8/P", "8/P", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("&-");
      FactoryTransformer<IIOMetadataNode, String> factoryTransformer0 = new FactoryTransformer<IIOMetadataNode, String>(constantFactory0);
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator0, (Transformer<? super IIOMetadataNode, String>) factoryTransformer0, "&-", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      FactoryTransformer<IIOMetadataNode, String> factoryTransformer0 = new FactoryTransformer<IIOMetadataNode, String>(constantFactory0);
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator0, (Transformer<? super IIOMetadataNode, String>) factoryTransformer0, (String) null, "", "2uD>Me|2Re5 1IHoz`i");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0, (Transformer<? super SQLTransientException, String>) null, ", ", ", ", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ListIterator<Integer> listIterator0 = stack0.listIterator();
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<TreeSet<SQLNonTransientException>, InstanceofPredicate> hashMap0 = new HashMap<TreeSet<SQLNonTransientException>, InstanceofPredicate>();
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMap0.put(treeSet0, instanceofPredicate0);
      EntrySetMapIterator<TreeSet<SQLNonTransientException>, InstanceofPredicate> entrySetMapIterator0 = new EntrySetMapIterator<TreeSet<SQLNonTransientException>, InstanceofPredicate>(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<TreeSet<SQLNonTransientException>>) entrySetMapIterator0, 50);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 49
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      SingletonListIterator<TreeSet<SQLNonTransientException>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLNonTransientException>>(treeSet0);
      TreeSet<SQLNonTransientException> treeSet1 = IteratorUtils.get((Iterator<TreeSet<SQLNonTransientException>>) singletonListIterator0, 0);
      assertSame(treeSet1, treeSet0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      boolean boolean0 = IteratorUtils.isEmpty(objectArrayListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Hashtable<SQLClientInfoException, Closure>>) null, (Predicate<? super Hashtable<SQLClientInfoException, Closure>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iIOMetadataNodeArray0[2]);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) onePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MapIterator<SQLWarning, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLWarning>) mapIterator0, (Predicate<? super SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5435);
      integerArray0[0] = integer0;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Integer integer1 = IteratorUtils.find((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      SQLClientInfoException sQLClientInfoException1 = IteratorUtils.find((Iterator<SQLClientInfoException>) singletonIterator0, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      SQLDataException sQLDataException0 = IteratorUtils.find(iterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
      assertNull(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLDataException sQLDataException0 = IteratorUtils.find((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) uniquePredicate0);
      assertNull(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>((Predicate<? super SQLException>) null, (Closure<? super SQLException>) null, true);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) null, (Closure<? super SQLSyntaxErrorException>) whileClosure0);
      assertTrue(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLWarning> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLWarning>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) orderedMapIterator1, (Closure<? super SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NodeList must not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NodeList must not be null", "", 0, sQLTransientConnectionException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, Object>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) abstractMapIteratorDecorator0, (-122));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, Class<Properties>> hashtable0 = new Hashtable<SQLTransientConnectionException, Class<Properties>>();
      EntrySetMapIterator<SQLTransientConnectionException, Class<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, Class<Properties>>(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<SQLTimeoutException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLTimeoutException>, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterable<Iterator<SQLTimeoutException>> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<SQLTimeoutException>>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) arrayList0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) null, (Collection<? super InstanceofPredicate>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(1882, false, false, 0, 1884);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) dataTruncation0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      MapIterator<SQLRecoverableException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) predicateArray0[1]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) nonePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hashtable<String, SQLNonTransientException> hashtable0 = new Hashtable<String, SQLNonTransientException>();
      EntrySetMapIterator<String, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLNonTransientException>(hashtable0);
      AbstractMapIteratorDecorator<String, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLNonTransientException>(entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Transformer<? super String, ? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("jB<fg8", "jB<fg8", 1, hashtable0);
      Transformer<String, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) null, (Transformer<? super String, ? extends SQLException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Transformer<SQLException, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("*uLl7h%G4}[5D", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Transformer<? super BatchUpdateException, ? extends DataTruncation>) transformer0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, 1L);
      ListIteratorWrapper<SQLTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientException>(boundedIterator0);
      SkippingIterator<SQLTransientException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientException>) listIteratorWrapper0, 1L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<Predicate<Object>>) null, (Transformer<? super Predicate<Object>, String>) invokerTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1440, 1440);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 3);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator((SQLDataException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) resettableIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, HashSet<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("NodeList must not be null");
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("NodeList must not be null", classArray0, classArray0);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) properties0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<HashSet<ServiceLoader>>) iterator0, (Predicate<? super HashSet<ServiceLoader>>) transformedPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'NodeList must not be null' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, Locale.Category> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Locale.Category>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", classArray0, classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      IteratorUtils.apply((Iterator<BatchUpdateException>) resettableIterator0, (Closure<? super BatchUpdateException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Locale.Category[]) null, 122, 122);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) null, 10, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) orderedMapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) treeSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 60, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 0);
      ResettableListIterator<EnumSet<ClientInfoStatus>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      SingletonIterator<HashSet<SQLInvalidAuthorizationSpecException>> singletonIterator0 = new SingletonIterator<HashSet<SQLInvalidAuthorizationSpecException>>(hashSet0, true);
      boolean boolean0 = IteratorUtils.contains((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) singletonIterator0, (Object) hashSet0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, 1979);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1043));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }
}
