/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 12:47:54 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Transformer<Object, Closure<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Closure<Object>> iterator0 = IteratorUtils.objectGraphIterator(closure0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) transformer0);
      ListIterator<Closure<Object>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Closure<Object>>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Closure<Object>>) listIterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      IteratorUtils.arrayIterator(sQLExceptionArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("I<6");
      SQLTransientException sQLTransientException0 = new SQLTransientException("I<6", "", sQLNonTransientException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException("I<6", sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("6", "", 128, sQLTransientException1);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[6] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[7] = predicate0;
      Transformer<Object, SQLRecoverableException>[] transformerArray0 = (Transformer<Object, SQLRecoverableException>[]) Array.newInstance(Transformer.class, 1);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 5);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class5;
      InvokerTransformer<Object, SQLRecoverableException> invokerTransformer0 = new InvokerTransformer<Object, SQLRecoverableException>("", classArray0, predicateArray0);
      transformerArray0[0] = (Transformer<Object, SQLRecoverableException>) invokerTransformer0;
      SwitchTransformer<Object, SQLRecoverableException> switchTransformer0 = new SwitchTransformer<Object, SQLRecoverableException>(predicateArray0, transformerArray0, invokerTransformer0);
      Transformer<Object, SQLRecoverableException> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLRecoverableException>) switchTransformer0, (Transformer<? super Object, ? extends SQLRecoverableException>) transformerArray0[0]);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 128);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLRecoverableException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/s\"C~TM", (Map<String, ClientInfoStatus>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", 44, (Map<String, ClientInfoStatus>) null, sQLTransientException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException1, true);
      Class<String> class0 = String.class;
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) sQLTransientException0;
      objectArray0[2] = (Object) sQLClientInfoException1;
      objectArray0[3] = (Object) sQLClientInfoException0;
      objectArray0[4] = (Object) "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator";
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, objectArray0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "/s\"C~TM", "/s\"C~TM", "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Stack<Boolean> stack0 = new Stack<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(stack0);
      loopingIterator0.size();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) stack0);
      PredicateTransformer<Locale.Category> predicateTransformer0 = new PredicateTransformer<Locale.Category>(predicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Boolean boolean0 = predicateTransformer0.transform(locale_Category0);
      stack0.add(boolean0);
      stack0.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'JPZl$M$ 2kNf f2`je");
      Iterator<Boolean> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Boolean>) loopingIterator0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Boolean, String>) factoryTransformer0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "^;)`$G?A~mtm(p9", 2244, sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^;)`$G?A~mtm(p9", "", sQLFeatureNotSupportedException0);
      stack0.add(sQLTimeoutException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      IteratorUtils.getIterator(locale0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-3173);
      intArray0[1] = 32;
      intArray0[2] = (-1977);
      intArray0[3] = 4;
      intArray0[4] = 60;
      intArray0[5] = (-1);
      intArray0[6] = (-1420);
      intArray0[7] = 965;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", batchUpdateException0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) iterator1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(4256, false, false, 4256, 4256);
      vector0.add(dataTruncation0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) vector0);
      Transformer<SQLWarning, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLWarning, ? extends String>) null);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, String>) transformer0, "Transformer must not be null", "Transformer must not be null", "Transformer must not be null");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("pu]*<43qig-");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("^^");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("pu]*<43qig-");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("pu]*<43qig-");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("Estimated size must be greater than 0");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode("org.apache.commons.collections4.list.TreeList$TreeListIterator");
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(list0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<IIOMetadataNode>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.isSupported((String) null, "ji");
      linkedList0.add(iIOMetadataNode0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(linkedList0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Object>(hashMap0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      Vector<SQLTransientException> vector1 = new Vector<SQLTransientException>();
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 3);
      vectorArray0[0] = vector1;
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      vector0.add(iIOMetadataNode0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("suffix may not be null");
      sQLTimeoutException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "", sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ji");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(vector0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ey){YIJ81c", sQLFeatureNotSupportedException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap1 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      sQLTimeoutException0.getSuppressed();
      Transformer<SQLNonTransientException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLNonTransientException>, ? extends Transformer<? super SQLNonTransientException, ? extends String>>) hashMap1);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<Vector<SQLTransientException>, Closure<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UniquePredicate<SQLTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLTransientConnectionException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLTimeoutException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLRecoverableException0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UniquePredicate<SQLTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLTransientConnectionException>();
      Class<Object> class0 = Object.class;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Iterator<String> iterator0 = linkedList0.iterator();
      linkedList0.add("org.apache.commons.collections4.IterableUtils$5");
      Iterator<String> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) iterator1, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      UniquePredicate<SQLTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLTransientConnectionException>();
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 7);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      vectorArray0[0] = (Vector<SQLTransientException>) stack0;
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      vectorArray0[1] = vector0;
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      vectorArray0[2] = (Vector<SQLTransientException>) stack1;
      Vector<SQLTransientException> vector1 = new Vector<SQLTransientException>();
      vectorArray0[3] = vector1;
      Stack<SQLTransientException> stack2 = new Stack<SQLTransientException>();
      vectorArray0[4] = (Vector<SQLTransientException>) stack2;
      Stack<SQLTransientException> stack3 = new Stack<SQLTransientException>();
      vectorArray0[5] = (Vector<SQLTransientException>) stack3;
      Vector<SQLTransientException> vector2 = new Vector<SQLTransientException>();
      vectorArray0[6] = vector2;
      int int0 = (-1860);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(vectorArray0, 0, (-1860));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.Flat3Map$KeySet", "org.apache.commons.collections4.map.Flat3Map$KeySet");
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) listIteratorWrapper0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Hashtable<Properties, Iterator<SQLTransientConnectionException>> hashtable0 = new Hashtable<Properties, Iterator<SQLTransientConnectionException>>();
      Properties properties0 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Transformer<SQLTransientConnectionException, SQLTransientConnectionException> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      hashtable0.put(properties0, iterator0);
      IteratorUtils.singletonIterator(hashtable0);
      ListIterator<SQLWarning> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<SQLWarning, String> transformer1 = MapTransformer.mapTransformer((Map<? super SQLWarning, ? extends String>) null);
      IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) transformer1, "", "", "");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ci2$VKk]-M@!O=");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ci2$VKk]-M@!O=", sQLTransientException0);
      stack0.add(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, (-1055));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-4726));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@XTX";
      stringArray0[1] = "d/u<u6tq6Hmx{h_";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.contains((Iterator<String>) objectArrayIterator0, (Object) "@XTX");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayList0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      String string0 = "BM}gt1Mqwtq";
      SQLDataException sQLDataException0 = new SQLDataException("BM}gt1Mqwtq");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[3] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[4] = class5;
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("eK&?:", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, String>) invokerTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'eK&?:' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.size(singletonIterator0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(686);
      integerArray0[3] = integer3;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, int0, (int) integerArray0[2]);
      Integer integer4 = new Integer(1073741823);
      Integer integer5 = new Integer((int) integerArray0[0]);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer5);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.size(singletonIterator0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 1, 1);
      Integer integer1 = new Integer(4);
      IdentityPredicate.identityPredicate(integerArray0[0]);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.size(resettableListIterator0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      vector0.add(stringTokenizer0);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector0);
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.arrayListIterator(integerArray0, 0, 0);
      Integer integer0 = new Integer(0);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator1, (Predicate<? super Integer>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item((-849));
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) singletonIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.size((Iterator<?>) null);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("ASS6Z5", "9,!X; do>SwD<", false);
      vector0.add(stringTokenizer0);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector0);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 9;
      Integer integer0 = new Integer(9);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-141));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3316));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1949);
      integerArray0[4] = integer4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-164), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.size(resettableListIterator0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      vector0.add(stringTokenizer0);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector0);
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.arrayListIterator(integerArray0, 0, 0);
      Integer integer0 = new Integer(0);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator1, (Predicate<? super Integer>) predicate0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 5);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      int int0 = 274;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "Iterator[]", 274);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Cannot store a duplicate value (\"", "Cannot store a duplicate value (\"", sQLRecoverableException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot store a duplicate value (\"", "Cannot store a duplicate value (\"", 274, sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Cannot store a duplicate value (\"", "Cannot store a duplicate value (\"", 2, sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLTransactionRollbackException1);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", "remove() is not supported", 274);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLRecoverableException2);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("CTW[^ZrV9", "", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("CTW[^ZrV9", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("remove() is not supported", sQLRecoverableException5);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException((String) null, "I})^,0wNM:~wp+wbQC", sQLRecoverableException5);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException((String) null, "Iterator[]", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException8;
      SQLRecoverableException sQLRecoverableException9 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException9;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 2, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException>(orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, 1726L, 0L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLException sQLException0 = new SQLException("", "", 372, sQLIntegrityConstraintViolationException0);
      ArrayIterator<StringTokenizer> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<StringTokenizer>(sQLException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Properties properties0 = new Properties();
      Transformer<Object, SQLDataException> transformer0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1830, 1830);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 0L);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(abstractMapIteratorDecorator0);
      InvokerTransformer<SQLNonTransientException, Integer> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, Integer>("", (Class<?>[]) null, objectArray0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      Closure<SQLTransientConnectionException>[] closureArray0 = (Closure<SQLTransientConnectionException>[]) Array.newInstance(Closure.class, 0);
      IteratorUtils.arrayListIterator(closureArray0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) singletonIterator0, (Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Q=a0~-^y-Ezn-Wo=l", (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("InstantiateFactory: InstantiationException", sQLSyntaxErrorException0);
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("InstantiateFactory: InstantiationException", "Q=a0~-^y-Ezn-Wo=l", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.TAIWAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "InstantiateFactory: InstantiationException", (Object[]) stackTraceElementArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      sQLSyntaxErrorException0.printStackTrace((PrintWriter) mockPrintWriter1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("InstantiateFactory: InstantiationException", "Q=a0~-^y-Ezn-Wo=l", sQLFeatureNotSupportedException0);
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedException1.fillInStackTrace();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Object>) listIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) loopingListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Iterator[]", "2Z>i/V>&nz*e~L", true);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      stringTokenizer0.hasMoreElements();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(true);
      IteratorUtils.nodeListIterator(node0);
      SQLDataException sQLDataException0 = new SQLDataException("& ", ")%K~wxv", (-1800), (Throwable) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, (-1800));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      Hashtable<Integer, TreeSet<IIOMetadataNode>> hashtable0 = new Hashtable<Integer, TreeSet<IIOMetadataNode>>();
      EntrySetMapIterator<Integer, TreeSet<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, TreeSet<IIOMetadataNode>>(hashtable0);
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      Iterator<SQLRecoverableException> iterator0 = arrayDeque0.descendingIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstantiateFactory<IIOMetadataNode> instantiateFactory0 = new InstantiateFactory<IIOMetadataNode>(class0);
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(instantiateFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MapIterator<String, Vector<SQLClientInfoException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<String, Vector<SQLClientInfoException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Vector<SQLClientInfoException>>(mapIterator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) abstractMapIteratorDecorator0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) zippingIterator0, 127);
      IteratorUtils.loopingIterator((Collection<? extends String>) list0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyIterator();
      String string0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) null, "[lx", (String) null, "[lx");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      EmptyMapIterator.emptyMapIterator();
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      IteratorUtils.emptyOrderedMapIterator();
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 1);
      vectorArray0[0] = (Vector<SQLTransientException>) stack0;
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      EmptyMapIterator.emptyMapIterator();
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 3061, 2100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, (long) 0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      int int1 = 124;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 124, 124);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<String, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<String>) orderedMapIterator0);
      IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "'3M<i s)'", "]JXiq|W+O'-y&X\":T", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ArrayList<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null, true);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) singletonIterator0);
      IteratorUtils.size(singletonIterator0);
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 1);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      vectorArray0[0] = (Vector<SQLTransientException>) stack0;
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "", (String) null, "51Q ;0A2LRP8B[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Vector<SQLTimeoutException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      int int0 = 5;
      int int1 = (-846);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 5, (-846));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) zippingIterator0, (Transformer<? super SQLException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      batchUpdateException0.printStackTrace();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) resettableListIterator0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) transformer0, (String) null, "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) uniquePredicate0);
      IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate1);
      UniquePredicate<Integer> uniquePredicate2 = new UniquePredicate<Integer>();
      IteratorUtils.emptyOrderedIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      SingletonIterator<Iterator<SQLTransientConnectionException>> singletonIterator0 = new SingletonIterator<Iterator<SQLTransientConnectionException>>(resettableIterator0);
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Iterator<SQLTransientConnectionException>>) singletonIterator0, (Closure<? super Iterator<SQLTransientConnectionException>>) closure0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("uWYvcs97tDE]_,4", "uWYvcs97tDE]_,4");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("JPU-8kZX>D", (String) null, 10);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("~F3m(YZX&Urwm+lBo", (String) null, 10);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.IteratorUtils", (-3443));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.IteratorUtils", "uWYvcs97tDE]_,4", 124, sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException((String) null, "", 1227, sQLTransactionRollbackException0);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedMapIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicateArray0[1]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedMapIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicateArray0[1]);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLException sQLException0 = new SQLException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("gFHsl@hO|Qs", "gFHsl@hO|Qs", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>(list0);
      linkedList0.iterator();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<Iterator<SQLTransientConnectionException>> stack0 = new Stack<Iterator<SQLTransientConnectionException>>();
      ReverseListIterator<Iterator<SQLTransientConnectionException>> reverseListIterator0 = new ReverseListIterator<Iterator<SQLTransientConnectionException>>(stack0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<SQLTransientConnectionException>>) reverseListIterator0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties(properties5);
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      int int0 = 3280;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 3280);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NOPClosure.nopClosure();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      TruePredicate.truePredicate();
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", "lb''n$/-_`l$s)7M:N", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("d$&9<?M\"Fc.", (String) null, sQLFeatureNotSupportedException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null, true);
      IteratorUtils.size(singletonIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 1, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NOPClosure.nopClosure();
      OrderedMapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 837, 837, sQLWarning0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("}6", "g.[Z+j", true);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null, true);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) singletonIterator0);
      IteratorUtils.size(singletonIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(837, false, false, 548, 837);
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NOPClosure.nopClosure();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 1193);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Enumeration<StringTokenizer> enumeration0 = null;
      OrderedMapIterator<Boolean, PriorityQueue<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, PriorityQueue<Locale.Category>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, PriorityQueue<Locale.Category>>(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 1L);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(abstractMapIteratorDecorator0);
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "";
      Class<SQLTransientException>[] classArray0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractMapIteratorDecorator1;
      objectArray0[1] = (Object) abstractMapIteratorDecorator0;
      objectArray0[2] = (Object) mapIterator0;
      objectArray0[3] = (Object) skippingIterator0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 3336);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) sQLNonTransientConnectionException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      LinkedList<Iterator<SQLTransientConnectionException>> linkedList0 = new LinkedList<Iterator<SQLTransientConnectionException>>();
      ResettableListIterator<Iterator<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLTransientConnectionException>>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Iterator<SQLTransientConnectionException>>) resettableListIterator0, (Closure<? super Iterator<SQLTransientConnectionException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLWarning sQLWarning0 = new SQLWarning();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) skippingIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-1041), (-1041), sQLNonTransientException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&{?f:=c;)jsWpcR");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      EmptyIterator.resettableEmptyIterator();
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 6);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf((Collection<Locale.Category>) enumSet0);
      enumSetArray0[2] = enumSet2;
      EnumSet<Locale.Category> enumSet3 = EnumSet.copyOf(enumSet0);
      enumSetArray0[3] = enumSet3;
      EnumSet<Locale.Category> enumSet4 = enumSet1.clone();
      enumSetArray0[4] = enumSet4;
      EnumSet<Locale.Category> enumSet5 = EnumSet.allOf(class0);
      enumSetArray0[5] = enumSet5;
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byte byte0 = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) listIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties>(orderedMapIterator0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) stack0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      TruePredicate.truePredicate();
      IteratorUtils.emptyMapIterator();
      Properties[] propertiesArray0 = new Properties[0];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) objectArrayIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = new Object[0];
      InvokerTransformer<SQLNonTransientException, Integer> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, Integer>("", (Class<?>[]) null, objectArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3719));
      integerArray0[0] = integer0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer1 = new Integer((-3719));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "transformer may not be null");
      SQLDataException sQLDataException0 = new SQLDataException("LSolu", sQLSyntaxErrorException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) listIterator1, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      ServiceLoader<StringTokenizer>[] serviceLoaderArray0 = (ServiceLoader<StringTokenizer>[]) Array.newInstance(ServiceLoader.class, 6);
      Class<StringTokenizer> class1 = StringTokenizer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<StringTokenizer> serviceLoader0 = ServiceLoader.load(class1, classLoader1);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<StringTokenizer> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[1] = serviceLoader1;
      classLoader1.getParent();
      ServiceLoader<StringTokenizer> serviceLoader2 = ServiceLoader.load(class1, (ClassLoader) null);
      serviceLoaderArray0[2] = serviceLoader2;
      ServiceLoader<StringTokenizer> serviceLoader3 = ServiceLoader.load(class1);
      serviceLoaderArray0[3] = serviceLoader3;
      ServiceLoader<StringTokenizer> serviceLoader4 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[4] = serviceLoader4;
      ServiceLoader<StringTokenizer> serviceLoader5 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[5] = serviceLoader5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, 1, (int) integerArray0[1]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("10}}\"Z,l;PwA", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException1.forEach(consumer0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NodeList nodeList0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-62));
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Can extract singleton only when collection size == 1");
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      arrayList0.addAll((Collection<? extends SQLNonTransientConnectionException>) priorityQueue0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      EmptyIterator.resettableEmptyIterator();
      String string0 = "G.sELd#b<-3rY-";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("G.sELd#b<-3rY-");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("G.sELd#b<-3rY-", "G.sELd#b<-3rY-", 2100, sQLInvalidAuthorizationSpecException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("G.sELd#b<-3rY-", "-tyo", sQLInvalidAuthorizationSpecException1);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLIntegrityConstraintViolationException0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(identityPredicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nullIsFalsePredicate0, identityPredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Transformer<Object, SQLTransactionRollbackException>[] transformerArray0 = (Transformer<Object, SQLTransactionRollbackException>[]) Array.newInstance(Transformer.class, 7);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, SQLTransactionRollbackException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) identityPredicate0, (Transformer<? super Object, ? extends SQLTransactionRollbackException>) transformer0, (Transformer<? super Object, ? extends SQLTransactionRollbackException>) transformer0);
      transformerArray0[0] = transformer1;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[0] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[1] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[2] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[3] = class4;
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      classArray0[4] = class5;
      Class<SQLTimeoutException> class6 = SQLTimeoutException.class;
      classArray0[5] = class6;
      Class<SQLTimeoutException> class7 = SQLTimeoutException.class;
      classArray0[6] = class7;
      Class<SQLTimeoutException> class8 = SQLTimeoutException.class;
      classArray0[7] = class8;
      Class<SQLTimeoutException> class9 = SQLTimeoutException.class;
      classArray0[8] = class9;
      InstantiateFactory<SQLTransactionRollbackException> instantiateFactory0 = null;
//      try {
        instantiateFactory0 = new InstantiateFactory<SQLTransactionRollbackException>(class0, classArray0, classArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // InstantiateFactory: The constructor must exist and be public 
//         //
//         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-62));
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Can extract singleton only when collection size == 1");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("4u7@@=w", "Can extract singleton only when collection size == 1", (-62));
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "Can extract singleton only when collection size == 1", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.toList((Iterator<?>) singletonIterator0, 1169);
      EmptyIterator.resettableEmptyIterator();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3701));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3701));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[0] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      OrderedMapIterator<SQLDataException, Predicate<TreeSet>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) orderedMapIterator0, (long) integerArray0[0]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-3719), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(2, integerArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("I#mu't8EbB");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("I#mu't8EbB", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: I#mu't8EbB", sQLTransactionRollbackException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("LSolu", "LSolu", sQLTransactionRollbackException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("I#mu't8EbB", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: I#mu't8EbB", sQLTransactionRollbackException0.toString());
      assertEquals("LSolu", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("LSolu", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: LSolu", sQLFeatureNotSupportedException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", (-1413));
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException1;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", "10}}\"Z,l;PwA", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0.getMessage());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLFeatureNotSupportedException0);
      assertNotNull(sQLWarning0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("10}}\"Z,l;PwA", "", sQLWarning0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 10}}\"Z,l;PwA", sQLFeatureNotSupportedException1.toString());
      assertEquals("10}}\"Z,l;PwA", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0.getMessage());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTimeoutException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      PredicateTransformer<Locale.Category> predicateTransformer0 = new PredicateTransformer<Locale.Category>(predicate0);
      assertNotNull(predicateTransformer0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Boolean boolean0 = predicateTransformer0.transform(locale_Category0);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(boolean0);
      assertNotNull(identityPredicate0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.IteratorChain");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", "", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", sQLNonTransientConnectionException1.getMessage());
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(resettableIterator0);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals("org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", sQLNonTransientConnectionException1.getMessage());
      
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
      assertFalse(boolean1);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals("org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", sQLNonTransientConnectionException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-3719), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      assertNotNull(nullIsTruePredicate0);
      
      Predicate<Integer> predicate0 = new EqualPredicate<Integer>(integerArray0[0]);
      assertNotNull(predicate0);
      assertEquals(3, integerArray0.length);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(2, objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Array class must not be null", classArray0, integerArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, classArray0.length);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) objectArrayListIterator0, (Transformer<? super Integer, String>) invokerTransformer0, "Array class must not be null", "Array class must not be null", "");
      assertEquals("Array class must not be null", string0);
      assertNotNull(string0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, classArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(2, objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-Y~5:1}=AWF^[");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.item(0);
      assertNull(node0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      assertNotNull(singletonIterator0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(singletonIterator0.hasNext());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(singletonIterator0.hasNext());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, (long) 0);
      assertNotNull(skippingIterator0);
      
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      assertFalse(abstractMapIteratorDecorator1.equals((Object)abstractMapIteratorDecorator0));
      assertNotNull(abstractMapIteratorDecorator1);
      
      OrderedMapIterator<SQLSyntaxErrorException, ArrayDeque<LinkedList>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      InvokerTransformer<SQLNonTransientException, Integer> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, Integer>("", classArray0, objectArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(1, objectArray0.length);
      assertEquals(3, classArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(singletonIterator0.hasNext());
      
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends Integer>) invokerTransformer0);
      assertNotNull(iterator0);
      assertEquals(1, objectArray0.length);
      assertEquals(3, classArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(singletonIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      OrderedMapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      assertNotNull(singletonIterator0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(singletonIterator0.hasNext());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 0L);
      assertNotNull(skippingIterator0);
      
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<Predicate<Object>, Closure<Object>> hashMap1 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Closure<Object> closure1 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(closure1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(closure1, closure0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Iterator<SQLTransientConnectionException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-3719), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(3, integerArray0.length);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      boolean boolean0 = objectArrayListIterator0.hasNext();
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      assertNotNull(nullIsTruePredicate0);
      
      Predicate<Integer> predicate0 = OrPredicate.orPredicate((Predicate<? super Integer>) uniquePredicate0, (Predicate<? super Integer>) nullIsTruePredicate0);
      assertNotNull(predicate0);
      
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, integerArray0.length);
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(list0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[{vOi2|");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNull(node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      
      Node node1 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(iIOMetadataNode1, node1);
      assertSame(node1, iIOMetadataNode1);
      assertNotSame(node1, iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeListIterator0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(iIOMetadataNode1, node1);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-3719), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(2, integerArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("LSolu", "");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: LSolu", sQLSyntaxErrorException0.toString());
      assertEquals("LSolu", sQLSyntaxErrorException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException("LSolu", sQLSyntaxErrorException0);
      assertNotNull(sQLDataException0);
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: LSolu", sQLSyntaxErrorException0.toString());
      assertEquals("LSolu", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLDataException: LSolu", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("LSolu", sQLDataException0.getMessage());
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      assertNotNull(resettableIterator0);
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: LSolu", sQLSyntaxErrorException0.toString());
      assertEquals("LSolu", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLDataException: LSolu", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("LSolu", sQLDataException0.getMessage());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: LSolu", sQLSyntaxErrorException0.toString());
      assertEquals("LSolu", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLDataException: LSolu", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("LSolu", sQLDataException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      Predicate<String> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) uniquePredicate0);
      assertNotNull(predicate0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLTransientConnectionException>>) null, (Predicate<? super Iterator<SQLTransientConnectionException>>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<StringTokenizer>) orderedMapIterator0;
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(1, iteratorArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<StringTokenizer>) zippingIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = "=0L+";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("=0L+");
      assertNotNull(sQLDataException0);
      assertEquals("=0L+", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: =0L+", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 7);
      ObjectArrayListIterator<Vector<SQLTransientException>> objectArrayListIterator0 = new ObjectArrayListIterator<Vector<SQLTransientException>>(vectorArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(7, vectorArray0.length);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      
      Vector<SQLTransientException> vector1 = IteratorUtils.get((Iterator<Vector<SQLTransientException>>) objectArrayListIterator0, 0);
      assertNull(vector1);
      assertEquals(7, vectorArray0.length);
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) objectArrayListIterator0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<BatchUpdateException, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      iteratorArray0[1] = (Iterator<BatchUpdateException>) resettableListIterator0;
      OrderedMapIterator<BatchUpdateException, SQLDataException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<BatchUpdateException, SQLException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLException>) orderedMapIterator1);
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLException>(orderedMapIterator2);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      iteratorArray0[2] = (Iterator<BatchUpdateException>) abstractOrderedMapIteratorDecorator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(3, iteratorArray0.length);
      
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iteratorArray0[0]);
      assertNotNull(zippingIterator0);
      assertEquals(3, iteratorArray0.length);
      
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) zippingIterator0, 1);
      assertFalse(list0.contains(1));
      assertNotNull(list0);
      assertEquals(3, iteratorArray0.length);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      assertNotNull(resettableListIterator1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-3719), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      
      integerArray0[0] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(3, integerArray0.length);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      assertNotNull(nullIsTruePredicate0);
      
      Predicate<Integer> predicate0 = OrPredicate.orPredicate((Predicate<? super Integer>) uniquePredicate0, (Predicate<? super Integer>) nullIsTruePredicate0);
      assertNotNull(predicate0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException", sQLSyntaxErrorException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NodeList must not be null", "NodeList must not be null", sQLSyntaxErrorException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException", sQLSyntaxErrorException0.toString());
      assertEquals("NodeList must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("NodeList must not be null", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: NodeList must not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("bJqg", "", sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("bJqg", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: bJqg", sQLFeatureNotSupportedException1.toString());
      assertEquals("", sQLFeatureNotSupportedException1.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("bJqg", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: bJqg", sQLFeatureNotSupportedException1.toString());
      assertEquals("", sQLFeatureNotSupportedException1.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLFeatureNotSupportedException: bJqg", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: bJqg", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicate0);
      assertNotNull(identityPredicate0);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, 1167);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(1167, sQLNonTransientConnectionException0.getErrorCode());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("snB.+GHJA", "q?t+Rmv4;", sQLTimeoutException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("java.sql.SQLNonTransientConnectionException: snB.+GHJA", sQLNonTransientConnectionException1.toString());
      assertEquals("snB.+GHJA", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("q?t+Rmv4;", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException", sQLSyntaxErrorException0.toString());
      assertEquals("NodeList must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("NodeList must not be null", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: NodeList must not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(resettableListIterator0);
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) nullIsTruePredicate0);
      assertTrue(boolean0);
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[{vOi2|");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.item(0);
      assertNull(node0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      assertNotNull(resettableIterator0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      assertNotNull(singletonIterator0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(singletonIterator0.hasNext());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 4);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      vectorArray0[0] = (Vector<SQLTransientException>) stack0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[{vOi2|", "[{vOi2|", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [{vOi2|", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[{vOi2|", sQLTimeoutException0.getSQLState());
      assertEquals("[{vOi2|", sQLTimeoutException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("[{vOi2|", "[{vOi2|", sQLTimeoutException0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [{vOi2|", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[{vOi2|", sQLTimeoutException0.getSQLState());
      assertEquals("[{vOi2|", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [{vOi2|", sQLFeatureNotSupportedException1.toString());
      assertEquals("[{vOi2|", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("[{vOi2|", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [{vOi2|", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[{vOi2|", sQLTimeoutException0.getSQLState());
      assertEquals("[{vOi2|", sQLTimeoutException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: [{vOi2|", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTimeoutException: [{vOi2|", sQLInvalidAuthorizationSpecException0.toString());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableIterator0);
      assertNotNull(identityPredicate0);
      
      int int0 = 2100;
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<SQLTransientConnectionException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[{vOi2|", sQLTimeoutException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("[{vOi2|", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: [{vOi2|", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [{vOi2|", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[{vOi2|", sQLTimeoutException0.getSQLState());
      assertEquals("[{vOi2|", sQLTimeoutException0.getMessage());
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0, 0);
      assertNotNull(resettableIterator1);
      assertEquals(1, sQLTransientConnectionExceptionArray0.length);
      
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableIterator1;
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientConnectionException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientConnectionException>) orderedMapIterator1);
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      
      AbstractMapIteratorDecorator<SQLTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator2);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 6);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf((Collection<Locale.Category>) enumSet0);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet2.size());
      
      enumSetArray0[2] = enumSet2;
      EnumSet<Locale.Category> enumSet3 = EnumSet.copyOf(enumSet0);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet3.equals((Object)enumSet1));
      assertTrue(enumSet3.equals((Object)enumSet0));
      assertTrue(enumSet3.equals((Object)enumSet2));
      assertNotNull(enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet2);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet3.size());
      
      enumSetArray0[3] = enumSet3;
      EnumSet<Locale.Category> enumSet4 = enumSet1.clone();
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet4.equals((Object)enumSet0));
      assertTrue(enumSet4.equals((Object)enumSet2));
      assertTrue(enumSet4.equals((Object)enumSet1));
      assertTrue(enumSet4.equals((Object)enumSet3));
      assertNotNull(enumSet4);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet4);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet4);
      assertNotSame(enumSet4, enumSet1);
      assertNotSame(enumSet4, enumSet0);
      assertNotSame(enumSet4, enumSet2);
      assertNotSame(enumSet4, enumSet3);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertEquals(0, enumSet4.size());
      
      enumSetArray0[4] = enumSet4;
      EnumSet<Locale.Category> enumSet5 = EnumSet.allOf(class0);
      assertFalse(enumSet5.equals((Object)enumSet4));
      assertFalse(enumSet5.equals((Object)enumSet2));
      assertFalse(enumSet5.equals((Object)enumSet1));
      assertFalse(enumSet5.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet3));
      assertNotNull(enumSet5);
      assertNotSame(enumSet5, enumSet4);
      assertNotSame(enumSet5, enumSet2);
      assertNotSame(enumSet5, enumSet1);
      assertNotSame(enumSet5, enumSet0);
      assertNotSame(enumSet5, enumSet3);
      assertEquals(2, enumSet5.size());
      
      enumSetArray0[5] = enumSet5;
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator1 = IteratorUtils.arrayIterator(enumSetArray0);
      assertNotNull(resettableIterator1);
      assertEquals(6, enumSetArray0.length);
      
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator1);
      assertNotNull(listIterator0);
      assertEquals(6, enumSetArray0.length);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-118);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)60, (byte)1, (byte)49, (byte) (-118)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      ListIterator<EnumSet<Locale.Category>> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) listIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertNotNull(listIterator1);
      assertEquals(6, enumSetArray0.length);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator1.hasPrevious());
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("=0L+", hashtable0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("=0L+", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: =0L+", sQLClientInfoException0.toString());
      
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLClientInfoException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("=0L+", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: =0L+", sQLClientInfoException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("=0L+", "=0L+", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: =0L+", sQLDataException0.toString());
      assertEquals("=0L+", sQLDataException0.getMessage());
      assertEquals("=0L+", sQLDataException0.getSQLState());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      SkippingIterator<BatchUpdateException> skippingIterator1 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) orderedMapIterator1, 24L);
      assertNotNull(skippingIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      iteratorArray0[1] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      iteratorArray0[2] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      iteratorArray0[3] = (Iterator<BatchUpdateException>) skippingIterator1;
      iteratorArray0[4] = (Iterator<BatchUpdateException>) skippingIterator1;
      iteratorArray0[5] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(6, iteratorArray0.length);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) mapIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(sQLWarning0);
      assertNotNull(iterator1);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLTransientConnectionException>>) null, (Predicate<? super Iterator<SQLTransientConnectionException>>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(stack0);
      assertNotNull(loopingListIterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      // Undeclared exception!
//      try { 
        loopingListIterator0.previous();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // There are no elements for this iterator to loop on
//         //
//         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = linkedList0.add(iIOMetadataNode0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertEquals(1, linkedList0.size());
      
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(linkedList0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertNotNull(vector0);
      assertEquals(1, linkedList0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(1, vector0.size());
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertNotNull(resettableIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(1, vector0.size());
      
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      EntrySetMapIterator<SQLFeatureNotSupportedException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Object>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 4);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("jN:)O5", classArray0, classArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(4, classArray0.length);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) invokerTransformer0, " `N0*aaT@EF", " `N0*aaT@EF", " `N0*aaT@EF");
      assertEquals(" `N0*aaT@EF `N0*aaT@EF", string0);
      assertNotNull(string0);
      assertEquals(4, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 2932);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(2932, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      assertNotNull(singletonIterator0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(2932, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) singletonIterator0);
      assertNotNull(list0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(2932, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertFalse(singletonIterator0.hasNext());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "xu'&*J%JW*]9Y$@", "51Q ;0A2LRP8B[", "");
      assertEquals("51Q ;0A2LRP8B[", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Transformer<Object, String>>) null, (-316));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -316
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = null;
      int int0 = 1676;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1676);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("=0L+", "=0L+", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("=0L+", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: =0L+", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("=0L+", sQLDataException0.getMessage());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      SkippingIterator<BatchUpdateException> skippingIterator1 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) orderedMapIterator1, 1L);
      assertNotNull(skippingIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      iteratorArray0[1] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      iteratorArray0[2] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      iteratorArray0[3] = (Iterator<BatchUpdateException>) skippingIterator1;
      iteratorArray0[4] = (Iterator<BatchUpdateException>) skippingIterator1;
      iteratorArray0[5] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(6, iteratorArray0.length);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) mapIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(sQLWarning0);
      assertNotNull(iterator1);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-3719), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "transformer may not be null");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("transformer may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("LSolu", sQLSyntaxErrorException0);
      assertNotNull(sQLDataException0);
      assertEquals("transformer may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("LSolu", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: LSolu", sQLDataException0.toString());
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      assertNotNull(resettableIterator0);
      assertEquals("transformer may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("LSolu", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: LSolu", sQLDataException0.toString());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertEquals("transformer may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("LSolu", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: LSolu", sQLDataException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      Predicate<String> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) uniquePredicate0);
      assertNotNull(predicate0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(integerArray0[1]);
      assertNotNull(iterator0);
      assertEquals(2, integerArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLTransientConnectionException>>) null, (Predicate<? super Iterator<SQLTransientConnectionException>>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Integer integer0 = new Integer((-3309));
      assertEquals((-3309), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "LSolu");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("LSolu", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      assertNotNull(resettableIterator0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      Predicate<String> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) uniquePredicate0);
      assertNotNull(predicate0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", "lK|>");
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("lK|>", sQLSyntaxErrorException1.getSQLState());
      assertEquals("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(iterator0);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertEquals("lK|>", sQLSyntaxErrorException1.getSQLState());
      assertEquals("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLTransientConnectionException>>) null, (Predicate<? super Iterator<SQLTransientConnectionException>>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Properties, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Properties, SQLInvalidAuthorizationSpecException>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap1, (Throwable) null);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("NY3eFlG4", (String) null, 33, sQLClientInfoException0);
      assertNotNull(sQLDataException0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLDataException0);
      assertNotNull(sQLTimeoutException0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("qj'`", "NY3eFlG4", sQLTimeoutException0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("qj'`", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: qj'`", sQLFeatureNotSupportedException1.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: NY3eFlG4", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLIntegrityConstraintViolationException0);
      assertNotNull(identityPredicate0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: NY3eFlG4", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      Predicate<SQLNonTransientConnectionException> predicate0 = IdentityPredicate.identityPredicate(sQLNonTransientConnectionException0);
      assertNotNull(predicate0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) identityPredicate0);
      assertNotNull(predicate1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: NY3eFlG4", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
      assertFalse(boolean0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: NY3eFlG4", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      boolean boolean1 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Closure must not be null", "", (-128));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Closure must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Closure must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-128), sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*p/O", "NY3eFlG4", 2099, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Closure must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Closure must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-128), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("*p/O", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(2099, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: *p/O", sQLInvalidAuthorizationSpecException0.toString());
      
      HashMap<Properties, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Properties, SQLInvalidAuthorizationSpecException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = hashMap0.put(properties0, (SQLInvalidAuthorizationSpecException) null);
      assertNull(sQLInvalidAuthorizationSpecException1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      EntrySetMapIterator<Properties, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLInvalidAuthorizationSpecException>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) entrySetMapIterator0);
      assertNotNull(enumeration0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Vector<PriorityQueue> vector0 = IteratorUtils.find((Iterator<Vector<PriorityQueue>>) null, (Predicate<? super Vector<PriorityQueue>>) predicate0);
      assertNull(vector0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) entrySetMapIterator0);
      assertNotNull(iterator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      OrderedMapIterator<DataTruncation, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      OrderedMapIterator<DataTruncation, EnumSet<Locale.Category>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<DataTruncation, EnumSet<Locale.Category>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator2);
      assertSame(orderedMapIterator2, orderedMapIterator1);
      assertFalse(orderedMapIterator2.hasPrevious());
      
      OrderedMapIterator<DataTruncation, EnumSet<Locale.Category>> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends EnumSet<Locale.Category>>) orderedMapIterator1);
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator2));
      assertNotNull(orderedMapIterator3);
      assertSame(orderedMapIterator1, orderedMapIterator2);
      assertFalse(orderedMapIterator3.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) defaultEquator0, 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Properties, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Properties, SQLInvalidAuthorizationSpecException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", ") greater than the size of the ", 1284);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(") greater than the size of the ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1284, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 1284, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(") greater than the size of the ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1284, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1284, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = hashMap0.put(properties0, sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(") greater than the size of the ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1284, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1284, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      EntrySetMapIterator<Properties, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLInvalidAuthorizationSpecException>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) entrySetMapIterator0);
      assertNotNull(enumeration0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      assertNotNull(predicate0);
      
      Vector<PriorityQueue> vector0 = IteratorUtils.find((Iterator<Vector<PriorityQueue>>) entrySetMapIterator0, (Predicate<? super Vector<PriorityQueue>>) predicate0);
      assertNotNull(vector0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) entrySetMapIterator0);
      assertNotNull(iterator0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      OrderedMapIterator<DataTruncation, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      OrderedMapIterator<DataTruncation, EnumSet<Locale.Category>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<DataTruncation, EnumSet<Locale.Category>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator2);
      assertSame(orderedMapIterator2, orderedMapIterator1);
      assertFalse(orderedMapIterator2.hasPrevious());
      
      OrderedMapIterator<DataTruncation, EnumSet<Locale.Category>> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends EnumSet<Locale.Category>>) orderedMapIterator2);
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator1));
      assertNotNull(orderedMapIterator3);
      assertSame(orderedMapIterator2, orderedMapIterator1);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator3.hasPrevious());
      
      OrderedMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> orderedMapIterator4 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator4);
      assertFalse(orderedMapIterator4.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException>(orderedMapIterator4);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator4.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("10}}\"Z,l;PwA", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNode0.setPrefix("");
      Document document0 = iIOMetadataNode0.getOwnerDocument();
      assertNull(document0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("AL,v\"+B");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getFirstChild();
      assertNull(node0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException("=0L+", "=0L+", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLDataException: =0L+", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("=0L+", sQLDataException0.getMessage());
      assertEquals("=0L+", sQLDataException0.getSQLState());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      
      Stack<SQLTransientException> stack2 = new Stack<SQLTransientException>();
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertNotNull(stack2);
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertEquals(0, stack2.size());
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 1);
      vectorArray0[0] = (Vector<SQLTransientException>) stack0;
      ObjectArrayListIterator<Vector<SQLTransientException>> objectArrayListIterator0 = new ObjectArrayListIterator<Vector<SQLTransientException>>(vectorArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(1, vectorArray0.length);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      
      Vector<SQLTransientException> vector1 = IteratorUtils.get((Iterator<Vector<SQLTransientException>>) objectArrayListIterator0, 0);
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertEquals(1, vectorArray0.length);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NY3eFlG4", hashMap0, (Throwable) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("NY3eFlG4", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: NY3eFlG4", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("NY3eFlG4", "NY3eFlG4", 33, sQLClientInfoException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("NY3eFlG4", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: NY3eFlG4", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertEquals("NY3eFlG4", sQLDataException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "delimiter may not be null", sQLDataException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("NY3eFlG4", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: NY3eFlG4", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertEquals("NY3eFlG4", sQLDataException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("delimiter may not be null", sQLTimeoutException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("delimiter may not be null", (String) null, sQLClientInfoException0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("NY3eFlG4", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: NY3eFlG4", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("delimiter may not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: delimiter may not be null", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("NY3eFlG4", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: NY3eFlG4", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      assertEquals("NY3eFlG4", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLDataException: NY3eFlG4", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLInvalidAuthorizationSpecException0.getMessage());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      assertNotNull(identityPredicate0);
      
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) identityPredicate0);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      OrderedMapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      OrderedMapIterator<StringTokenizer, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      
      Stack<SQLTransientException> stack2 = new Stack<SQLTransientException>();
      assertTrue(stack2.equals((Object)stack1));
      assertNotNull(stack2);
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals(0, stack2.size());
      assertEquals(10, stack2.capacity());
      
      Stack<SQLTransientException> stack3 = new Stack<SQLTransientException>();
      assertTrue(stack3.equals((Object)stack2));
      assertTrue(stack3.equals((Object)stack1));
      assertNotNull(stack3);
      assertTrue(stack3.empty());
      assertEquals(0, stack3.size());
      assertTrue(stack3.isEmpty());
      assertEquals("[]", stack3.toString());
      assertEquals(10, stack3.capacity());
      
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 2);
      vectorArray0[0] = (Vector<SQLTransientException>) stack1;
      vectorArray0[1] = (Vector<SQLTransientException>) stack2;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) orderedMapIterator0, 3591L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) skippingIterator0;
      iteratorArray0[1] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<BatchUpdateException>) skippingIterator0;
      iteratorArray0[3] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      Hashtable<BatchUpdateException, Object> hashtable0 = new Hashtable<BatchUpdateException, Object>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-571);
      intArray0[1] = 933;
      intArray0[2] = 933;
      intArray0[3] = 933;
      intArray0[4] = 933;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("setValue() is not supported", "", 933, sQLTransientConnectionException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(933, sQLNonTransientException0.getErrorCode());
      assertEquals("setValue() is not supported", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: setValue() is not supported", sQLNonTransientException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("setValue() is not supported", "Node must not be null", (-571), sQLNonTransientException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(933, sQLNonTransientException0.getErrorCode());
      assertEquals("setValue() is not supported", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: setValue() is not supported", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLRecoverableException: setValue() is not supported", sQLRecoverableException0.toString());
      assertEquals("Node must not be null", sQLRecoverableException0.getSQLState());
      assertEquals("setValue() is not supported", sQLRecoverableException0.getMessage());
      assertEquals((-571), sQLRecoverableException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/+v", "Node must not be null", 933, intArray0, sQLRecoverableException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-571), 933, 933, 933, 933}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(933, sQLNonTransientException0.getErrorCode());
      assertEquals("setValue() is not supported", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: setValue() is not supported", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLRecoverableException: setValue() is not supported", sQLRecoverableException0.toString());
      assertEquals("Node must not be null", sQLRecoverableException0.getSQLState());
      assertEquals("setValue() is not supported", sQLRecoverableException0.getMessage());
      assertEquals((-571), sQLRecoverableException0.getErrorCode());
      assertEquals("Node must not be null", batchUpdateException0.getSQLState());
      assertEquals(933, batchUpdateException0.getErrorCode());
      assertEquals("/+v", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: /+v", batchUpdateException0.toString());
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLNonTransientException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotNull(batchUpdateException1);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(933, sQLNonTransientException0.getErrorCode());
      assertEquals("setValue() is not supported", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: setValue() is not supported", sQLNonTransientException0.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: setValue() is not supported", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientException: setValue() is not supported", batchUpdateException1.toString());
      
      Object object0 = hashtable0.put(batchUpdateException0, batchUpdateException1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNull(object0);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertArrayEquals(new int[] {(-571), 933, 933, 933, 933}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(933, sQLNonTransientException0.getErrorCode());
      assertEquals("setValue() is not supported", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: setValue() is not supported", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLRecoverableException: setValue() is not supported", sQLRecoverableException0.toString());
      assertEquals("Node must not be null", sQLRecoverableException0.getSQLState());
      assertEquals("setValue() is not supported", sQLRecoverableException0.getMessage());
      assertEquals((-571), sQLRecoverableException0.getErrorCode());
      assertEquals("Node must not be null", batchUpdateException0.getSQLState());
      assertEquals(933, batchUpdateException0.getErrorCode());
      assertEquals("/+v", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: /+v", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: setValue() is not supported", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientException: setValue() is not supported", batchUpdateException1.toString());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      
      EntrySetMapIterator<BatchUpdateException, Object> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, Object>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      
      iteratorArray0[4] = (Iterator<BatchUpdateException>) entrySetMapIterator0;
      iteratorArray0[5] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<BatchUpdateException>) skippingIterator0;
      iteratorArray0[7] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableIterator0);
      assertEquals(3, iIOMetadataNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("}T9tlAHe>kHKc~z");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("EsDxI5");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode1.getPreviousSibling();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNull(node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      
      Node node1 = iIOMetadataNode1.getPreviousSibling();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNull(node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      
      Node node2 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node2.equals((Object)iIOMetadataNode0));
      assertNotNull(node2);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node2);
      assertSame(iIOMetadataNode1, node2);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotSame(node2, iIOMetadataNode0);
      assertSame(node2, iIOMetadataNode1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeListIterator0);
      assertSame(iIOMetadataNode1, node2);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator(iteratorArray0[0], 3591L);
      assertNotNull(skippingIterator0);
      assertEquals(2, iteratorArray0.length);
      
      iteratorArray0[1] = (Iterator<BatchUpdateException>) skippingIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(2, iteratorArray0.length);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("10}}\"Z,l;PwA", "org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", "org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLTimeoutException0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(identityPredicate0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
      assertFalse(boolean0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException1.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4Hjidimap.AbstractDualBidiMap", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      MapIterator<SQLFeatureNotSupportedException, Stack<TreeSet>> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) mapIterator1, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-3719), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      
      integerArray0[0] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(3, integerArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      assertNotNull(nullIsTruePredicate0);
      
      Predicate<Integer> predicate0 = OrPredicate.orPredicate((Predicate<? super Integer>) uniquePredicate0, (Predicate<? super Integer>) nullIsTruePredicate0);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Array class must not be null", classArray0, integerArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, classArray0.length);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) objectArrayListIterator0, (Transformer<? super Integer, String>) invokerTransformer0, "Array class must not be null", "Array class must not be null", "");
      assertEquals("Array class must not be nullnull", string0);
      assertNotNull(string0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, classArray0.length);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.nextIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = iIOMetadataNode0.isSupported((String) null, "ji");
      assertFalse(boolean0);
      
      boolean boolean1 = linkedList0.add(iIOMetadataNode0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(linkedList0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertNotNull(vector0);
      assertEquals(1, linkedList0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertNotNull(resettableIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      EntrySetMapIterator<SQLFeatureNotSupportedException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Object>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Vector<SQLTransientException> vector1 = new Vector<SQLTransientException>();
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 3);
      vectorArray0[0] = vector1;
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("suffix may not be null");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("suffix may not be null", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: suffix may not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      assertEquals("suffix may not be null", string0);
      assertNotNull(string0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("suffix may not be null", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: suffix may not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("5]]tNg_5G6PJw8<i", "", sQLTimeoutException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 5]]tNg_5G6PJw8<i", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("5]]tNg_5G6PJw8<i", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("suffix may not be null", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: suffix may not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ji");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ji", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("ji", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(vector0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertNotNull(identityPredicate0);
      assertEquals(1, linkedList0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      boolean boolean2 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
      assertFalse(boolean2);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ey){YIJ81c", sQLFeatureNotSupportedException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 5]]tNg_5G6PJw8<i", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("5]]tNg_5G6PJw8<i", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Ey){YIJ81c", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Ey){YIJ81c", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("suffix may not be null", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: suffix may not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(listIterator0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 5]]tNg_5G6PJw8<i", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("5]]tNg_5G6PJw8<i", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Ey){YIJ81c", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Ey){YIJ81c", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("suffix may not be null", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: suffix may not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap1 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Transformer<SQLNonTransientException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLNonTransientException>, ? extends Transformer<? super SQLNonTransientException, ? extends String>>) hashMap1);
      assertNotNull(transformer0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      String string1 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0);
      assertEquals("[null]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 5]]tNg_5G6PJw8<i", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("5]]tNg_5G6PJw8<i", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Ey){YIJ81c", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Ey){YIJ81c", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("suffix may not be null", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: suffix may not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      OrderedMapIterator<SQLTimeoutException, Transformer<SQLTransientConnectionException, SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, (Iterator<? extends BatchUpdateException>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertNull(node0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node1 = iIOMetadataNode1.getLastChild();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNull(node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.replaceChild((Node) null, (Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // newChild == null!
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[{vOi2|");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(" is less than zero");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      Node node0 = iIOMetadataNode2.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode2));
      assertNotNull(node0);
      assertSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode2, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode2, node0);
      assertNotSame(iIOMetadataNode2, iIOMetadataNode1);
      assertSame(node0, iIOMetadataNode1);
      assertNotSame(node0, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode2);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode2));
      assertNotNull(nodeListIterator0);
      assertSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode2);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null, true);
      assertNotNull(singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[{vOi2|");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[{vOi2|");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNull(node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      
      Node node1 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node1);
      assertSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(node1, iIOMetadataNode1);
      assertNotSame(node1, iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeListIterator0);
      assertSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = (-3719);
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" cannot be null", ") greater than the size of the ", (int) integerArray0[0]);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(3, integerArray0.length);
      assertEquals(" cannot be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-3719), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(") greater than the size of the ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException:  cannot be null", sQLIntegrityConstraintViolationException0.toString());
      
      String string0 = "}|(>lzcs96<_b]6o";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}|(>lzcs96<_b]6o", " cannot be null", 0, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(3, integerArray0.length);
      assertEquals(" cannot be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-3719), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(") greater than the size of the ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException:  cannot be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }|(>lzcs96<_b]6o", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(" cannot be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("}|(>lzcs96<_b]6o", sQLInvalidAuthorizationSpecException0.getMessage());
      
      HashMap<Properties, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Properties, SQLInvalidAuthorizationSpecException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = hashMap0.put(properties0, sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException1);
      assertEquals(3, integerArray0.length);
      assertEquals(" cannot be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-3719), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(") greater than the size of the ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException:  cannot be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }|(>lzcs96<_b]6o", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(" cannot be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("}|(>lzcs96<_b]6o", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      EntrySetMapIterator<Properties, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLInvalidAuthorizationSpecException>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) entrySetMapIterator0);
      assertNotNull(enumeration0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Vector<PriorityQueue>>) entrySetMapIterator0, (Predicate<? super Vector<PriorityQueue>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0, 1169);
      assertFalse(list0.contains(1169));
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) iteratorArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-3719), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      
      integerArray0[2] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      assertNotNull(nullIsTruePredicate0);
      
      Predicate<Integer> predicate0 = OrPredicate.orPredicate((Predicate<? super Integer>) uniquePredicate0, (Predicate<? super Integer>) nullIsTruePredicate0);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Hashtable<SQLFeatureNotSupportedException, BatchUpdateException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, BatchUpdateException>(2636);
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      EntrySetMapIterator<SQLFeatureNotSupportedException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, BatchUpdateException>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLTransactionRollbackException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLSyntaxErrorException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, sQLTimeoutExceptionArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ArrayDeque<Integer> arrayDeque1 = arrayDeque0.clone();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      
      Integer integer0 = new Integer((-387));
      assertEquals((-387), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(integer0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.contains(integer0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertNotNull(iterator0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      assertTrue(arrayDeque0.contains(integer0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      Enumeration<SQLTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) resettableListIterator0);
      assertNotNull(enumeration0);
      assertEquals(0, sQLTimeoutExceptionArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NY3eFlG4", hashMap0, (Throwable) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: NY3eFlG4", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("NY3eFlG4", "NY3eFlG4", 33, sQLClientInfoException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("NY3eFlG4", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: NY3eFlG4", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(33, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NY3eFlG4", sQLDataException0.toString());
      assertEquals("NY3eFlG4", sQLDataException0.getSQLState());
      assertEquals("NY3eFlG4", sQLDataException0.getMessage());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[{vOi2|");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[{vOi2|");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNull(node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      
      Node node1 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node1);
      assertSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(node1, iIOMetadataNode1);
      assertNotSame(node1, iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeListIterator0);
      assertSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null, false);
      assertNotNull(singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) singletonIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(1, iteratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[{vOi2|");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[{vOi2|");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNull(node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      
      Node node1 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(node1);
      assertNotSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(node1, iIOMetadataNode1);
      assertNotSame(node1, iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeListIterator0);
      assertSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) null, (-2828L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ArrayList<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Node must not be null");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("Node must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Node must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Node must not be null", "cGJ&C{3'|kq", 0, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("Node must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Node must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("cGJ&C{3'|kq", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: Node must not be null", sQLTransientConnectionException0.toString());
      assertEquals("Node must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException("cGJ&C{3'|kq", "cGJ&C{3'|kq", sQLTransientConnectionException0);
      assertNotNull(sQLDataException0);
      assertEquals("Node must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Node must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("cGJ&C{3'|kq", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: Node must not be null", sQLTransientConnectionException0.toString());
      assertEquals("Node must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("cGJ&C{3'|kq", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: cGJ&C{3'|kq", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("cGJ&C{3'|kq", sQLDataException0.getMessage());
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("w", "", (-1129), sQLIntegrityConstraintViolationException0);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException1);
      assertEquals("Node must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Node must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("w", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: w", sQLDataException1.toString());
      assertEquals((-1129), sQLDataException1.getErrorCode());
      assertEquals("", sQLDataException1.getSQLState());
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator1);
      assertEquals(0, iteratorArray0.length);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLClientInfoException0);
      assertEquals("Node must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Node must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("w", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: w", sQLDataException1.toString());
      assertEquals((-1129), sQLDataException1.getErrorCode());
      assertEquals("", sQLDataException1.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: w", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLDataException: w", sQLClientInfoException0.toString());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ArrayList<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Node must not be null");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Node must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Node must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      OrderedMapIterator<StringTokenizer, Properties> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      
      Stack<SQLTransientException> stack2 = new Stack<SQLTransientException>();
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertNotNull(stack2);
      assertEquals(0, stack2.size());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 5);
      Stack<SQLTransientException> stack3 = new Stack<SQLTransientException>();
      assertTrue(stack3.equals((Object)stack1));
      assertTrue(stack3.equals((Object)stack0));
      assertTrue(stack3.equals((Object)stack2));
      assertNotNull(stack3);
      assertEquals(0, stack3.size());
      assertEquals("[]", stack3.toString());
      assertEquals(10, stack3.capacity());
      assertTrue(stack3.isEmpty());
      assertTrue(stack3.empty());
      
      vectorArray0[0] = (Vector<SQLTransientException>) stack3;
      vectorArray0[1] = (Vector<SQLTransientException>) stack0;
      vectorArray0[2] = (Vector<SQLTransientException>) stack2;
      vectorArray0[3] = (Vector<SQLTransientException>) stack1;
      vectorArray0[4] = (Vector<SQLTransientException>) stack0;
      ObjectArrayListIterator<Vector<SQLTransientException>> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Vector<SQLTransientException>>(vectorArray0, 18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 8L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = "10}}\"Z,l;P\\wA";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("10}}\"Z,l;PwA", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("10}}\"Z,l;PwA", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 10}}\"Z,l;PwA", sQLTimeoutException0.toString());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) null, (-882L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      int int0 = 1724;
      Hashtable<ArrayDeque<SQLTransactionRollbackException>, Properties> hashtable0 = new Hashtable<ArrayDeque<SQLTransactionRollbackException>, Properties>(1724, 3750.4163F);
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Properties properties1 = hashtable0.put(arrayDeque0, properties0);
      assertNull(properties1);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Properties properties2 = new Properties();
      assertTrue(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      
      Properties properties3 = hashtable0.put(arrayDeque0, properties2);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties2));
      assertNotNull(properties3);
      assertNotSame(properties2, properties3);
      assertNotSame(properties2, properties0);
      assertNotSame(properties3, properties2);
      assertSame(properties3, properties0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      assertTrue(properties3.isEmpty());
      assertEquals(0, properties3.size());
      
      OrderedMapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      MapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties>) orderedMapIterator1);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator1);
      assertTrue(boolean0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<LinkedList<Locale.Category>, Iterator<SQLTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
      
      String string0 = IteratorUtils.toString(iterator1);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("an~e{D", "The list must not be null", 1718);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: an~e{D", sQLTransactionRollbackException0.toString());
      assertEquals(1718, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("an~e{D", sQLTransactionRollbackException0.getMessage());
      
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: an~e{D", sQLTransactionRollbackException0.toString());
      assertEquals(1718, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("an~e{D", sQLTransactionRollbackException0.getMessage());
      
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      assertNotNull(singletonIterator0);
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: an~e{D", sQLTransactionRollbackException0.toString());
      assertEquals(1718, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("an~e{D", sQLTransactionRollbackException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      
      Iterator<SQLTransactionRollbackException> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      assertNotNull(iterator2);
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: an~e{D", sQLTransactionRollbackException0.toString());
      assertEquals(1718, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("an~e{D", sQLTransactionRollbackException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 4);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException("w", (String) null);
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: w", sQLTransientException0.toString());
      assertEquals("w", sQLTransientException0.getMessage());
      
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException();
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertNotNull(sQLTransientException1);
      assertNull(sQLTransientException1.getMessage());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      
      sQLTransientExceptionArray0[1] = sQLTransientException1;
      String string0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w", "kGf`x^:tp^&GC", 738, sQLTransientException0);
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: w", sQLTransientException0.toString());
      assertEquals("w", sQLTransientException0.getMessage());
      assertEquals(738, sQLTransientConnectionException0.getErrorCode());
      assertEquals("kGf`x^:tp^&GC", sQLTransientConnectionException0.getSQLState());
      assertEquals("w", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: w", sQLTransientConnectionException0.toString());
      
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, sQLTransientException1);
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLTransactionRollbackException1);
      assertNull(sQLTransientException1.getMessage());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException1;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      assertNotNull(resettableListIterator0);
      assertEquals(5, sQLTransientExceptionArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<SQLTransientException>) resettableListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("");
      assertNotNull(singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        singletonIterator0.remove();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.SingletonIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator((Integer) null, (Transformer<? super Integer, ? extends Integer>) null);
      assertNotNull(iterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) iterator0);
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      assertNotNull(equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertSame(predicate2, predicate1);
      
      predicateArray0[3] = predicate2;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      predicateArray0[4] = (Predicate<Object>) comparatorPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate2);
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(notPredicate0);
      
      predicateArray0[5] = (Predicate<Object>) notPredicate0;
      Class<SQLTransientException> class0 = SQLTransientException.class;
      Predicate<Object> predicate3 = InstanceofPredicate.instanceOfPredicate(class0);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      predicateArray0[6] = predicate3;
      Predicate<Object> predicate4 = FalsePredicate.falsePredicate();
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertNotNull(predicate4);
      
      predicateArray0[7] = predicate4;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate1 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator1, comparatorPredicate_Criterion1);
      assertFalse(comparatorPredicate_Criterion1.equals((Object)comparatorPredicate_Criterion0));
      assertFalse(comparatorPredicate1.equals((Object)comparatorPredicate0));
      assertNotNull(comparatorPredicate1);
      
      predicateArray0[8] = (Predicate<Object>) comparatorPredicate1;
      Predicate<SQLNonTransientException> predicate5 = OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      assertNotNull(predicate5);
      assertEquals(9, predicateArray0.length);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate5);
      assertTrue(boolean0);
      assertEquals(9, predicateArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[{vOi2|");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNull(node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<Boolean, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<Boolean, ClientInfoStatus> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends ClientInfoStatus>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterable<Boolean> iterable1 = IteratorUtils.asIterable((Iterator<? extends Boolean>) orderedMapIterator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(iterable1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Transformer<String, String> transformer0 = NOPTransformer.nopTransformer();
      assertNotNull(transformer0);
      
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("[{vOi2|", (Transformer<? super String, ? extends String>) transformer0);
      assertNotNull(iterator0);
      
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      OrderedMapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties>(abstractOrderedMapIteratorDecorator0);
      assertFalse(abstractOrderedMapIteratorDecorator1.equals((Object)abstractOrderedMapIteratorDecorator0));
      assertNotNull(abstractOrderedMapIteratorDecorator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator1.hasPrevious());
      
      MapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      assertNotNull(nullIsTruePredicate0);
      
      int int0 = 0;
      boolean boolean1 = uniquePredicate0.evaluate(mapIterator0);
      assertTrue(boolean1);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Predicate<Integer> predicate0 = EqualPredicate.equalPredicate(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(predicate0);
      
      Predicate<Integer> predicate1 = OrPredicate.orPredicate((Predicate<? super Integer>) predicate0, (Predicate<? super Integer>) uniquePredicate0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, int0, int0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      boolean boolean2 = IteratorUtils.matchesAll((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(predicate0.equals((Object)predicate1));
      assertEquals(3, integerArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      ListIterator<Stack<BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      assertNotNull(listIterator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) null, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3719));
      assertEquals((-3719), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      assertEquals((-3719), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      int int0 = 1169;
      IteratorUtils.toList((Iterator<?>) resettableIterator0, 1169);
      TreeSet<IIOMetadataNode> treeSet0 = new TreeSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) treeSet0);
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 1169);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      hashMap0.remove((Object) sQLDataException0);
      EntrySetMapIterator<SQLFeatureNotSupportedException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Object>(hashMap0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Iterator contains no elements");
      sQLTimeoutException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Iterator contains no elements", "5]]tNg_5G6PJw8<i", sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("Iterator contains no elements");
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("5]]tNg_5G6PJw8<i", "transformer may not be null", sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1821, 1169);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedList0.add(iIOMetadataNode0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(linkedList0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Object>(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) entrySetMapIterator0, (-2662L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = (-5918);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 1142, (-5918));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Stack<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, 0L);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("The transformer to call must not be null", "The transformer to call must not be null", (-914));
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, (long) (-914), (-1163L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedMapIterator<Properties, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, (-976L), 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ArrayList<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      OrderedMapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransactionRollbackException>, Properties>(orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayDeque<SQLTransactionRollbackException>, Properties>) abstractOrderedMapIteratorDecorator1);
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = null;
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, (Iterator<? extends BatchUpdateException>) orderedIterator0, (Iterator<? extends BatchUpdateException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) zippingIterator0, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("dtxdkeM|pn");
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-2670), 100, sQLInvalidAuthorizationSpecException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      int int0 = 1169;
      IteratorUtils.toList((Iterator<?>) resettableIterator0, 1169);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      OrderedMapIterator<SQLTransactionRollbackException, Transformer<SQLClientInfoException, Hashtable>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) orderedMapIterator0;
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = null;
//      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException>((OrderedMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // OrderedMapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyListIterator();
      int int0 = (-1075);
      boolean boolean0 = true;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "pd.m>|$r+", (-1075));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(".V_5if$&;", "");
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("QcHy&P]O$Va4zA", "QcHy&P]O$Va4zA", true);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer(":!n$]H_QU6?G,-!st}x", ":!n$]H_QU6?G,-!st}x", true);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("QcHy&P]O$Va4zA", "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("IK8N", "QcHy&P]O$Va4zA");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("&J~zI}rr]", "}zN3]=bHXa!go");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("IK8N");
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("delimiter may not be null", "IK8N");
      stringTokenizerArray0[6] = stringTokenizer6;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<HashMap<SQLRecoverableException, SQLTransactionRollbackException>> arrayList0 = new ArrayList<HashMap<SQLRecoverableException, SQLTransactionRollbackException>>();
      arrayList0.ensureCapacity(0);
      IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, SQLTransactionRollbackException>>) arrayList0);
      HashMap<SQLIntegrityConstraintViolationException, LinkedHashSet<IIOMetadataNode>> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, LinkedHashSet<IIOMetadataNode>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<IIOMetadataNode>>(hashMap0);
      // Undeclared exception!
//      try { 
        entrySetMapIterator0.next();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.HashMap$HashIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3719));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      Predicate<Integer> predicate0 = OrPredicate.orPredicate((Predicate<? super Integer>) uniquePredicate0, (Predicate<? super Integer>) nullIsTruePredicate0);
      IteratorUtils.matchesAll((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Array class must not be null", classArray0, integerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) objectArrayListIterator0, (Transformer<? super Integer, String>) invokerTransformer0, "Array class must not be null", "Array class must not be null", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Array class must not be null' on 'class java.lang.Integer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) resettableIterator0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ArrayList<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, ArrayList<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Node must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Node must not be null", "cGJ&C{3'|kq", 0, sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("cGJ&C{3'|kq", "cGJ&C{3'|kq", sQLTransientConnectionException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("w", "", (-1129), sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      sQLDataExceptionArray0[2] = sQLDataException2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-162), (-1129));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3719));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3719));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[0] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      OrPredicate.orPredicate((Predicate<? super Integer>) uniquePredicate0, (Predicate<? super Integer>) nullIsTruePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) objectArrayListIterator0, (-3309));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MapIterator<LinkedList<Locale.Category>, Iterator<SQLTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      MapIterator<SQLNonTransientConnectionException, EnumSet<Locale.Category>> mapIterator1 = IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "org.apache.commons.collections4.functors.ExceptionClosure", sQLFeatureNotSupportedException0);
      sQLTimeoutException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("|w4mF,Z", "J1jQSekfAoU*RQ", sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(mapIterator1);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) mapIterator1, (Predicate<? super SQLNonTransientConnectionException>) identityPredicate0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) orderedIterator0, (-571));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashSet<SQLFeatureNotSupportedException>[] hashSetArray0 = (HashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(HashSet.class, 2);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      hashSetArray0[0] = (HashSet<SQLFeatureNotSupportedException>) linkedHashSet0;
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      hashSetArray0[1] = hashSet0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      hashSet0.add(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, (-1883));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("rK]v-", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("~^q>Kdb!=c8Hj/XAj@", "*CwUX:K5Hhx{3f3_R", 1, hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("Pf3(#U]s", "Pf3(#U]s", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("C~O?HAR%_CN|ai0<e", hashMap0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException6.getFailedProperties();
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("Entry does not exist: ", "", 1, map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("th^B7m%GcihsBVNTB\"", "~^q>Kdb!=c8Hj/XAj@", 32, hashtable0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 997, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NY3eFlG4", hashMap0, (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("NY3eFlG4", "NY3eFlG4", 33, sQLClientInfoException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("NY3eFlG4", "=0L+", (Throwable) null);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("e.yvc2Hz_T/-C", "");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "NY3eFlG4", sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("NY3eFlG4");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "q] |IYqlWj");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException(">7drv", (String) null);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException(">7drv", sQLDataException3);
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("HX&y(]jIv0dGTFW", "tF3MwK@ic");
      sQLDataExceptionArray0[8] = sQLDataException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, (-2389));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IteratorUtils.singletonListIterator((ArrayDeque<SQLNonTransientException>) null);
      Iterator<SQLWarning> iterator0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null");
      IteratorUtils.contains((Iterator<SQLWarning>) null, (Object) sQLTransientConnectionException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      IteratorUtils.singletonIterator(enumSet0);
      String string0 = " 3k\\oG9a/3$\\uIG";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[{vOi2|");
      iIOMetadataNode0.item(0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) singletonIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 4);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      vectorArray0[0] = (Vector<SQLTransientException>) stack0;
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      vectorArray0[1] = (Vector<SQLTransientException>) stack1;
      Stack<SQLTransientException> stack2 = new Stack<SQLTransientException>();
      vectorArray0[2] = (Vector<SQLTransientException>) stack2;
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      vectorArray0[3] = vector0;
      ObjectArrayListIterator<Vector<SQLTransientException>> objectArrayListIterator0 = new ObjectArrayListIterator<Vector<SQLTransientException>>(vectorArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Vector<SQLTransientException>>) objectArrayListIterator0, 2101);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2097
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Closure must not be null");
      iIOMetadataNode0.getAttributeNodeNS("pHUYf@Pcj)", (String) null);
      String string0 = "";
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("PK:z?DKOJPN ].5:Gd", "");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) nodeListIterator0, (-1), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      SQLWarning sQLWarning0 = new SQLWarning();
      dataTruncation0.setNextWarning(sQLWarning0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 0, (-86));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Zll, ,_z", "[", sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 93, 0, sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 93);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("2()z0g]x{TBpiI");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "Array class must not be null");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("2()z0g]x{TBpiI", "2()z0g]x{TBpiI", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("Array class must not be null");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "Array class must not be null");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException(sQLDataException3);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException((String) null, sQLDataException5);
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("@J:% u>S:S]{g", "Array class must not be null", 678);
      sQLDataExceptionArray0[8] = sQLDataException8;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(9, objectArray0.length);
  }
}
