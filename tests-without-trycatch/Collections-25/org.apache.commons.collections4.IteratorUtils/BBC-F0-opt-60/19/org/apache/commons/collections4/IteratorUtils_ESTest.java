/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 08:38:40 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<Vector<SQLNonTransientConnectionException>> linkedList0 = new LinkedList<Vector<SQLNonTransientConnectionException>>();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      linkedList0.offerLast(stack0);
      LoopingListIterator<Vector<SQLNonTransientConnectionException>> loopingListIterator0 = new LoopingListIterator<Vector<SQLNonTransientConnectionException>>(linkedList0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<Vector<SQLNonTransientConnectionException>>) loopingListIterator0, (Object) linkedList0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Class<SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(arrayList0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      loopingListIterator0.add(batchUpdateException0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[", "[");
      arrayList0.add(sQLInvalidAuthorizationSpecException0);
      ListIteratorWrapper<SQLInvalidAuthorizationSpecException> listIteratorWrapper0 = new ListIteratorWrapper<SQLInvalidAuthorizationSpecException>(loopingListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) listIteratorWrapper0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 9);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[0] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[1] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[2] = class3;
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      classArray0[3] = class4;
      Class<SQLNonTransientConnectionException> class5 = SQLNonTransientConnectionException.class;
      classArray0[4] = class5;
      Class<SQLNonTransientConnectionException> class6 = SQLNonTransientConnectionException.class;
      classArray0[5] = class6;
      Class<SQLNonTransientConnectionException> class7 = SQLNonTransientConnectionException.class;
      classArray0[6] = class7;
      Class<SQLNonTransientConnectionException> class8 = SQLNonTransientConnectionException.class;
      classArray0[7] = class8;
      Class<SQLNonTransientConnectionException> class9 = SQLNonTransientConnectionException.class;
      classArray0[8] = class9;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("C:!aS", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<Vector>>) iterator0, (Transformer<? super PriorityQueue<Vector>, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'C:!aS' on 'class java.lang.Class' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "k6@*U+", "W5=~bUUe?USJD4:bq", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      IteratorUtils.toList((Iterator<? extends SQLException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "#G", (-1954));
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLNonTransientException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[7] = class6;
      classArray0[8] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      sQLNonTransientException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "", "", "transformer may not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLNonTransientException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      IteratorUtils.getIterator(stringTokenizer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      NotNullPredicate.notNullPredicate();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      IteratorUtils.get((Iterator<Object>) singletonListIterator0, 0);
      Object object0 = new Object();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) listIterator0, 0);
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 2);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.range(clientInfoStatus0, clientInfoStatus0);
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[0] = enumSet1;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet2 = EnumSet.of(clientInfoStatus0, clientInfoStatus1);
      enumSetArray0[1] = enumSet2;
      IteratorUtils.arrayIterator(enumSetArray0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<PriorityQueue<LinkedList>>) iterator0, 245);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 245
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, class0);
      String string0 = null;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("n", "org.apache.commons.collections4.functors.ConstantFactory", intArray0, (Throwable) null);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(batchUpdateException0, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) singletonIterator0, (Transformer<? super SQLException, String>) constantTransformer0, "RK=x<oM", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      NotNullPredicate.notNullPredicate();
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      arrayList0.add(locale_Category0);
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) arrayList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, class0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("n");
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) zippingIterator0, (Transformer<? super SQLException, String>) constantTransformer0, (String) null, "n", "/L");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      Integer integer0 = new Integer(0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.functors.NOPTransformer", (-1336));
      IdentityPredicate.identityPredicate(sQLSyntaxErrorException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Predicate<IIOMetadataNode> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      MapIterator<Transformer<Object, String>, Hashtable<SQLDataException, Properties>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends Transformer<Object, String>>) mapIterator0, 100);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Throwable throwable0 = null;
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      NotNullPredicate.notNullPredicate();
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) arrayList0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.FORMAT;
      locale_CategoryArray0[8] = locale_Category8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(locale_CategoryArray0, 7, (-1230));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, class0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("n");
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null", "#[&/8LO. wexau~~DF", 2426);
      IdentityPredicate.identityPredicate(sQLSyntaxErrorException0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      MapIterator<Transformer<Object, String>, Hashtable<SQLDataException, Properties>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends Transformer<Object, String>>) mapIterator0, 2426);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      NotNullPredicate.notNullPredicate();
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0, (Transformer<? super SQLException, String>) ifTransformer0, "suffix may not be null", "", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("v?4ct(\"-", "");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      IteratorUtils.singletonListIterator(serviceLoader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Integer integer0 = new Integer(1555);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Array class must not be null", "Array class must not be null", 1555);
      IdentityPredicate.identityPredicate(sQLSyntaxErrorException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) singletonIterator0, (Predicate<? super IIOMetadataNode>) identityPredicate0);
      MapIterator<Transformer<Object, String>, Hashtable<SQLDataException, Properties>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends Transformer<Object, String>>) mapIterator0, 100);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      singletonIterator0.reset();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      EmptyIterator.resettableEmptyIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      int int0 = (-265);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.functors.NullIsFalsePredicate", (-265));
      SingletonIterator<SQLException> singletonIterator1 = new SingletonIterator<SQLException>(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) singletonIterator1, (Transformer<? super SQLException, String>) null, "jxG", "jxG", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLDataException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) orderedMapIterator0);
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(list0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) reverseListIterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      reverseListIterator0.reset();
      String string0 = "o~bA<#M\\v";
      String string1 = "9,";
      String string2 = "";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) zippingIterator0, (Transformer<? super SQLException, String>) null, "o~bA<#Mv", "9,", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "=;fGcgiqK");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLTransactionRollbackException0);
      arrayList0.add(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "=/-zs^|d0dzkV>!{", (-1));
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      // Undeclared exception!
//      try { 
        IteratorUtils.contains((Iterator<SQLTimeoutException>) loopingListIterator0, (Object) stringTokenizer0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) nullIsFalsePredicate0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) nullIsFalsePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "|2&", (Throwable) null);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>((Object) null, true);
      IteratorUtils.get((Iterator<Object>) singletonIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) singletonIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("a4s-0~HT,Q", "^(ETH", (-582));
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLFeatureNotSupportedException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) constantTransformer0, "", "Z=W|C-", "Z=W|C-");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Transformer<Object, SQLRecoverableException> transformer0 = null;
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLTransientException0, (Transformer<? super SQLException, ? extends SQLException>) null);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) constantTransformer0, "", "Transformers must not be null", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) zippingIterator0;
      objectArray0[1] = (Object) zippingIterator0;
      objectArray0[2] = (Object) listIterator0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) zippingIterator0;
      IteratorUtils.arrayListIterator(objectArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "*69";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      String string1 = "H";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("H", "H", (-1));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*69", hashtable0, sQLRecoverableException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "H");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      IteratorUtils.getIterator(nullIsExceptionPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("a4s-0~HT,Q", "a4s-0~HT,Q", (-582));
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLFeatureNotSupportedException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("n");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) constantTransformer0, "n", "a4s-0~HT,Q", "X<q_gxigJXGN`S");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) constantTransformer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      IteratorUtils.getIterator(nullIsExceptionPredicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) orderedIterator0, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "", 3);
      StringWriter stringWriter0 = new StringWriter(3);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      IteratorUtils.toString((Iterator<Locale.Category>) zippingIterator0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashMap<SQLFeatureNotSupportedException, SQLTransientException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLTransientException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLTransientException>(hashMap0);
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0, 1L);
      ZippingIterator<SQLNonTransientException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) boundedIterator0, (Iterator<? extends SQLNonTransientException>) entrySetMapIterator0);
      Class<Locale.Category> class0 = Locale.Category.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate1);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) zippingIterator1, (Predicate<? super SQLNonTransientException>) notPredicate0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 2);
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("\"Vr.\rxu`ZQjO");
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(linkedList0);
      linkedList0.add("Entry does not exist: ");
      reverseListIterator0.previousIndex();
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) reverseListIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Entry does not exist: ");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Entry does not exist: ", "Entry does not exist: ", 1, hashMap0, sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MapIterator<DataTruncation, Hashtable<DataTruncation, Vector>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Integer integer0 = new Integer(1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      String string0 = "org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator";
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(mapIterator0);
      int int0 = 100;
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 100, 1);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) identityPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLWarning> allPredicate0 = new AllPredicate<SQLWarning>(predicateArray0);
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<String, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<String, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, DataTruncation>(orderedMapIterator1);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      Vector<String> vector0 = new Vector<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) null);
      IteratorUtils.size(singletonListIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MapIterator<DataTruncation, Hashtable<DataTruncation, Vector>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Integer integer0 = new Integer(1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerClosure.transformerClosure((Transformer<? super Predicate<Transformer<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>>, ?>) transformer0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", "", 1, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLClientInfoException1, (Transformer<? super Object, ?>) transformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1, (Closure<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super Object>) forClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator' on 'class java.sql.SQLClientInfoException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Transformer<Object, SQLTransientException> transformer0 = ConstantTransformer.constantTransformer((SQLTransientException) sQLTransientConnectionException0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      TransformerClosure.transformerClosure((Transformer<? super Predicate<Transformer<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>>, ?>) transformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("#3e0");
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLTransactionRollbackException0, (Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply(iterator0, (Closure<? super Object>) transformerClosure0);
      NullPredicate.nullPredicate();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) treeSet0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedExceptionArray0[0];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[0] = predicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>(priorityQueue0);
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) onePredicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate2);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Predicate<Object> predicate3 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate3);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.isEmpty(objectArrayListIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException();
      ListIterator<SQLDataException> listIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
      MapIterator<String, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends DataTruncation>) mapIterator0);
      MapIterator<String, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator1, (Iterator<? extends String>) iterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      String string0 = "l$J9FyG,";
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = (-1172);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("l$J9FyG,", intArray0, sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 32);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.cloneNode(true);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      DataTruncation dataTruncation0 = new DataTruncation(2893, true, true, 122, (-1327));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) singletonListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AllPredicate<SQLWarning> allPredicate0 = new AllPredicate<SQLWarning>((Predicate<? super SQLWarning>[]) null);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) null, 1115);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator1;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Integer integer0 = new Integer(630);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      Predicate<String> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) loopingListIterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) listIterator0, (Transformer<? super String, ? extends Iterator<DataTruncation>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<TreeSet<DataTruncation>, ArrayDeque<SQLTransactionRollbackException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<TreeSet<DataTruncation>>) mapIterator0, 2196L);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) treeSet0);
      IteratorUtils.isEmpty(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(true);
      Node node1 = iIOMetadataNode0.appendChild(node0);
      IteratorUtils.nodeListIterator(node1);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      Vector<String> vector0 = new Vector<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) loopingListIterator0, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) mapIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(true);
      Node node1 = iIOMetadataNode0.appendChild(node0);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node1);
      IteratorUtils.size(nodeListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-941);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-941));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.LanguageRange>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AllPredicate<SQLWarning> allPredicate0 = new AllPredicate<SQLWarning>((Predicate<? super SQLWarning>[]) null);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) treeSet0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*;sdV~mFj.7", "4JOgy@?wai7Kb", (-5586));
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("/)", "Node must not be null", (-5586));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[0] = predicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>(priorityQueue0);
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) onePredicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate3);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate2);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      // Undeclared exception!
//      try { 
        IteratorUtils.isEmpty(listIterator0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("CvGyBhT}cy", "CvGyBhT}cy");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      ListIterator<HashSet<SQLDataException>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.contains((Iterator<HashSet<SQLDataException>>) listIterator0, (Object) "CvGyBhT}cy");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<?>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate1);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("{@m");
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<DataTruncation> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super DataTruncation>>) arrayList0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{@m", "{@m");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) treeSet0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedExceptionArray0[0];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[0] = predicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0[1]);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicateArray0[2]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray0[2] = predicate2;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) predicate1, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[3] = predicate3;
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>(arrayDeque0);
      Predicate<Object> predicate4 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[4] = predicate4;
      AllPredicate<SQLWarning> allPredicate0 = new AllPredicate<SQLWarning>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 4);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      InvokerTransformer<SQLDataException, SQLDataException> invokerTransformer0 = new InvokerTransformer<SQLDataException, SQLDataException>("org.apache.commons.collections4.IteratorUtils", classArray0, classArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      EmptyIterator.resettableEmptyIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(zippingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) zippingIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ".+=4(iLvgUI";
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.objectGraphIterator(".+=4(iLvgUI", (Transformer<? super String, ? extends String>) transformer0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) treeSet0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*;sdV~mFj.7", "4JOgy@?wai7Kb", (-5586));
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("/)", "w.po1b", (-5586));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[0] = predicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>(priorityQueue0);
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) onePredicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate3);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate2);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) nullIsExceptionPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      TransformerClosure.transformerClosure((Transformer<? super Predicate<Transformer<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>>, ?>) null);
      IteratorUtils.unmodifiableIterator((Iterator<Object>) singletonListIterator0);
      MapIterator<String, DataTruncation> mapIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<String, DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      IteratorUtils.loopingIterator((Collection<?>) treeSet0);
      Transformer<Object, ClientInfoStatus> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure.transformerClosure((Transformer<? super Predicate<Transformer<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>>, ?>) transformer0);
      HashMap<Object, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Object, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Object, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.unmodifiableIterator((Iterator<Object>) entrySetMapIterator0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) null, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) resettableListIterator0, 2077L);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aM(D_UW");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("{@m");
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) loopingListIterator0);
      stack0.addAll((Collection<? extends SQLDataException>) list0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(sQLDataException0, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MapIterator<DataTruncation, Hashtable<DataTruncation, Vector>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLWarning> allPredicate0 = new AllPredicate<SQLWarning>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) allPredicate0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("cvGyBhT}cy", "cvGyBhT}cy");
      Object object0 = new Object();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) null);
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, false, 0, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 1, 1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) singletonIterator0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      arrayList0.add(iIOMetadataNode0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "org.apache.commons.collections4.map.Flat3Map$Values", 0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("K+(h", "K+(h");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, 3);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      IteratorUtils.getIterator(nullIsExceptionPredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate1);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      IteratorUtils.getIterator((Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<iVSGFV", (Throwable) null);
      sQLTimeoutException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "", 3);
      StringWriter stringWriter0 = new StringWriter(3);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.emptyOrderedIterator();
      EmptyIterator.resettableEmptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("O`nvT");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "Collection must not be null");
      IteratorUtils.nodeListIterator(nodeList0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) resettableListIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
      MapIterator<String, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, DataTruncation> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends DataTruncation>) mapIterator0);
      MapIterator<String, DataTruncation> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator2, (Iterator<? extends String>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      SQLDataException sQLDataException0 = new SQLDataException("D2");
      SingletonListIterator<SQLDataException> singletonListIterator1 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("{@m");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("9pMJ17_PX%", "{@m");
      IteratorUtils.nodeListIterator(nodeList0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) resettableListIterator0, 2077L);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) singletonIterator0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, false, 0, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 1, 1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends BatchUpdateException>) transformer0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Throwable throwable0 = null;
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      String string0 = "Db<|akzJVBnUCj{";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Db<|akzJVBnUCj{", "Db<|akzJVBnUCj{");
      sQLTimeoutException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Db<|akzJVBnUCj{", "Db<|akzJVBnUCj{", 3);
      int int0 = 32;
      StringWriter stringWriter0 = new StringWriter(32);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      Hashtable<Locale.Category, SQLWarning> hashtable0 = new Hashtable<Locale.Category, SQLWarning>();
      EntrySetMapIterator<Locale.Category, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, SQLWarning>(hashtable0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      String string0 = "K<iVSGFV";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K<iVSGFV", (Throwable) null);
      int int0 = (-58);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "cvGyBhT}cy", (-58));
      sQLTimeoutException0.setNextException(sQLSyntaxErrorException0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) treeSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      String string0 = "K<iVSGFV";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K<iVSGFV", (Throwable) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 276);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, false, 0, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 1, 1);
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "cvGyBhT}cy", (-58));
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLSyntaxErrorException0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLSyntaxErrorException1, (Transformer<? super SQLException, ? extends SQLException>) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<IIOMetadataNode, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLNonTransientException>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) mapIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) zippingIterator0;
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) iteratorArray0[1]);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) listIterator0;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) resettableIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Integer integer0 = new Integer((-1560));
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iterator0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) zippingIterator1, (Predicate<? super IIOMetadataNode>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(locale_Category0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      Object object0 = new Object();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) uniquePredicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) zippingIterator0, (Iterator<? extends SQLException>) zippingIterator0, (Iterator<? extends SQLException>) orderedIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Predicate<Object> predicate0 = null;
      ListIterator<SQLClientInfoException> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(locale_Category0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) uniquePredicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) zippingIterator0, (Iterator<? extends SQLException>) orderedIterator1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) transformerClosure0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      IteratorUtils.getIterator(nullIsExceptionPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      List<String> list0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashMap0);
      IteratorUtils.emptyListIterator();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Aff b^=0Jz[-p";
      stringArray0[1] = "Aff b^=0Jz[-p";
      stringArray0[2] = "Aff b^=0Jz[-p";
      stringArray0[3] = "Aff b^=0Jz[-p";
      stringArray0[4] = "Aff b^=0Jz[-p";
      stringArray0[5] = "Aff b^=0Jz[-p";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringArray0, 1009);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashMap0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) treeSet0);
      iteratorArray0[0] = iterator0;
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator0, 0L, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) boundedIterator0, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 10
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K<iVSGFV", (Throwable) null);
      String string0 = "cvGyBhT}cy";
      sQLTimeoutException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "", 3);
      StringWriter stringWriter0 = new StringWriter(3);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      IteratorUtils.toString((Iterator<Locale.Category>) zippingIterator0);
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "[]", 93, 93);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, false, 0, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 1, 1);
      dataTruncationArray0[3] = dataTruncation3;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1992, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`v>K&>XP?");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 337, sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "", 0);
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`v>K&>XP?", "", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$)VUCQP");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("(,z?Kyg ", sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      SQLWarning sQLWarning0 = new SQLWarning();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, (-2228), (Throwable) null);
      DataTruncation dataTruncation1 = new DataTruncation((-1404), false, true, 10, (-1), (Throwable) null);
      int int0 = 0;
      dataTruncation1.getIndex();
      DataTruncation dataTruncation2 = new DataTruncation((-1), false, true, 44, (-2228), (Throwable) null);
      DataTruncation dataTruncation3 = new DataTruncation((-1404), true, true, 10, (-1));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      dataTruncationArray0[0] = dataTruncation1;
      dataTruncationArray0[1] = dataTruncation3;
      dataTruncationArray0[2] = dataTruncation2;
      dataTruncationArray0[3] = dataTruncation1;
      dataTruncationArray0[4] = dataTruncation2;
      dataTruncation2.getStackTrace();
      dataTruncationArray0[5] = dataTruncation0;
      dataTruncationArray0[6] = dataTruncation3;
      int int1 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, (-44));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer1);
      singletonIterator0.remove();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("R.Uhj1?kACc");
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends String>) orderedIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(locale_Category0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("b,iHu<c7Bt#>(Pok", (String) null, 0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) singletonIterator0, (-265));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K<iVSGFV", (Throwable) null);
      int int0 = 3;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "", 3);
      sQLTimeoutException0.setNextException(sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator((SQLException) sQLSyntaxErrorException1, (Transformer<? super SQLException, ? extends SQLException>) null);
      ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      IteratorUtils.unmodifiableIterator((Iterator<Object>) singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Object>) singletonListIterator0, (Closure<? super Object>) transformerClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K<iVSGFV", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "", 3);
      sQLTimeoutException0.setNextException(sQLSyntaxErrorException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("cvGyBhT}cy", "K<iVSGFV", true);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 91);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashMap0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) treeSet0);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<Integer>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<Integer>) resettableListIterator0;
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) iterator1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode0);
      IteratorUtils.singletonListIterator((HashSet<Vector>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 1, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, 1, 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 853, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "Array class must not be null";
      int int0 = 1058;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "Array class must not be null", (-2306), 1058);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1572), (-1572));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)5;
      byte byte0 = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.emptyMapIterator();
      MapIterator<SQLWarning, Vector<SQLTransactionRollbackException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) mapIterator0, (-1004L), (long) 122);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      Hashtable<DataTruncation, SQLTransactionRollbackException> hashtable0 = new Hashtable<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashtable0);
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator1 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashtable0);
      entrySetMapIterator1.reset();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) entrySetMapIterator1, (Iterator<? extends DataTruncation>) entrySetMapIterator0);
      entrySetMapIterator1.reset();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1465);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "rdSq9feP1-[Aa*E", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(singletonIterator0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) listIteratorWrapper0;
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashMap0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) treeSet0);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<Integer>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<Integer>) resettableListIterator0;
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) iterator1);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode0);
      IteratorUtils.singletonListIterator((HashSet<Vector>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K<iVSGFV", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "", 3);
      sQLTimeoutException0.setNextException(sQLSyntaxErrorException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      IteratorUtils.getIterator(nullIsExceptionPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.iterator();
      linkedList0.add("Aff b^=0Jz[-p");
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLClientInfoException>(orderedMapIterator0);
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator1, (Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      Hashtable<DataTruncation, SQLTransactionRollbackException> hashtable0 = new Hashtable<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashtable0);
      entrySetMapIterator0.reset();
      DataTruncation dataTruncation0 = new DataTruncation(305, false, true, 305, 100);
      IteratorUtils.singletonIterator(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashMap0);
      entrySetMapIterator0.reset();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = ";Wh@n%:o1J\\t^'9,y^";
      stringArray0[1] = ";Wh@n%:o1J\t^'9,y^";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) objectArrayListIterator0);
      IteratorUtils.toList((Iterator<? extends String>) listIterator0, 100);
      StringTokenizer stringTokenizer0 = new StringTokenizer(";Wh@n%:o1J\t^'9,y^", "", true);
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      intArray0[1] = 636;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      DataTruncation dataTruncation0 = new DataTruncation(819, true, false, 819, 1);
      IteratorUtils.getIterator(dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", dataTruncation0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator1 = new SingletonIterator<Locale.Category>(locale_Category1);
      singletonIterator1.forEachRemaining(consumer1);
      singletonIterator1.reset();
      singletonIterator0.remove();
      IteratorUtils.toArray((Iterator<?>) singletonIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("RkvMbu%Izl", "Wp';%I62O>{:f_;");
      IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate1);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.fillInStackTrace();
      sQLTimeoutException0.printStackTrace();
      sQLTimeoutException0.setNextException(sQLTimeoutException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLTimeoutException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      singletonIterator0.remove();
      // Undeclared exception!
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedMapIterator<Object, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, SQLException>(orderedMapIterator0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3164;
      intArray0[1] = 3164;
      intArray0[2] = 3164;
      intArray0[3] = 3164;
      intArray0[4] = 3164;
      intArray0[5] = 3164;
      intArray0[6] = 3164;
      intArray0[7] = 3164;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "O@|1D", 3164, intArray0, sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("24G", "O@|1D", batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Node must not be null", "Node must not be null", 3164, sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("24G", "24G", (int[]) null, sQLFeatureNotSupportedException0);
      SQLException sQLException0 = new SQLException(batchUpdateException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLTimeoutException0.setNextException(sQLTransactionRollbackException0);
      IteratorUtils.getIterator(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) null, (-20L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) transformedPredicate0);
      Iterator<Object> iterator0 = null;
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate1);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) orderedMapIterator0, 0L);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "T8V48KrmI#3_", 4929, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("S+Gq`Cu^!q{asVeMa", "org.apache.commons.collections4.IteratorUtils", 4929, sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException((String) null, (String) null, 68);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException((String) null);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("S+Gq`Cu^!q{asVeMa", "org.apache.commons.collections4.IteratorUtils", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableListIterator0, (Equator<Object>) defaultEquator0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[0] = (-1188);
      intArray0[1] = 1549;
      intArray0[2] = 10;
      intArray0[3] = (-2142);
      intArray0[4] = (-2722);
      intArray0[5] = 0;
      intArray0[6] = 10;
      intArray0[7] = (-1884);
      intArray0[8] = (-1901);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4.Y/@*|y`kGcTMG3[v\"", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException(batchUpdateException0);
      sQLDataException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 10, (-2142));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(13, false, true, 14, 1, (Throwable) null);
      DataTruncation dataTruncation1 = new DataTruncation(14, false, true, (-1757), 0, dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer1);
      singletonIterator0.remove();
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS((String) null, "bgaE?1Pk");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) zippingIterator0;
      objectArray0[1] = (Object) zippingIterator0;
      objectArray0[2] = (Object) listIterator0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) zippingIterator0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"}~w`q h{!m;dU=!", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "", sQLIntegrityConstraintViolationException0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLSyntaxErrorException1, false);
      Object object0 = IteratorUtils.get((Iterator<Object>) singletonIterator0, 0);
      objectArray0[5] = object0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) singletonIterator0, 1769);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1769
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(locale_Category0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) singletonListIterator0, 123);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 122
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) singletonListIterator0, 1894);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1893
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      ArrayIterator<SQLTransactionRollbackException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTransactionRollbackException>(resettableIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I#qO&LN;~Q\f", "I#qO&LN;~Q\f");
      Throwable throwable0 = sQLTimeoutException0.fillInStackTrace();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      Iterator<Integer> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) iterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) iterator1);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode0);
      IteratorUtils.singletonListIterator((HashSet<Vector>) linkedHashSet0);
      IteratorUtils.objectGraphIterator((SQLException) throwable0, (Transformer<? super SQLException, ? extends SQLException>) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "p7";
      stringArray0[1] = "The map size must be 0 or 1";
      stringArray0[2] = "";
      stringArray0[4] = "gR~wf'U@S6";
      stringArray0[5] = "org.apache.commons.collections4.IteratorUtils";
      stringArray0[6] = "InstantiateFactory: Constructor must be public";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringArray0, 115, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedMapIterator<Object, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, SQLException>(orderedMapIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 44;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 44;
      intArray0[5] = 0;
      intArray0[7] = 0;
      intArray0[7] = 0;
      intArray0[8] = 44;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "", 0, intArray0, sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("!;||`,uUx$jNC*9?P", ";XT]-/oJAN`.y2\"wgof", 0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!;||`,uUx$jNC*9?P", sQLWarning0);
      IteratorUtils.objectGraphIterator((SQLException) sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLException, ? extends SQLException>) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) orderedMapIterator0);
      IteratorUtils.apply(iterator0, (Closure<? super Object>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashMap0);
      entrySetMapIterator0.reset();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) entrySetMapIterator0, (Iterator<? extends DataTruncation>) entrySetMapIterator0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      entrySetMapIterator0.reset();
      // Undeclared exception!
//      try { 
        entrySetMapIterator0.next();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.HashMap$HashIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, false, true, 1, 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, false, 0, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, (-360), 1);
      dataTruncationArray0[3] = dataTruncation3;
      IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 0);
      ConstantTransformer.nullTransformer();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends BatchUpdateException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      OrderedMapIterator<ArrayList<SQLClientInfoException>, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayList<SQLClientInfoException>, SQLException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(singletonIterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate1);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      SingletonIterator<Properties> singletonIterator1 = new SingletonIterator<Properties>((Properties) null, true);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) singletonIterator1);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, mockThrowable0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("mW6%@NHF", "$%Ic(TVj~o;^SWXJ4/", 1727, mockThrowable0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("$%Ic(TVj~o;^SWXJ4/", (String) null, (-4173), sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("The predicate to call must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("WT-4wxMLDuT00", "D<@|");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException8 = new SQLInvalidAuthorizationSpecException("0.Ed%%`CFsi@wx", "");
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1727);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(locale_Category0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) singletonListIterator0, (-561));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -561
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate1);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) singletonListIterator0, 1524);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1524
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 53;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.PredicateTransformer", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "Transformers must not be null", 0, intArray0, sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning("Transformers must not be null", (String) null, 53, batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformers must not be null", sQLWarning0);
      int int1 = 3423;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "Transformers must not be null", 3423);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(stack0);
      reverseListIterator0.reset();
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) reverseListIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 7);
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      OrderedMapIterator<Object, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, SQLException>(orderedMapIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IteratorUtils.find((Iterator<Object>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Object>) predicate0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      int int0 = 123;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) abstractOrderedMapIteratorDecorator0, 123);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 123
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("<&;", "<&;");
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 93;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((PriorityQueue<SQLWarning>[]) null, 93, 93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[", "[", (Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[", sQLTimeoutException0.getMessage());
      assertEquals("[", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: [", sQLTimeoutException0.toString());
      
      sQLExceptionArray0[0] = (SQLException) sQLTimeoutException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZnfUv$^xk}4", "ZnfUv$^xk}4", sQLTimeoutException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[", sQLTimeoutException0.getMessage());
      assertEquals("[", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: [", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ZnfUv$^xk}4", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("ZnfUv$^xk}4", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("ZnfUv$^xk}4", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLDataException sQLDataException0 = new SQLDataException("ZnfUv$^xk}4", "ZnfUv$^xk}4", 1834);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ZnfUv$^xk}4", sQLDataException0.toString());
      assertEquals(1834, sQLDataException0.getErrorCode());
      assertEquals("ZnfUv$^xk}4", sQLDataException0.getSQLState());
      assertEquals("ZnfUv$^xk}4", sQLDataException0.getMessage());
      
      sQLExceptionArray0[2] = (SQLException) sQLDataException0;
      int[] intArray0 = new int[8];
      intArray0[0] = 1834;
      intArray0[1] = 1834;
      intArray0[2] = 1834;
      intArray0[3] = 1834;
      intArray0[4] = 31;
      intArray0[5] = 0;
      intArray0[6] = 1834;
      intArray0[7] = 2934;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[", "", 1834, intArray0, sQLExceptionArray0[2]);
      assertArrayEquals(new int[] {1834, 1834, 1834, 1834, 31, 0, 1834, 2934}, intArray0);
      assertEquals(9, sQLExceptionArray0.length);
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertEquals("[", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: [", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(1834, batchUpdateException0.getErrorCode());
      
      SQLException sQLException0 = new SQLException("ZC", "1_9@1", batchUpdateException0);
      assertArrayEquals(new int[] {1834, 1834, 1834, 1834, 31, 0, 1834, 2934}, intArray0);
      assertEquals(9, sQLExceptionArray0.length);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLException0);
      assertEquals("[", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: [", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(1834, batchUpdateException0.getErrorCode());
      assertEquals("ZC", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ZC", sQLException0.toString());
      
      sQLExceptionArray0[3] = sQLException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "_", (-192));
      assertNotNull(sQLTimeoutException1);
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException1.toString());
      assertEquals((-192), sQLTimeoutException1.getErrorCode());
      assertEquals("_", sQLTimeoutException1.getSQLState());
      assertEquals("", sQLTimeoutException1.getMessage());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      sQLExceptionArray0[4] = (SQLException) sQLTimeoutException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLExceptionArray0[4]);
      assertEquals(9, sQLExceptionArray0.length);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLTimeoutException: ", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTimeoutException: ", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZnfUv$^xk}4", "");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: ZnfUv$^xk}4", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("ZnfUv$^xk}4", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      sQLExceptionArray0[6] = (SQLException) sQLTransactionRollbackException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException(sQLExceptionArray0[5]);
      assertEquals(9, sQLExceptionArray0.length);
      assertNotNull(sQLNonTransientException1);
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTimeoutException: ", sQLNonTransientException1.getMessage());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLNonTransientException: java.sql.SQLTimeoutException: ", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      
      sQLExceptionArray0[7] = (SQLException) sQLNonTransientException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLIntegrityConstraintViolationException0);
      sQLExceptionArray0[8] = (SQLException) sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableListIterator<Iterator<DataTruncation>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 44;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.PredicateTransformer", (Throwable) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "Transformers must not be null", 0, intArray0, sQLIntegrityConstraintViolationException0);
      assertArrayEquals(new int[] {44}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Transformers must not be null", batchUpdateException0.getSQLState());
      assertEquals("List must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: List must not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning("Transformers must not be null", (String) null, 44, batchUpdateException0);
      assertArrayEquals(new int[] {44}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(sQLWarning0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Transformers must not be null", batchUpdateException0.getSQLState());
      assertEquals("List must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: List must not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Transformers must not be null", sQLWarning0.toString());
      assertEquals(44, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("Transformers must not be null", sQLWarning0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformers must not be null", sQLWarning0);
      assertArrayEquals(new int[] {44}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Transformers must not be null", batchUpdateException0.getSQLState());
      assertEquals("List must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: List must not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Transformers must not be null", sQLWarning0.toString());
      assertEquals(44, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("Transformers must not be null", sQLWarning0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Transformers must not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Transformers must not be null", sQLSyntaxErrorException0.toString());
      
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLSyntaxErrorException0, (Transformer<? super SQLException, ? extends SQLException>) null);
      assertArrayEquals(new int[] {44}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(iterator0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.PredicateTransformer", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Transformers must not be null", batchUpdateException0.getSQLState());
      assertEquals("List must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: List must not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Transformers must not be null", sQLWarning0.toString());
      assertEquals(44, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("Transformers must not be null", sQLWarning0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Transformers must not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Transformers must not be null", sQLSyntaxErrorException0.toString());
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      assertNotNull(transformerClosure0);
      
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ResettableIterator<Class<SQLTransactionRollbackException>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      assertNotNull(resettableIterator0);
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Boolean>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLException sQLException0 = new SQLException(sQLTimeoutException0);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLException: java.sql.SQLTimeoutException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      sQLTimeoutException0.printStackTrace();
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      String string0 = sQLException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLException: java.sql.SQLTimeoutException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", string0);
      
      sQLTimeoutException0.setNextException(sQLException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLException: java.sql.SQLTimeoutException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertNotNull(iterator0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MapIterator<ArrayList<SQLClientInfoException>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<ArrayList<SQLClientInfoException>, SQLException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<Integer> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) iterator0);
      assertNotNull(iterable0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ListIterator<HashSet<Vector>> listIterator0 = IteratorUtils.singletonListIterator((HashSet<Vector>) linkedHashSet0);
      assertNotNull(listIterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>((Properties) null);
      assertNotNull(singletonListIterator0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      Properties properties0 = singletonListIterator0.next();
      assertNull(properties0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      
      Iterable<Properties> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) singletonListIterator0);
      assertNotNull(iterable0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      
      ResettableListIterator<Iterator<LinkedHashSet>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
//      try {
        locale_LanguageRange0 = new Locale.LanguageRange("L2AVrm|eh.B'B1#}t", 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // range=l2avrm|eh.b'b1#}t
//         //
//         verifyException("java.util.Locale$LanguageRange", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "p7";
      stringArray0[1] = "The map size must be 0 or 1";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.functors.ConstantFactory";
      stringArray0[4] = "gR~wf'U@S6";
      stringArray0[5] = "org.apache.commons.collections4.IteratorUtils";
      stringArray0[6] = "InstantiateFactory: Constructor must be public";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringArray0, 100, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "add() not supported for empty Iterator";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("H62}i7A]y/*M", "add() not supported for empty Iterator");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("H62}i7A]y/*M", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: H62}i7A]y/*M", sQLFeatureNotSupportedException0.toString());
      assertEquals("add() not supported for empty Iterator", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "m-\"ibv)J", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("H62}i7A]y/*M", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: H62}i7A]y/*M", sQLFeatureNotSupportedException0.toString());
      assertEquals("add() not supported for empty Iterator", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("m-\"ibv)J", sQLTransientConnectionException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("H62}i7A]y/*M", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: H62}i7A]y/*M", sQLFeatureNotSupportedException0.toString());
      assertEquals("add() not supported for empty Iterator", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("m-\"ibv)J", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("H62}i7A]y/*M", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: H62}i7A]y/*M", sQLFeatureNotSupportedException0.toString());
      assertEquals("add() not supported for empty Iterator", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("m-\"ibv)J", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException: ", sQLIntegrityConstraintViolationException0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m-\"ibv)J");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      String string1 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertNotNull(string1);
      assertEquals("H62}i7A]y/*M", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: H62}i7A]y/*M", sQLFeatureNotSupportedException0.toString());
      assertEquals("add() not supported for empty Iterator", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertFalse(string1.equals((Object)string0));
      assertEquals("H62}i7A]y/*M", string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) sQLTransientConnectionException0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.println("' cannot be accessed");
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      objectArray0[2] = (Object) sQLSyntaxErrorException0;
      objectArray0[3] = (Object) "add() not supported for empty Iterator";
      objectArray0[4] = (Object) sQLSyntaxErrorException0;
      objectArray0[5] = (Object) "m-\"ibv)J";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) sQLIntegrityConstraintViolationException0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "H62}i7A]y/*M", objectArray0);
      assertEquals(8, objectArray0.length);
      assertNotNull(printWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      sQLIntegrityConstraintViolationException0.printStackTrace(printWriter0);
      assertEquals(8, objectArray0.length);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertEquals("H62}i7A]y/*M", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: H62}i7A]y/*M", sQLFeatureNotSupportedException0.toString());
      assertEquals("add() not supported for empty Iterator", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("m-\"ibv)J", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cvGyBhT}cy", "cvGyBhT}cy", (-58));
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: cvGyBhT}cy", sQLSyntaxErrorException0.toString());
      assertEquals((-58), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("cvGyBhT}cy", sQLSyntaxErrorException0.getSQLState());
      assertEquals("cvGyBhT}cy", sQLSyntaxErrorException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("java.sql.SQLSyntaxErrorException: cvGyBhT}cy", sQLSyntaxErrorException0.toString());
      assertEquals((-58), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("cvGyBhT}cy", sQLSyntaxErrorException0.getSQLState());
      assertEquals("cvGyBhT}cy", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLSyntaxErrorException1, (Transformer<? super SQLException, ? extends SQLException>) null);
      assertNotNull(iterator0);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: cvGyBhT}cy", sQLSyntaxErrorException0.toString());
      assertEquals((-58), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("cvGyBhT}cy", sQLSyntaxErrorException0.getSQLState());
      assertEquals("cvGyBhT}cy", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      assertNotNull(transformerClosure0);
      
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<IIOMetadataNode, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<IIOMetadataNode, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLNonTransientException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) mapIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) iteratorArray0[1]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResettableListIterator<Iterator<DataTruncation>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      String string0 = "Transformers must not be null";
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      int int0 = 1;
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>(10, 1);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      assertNotNull(predicate0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(predicate0));
      
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(predicate1);
      assertSame(predicate1, predicate0);
      
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      assertEquals(1, predicateArray0.length);
      assertNotNull(predicate2);
      assertSame(predicate1, predicate0);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.singletonListIterator(predicate2);
      assertEquals(1, predicateArray0.length);
      assertNotNull(listIterator0);
      assertSame(predicate1, predicate0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      ListIteratorWrapper<Predicate<Object>> listIteratorWrapper0 = new ListIteratorWrapper<Predicate<Object>>(listIterator0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(listIteratorWrapper0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) listIteratorWrapper0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(list0);
      assertSame(predicate1, predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(predicate0));
      assertTrue(list0.contains(predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(predicate3);
      assertSame(predicate1, predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(predicate3));
      assertTrue(list0.contains(predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(1));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(1));
      
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) list0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(predicate4);
      assertSame(predicate1, predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(predicate3));
      assertTrue(list0.contains(predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      
      Object object0 = IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate4);
      assertEquals(1, predicateArray0.length);
      assertNull(object0);
      assertSame(predicate1, predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertFalse(list0.contains(predicate3));
      assertTrue(list0.contains(predicate2));
      assertFalse(priorityQueue0.contains(1));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Set<Map.Entry<String, ClientInfoStatus>> set0 = (Set<Map.Entry<String, ClientInfoStatus>>)hashtable0.entrySet();
      assertNotNull(set0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("z=teZS?]U >ZL;", "]", 0);
      assertNotNull(sQLTransientException0);
      assertEquals("]", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTransientException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("]", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Enumeration<ClientInfoStatus> enumeration0 = hashtable0.elements();
      assertNotNull(enumeration0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      String string0 = sQLTransientException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals("]", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException0.getMessage());
      assertEquals("z=teZS?]U >ZL;", string0);
      
      SQLTransientException sQLTransientException1 = new SQLTransientException("z=teZS?]U >ZL;", sQLClientInfoException0);
      assertNotNull(sQLTransientException1);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("]", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException1.getMessage());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      
      String string1 = sQLClientInfoException0.getLocalizedMessage();
      assertNotNull(string1);
      assertNotSame(sQLTransientException0, sQLTransientException1);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("]", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", string1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("z=teZS?]U >ZL;", "z=teZS?]U >ZL;", sQLTransientException1);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("]", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException1.getMessage());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("z=teZS?]U >ZL;", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: z=teZS?]U >ZL;", sQLRecoverableException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLRecoverableException0.getSQLState());
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      assertNotNull(resettableIterator0);
      assertNotSame(sQLTransientException0, sQLTransientException1);
      assertNotSame(sQLTransientException1, sQLTransientException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("]", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("z=teZS?]U >ZL;", sQLTransientException1.getMessage());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("z=teZS?]U >ZL;", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: z=teZS?]U >ZL;", sQLRecoverableException0.toString());
      assertEquals("z=teZS?]U >ZL;", sQLRecoverableException0.getSQLState());
      assertFalse(sQLTransientException0.equals((Object)sQLTransientException1));
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLException sQLException0 = new SQLException("", "java.sql.SQLTransientException: z=teZS?]U >ZL;", 0);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLException: ", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      assertNotNull(singletonListIterator0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLException: ", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0);
      assertNotNull(iterator0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLException: ", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(list0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("java.sql.SQLTransientException: z=teZS?]U >ZL;", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLException: ", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(sQLNonTransientConnectionException0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Iterator<DataTruncation>>) null, (Iterator<? extends Iterator<DataTruncation>>) null, (Iterator<? extends Iterator<DataTruncation>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) listIterator0, (Predicate<? super Boolean>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("u'p(", "", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("u'p(", "|_]07H.3HT4a", 93);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("u'p(", sQLRecoverableException4);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("u'p(", "aR>/~K;)oM!cv]_#Ko", 93);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 93, (-1840));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) loopingListIterator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        notPredicate0.evaluate((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, false, true, 1, 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, false, 0, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, (-360), 1);
      dataTruncationArray0[3] = dataTruncation3;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends BatchUpdateException>) transformer0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Start index must not be less than zero", "nA|Ur<O}n06vtE", 1685);
      SQLTransientException sQLTransientException0 = new SQLTransientException("The predicate and closure arrays must be the same size", "8B/JSazqv", sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Start index must not be less than zero", sQLTransientException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<SQLTransactionRollbackException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, ServiceLoader<SQLTransactionRollbackException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, ServiceLoader<SQLTransactionRollbackException>>(orderedMapIterator0);
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      // Undeclared exception!
//      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 0 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.Category>, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, SQLTransientConnectionException>(orderedMapIterator0);
      OrderedMapIterator<EnumSet<Locale.Category>, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<EnumSet<Locale.Category>, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<EnumSet<Locale.Category>, SQLTransientConnectionException>) orderedMapIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) mapIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, StringTokenizer> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator2);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      OrderedMapIterator<Object, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, SQLException>(orderedMapIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 44;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 44;
      intArray0[5] = 0;
      intArray0[7] = 0;
      intArray0[7] = 0;
      intArray0[8] = 44;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "", 0, intArray0, sQLInvalidAuthorizationSpecException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I#qO&LN;~Q\f", "I#qO&LN;~Q\f");
      sQLTimeoutException0.fillInStackTrace();
      vector0.add(sQLTimeoutException0);
      vector0.spliterator();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) vector0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "InstantiateFactory: Constructor must be public";
      stringArray0[1] = "gR~wf'U@S6";
      stringArray0[2] = "Iterator must not be null";
      stringArray0[3] = "gR~wf'U@S6";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.collections4.functors.ConstantFactory";
      stringArray0[6] = "I#qO&LN;~Q\f";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringArray0, 1, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      String string0 = "I#qO&LN;~Q\\f";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I#qO&LN;~Q\f", "I#qO&LN;~Q\f");
      Throwable throwable0 = sQLTimeoutException0.fillInStackTrace();
      vector0.add(sQLTimeoutException0);
      vector0.spliterator();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) vector0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("wuB:3Eroc8U=li2", throwable0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTimeoutException0);
      ArrayListIterator<Properties> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The method to invoke must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("}%&!onL%<z_h/C!R", "k]*-l^_D)8 crO9~IC", sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation((-245), false, false, (-245), (-245), sQLNonTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-245), false, true, (-3666), (-245));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, false, true, 61, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(97, true, false, 1921, 0, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(1, false, true, 97, 1921, dataTruncation1);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, true, false, (-245), 5);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-245), false, true, 61, (-2893));
      dataTruncationArray0[6] = dataTruncation6;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.iterator();
      MapIterator<Integer, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) mapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) treeSet0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator1, (-742));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "Y$VL";
      MockThrowable mockThrowable0 = new MockThrowable("Y$VL");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y$VL", "Y$VL", mockThrowable0);
      int int0 = (-3977);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-3977));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Iterator<String> iterator0 = linkedList0.iterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Aff b^=0Jz[-p");
      IteratorUtils.toList((Iterator<? extends String>) iterator0, 1992);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Aff b^=0Jz[-p", "", true);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      IteratorUtils.getIterator(nullIsExceptionPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Iterator<String> iterator0 = linkedList0.iterator();
      String string0 = "Aff b^=0Jz[-p";
      linkedList0.add("Aff b^=0Jz[-p");
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends String>) iterator0, 1);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I#qO&LN;~Q\f", "I#qO&LN;~Q\f");
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      EntrySetMapIterator<SQLTransactionRollbackException, Class<BatchUpdateException>> entrySetMapIterator0 = null;
//      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Class<BatchUpdateException>>((Map<SQLTransactionRollbackException, Class<BatchUpdateException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer1);
      singletonIterator0.remove();
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = null;
      String string1 = "";
      iIOMetadataNode0.getAttributeNodeNS((String) null, "");
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.setAttributeNode((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "Entry does not exist: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashMap0);
      entrySetMapIterator0.reset();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) entrySetMapIterator0, (Iterator<? extends DataTruncation>) entrySetMapIterator0);
      entrySetMapIterator0.reset();
      // Undeclared exception!
//      try { 
        entrySetMapIterator0.next();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.HashMap$HashIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 10, 1);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("RwaFn+e>3\u0002K");
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      assertNotNull(iterator0);
  }
}
