/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 12:44:56 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gf\"j7R]&", "bRk\"V}p|");
      IdentityPredicate<SQLTransientConnectionException> identityPredicate0 = new IdentityPredicate<SQLTransientConnectionException>(sQLTransientConnectionException1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      Iterator<Closure<Object>>[] iteratorArray0 = (Iterator<Closure<Object>>[]) Array.newInstance(Iterator.class, 6);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      InvokerTransformer<Object, Closure<Object>> invokerTransformer0 = new InvokerTransformer<Object, Closure<Object>>("GREATER", (Class<?>[]) null, (Object[]) null);
      Iterator<Closure<Object>> iterator0 = IteratorUtils.objectGraphIterator(closure0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) invokerTransformer0);
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 2980L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'GREATER' on 'class org.apache.commons.collections4.functors.TransformerClosure' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      linkedList0.addLast(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, 10);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, (Map<String, ClientInfoStatus>) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLTransientException0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("2'2mfST0j6c15>2P#dl");
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '2'2mfST0j6c15>2P#dl' on 'class java.sql.SQLSyntaxErrorException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      byte[] byteArray0 = new byte[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLTransactionRollbackException0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("7UK)R", "", 1, sQLTransactionRollbackException0);
      linkedList0.add(sQLSyntaxErrorException2);
      Integer integer0 = new Integer(396);
      IteratorUtils.getIterator(integer0);
      sQLSyntaxErrorException1.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 396, sQLSyntaxErrorException0);
      IteratorUtils.toString((Iterator<SQLException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      linkedList0.addLast((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 10);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      SingletonIterator<Transformer<Object, String>> singletonIterator0 = new SingletonIterator<Transformer<Object, String>>(transformer0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Transformer<Object, String>>) singletonIterator0, (Predicate<? super Transformer<Object, String>>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<Locale.Category>[] classArray0 = (Class<Locale.Category>[]) Array.newInstance(Class.class, 6);
      Class<Locale.Category> class1 = Locale.Category.class;
      classArray0[0] = class1;
      Class<Locale.Category> class2 = Locale.Category.class;
      classArray0[1] = class2;
      Class<Locale.Category> class3 = Locale.Category.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      InstanceofPredicate.instanceOfPredicate(class4);
      Class<Locale.Category> class5 = Locale.Category.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      classArray0[3] = class5;
      Class<Locale.Category> class6 = Locale.Category.class;
      classArray0[4] = class6;
      Class<Locale.Category> class7 = Locale.Category.class;
      classArray0[5] = class7;
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<HashMap>>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Jj)UhW5!=", ".H15Jn%%wKka");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("List must not be null", (int[]) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(".H15Jn%%wKka", batchUpdateException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(sQLSyntaxErrorException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(list0);
      ExceptionTransformer.exceptionTransformer();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<BatchUpdateException, Properties> factoryTransformer0 = new FactoryTransformer<BatchUpdateException, Properties>(factory0);
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) factoryTransformer0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", "List must not be null", 0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("u1X%");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("P.Q/_9>", "E,i_`DV", batchUpdateException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "Estimated size must be greater than 0", 8, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(batchUpdateException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 6);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, 6);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      arrayList0.add(sQLTransactionRollbackException0);
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(arrayList0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Predicate<SQLTransientException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLTransientException) sQLTimeoutException0, comparator0);
      sQLTimeoutException0.spliterator();
      arrayList0.add(sQLTransactionRollbackException0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) loopingListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) singletonListIterator0, (Iterator<? extends SQLTransientException>) listIterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.size(loopingListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0);
      ResettableIterator<Stack<SQLClientInfoException>> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Stack<SQLClientInfoException>>) resettableIterator0, (Transformer<? super Stack<SQLClientInfoException>, String>) transformer0, "[]", "`(tUFG}h^UzsuesCr$[", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      linkedList0.addLast((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 23);
      IteratorUtils.toListIterator((Iterator<?>) resettableListIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!B9", "!B9", 1928);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      singletonIterator0.reset();
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) singletonIterator0, (Iterator<? extends SQLRecoverableException>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.getIterator("O");
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(ifTransformer0, predicate0);
      IteratorUtils.find((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) transformedPredicate0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("4fG4]2aqB}Y&jv", "4fG4]2aqB}Y&jv");
      Transformer<SQLException, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("4fG4]2aqB}Y&jv");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 20);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '4fG4]2aqB}Y&jv' on 'class java.sql.SQLSyntaxErrorException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator");
      linkedList0.addLast(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      // Undeclared exception!
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("&GTkyUC:}25R(9(@%\"X");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      linkedList0.addLast((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 9);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableListIterator0, 909);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      PredicateTransformer<Hashtable<Locale.Category, SQLTransactionRollbackException>> predicateTransformer0 = new PredicateTransformer<Hashtable<Locale.Category, SQLTransactionRollbackException>>(predicate0);
      Hashtable<Locale.Category, SQLTransactionRollbackException> hashtable0 = new Hashtable<Locale.Category, SQLTransactionRollbackException>();
      Boolean boolean0 = predicateTransformer0.transform(hashtable0);
      IteratorUtils.getIterator(boolean0);
      ArrayDeque<BatchUpdateException>[] arrayDequeArray0 = (ArrayDeque<BatchUpdateException>[]) Array.newInstance(ArrayDeque.class, 8);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<BatchUpdateException> arrayDeque1 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<BatchUpdateException> arrayDeque2 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<BatchUpdateException> arrayDeque3 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<BatchUpdateException> arrayDeque4 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<BatchUpdateException> arrayDeque5 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<BatchUpdateException> arrayDeque6 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[6] = arrayDeque6;
      ArrayDeque<BatchUpdateException> arrayDeque7 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[7] = arrayDeque7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, 2, (-1194));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      linkedList0.addLast((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 41);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 1);
      Integer integer0 = new Integer(396);
      IteratorUtils.getIterator(integer0);
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLSyntaxErrorException1.fillInStackTrace();
      sQLExceptionArray0[0] = (SQLException) sQLSyntaxErrorException1;
      sQLExceptionArray0[1] = (SQLException) sQLSyntaxErrorException1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 396, sQLSyntaxErrorException0);
      IteratorUtils.toString((Iterator<SQLException>) null);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      linkedList0.addLast((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 41);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("aFhQtB\"5d \"MN");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<?>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MhFRGJ1", "", 2330, (Throwable) null);
      linkedList0.addLast(sQLSyntaxErrorException0);
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(linkedList0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) loopingListIterator0, (Iterator<? extends SQLSyntaxErrorException>) loopingListIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      linkedList0.addLast((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Closure must not be null", "IteratorChain cannot be changed after the first use of a method from the Iterator interface", true);
      IteratorUtils.getIterator(stringTokenizer0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicateTransformer<Hashtable<Locale.Category, SQLTransactionRollbackException>> predicateTransformer0 = new PredicateTransformer<Hashtable<Locale.Category, SQLTransactionRollbackException>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((Hashtable<Locale.Category, SQLTransactionRollbackException>) null);
      IteratorUtils.singletonIterator(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      linkedList0.add(sQLSyntaxErrorException0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      linkedList0.add(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 1);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLException>) null);
      Integer[] integerArray0 = new Integer[0];
      int int0 = 0;
      IteratorUtils.arrayListIterator(integerArray0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-4259);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.TransformerUtils", "org.apache.commons.collections4.TransformerUtils", 128, batchUpdateException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      String string0 = "UfekSFu";
      StackTraceElement stackTraceElement0 = new StackTraceElement("[]", "UfekSFu", (String) null, (-4259));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("UfekSFu", "transformer may not be null", (String) null, 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
//      try {
        stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.TransformerUtils", (String) null, "add() is not supported by this iterator", 1690);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Method name is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/iiDJoKTfE([&Qxo_O`");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Class<SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Integer integer0 = new Integer((-1831));
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("InstantiateFactory: Constructor threw an exception");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      FactoryTransformer<Integer, Integer> factoryTransformer0 = new FactoryTransformer<Integer, Integer>((Factory<? extends Integer>) null);
      Transformer<Integer, Integer> transformer1 = IfTransformer.ifTransformer((Predicate<? super Integer>) predicate0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer1);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIterator1;
      OrderedMapIterator<DataTruncation, SQLFeatureNotSupportedException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLException>) orderedMapIterator1);
      iteratorArray0[1] = (Iterator<DataTruncation>) orderedMapIterator2;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer((-1202));
      Integer integer1 = new Integer(28);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer1, true);
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Integer>) singletonIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer((-4));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, true);
      IteratorUtils.matchesAny((Iterator<Integer>) singletonIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[I\"9Pn-'\"L", "i2O6c$.Is,7|pZ ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.isEmpty(singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Integer integer0 = new Integer(22);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 9);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[0] = hashtable0;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(hashtable1);
      hashtableArray0[1] = hashtable2;
      int int0 = 15;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(15);
      hashtableArray0[2] = hashtable3;
      HashMap<InstanceofPredicate, IIOMetadataNode> hashMap0 = new HashMap<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable4 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(hashMap0);
      hashtableArray0[3] = hashtable4;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable5 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[4] = hashtable5;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable6 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[5] = hashtable6;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable7 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[3] = hashtable7;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable8 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[7] = hashtable8;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable9 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[8] = hashtable9;
      IteratorUtils.arrayIterator(hashtableArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, Boolean>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable4 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(100, 1475);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable5 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(hashtable2);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 5);
      hashtableArray0[0] = hashtable4;
      hashtableArray0[1] = hashtable2;
      IteratorUtils.arrayIterator(hashtableArray0);
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 1475);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) mapIterator2);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      EmptyIterator.emptyIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IteratorUtils.emptyOrderedIterator();
      Hashtable<SQLException, Properties> hashtable0 = new Hashtable<SQLException, Properties>();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iIOMetadataNode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, class0);
      OrderedMapIterator<DataTruncation, TreeSet<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) orderedMapIterator1);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator((SQLClientInfoException) null, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Hashtable<SQLException, Properties> hashtable0 = new Hashtable<SQLException, Properties>();
      MapTransformer.mapTransformer((Map<? super SQLException, ? extends Properties>) hashtable0);
      MapIterator<Integer, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      NullIsTruePredicate<Integer> nullIsTruePredicate0 = new NullIsTruePredicate<Integer>((Predicate<? super Integer>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      Hashtable<SQLException, Properties> hashtable0 = new Hashtable<SQLException, Properties>();
      MapTransformer.mapTransformer((Map<? super SQLException, ? extends Properties>) hashtable0);
      MapIterator<Integer, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Integer, SQLIntegrityConstraintViolationException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      NullIsTruePredicate<Integer> nullIsTruePredicate0 = new NullIsTruePredicate<Integer>((Predicate<? super Integer>) null);
      IteratorUtils.matchesAny((Iterator<Integer>) mapIterator1, (Predicate<? super Integer>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      HashMap<InstanceofPredicate, Transformer<SQLException, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<SQLException, String>>();
      Transformer<SQLTransientException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTransientException>, ? extends Transformer<? super SQLTransientException, ? extends String>>) hashMap0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "Transformer must not be null", "Transformer must not be null", "Entry does not exist: ");
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5!~gQHOME[qL&s)");
      ClassLoader.getSystemClassLoader();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      IteratorUtils.singletonIterator(batchUpdateException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate.equalPredicate((Object) instanceofPredicate0, (Equator<Object>) defaultEquator0);
      OrderedMapIterator<SQLTransientConnectionException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "vw>`U.GaOCM1?<");
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("vw>`U.GaOCM1?<", "vw>`U.GaOCM1?<", 36, sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      IteratorUtils.size(objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", ")&o*h-", "PD\"7N:v,Ag7Arc#p");
      // Undeclared exception!
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("8|jrE' ");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(treeSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) loopingIterator0, (Transformer<? super SQLTransientConnectionException, String>) null, "Transformer must not be null", "PD\"7N:v,Ag7Arc#p", "Transformer must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(vector0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      ExceptionFactory.exceptionFactory();
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      FactoryTransformer<BatchUpdateException, Properties> factoryTransformer0 = new FactoryTransformer<BatchUpdateException, Properties>(instantiateFactory0);
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashSet<SQLWarning>[] hashSetArray0 = (HashSet<SQLWarning>[]) Array.newInstance(HashSet.class, 5);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      hashSetArray0[1] = hashSet0;
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y");
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLDataException sQLDataException0 = new SQLDataException("Y", "uG[6l4A<>1", (Throwable) null);
      sQLDataException0.printStackTrace();
      IteratorUtils.singletonListIterator(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      DefaultEquator.defaultEquator();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      IteratorUtils.singletonIterator((EnumSet<Locale.Category>) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) listIteratorWrapper0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("PG", "PG", (-3137));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLWarning0, comparator0, comparatorPredicate_Criterion0);
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) comparatorPredicate0, (Closure<? super SQLException>) closure0);
      ForClosure<DataTruncation> forClosure0 = new ForClosure<DataTruncation>((-3137), closure1);
      IteratorUtils.apply((Iterator<DataTruncation>) null, (Closure<? super DataTruncation>) closure0);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IteratorUtils.toString((Iterator<SQLException>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) "[]");
      predicateArray0[1] = predicate1;
      IfTransformer<Object, Boolean> ifTransformer0 = new IfTransformer<Object, Boolean>(predicate1, (Transformer<? super Object, ? extends Boolean>) null, (Transformer<? super Object, ? extends Boolean>) null);
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) ifTransformer0);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate1);
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[4] = predicate4;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate4);
      predicateArray0[5] = (Predicate<Object>) notPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) priorityQueue0);
      Closure<Object> closure1 = ForClosure.forClosure((-1922), (Closure<? super Object>) closure0);
      closureArray0[0] = closure1;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate1, closure0);
      closureArray0[1] = (Closure<Object>) ifClosure0;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      IteratorUtils.apply((Iterator<Vector<Vector>>) null, (Closure<? super Vector<Vector>>) switchClosure0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MapIterator<DataTruncation, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure<DataTruncation> forClosure0 = new ForClosure<DataTruncation>((-3137), closure0);
      hashMap0.values();
      IteratorUtils.apply((Iterator<DataTruncation>) mapIterator0, (Closure<? super DataTruncation>) forClosure0);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLNonTransientException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2421), (-2421));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 453;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends String>) null, 453);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>>();
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTransientException>, ? extends Transformer<? super SQLTransientException, ? extends String>>) hashMap0);
      Stack<Iterator<SQLFeatureNotSupportedException>> stack0 = new Stack<Iterator<SQLFeatureNotSupportedException>>();
      ResettableListIterator<Iterator<SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLFeatureNotSupportedException>>) stack0);
      TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLFeatureNotSupportedException>>) resettableListIterator0, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MapIterator<SQLException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLException>) mapIterator0);
      ResettableListIterator<Iterator<SQLFeatureNotSupportedException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLFeatureNotSupportedException>>) resettableListIterator0, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", ",", 35, sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLFeatureNotSupportedException>>) null, (Collection<? super Iterator<SQLFeatureNotSupportedException>>) linkedHashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(12);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) instanceofPredicate0, (Equator<Object>) defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(hashMap0, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Integer integer0 = new Integer(8);
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<Iterator<SQLFeatureNotSupportedException>>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0, (Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 9);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[1] = hashtable1;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[2] = hashtable2;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<Locale.Category>) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0, (Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 9);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[1] = hashtable1;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[2] = hashtable2;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[3] = hashtable3;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable4 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable5 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[5] = hashtable5;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable6 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable7 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<Locale.Category>) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.toArray(iterator1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate1);
      DataTruncation dataTruncation0 = new DataTruncation(25, false, false, 25, 25);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Integer integer0 = new Integer(8);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      int int0 = 1475;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(1475, 8);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(hashtable1);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 5);
      hashtableArray0[0] = hashtable1;
      hashtableArray0[1] = hashtable1;
      hashtableArray0[2] = hashtable2;
      hashtableArray0[3] = hashtable2;
      hashtableArray0[4] = hashtable0;
      IteratorUtils.arrayIterator(hashtableArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) null, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, (-3291));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Array class must not be null");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R[M{=mI'");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException>(orderedMapIterator0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, class0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      iteratorArray0[0] = (Iterator<String>) objectArrayIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 5);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[0] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[1] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[2] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[3] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[4] = class5;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Array class must not be null", classArray0, sQLTransactionRollbackExceptionArray0);
      IteratorUtils.toString((Iterator<Iterator<SQLFeatureNotSupportedException>>) orderedIterator0, (Transformer<? super Iterator<SQLFeatureNotSupportedException>, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.toArray(iterator1);
      int int0 = (-693);
      Integer integer0 = new Integer((-693));
      Integer integer1 = new Integer((-693));
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(list0);
      ExceptionTransformer.exceptionTransformer();
      Transformer<BatchUpdateException, Properties> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MapIterator<DataTruncation, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure<DataTruncation> forClosure0 = new ForClosure<DataTruncation>((-3137), closure0);
      hashMap0.values();
      IteratorUtils.apply((Iterator<DataTruncation>) mapIterator0, (Closure<? super DataTruncation>) forClosure0);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLNonTransientException>) orderedMapIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      IteratorUtils.apply(iterator0, (Closure<? super SQLClientInfoException>) closure0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<Locale.Category>) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.toArray(iterator1);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-693));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-693));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      IteratorUtils.toArray(iterator1);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("tBS?T%X{]3urvyh", (String) null);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, class0);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<Locale.Category>) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedMapIterator0);
      HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>> hashMap1 = new HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>>();
      Transformer<SQLTransientException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTransientException>, ? extends Transformer<? super SQLTransientException, ? extends String>>) hashMap1);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "Transformer must not be null", "Transformer must not be null", "Transformer must not be null");
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) orderedIterator0);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) loopingIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.toArray(iterator1);
      Integer integer0 = new Integer((-693));
      Integer integer1 = new Integer((-596));
      Integer integer2 = new Integer((-596));
      Integer integer3 = new Integer((-693));
      Integer integer4 = new Integer(1111);
      IteratorUtils.toArray(iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Iterator remove() can only be called once after next()", "org.apache.commons.collections4.functors.ConstantTransformer");
      IteratorUtils.getIterator(iterator1);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLNonTransientConnectionException>>) stack0);
      PriorityQueue<Integer>[] priorityQueueArray0 = (PriorityQueue<Integer>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<Integer> priorityQueue1 = new PriorityQueue<Integer>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<Integer> priorityQueue2 = new PriorityQueue<Integer>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<Integer> priorityQueue3 = new PriorityQueue<Integer>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<Integer> priorityQueue4 = new PriorityQueue<Integer>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<Integer> priorityQueue5 = new PriorityQueue<Integer>();
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<Integer> priorityQueue6 = new PriorityQueue<Integer>();
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<Integer> priorityQueue7 = new PriorityQueue<Integer>();
      priorityQueueArray0[7] = priorityQueue7;
      IteratorUtils.arrayIterator(priorityQueueArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7**", "7**", 5);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLSyntaxErrorException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate0;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Integer integer0 = new Integer(8);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0, (Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 9);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[0] = hashtable0;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[1] = hashtable1;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[2] = hashtable2;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[3] = hashtable3;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable4 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[4] = hashtable4;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable5 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[5] = hashtable5;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable6 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(1475, 1475);
      hashtableArray0[6] = hashtable6;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable7 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(10);
      hashtableArray0[7] = hashtable7;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable8 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(hashtable4);
      hashtableArray0[8] = hashtable8;
      IteratorUtils.arrayIterator(hashtableArray0);
      MapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> mapIterator3 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> mapIterator4 = IteratorUtils.unmodifiableMapIterator(mapIterator3);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator4);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) hashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) mapIterator1, (Iterator<? extends SQLException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      entrySetMapIterator0.toString();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(zippingIterator0);
      HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>> hashMap1 = new HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>>();
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTransientException>, ? extends Transformer<? super SQLTransientException, ? extends String>>) hashMap1);
      EmptyIterator.resettableEmptyIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.toArray(iterator1);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-683));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-683));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(24);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[6]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(2265);
      integerArray0[8] = integer8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, (int) integerArray0[4], 5086);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0, (Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      SQLWarning sQLWarning0 = new SQLWarning();
      linkedHashSet0.add(sQLWarning0);
      HashSet<SQLWarning>[] hashSetArray0 = (HashSet<SQLWarning>[]) Array.newInstance(HashSet.class, 5);
      hashSetArray0[0] = (HashSet<SQLWarning>) linkedHashSet0;
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      hashSetArray0[1] = hashSet0;
      hashSetArray0[2] = (HashSet<SQLWarning>) linkedHashSet0;
      hashSetArray0[3] = (HashSet<SQLWarning>) linkedHashSet0;
      hashSetArray0[4] = (HashSet<SQLWarning>) linkedHashSet0;
      IteratorUtils.arrayListIterator(hashSetArray0, 0, 0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator1, 21);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      int int1 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      integerArray0[3] = (Integer) int0;
      integerArray0[4] = (Integer) int0;
      SQLWarning sQLWarning0 = new SQLWarning("", "", 2761);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      linkedHashSet0.add(sQLWarning0);
      HashSet<SQLWarning>[] hashSetArray0 = (HashSet<SQLWarning>[]) Array.newInstance(HashSet.class, 9);
      hashSetArray0[0] = (HashSet<SQLWarning>) linkedHashSet0;
      hashSetArray0[1] = (HashSet<SQLWarning>) linkedHashSet0;
      hashSetArray0[2] = (HashSet<SQLWarning>) linkedHashSet0;
      hashSetArray0[3] = (HashSet<SQLWarning>) linkedHashSet0;
      hashSetArray0[4] = (HashSet<SQLWarning>) linkedHashSet0;
      hashSetArray0[5] = (HashSet<SQLWarning>) linkedHashSet0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 1, int1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(instanceofPredicate0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(class0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.toArray(iterator1);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-683));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-683));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(24);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[6]);
      int[] intArray0 = new int[5];
      intArray0[0] = (-683);
      intArray0[1] = 3179;
      intArray0[2] = (-683);
      intArray0[3] = (int) integerArray0[6];
      intArray0[4] = 24;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      OrderedMapIterator<InstanceofPredicate, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<InstanceofPredicate, String> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends InstanceofPredicate, ? extends String>) orderedMapIterator0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) list0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      AndPredicate.andPredicate((Predicate<? super SQLFeatureNotSupportedException>) predicate0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ExceptionTransformer.exceptionTransformer();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      IteratorUtils.emptyOrderedIterator();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 791;
      intArray0[2] = 1073741824;
      intArray0[3] = (-626);
      intArray0[4] = 1786;
      intArray0[5] = 43;
      intArray0[6] = 3179;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[6] = instanceofPredicate6;
      Class<SQLTransientException> class5 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class5);
      instanceofPredicateArray0[7] = instanceofPredicate7;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      Transformer<InstanceofPredicate, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableListIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, ") less than zero.", ";117yF@6^s3~#", "Array class must not be null");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("8|jrE' ");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator0);
      Object object0 = new Object();
      ResettableListIterator<Object> resettableListIterator0 = new SingletonListIterator<Object>(nodeListIterator0);
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>(vector0);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      HashSet<SQLWarning> hashSet1 = new HashSet<SQLWarning>();
      int int0 = 2030;
      SQLWarning sQLWarning0 = new SQLWarning("Invalid map index: ", "gn", 2030);
      hashSet0.add(sQLWarning0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((HashSet<SQLWarning>[]) null, 2030, 21);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) mapIterator0, (Iterator<? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      int int0 = 25;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 25);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 25
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MapIterator<DataTruncation, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-3137), sQLTransientException0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashSet<SQLWarning>[] hashSetArray0 = (HashSet<SQLWarning>[]) Array.newInstance(HashSet.class, 4);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      hashSetArray0[0] = hashSet0;
      hashSetArray0[1] = hashSet0;
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      hashSetArray0[2] = (HashSet<SQLWarning>) linkedHashSet0;
      HashSet<SQLWarning> hashSet1 = new HashSet<SQLWarning>();
      hashSetArray0[3] = hashSet1;
      SQLWarning sQLWarning0 = new SQLWarning("", "", 2030);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      hashSet0.add(sQLWarning0);
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 21, 21);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<SQLDataException, TreeSet<Boolean>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      AndPredicate.andPredicate((Predicate<? super SQLFeatureNotSupportedException>) predicate0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IteratorUtils.find((Iterator<TreeSet<ArrayList>>) mapIterator0, (Predicate<? super TreeSet<ArrayList>>) andPredicate0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, (-2180));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.toArray(iterator1);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-693));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-693));
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer2;
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(vector0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) integerArray0[3];
      intArray0[1] = (int) integerArray0[3];
      DataTruncation dataTruncation0 = new DataTruncation(2108, true, true, 35, (int) integerArray0[2]);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$4m#x%rC)Lh|", "", (int) integerArray0[1], intArray0, dataTruncation0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("u&IyM", "$4m#x%rC)Lh|", batchUpdateException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Mw|NzUASM", "Mw|NzUASM", 1382, sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("u&IyM", "", sQLTransientException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("uT76f_?E", "uT76f_?E", (-693));
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("nYl)R]", "$4m#x%rC)Lh|", batchUpdateException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("suffix may not be null");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("p&U]pl%jO!Dh*vsL", "", (Throwable) null);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("$4m#x%rC)Lh|");
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("nYl)R]", (String) null, (-693));
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (int) integerArray0[0]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.toArray(iterator1);
      Integer integer0 = new Integer((-693));
      Object object0 = new Object();
      Stack<Iterator<SQLFeatureNotSupportedException>> stack0 = new Stack<Iterator<SQLFeatureNotSupportedException>>();
      IteratorUtils.loopingListIterator((List<Iterator<SQLFeatureNotSupportedException>>) stack0);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Hashtable<InstanceofPredicate, IIOMetadataNode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Hashtable<SQLTimeoutException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashtable0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      Consumer<SQLTransientException> consumer0 = (Consumer<SQLTransientException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      entrySetMapIterator0.toString();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap1 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap1);
      ForClosure<DataTruncation> forClosure0 = new ForClosure<DataTruncation>((-1), closure0);
      hashMap1.values();
      String string0 = "[<57'7M_";
      String string1 = "qMFWcG3?#e]zgJaB1B";
      SQLWarning sQLWarning0 = new SQLWarning("[<57'7M_", "qMFWcG3?#e]zgJaB1B", (-2479));
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-1), 1073741824, sQLWarning0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.apply((Iterator<DataTruncation>) singletonIterator0, (Closure<? super DataTruncation>) forClosure0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // OrderedMapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0, (Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 9);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[0] = hashtable0;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[1] = hashtable1;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[2] = hashtable2;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[3] = hashtable3;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable4 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[4] = hashtable4;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable5 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<SQLRecoverableException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, ServiceLoader<SQLRecoverableException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, ServiceLoader<SQLRecoverableException>>(orderedMapIterator0);
      HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>>();
      Transformer<SQLTransientException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTransientException>, ? extends Transformer<? super SQLTransientException, ? extends String>>) hashMap0);
      String string0 = "4a5$*\"t\" Bb-Kg";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, (String) null, "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", "4a5$*\"t\" Bb-Kg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      Class<Locale.Category>[] classArray0 = (Class<Locale.Category>[]) Array.newInstance(Class.class, 1);
      Class<Locale.Category> class0 = Locale.Category.class;
      classArray0[0] = class0;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("v\"(28eiyA", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) invokerTransformer0, (String) null, (String) null, "v\"(28eiyA");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashSet<SQLWarning>[] hashSetArray0 = (HashSet<SQLWarning>[]) Array.newInstance(HashSet.class, 4);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      hashSetArray0[0] = hashSet0;
      HashSet<SQLWarning> hashSet1 = new HashSet<SQLWarning>(hashSet0);
      hashSetArray0[1] = hashSet1;
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      hashSetArray0[2] = (HashSet<SQLWarning>) linkedHashSet0;
      HashSet<SQLWarning> hashSet2 = new HashSet<SQLWarning>();
      hashSetArray0[3] = hashSet2;
      SQLWarning sQLWarning0 = new SQLWarning("", "", 2030);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KtGp!\"(");
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ExceptionTransformer.exceptionTransformer();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@%(P", sQLWarning0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator1, (long) 2030);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[3] = (Integer) int0;
      integerArray0[4] = (Integer) int0;
      Integer integer3 = new Integer(2761);
      integerArray0[5] = integer3;
      Integer integer4 = new Integer((-2254));
      integerArray0[6] = integer4;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 0, int0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0, (int) integerArray0[5]);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(list0);
      IteratorUtils.skippingIterator((Iterator<Integer>) loopingIterator0, (long) 2383);
      Stack<Iterator<SQLFeatureNotSupportedException>> stack0 = new Stack<Iterator<SQLFeatureNotSupportedException>>();
      ResettableListIterator<Iterator<SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLFeatureNotSupportedException>>) stack0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ListIterator<Iterator<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLFeatureNotSupportedException>>) resettableListIterator0, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) predicate0);
      IteratorUtils.toString((Iterator<Iterator<SQLFeatureNotSupportedException>>) listIterator0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, (long) integerArray0[6]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashSet<SQLWarning>[] hashSetArray0 = (HashSet<SQLWarning>[]) Array.newInstance(HashSet.class, 4);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      hashSetArray0[0] = hashSet0;
      HashSet<SQLWarning> hashSet1 = new HashSet<SQLWarning>(hashSet0);
      hashSetArray0[1] = hashSet1;
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      hashSetArray0[2] = (HashSet<SQLWarning>) linkedHashSet0;
      HashSet<SQLWarning> hashSet2 = new HashSet<SQLWarning>();
      hashSetArray0[3] = hashSet2;
      SQLWarning sQLWarning0 = new SQLWarning("", "", 2030);
      hashSet1.add(sQLWarning0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 21, 21);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<SQLTransientException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTransientException>, ? extends Transformer<? super SQLTransientException, ? extends String>>) hashtable0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      entrySetMapIterator0.toString();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(zippingIterator0);
      HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>> hashMap1 = new HashMap<InstanceofPredicate, Transformer<SQLTransientException, String>>();
      Transformer<SQLTransientException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTransientException>, ? extends Transformer<? super SQLTransientException, ? extends String>>) hashMap1);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "Sl`l/I1", "", "");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "", 179);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<Object>) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      objectArray0[1] = null;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) resettableIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+Bw-O'brL(|29vvab", "[]");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator0);
      Object object0 = new Object();
      Stack<Iterator<SQLFeatureNotSupportedException>> stack0 = new Stack<Iterator<SQLFeatureNotSupportedException>>();
      ResettableListIterator<Iterator<SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLFeatureNotSupportedException>>) stack0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLFeatureNotSupportedException>>) resettableListIterator0, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) predicate0);
      IteratorUtils.toString((Iterator<Iterator<SQLFeatureNotSupportedException>>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Integer integer0 = new Integer(8);
      int int0 = 35;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 8, 35);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      entrySetMapIterator0.toString();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(zippingIterator0);
      LinkedHashSet<Transformer<Object, String>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, String>>();
      IteratorUtils.singletonIterator(linkedHashSet0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      linkedList0.sort((Comparator<? super BatchUpdateException>) null);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(linkedList0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
      IteratorUtils.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("=MB5p0>?jO;cW{}NM", "F.m(3YN$+&=", sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 4113, 295);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Array class must not be null");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R[M{=mI'");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException>(orderedMapIterator0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, class0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      iteratorArray0[0] = (Iterator<String>) objectArrayIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0, (Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 9);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[0] = hashtable0;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[1] = hashtable1;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[2] = hashtable2;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[3] = hashtable3;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable4 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[4] = hashtable4;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable5 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[5] = hashtable5;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable6 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(1475, 1475);
      hashtableArray0[6] = hashtable6;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable7 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(10);
      hashtableArray0[7] = hashtable7;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable8 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(hashtable4);
      hashtableArray0[8] = hashtable8;
      IteratorUtils.arrayIterator(hashtableArray0);
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 566);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 566);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      entrySetMapIterator0.toString();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(zippingIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("MapIterator[]", (String) null, 0, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("MapIterator[]");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("s:e)", "s:e)", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("J{T2Re", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("Estimated size must be greater than 0", "");
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 3578);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3571
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0, (Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.addLast(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 9);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[1] = hashtable1;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[2] = hashtable2;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[3] = hashtable3;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable4 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable5 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      hashtableArray0[5] = hashtable5;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable6 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(1475, 1475);
      hashtableArray0[6] = hashtable6;
      hashtableArray0[7] = hashtableArray0[4];
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable7 = new Hashtable<InstanceofPredicate, IIOMetadataNode>(hashtable4);
      hashtableArray0[8] = hashtable7;
      IteratorUtils.arrayIterator(hashtableArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 593);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("3.]^>J:(0_R8n>M4ZfU", sQLSyntaxErrorException1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      vector0.add((SQLRecoverableException) null);
      linkedList0.removeAll(vector0);
      IteratorUtils.loopingListIterator((List<ArrayDeque<ArrayDeque>>) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getNextSibling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      IteratorUtils.getIterator((Object) null);
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      entrySetMapIterator0.toString();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(zippingIterator0);
      LinkedHashSet<Transformer<Object, String>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, String>>();
      ResettableIterator<LinkedHashSet<Transformer<Object, String>>> resettableIterator0 = IteratorUtils.singletonIterator(linkedHashSet0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("MapIterator[]");
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.contains((Iterator<Object>) resettableIterator1, (Object) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Collection<Closure<Object>> collection0 = hashMap0.values();
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) closure0;
      objectArray0[1] = (Object) collection0;
      objectArray0[2] = (Object) closure0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, objectArray0[1]);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("8|jrE' ");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ResettableListIterator<Class<SQLClientInfoException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Class<SQLClientInfoException>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) objectArrayIterator0);
      IteratorUtils.size(listIterator0);
      IteratorUtils.isEmpty(listIterator0);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-3346));
      Integer integer2 = new Integer(2383);
      int int0 = (-2254);
      Integer integer3 = new Integer(128);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer3;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, 10, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<Transformer<Object, String>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, String>>();
      ResettableIterator<LinkedHashSet<Transformer<Object, String>>> resettableIterator0 = IteratorUtils.singletonIterator(linkedHashSet0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLException>) null);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("8|jrE' ");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator0);
      int int0 = (-2620);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("z3rkcfYUpT^t");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode1, (-2620));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      HashMap<SQLException, Properties> hashMap0 = new HashMap<SQLException, Properties>();
      MapTransformer.mapTransformer((Map<? super SQLException, ? extends Properties>) hashMap0);
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      entrySetMapIterator0.toString();
      ResettableListIterator<SQLTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(resettableListIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      entrySetMapIterator0.toString();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(zippingIterator0);
      LinkedHashSet<Transformer<Object, String>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, String>>();
      ResettableIterator<LinkedHashSet<Transformer<Object, String>>> resettableIterator0 = IteratorUtils.singletonIterator(linkedHashSet0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("MapIterator[]");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "xtq(5ZaMlJ]I9");
      DataTruncation dataTruncation0 = new DataTruncation(61, false, false, (-2221), (-2221), sQLInvalidAuthorizationSpecException0);
      NOPClosure.nopClosure();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, (long) 0, 1L);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) sQLFeatureNotSupportedExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<Object>) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      objectArray0[1] = null;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) resettableIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+Bw-O'brL(|29vvab", "[]");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0, (-47), (-47));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MapIterator<DataTruncation, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = (-3137);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure<DataTruncation> forClosure0 = new ForClosure<DataTruncation>((-3137), closure0);
      hashMap0.values();
      IteratorUtils.apply((Iterator<DataTruncation>) mapIterator0, (Closure<? super DataTruncation>) forClosure0);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLNonTransientException>) orderedMapIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      IteratorUtils.apply(iterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Closure must not be null", (-3137));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("kO", sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLNonTransientConnectionException0);
      Integer integer0 = new Integer((-3137));
      int int1 = 2761;
      Integer integer1 = new Integer(2383);
      Integer integer2 = new Integer((-3137));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 91, 2383);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) objectArrayIterator0);
      IteratorUtils.size(listIterator0);
      IteratorUtils.isEmpty(listIterator0);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      String string0 = "";
      String string1 = "h@-`z.%P";
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyListIterator();
      SQLTransientException sQLTransientException0 = null;
      IteratorUtils.singletonListIterator((SQLTransientException) null);
      IteratorUtils.emptyMapIterator();
      String string0 = "Max parameter must not be negative.";
      // Undeclared exception!
//      try { 
        Locale.Category.valueOf("Max parameter must not be negative.");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant java.util.Locale.Category.Max parameter must not be negative.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", ",", (-1058), sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",", sQLWarning0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode1);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNode1.insertBefore(iIOMetadataNode2, iIOMetadataNode0);
      IteratorUtils.nodeListIterator(node0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      iIOMetadataNode1.hasAttributes();
      iIOMetadataNode0.removeChild(iIOMetadataNode1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      IteratorUtils.getIterator(linkedList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("", "`^36*#'oU)g", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      sQLWarning0.setNextException(sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLargeUpdateCounts();
      String string0 = "~2>";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("~2>", "Wh@-`z.%P", batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) objectArrayIterator0);
      IteratorUtils.size(listIterator0);
      IteratorUtils.isEmpty(listIterator0);
      Object object0 = new Object();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "delimiter may not be null", 2761);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(")*O/3I`zxu.y)", "", sQLSyntaxErrorException0);
      priorityQueue0.add(sQLTransactionRollbackException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) priorityQueue0);
      HashMap<SQLInvalidAuthorizationSpecException, Vector<Class<SQLWarning>>> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Vector<Class<SQLWarning>>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Vector<Class<SQLWarning>>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Vector<Class<SQLWarning>>>(hashMap0);
      MapIterator<SQLInvalidAuthorizationSpecException, Vector<Class<SQLWarning>>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, Vector<Class<SQLWarning>>>) entrySetMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode1);
      iIOMetadataNode0.insertBefore(node0, node0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iterator");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(nullIsFalsePredicate0, closure0, true);
      ForClosure.forClosure(10, (Closure<? super SQLException>) whileClosure0);
      ClosureTransformer<DataTruncation> closureTransformer0 = new ClosureTransformer<DataTruncation>(whileClosure0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, 100, 10, sQLIntegrityConstraintViolationException0);
      IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) closureTransformer0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      HashMap<InstanceofPredicate, Transformer<SQLException, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<SQLException, String>>();
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTransientException>, ? extends Transformer<? super SQLTransientException, ? extends String>>) hashMap0);
      EmptyIterator.resettableEmptyIterator();
      Hashtable<SQLException, Properties> hashtable0 = new Hashtable<SQLException, Properties>();
      Transformer<SQLException, Properties> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends Properties>) hashtable0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3421);
      intArray0[1] = (-3421);
      intArray0[2] = (-3421);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("'2A~maKs)'K");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "'2A~maKs)'K", (-3421), intArray0, sQLFeatureNotSupportedException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, BatchUpdateException>[] transformerArray0 = (Transformer<Object, BatchUpdateException>[]) Array.newInstance(Transformer.class, 5);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("'2A~maKs)'K", intArray0, batchUpdateException0);
      ConstantTransformer<Object, BatchUpdateException> constantTransformer0 = new ConstantTransformer<Object, BatchUpdateException>(batchUpdateException1);
      transformerArray0[0] = (Transformer<Object, BatchUpdateException>) constantTransformer0;
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("'2A~maKs)'K", (Class<?>[]) null, transformerArray0);
      transformerArray0[1] = (Transformer<Object, BatchUpdateException>) invokerTransformer0;
      Factory<BatchUpdateException> factory0 = ConstantFactory.constantFactory(batchUpdateException0);
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Object, BatchUpdateException>(factory0);
      transformerArray0[2] = (Transformer<Object, BatchUpdateException>) factoryTransformer0;
      Transformer<Object, BatchUpdateException> transformer1 = ConstantTransformer.nullTransformer();
      transformerArray0[3] = transformer1;
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer1 = new FactoryTransformer<Object, BatchUpdateException>(factory0);
      transformerArray0[4] = (Transformer<Object, BatchUpdateException>) factoryTransformer1;
      SwitchTransformer<Object, BatchUpdateException> switchTransformer0 = new SwitchTransformer<Object, BatchUpdateException>(predicateArray0, transformerArray0, transformerArray0[4]);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) switchTransformer0);
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) iterator0, (Transformer<? super BatchUpdateException, ? extends Properties>) transformer0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Predicate<SQLTransactionRollbackException> predicate0 = null;
      // Undeclared exception!
//      try { 
        singletonIterator0.remove();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.SingletonIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("4I`qDR7{b)O{.0R", "4I`qDR7{b)O{.0R", 3, sQLRecoverableException0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Transformer<Integer, Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2383);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2761);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2254));
      integerArray0[6] = integer6;
      ResettableIterator<Integer> resettableIterator0 = new SingletonListIterator<Integer>((Integer) int0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0, (int) integerArray0[5]);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(list0);
      IteratorUtils.skippingIterator((Iterator<Integer>) loopingIterator0, (long) 2383);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<Object>) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Object object0 = new Object();
      objectArray0[1] = object0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) resettableIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+Bw-O'brL(|29vvab", "[]");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLFeatureNotSupportedException>>) null, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(entrySetMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      entrySetMapIterator0.toString();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.size(zippingIterator0);
      LinkedHashSet<Transformer<Object, String>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, String>>();
      ResettableIterator<LinkedHashSet<Transformer<Object, String>>> resettableIterator0 = IteratorUtils.singletonIterator(linkedHashSet0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) objectArrayIterator0);
      IteratorUtils.size(listIterator0);
      IteratorUtils.isEmpty(listIterator0);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      String string0 = "";
      String string1 = "Wh@-`z.%P";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("Wh@-`z.%P", "", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      sQLWarning0.setNextException(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      batchUpdateException0.getLargeUpdateCounts();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", "hN[.{iu<14", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException((String) null, "hN[.{iu<14", 2675);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", (String) null, (-4), sQLInvalidAuthorizationSpecException5);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedIterator<PriorityQueue<Integer>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<PriorityQueue<Integer>>) orderedIterator0, (Object) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedHashSet<SQLTransactionRollbackException>[] linkedHashSetArray0 = (LinkedHashSet<SQLTransactionRollbackException>[]) Array.newInstance(LinkedHashSet.class, 0);
      IteratorUtils.arrayListIterator(linkedHashSetArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.setAttributeNodeNS((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      IteratorUtils.isEmpty(reverseListIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("peJ;c&EIkDmuaTMv", "", (-2443), sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("peJ;c&EIkDmuaTMv", (String) null, (-2443));
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", (String) null);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("_Ly]6TiiqLNV", ")~n$9Vx^A`7cp%S", (-2443), sQLTimeoutException2);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException(sQLTimeoutException4);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("_Ly]6TiiqLNV", (String) null);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, (-2443));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode1);
      Node node1 = iIOMetadataNode0.insertBefore(node0, node0);
      IteratorUtils.nodeListIterator(node1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) null, (-1L), (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<EnumSet>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2383);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2761);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2254));
      integerArray0[6] = integer6;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 0, int0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0, (int) integerArray0[5]);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(list0);
      IteratorUtils.skippingIterator((Iterator<Integer>) loopingIterator0, (long) 2383);
      Stack<Iterator<SQLFeatureNotSupportedException>> stack0 = new Stack<Iterator<SQLFeatureNotSupportedException>>();
      ResettableListIterator<Iterator<SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLFeatureNotSupportedException>>) stack0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ListIterator<Iterator<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLFeatureNotSupportedException>>) resettableListIterator0, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) predicate0);
      IteratorUtils.toString((Iterator<Iterator<SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("io(`yJpzwH*Pl8DC@o", "", 3173);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator1, (Closure<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Integer, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, ArrayList<LinkedList>>) mapIterator0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ArrayIterator<BatchUpdateException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<BatchUpdateException>(resettableListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Integer integer0 = new Integer(8);
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 4, 4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, class0);
      IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) null);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1396, 0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation0, (Equator<Object>) defaultEquator0);
      Predicate<PriorityQueue<PriorityQueue>> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super PriorityQueue<PriorityQueue>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("KIvq1!FBp$P", "ldVM/z*Q!", 211, sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null", sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("KIvq1!FBp$P", "ldVM/z*Q!", 211, sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("NodeList must not be null", "", 211, sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("KIvq1!FBp$P");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("fMb");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 211);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null, "", 0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("p,!u", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException(", ", "", (-1199), sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException6);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1199));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 6);
      String string0 = "psOKo=%DnO}M R,&v6";
      int int0 = 1;
      SQLWarning sQLWarning0 = new SQLWarning("", "psOKo=%DnO}M R,&v6", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("psOKo=%DnO}M R,&v6", "psOKo=%DnO}M R,&v6", sQLWarning0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      OrderedMapIterator<Object, PriorityQueue<SQLNonTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, PriorityQueue<SQLNonTransientConnectionException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, PriorityQueue<SQLNonTransientConnectionException>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, PriorityQueue<SQLNonTransientConnectionException>>) abstractOrderedMapIteratorDecorator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, "3!'w3y:-Ee1", (-1227));
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("3!'w3y:-Ee1", (String) null, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("euup%W1RAw^j>OS\"*k", (String) null);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("Gu(M_+)vx6:eUIye.");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("N{", sQLSyntaxErrorException4);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("lck4", "", 5236);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) objectArrayIterator0);
      IteratorUtils.size(listIterator0);
      IteratorUtils.isEmpty(listIterator0);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      int int0 = 125;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 125);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 125
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLIntegrityConstraintViolationException>) mapIterator1);
      AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLIntegrityConstraintViolationException>(mapIterator2);
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0, (Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      int int0 = 566;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 566);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 566
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MapIterator<SQLDataException, TreeSet<Boolean>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      AndPredicate<Object> andPredicate1 = new AndPredicate<Object>(andPredicate0, andPredicate0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      AndPredicate.andPredicate((Predicate<? super SQLFeatureNotSupportedException>) andPredicate1, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      IteratorUtils.find((Iterator<TreeSet<ArrayList>>) mapIterator0, (Predicate<? super TreeSet<ArrayList>>) andPredicate0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[C^13)GfDlsz4Bt", "Initial capacity must be a non negative number");
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Predicate<? super SQLNonTransientConnectionException>) andPredicate0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator0, 2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MapIterator<StringTokenizer, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) mapIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MapIterator<StringTokenizer, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) mapIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-3350));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      Hashtable<SQLClientInfoException, Properties> hashtable0 = new Hashtable<SQLClientInfoException, Properties>();
      Enumeration<Properties> enumeration0 = hashtable0.elements();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", ",", (-1058), sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",", sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",", ",", (-994), sQLTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("8|jrE' ");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      OrderedMapIterator<SQLException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      String string0 = IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Stack<Iterator<SQLFeatureNotSupportedException>> stack0 = new Stack<Iterator<SQLFeatureNotSupportedException>>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      ResettableListIterator<Iterator<SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLFeatureNotSupportedException>>) stack0);
      assertNotNull(resettableListIterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      ListIterator<Iterator<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<SQLFeatureNotSupportedException>>) resettableListIterator0, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) predicate0);
      assertNotNull(listIterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string1 = IteratorUtils.toString((Iterator<Iterator<SQLFeatureNotSupportedException>>) listIterator0);
      assertEquals("[]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      OrderedMapIterator<SQLNonTransientConnectionException, Locale.Category> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 6);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "E2%&JVUW&kC^h'h", 100);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E2%&JVUW&kC^h'h", sQLIntegrityConstraintViolationException0.getSQLState());
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("List must not be null", "", sQLIntegrityConstraintViolationException0);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E2%&JVUW&kC^h'h", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: List must not be null", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("List must not be null", sQLIntegrityConstraintViolationException1.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException: List must not be null", sQLIntegrityConstraintViolationException2.toString());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: List must not be null", sQLIntegrityConstraintViolationException2.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E2%&JVUW&kC^h'h", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: List must not be null", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("List must not be null", sQLIntegrityConstraintViolationException1.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(sQLIntegrityConstraintViolationException3);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException3.toString());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E2%&JVUW&kC^h'h", sQLIntegrityConstraintViolationException0.getSQLState());
      
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException4);
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException4.toString());
      assertNull(sQLIntegrityConstraintViolationException4.getSQLState());
      
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("List must not be null", sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException2));
      assertNotNull(sQLIntegrityConstraintViolationException5);
      assertNull(sQLIntegrityConstraintViolationException5.getSQLState());
      assertEquals("List must not be null", sQLIntegrityConstraintViolationException5.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException5.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: List must not be null", sQLIntegrityConstraintViolationException5.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E2%&JVUW&kC^h'h", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: List must not be null", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("List must not be null", sQLIntegrityConstraintViolationException1.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("/yXnLtWJF", sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException5));
      assertNotNull(sQLIntegrityConstraintViolationException6);
      assertEquals(0, sQLIntegrityConstraintViolationException6.getErrorCode());
      assertEquals("/yXnLtWJF", sQLIntegrityConstraintViolationException6.getMessage());
      assertNull(sQLIntegrityConstraintViolationException6.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /yXnLtWJF", sQLIntegrityConstraintViolationException6.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E2%&JVUW&kC^h'h", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: List must not be null", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("List must not be null", sQLIntegrityConstraintViolationException1.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      assertEquals(7, sQLIntegrityConstraintViolationExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(7, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0;
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iteratorArray0[0]);
      assertEquals(6, iteratorArray0.length);
      assertNotNull(enumeration0);
      
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      assertNotNull(treeSet0);
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) treeSet0);
      assertEquals(6, iteratorArray0.length);
      assertNotNull(iterator0);
      
      iteratorArray0[1] = iterator0;
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      assertFalse(linkedList0.contains(sQLIntegrityConstraintViolationException3));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      assertFalse(linkedList0.contains(sQLIntegrityConstraintViolationException3));
      assertNotNull(reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) reverseListIterator0;
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator1 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      assertFalse(reverseListIterator1.equals((Object)reverseListIterator0));
      assertFalse(linkedList0.contains(sQLIntegrityConstraintViolationException3));
      assertNotNull(reverseListIterator1);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator1.hasPrevious());
      assertFalse(reverseListIterator1.hasNext());
      
      iteratorArray0[3] = (Iterator<SQLIntegrityConstraintViolationException>) reverseListIterator1;
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator2 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      assertFalse(reverseListIterator2.equals((Object)reverseListIterator0));
      assertFalse(reverseListIterator2.equals((Object)reverseListIterator1));
      assertFalse(linkedList0.contains(sQLIntegrityConstraintViolationException3));
      assertNotNull(reverseListIterator2);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator2.hasPrevious());
      assertFalse(reverseListIterator2.hasNext());
      
      iteratorArray0[4] = (Iterator<SQLIntegrityConstraintViolationException>) reverseListIterator2;
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException3);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(singletonListIterator0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException3.toString());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E2%&JVUW&kC^h'h", sQLIntegrityConstraintViolationException0.getSQLState());
      
      iteratorArray0[5] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(6, iteratorArray0.length);
      assertNotNull(iterator1);
      
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0);
      assertNotSame(reverseListIterator0, reverseListIterator2);
      assertNotSame(reverseListIterator0, reverseListIterator1);
      assertFalse(reverseListIterator0.equals((Object)reverseListIterator2));
      assertFalse(reverseListIterator0.equals((Object)reverseListIterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(linkedList0.contains(sQLIntegrityConstraintViolationException3));
      assertEquals(6, iteratorArray0.length);
      assertNotNull(zippingIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      assertNotNull(enumeration0);
      
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      assertNotNull(iterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      assertNotNull(predicate0);
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      assertNotNull(notPredicate0);
      
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      predicateArray0[1] = predicate1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 125);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(125, sQLFeatureNotSupportedException0.getErrorCode());
      
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) sQLFeatureNotSupportedException0);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(125, sQLFeatureNotSupportedException0.getErrorCode());
      
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = NotNullPredicate.notNullPredicate();
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertEquals(4, predicateArray0.length);
      assertNotNull(predicate4);
      
      PredicateTransformer<Hashtable<Locale.Category, SQLTransactionRollbackException>> predicateTransformer0 = new PredicateTransformer<Hashtable<Locale.Category, SQLTransactionRollbackException>>(predicate4);
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertEquals(4, predicateArray0.length);
      assertNotNull(predicateTransformer0);
      
      Hashtable<Locale.Category, SQLTransactionRollbackException> hashtable0 = new Hashtable<Locale.Category, SQLTransactionRollbackException>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Boolean boolean2 = predicateTransformer0.transform(hashtable0);
      assertFalse(boolean2);
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertEquals(4, predicateArray0.length);
      assertNotNull(boolean2);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(boolean2);
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertEquals(4, predicateArray0.length);
      assertNotNull(iterator1);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      assertNotNull(resettableIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableIterator0);
      assertNotNull(listIteratorWrapper0);
      assertFalse(listIteratorWrapper0.hasPrevious());
      
      long long0 = 0L;
//      try { 
        listIteratorWrapper0.previous();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      ResettableIterator<Class<SQLNonTransientException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "8|jrE' ";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("8|jrE' ");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      OrderedMapIterator<SQLException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      String string1 = IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator0);
      assertEquals("[]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2620));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Hashtable<InstanceofPredicate, IIOMetadataNode>[] hashtableArray0 = (Hashtable<InstanceofPredicate, IIOMetadataNode>[]) Array.newInstance(Hashtable.class, 4);
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable0 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      hashtableArray0[0] = hashtable0;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable1 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNotNull(hashtable1);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      
      hashtableArray0[1] = hashtable1;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable2 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      assertTrue(hashtable2.equals((Object)hashtable1));
      assertTrue(hashtable2.equals((Object)hashtable0));
      assertNotNull(hashtable2);
      assertTrue(hashtable2.isEmpty());
      assertEquals(0, hashtable2.size());
      
      hashtableArray0[2] = hashtable2;
      Hashtable<InstanceofPredicate, IIOMetadataNode> hashtable3 = new Hashtable<InstanceofPredicate, IIOMetadataNode>();
      assertTrue(hashtable3.equals((Object)hashtable1));
      assertTrue(hashtable3.equals((Object)hashtable0));
      assertTrue(hashtable3.equals((Object)hashtable2));
      assertNotNull(hashtable3);
      assertTrue(hashtable3.isEmpty());
      assertEquals(0, hashtable3.size());
      
      hashtableArray0[3] = hashtable3;
      ResettableIterator<Hashtable<InstanceofPredicate, IIOMetadataNode>> resettableIterator0 = IteratorUtils.arrayIterator(hashtableArray0);
      assertEquals(4, hashtableArray0.length);
      assertNotNull(resettableIterator0);
      
      int int0 = 5737;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 935, 5737);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 1843;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1843, 1843);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MapIterator<DataTruncation, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      int int0 = (-3137);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      assertNotNull(closure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ForClosure<DataTruncation> forClosure0 = new ForClosure<DataTruncation>((-3137), closure0);
      assertNotNull(forClosure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-3137), forClosure0.getCount());
      
      Collection<Closure<Object>> collection0 = hashMap0.values();
      assertFalse(collection0.contains(closure0));
      assertNotNull(collection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      IteratorUtils.apply((Iterator<DataTruncation>) mapIterator0, (Closure<? super DataTruncation>) forClosure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-3137), forClosure0.getCount());
      
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLClientInfoException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLNonTransientException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      IteratorUtils.apply(iterator0, (Closure<? super SQLClientInfoException>) closure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Closure must not be null", (-3137));
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("Closure must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-3137), sQLSyntaxErrorException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("kO", sQLSyntaxErrorException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("Closure must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-3137), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: kO", sQLNonTransientConnectionException0.toString());
      assertEquals("kO", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLNonTransientConnectionException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("Closure must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-3137), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: kO", sQLNonTransientConnectionException0.toString());
      assertEquals("kO", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("PrototypeCloneFactory: Clone method must be public", "G6$", "Closure must not be null", 383);
      assertNotNull(stackTraceElement0);
      assertEquals("PrototypeCloneFactory: Clone method must be public.G6$(Closure must not be null:383)", stackTraceElement0.toString());
      assertEquals("Closure must not be null", stackTraceElement0.getFileName());
      assertEquals(383, stackTraceElement0.getLineNumber());
      assertEquals("G6$", stackTraceElement0.getMethodName());
      assertEquals("PrototypeCloneFactory: Clone method must be public", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("_k|7.:[&Me", "", "", 2555);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      assertEquals("_k|7.:[&Me", stackTraceElement1.getClassName());
      assertEquals("", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(2555, stackTraceElement1.getLineNumber());
      assertEquals("_k|7.:[&Me.(:2555)", stackTraceElement1.toString());
      assertEquals("", stackTraceElement1.getMethodName());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("kO", "PrototypeCloneFactory: Clone method must be public", "G6$", (-2301));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement2);
      assertEquals("kO", stackTraceElement2.getClassName());
      assertEquals((-2301), stackTraceElement2.getLineNumber());
      assertEquals("kO.PrototypeCloneFactory: Clone method must be public(G6$)", stackTraceElement2.toString());
      assertEquals("G6$", stackTraceElement2.getFileName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("PrototypeCloneFactory: Clone method must be public", stackTraceElement2.getMethodName());
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", ";?0o", "0", (-2301));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertNotNull(stackTraceElement3);
      assertEquals((-2301), stackTraceElement3.getLineNumber());
      assertEquals("0", stackTraceElement3.getFileName());
      assertEquals(";?0o", stackTraceElement3.getMethodName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("", stackTraceElement3.getClassName());
      assertEquals(".;?0o(0)", stackTraceElement3.toString());
      
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      assertEquals(4, stackTraceElementArray0.length);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("Closure must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-3137), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: kO", sQLNonTransientConnectionException0.toString());
      assertEquals("kO", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Predicate<SQLTimeoutException> predicate0 = IdentityPredicate.identityPredicate(sQLTimeoutException0);
      assertNotNull(predicate0);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("Closure must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-3137), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: kO", sQLNonTransientConnectionException0.toString());
      assertEquals("kO", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("Closure must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-3137), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: kO", sQLNonTransientConnectionException0.toString());
      assertEquals("kO", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException("", sQLSyntaxErrorException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("Closure must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-3137), sQLSyntaxErrorException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, (-3137), (-83));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      OrderedMapIterator<SQLWarning, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLClientInfoException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLClientInfoException>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>(list0);
      assertNotNull(linkedList0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        linkedList0.pop();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("s\"t+/wt");
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Predicate must not be null");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode3);
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("y6hwq!kdHC");
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode4);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode((String) null);
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertNotNull(iIOMetadataNode5);
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      assertEquals(6, iIOMetadataNodeArray0.length);
      assertNotNull(objectArrayIterator0);
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) objectArrayIterator0, (Iterator<? extends IIOMetadataNode>) objectArrayIterator0, (Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      assertEquals(6, iIOMetadataNodeArray0.length);
      assertNotNull(zippingIterator0);
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("y6hwq!kdHC", (String) null, 0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("y6hwq!kdHC", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: y6hwq!kdHC", sQLFeatureNotSupportedException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("y6hwq!kdHC", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: y6hwq!kdHC", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransientConnectionException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(2650, true, true, 0, 2650, sQLTransientConnectionException0);
      assertNotNull(dataTruncation0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("y6hwq!kdHC", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: y6hwq!kdHC", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransientConnectionException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, 0, 2650);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation1);
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-1074), true, true, 2650, (-1), dataTruncation0);
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation2);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("y6hwq!kdHC", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: y6hwq!kdHC", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransientConnectionException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("01004", dataTruncation2.getSQLState());
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 35, (-1), dataTruncation2);
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertNotNull(dataTruncation3);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("y6hwq!kdHC", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: y6hwq!kdHC", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransientConnectionException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("01004", dataTruncation3.getSQLState());
      assertEquals(0, dataTruncation3.getErrorCode());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, true, true, 4, 0, dataTruncation1);
      assertFalse(dataTruncation1.equals((Object)dataTruncation2));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertFalse(dataTruncation1.equals((Object)dataTruncation3));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertNotNull(dataTruncation4);
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertEquals("01004", dataTruncation4.getSQLState());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      assertEquals(0, dataTruncation4.getErrorCode());
      
      dataTruncationArray0[4] = dataTruncation4;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertEquals(5, dataTruncationArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
  }
}
