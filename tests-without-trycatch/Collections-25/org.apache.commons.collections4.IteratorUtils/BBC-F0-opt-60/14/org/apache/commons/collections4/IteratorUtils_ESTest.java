/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:10:01 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1073731846);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(".s6)i!>v-Dwd.@oZ");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ListIterator must not be null", sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("K0+", "[]", sQLRecoverableException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("ListIterator must not be null", (String) null);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.map.AbstractMapDecorator", "oVRE0cS[6", 21);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("oVRE0cS[6", ".s6)i!>v-Dwd.@oZ", 0, sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (long) 21, (long) 0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) boundedIterator0, (Transformer<? super SQLDataException, String>) transformer0, "s`r-;xh';Q", "K0+", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null, false);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, SQLNonTransientConnectionException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) singletonIterator0, (Transformer<? super SQLException, ? extends SQLNonTransientConnectionException>) transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      arrayList0.add((BatchUpdateException) null);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) arrayList0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<BatchUpdateException>) resettableListIterator0;
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) listIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLDataException sQLDataException0 = new SQLDataException("-YTn2uzd4vO#", (Throwable) null);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("-YTn2uzd4vO#", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Predicate must not be null");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("0h)7%", "");
      sQLDataExceptionArray0[6] = sQLDataException6;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator0, (-3789));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Class<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(1817);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      IteratorUtils.getIterator(integer0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0, class0);
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      priorityQueue0.isEmpty();
      EqualPredicate.equalPredicate((Object) uniquePredicate0, (Equator<Object>) defaultEquator0);
      IteratorUtils.loopingIterator((Collection<? extends Closure<Object>>) priorityQueue0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[0] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[1] = class2;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("O|;V)", classArray0, sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<Predicate<Object>> iterator1 = IteratorUtils.objectGraphIterator((Predicate<Object>) instanceofPredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator1, (long) 1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'O|;V)' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 0, (-223));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, class0);
      assertNotSame(sQLInvalidAuthorizationSpecExceptionArray1, sQLInvalidAuthorizationSpecExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      int[] intArray0 = new int[1];
      intArray0[0] = 2166;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, batchUpdateException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>(batchUpdateException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) predicate1);
      predicateArray0[0] = predicate2;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate3 = FalsePredicate.falsePredicate();
      predicateArray0[2] = predicate3;
      Predicate<Object> predicate4 = TruePredicate.truePredicate();
      predicateArray0[3] = predicate4;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[4] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray1[0] = predicate4;
      predicateArray1[1] = (Predicate<Object>) anyPredicate0;
      predicateArray1[2] = predicate0;
      predicateArray1[3] = (Predicate<Object>) anyPredicate0;
      predicateArray1[4] = predicate2;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray1);
      predicateArray0[5] = (Predicate<Object>) allPredicate0;
      Transformer<Object, SQLInvalidAuthorizationSpecException>[] transformerArray0 = (Transformer<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Transformer.class, 0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory0 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLInvalidAuthorizationSpecException>) instantiateFactory0);
      IfTransformer<Object, SQLInvalidAuthorizationSpecException> ifTransformer0 = new IfTransformer<Object, SQLInvalidAuthorizationSpecException>(predicateArray0[5], transformer0, transformer0);
      SwitchTransformer<Object, SQLInvalidAuthorizationSpecException> switchTransformer0 = new SwitchTransformer<Object, SQLInvalidAuthorizationSpecException>(predicateArray0, transformerArray0, ifTransformer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) switchTransformer0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[]", "[]");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1, 1);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) hashSet0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) orderedIterator0, (Transformer<? super InstanceofPredicate, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("wJ");
      loopingListIterator0.add(iIOMetadataNode0);
      IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) loopingListIterator0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(42, 42);
      LoopingListIterator<SQLClientInfoException> loopingListIterator1 = new LoopingListIterator<SQLClientInfoException>(vector0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) loopingListIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "";
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.contains((Iterator<String>) singletonListIterator0, (Object) "");
      Object object0 = null;
      IteratorUtils.getIterator((Object) null);
      int int0 = 1;
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(singletonListIterator0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 3);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) resettableListIterator0;
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<StringTokenizer>) orderedIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M?o;x\"*";
      stringArray0[1] = "";
      stringArray0[2] = "Unsupported object type: null";
      stringArray0[3] = "3ns-adZHz";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 3, 3);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9");
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLTransientException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLTransientException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) singletonListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Boolean>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      UniquePredicate.uniquePredicate();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      assertNotNull(iterator0);
      
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.Category, Predicate<Object>> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) mapIterator1);
      Hashtable<BatchUpdateException, DataTruncation> hashtable0 = new Hashtable<BatchUpdateException, DataTruncation>();
      int[] intArray0 = new int[9];
      intArray0[1] = 2217;
      intArray0[2] = 25;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 3;
      intArray0[6] = (-901);
      intArray0[7] = 0;
      IteratorUtils.toString((Iterator<Locale.Category>) mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) sQLInvalidAuthorizationSpecExceptionArray0, 0, (-974));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) listIterator0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableListIterator0, 0L);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Locale.Category>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Z~yu(tvs");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLTimeoutException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayListIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.getIterator(uniquePredicate0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/zrUO", "/zrUO");
      DataTruncation dataTruncation0 = new DataTruncation(16, true, true, 16, (-3061), sQLTimeoutException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(16, false, true, 16, 93);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(16, true, true, (-756), 27, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(93, false, false, (-1089), 42, sQLTimeoutException0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-3061), false, false, 706, 3);
      dataTruncationArray0[4] = dataTruncation4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{}", (String) null, dataTruncation4);
      DataTruncation dataTruncation5 = new DataTruncation((-3061), false, true, 128, (-1089), sQLIntegrityConstraintViolationException0);
      dataTruncationArray0[5] = dataTruncation5;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 5);
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, ? extends IIOMetadataNode>) transformer0);
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 8);
      Integer integer0 = new Integer((-972));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      iteratorArray0[0] = (Iterator<Integer>) listIterator0;
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) listIterator0);
      iteratorArray0[1] = iterator0;
      int int0 = 10;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      iteratorArray0[3] = (Iterator<Integer>) loopingListIterator0;
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[6] = (Iterator<Integer>) resettableIterator0;
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(1539);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("COH|}2I:", "", hashMap0);
      sQLClientInfoException0.getLocalizedMessage();
      sQLClientInfoException0.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "No value has been returned yet", 1539, sQLClientInfoException0);
      IteratorUtils.getIterator(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 1539);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 6);
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[0] = closure0;
      ForClosure<Object> forClosure0 = new ForClosure<Object>(35, closure0);
      closureArray0[1] = (Closure<Object>) forClosure0;
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      closureArray0[2] = (Closure<Object>) transformerClosure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      closureArray0[3] = closure1;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate1;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      predicateArray0[2] = predicate2;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure1);
      closureArray0[4] = (Closure<Object>) switchClosure0;
      SwitchClosure<Object> switchClosure1 = new SwitchClosure<Object>(predicateArray0, closureArray0, switchClosure0);
      closureArray0[5] = (Closure<Object>) switchClosure1;
      Closure<Object> closure2 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      Closure<Object> closure3 = WhileClosure.whileClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) closure2, false);
      Closure<Object> closure4 = IfClosure.ifClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) closure3, (Closure<? super Object>) transformerClosure0);
      Closure<SQLNonTransientException> closure5 = IfClosure.ifClosure((Predicate<? super SQLNonTransientException>) predicate0, (Closure<? super SQLNonTransientException>) closure4);
      IfClosure<SQLNonTransientConnectionException> ifClosure0 = new IfClosure<SQLNonTransientConnectionException>(predicate0, closure5, transformerClosure0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) null, (Closure<? super SQLNonTransientConnectionException>) ifClosure0);
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      String string0 = "";
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 6);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classArray0[2] = class2;
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      classArray0[3] = class3;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      classArray0[4] = class4;
      Class<SQLRecoverableException> class5 = SQLRecoverableException.class;
      classArray0[5] = class5;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) closure4;
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, objectArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The parameter types must match the arguments
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.getIterator(predicate0);
      OrderedMapIterator<StringTokenizer, Iterator<HashSet<SQLWarning>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, Iterator<HashSet<SQLWarning>>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends Iterator<HashSet<SQLWarning>>>) orderedMapIterator0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      DataTruncation dataTruncation0 = new DataTruncation((-2271), false, false, 1539, 37);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, DataTruncation> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) andPredicate0, (Transformer<? super Object, ? extends DataTruncation>) transformer0, (Transformer<? super Object, ? extends DataTruncation>) transformer0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer1);
      Iterator<DataTruncation> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator1, (Predicate<? super DataTruncation>) andPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) null);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      ExceptionClosure.exceptionClosure();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1305), closure0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) listIterator0, (Closure<? super SQLNonTransientConnectionException>) forClosure0);
      OrderedMapIterator<SQLWarning, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(1539);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      UniquePredicate.uniquePredicate();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientConnectionException) null);
      Closure<SQLNonTransientConnectionException> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) listIterator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>(priorityQueue0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<Locale.Category, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UniquePredicate.uniquePredicate();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) null, (Collection<? super InstanceofPredicate>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      UniquePredicate.uniquePredicate();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("\"YuRE7U", "@sA($", true);
      IteratorUtils.getIterator(stringTokenizer0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("@sA($", "O21a%YvmD");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("UoIt5OZvC>(C5As#6S", clientInfoStatus0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UoIt5OZvC>(C5As#6S", sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("O21a%YvmD", hashMap0, sQLTimeoutException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      Iterator<SQLException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) mapIterator0, (Predicate<? super SQLException>) equalPredicate0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      EqualPredicate.equalPredicate(stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      ReverseListIterator<BatchUpdateException> reverseListIterator1 = new ReverseListIterator<BatchUpdateException>(stack0);
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) arrayDeque0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      IteratorUtils.loopingListIterator((List<String>) linkedList0);
      EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate.uniquePredicate();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLSyntaxErrorException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, (String) null, "", "3zK/foANNNB^u3T");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>(priorityQueue0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) priorityQueue1);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) null);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
      OrderedMapIterator<SQLWarning, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<SQLWarning> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLWarning>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      UniquePredicate.uniquePredicate();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator(class0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0, defaultEquator0);
      Iterator<SQLException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) mapIterator0, (Predicate<? super SQLException>) equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) arrayDeque0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      IteratorUtils.find((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      UniquePredicate.uniquePredicate();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("6,OBH~FMX?,8j.Kj");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{B9m(", "#W/U'=Z", 813);
      ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.isEmpty(resettableIterator0);
      TreeSet<Integer>[] treeSetArray0 = (TreeSet<Integer>[]) Array.newInstance(TreeSet.class, 2);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>();
      treeSetArray0[1] = treeSet1;
      ObjectArrayIterator<TreeSet<Integer>> objectArrayIterator0 = new ObjectArrayIterator<TreeSet<Integer>>(treeSetArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<TreeSet<Integer>>) objectArrayIterator0, (Predicate<? super TreeSet<Integer>>) predicate0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      TreeSet<Integer>[] treeSetArray0 = (TreeSet<Integer>[]) Array.newInstance(TreeSet.class, 7);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>();
      treeSetArray0[1] = treeSet1;
      TreeSet<Integer> treeSet2 = new TreeSet<Integer>();
      treeSetArray0[2] = treeSet2;
      TreeSet<Integer> treeSet3 = new TreeSet<Integer>();
      treeSetArray0[3] = treeSet3;
      TreeSet<Integer> treeSet4 = new TreeSet<Integer>();
      treeSetArray0[4] = treeSet4;
      TreeSet<Integer> treeSet5 = new TreeSet<Integer>();
      treeSetArray0[5] = treeSet5;
      TreeSet<Integer> treeSet6 = new TreeSet<Integer>();
      treeSetArray0[6] = treeSet6;
      ObjectArrayIterator<TreeSet<Integer>> objectArrayIterator0 = new ObjectArrayIterator<TreeSet<Integer>>(treeSetArray0);
      IteratorUtils.find((Iterator<TreeSet<Integer>>) objectArrayIterator0, (Predicate<? super TreeSet<Integer>>) predicate0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";hNG}&NB");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      sQLTimeoutException0.getLocalizedMessage();
      ConstantTransformer<SQLClientInfoException, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<SQLClientInfoException, SQLTimeoutException>(sQLTimeoutException0);
      UniquePredicate.uniquePredicate();
      IteratorUtils.size(orderedIterator0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLDataException> class1 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<InstanceofPredicate> class2 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) objectArrayIterator0, (long) 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) stack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.ExceptionFactory");
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      ResettableIterator<SQLException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) priorityQueue0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableIterator1, (Transformer<? super SQLException, String>) null, "org.apache.commons.collections4.functors.ExceptionFactory", "_'c.V]?p_[G<_(", "org.apache.commons.collections4.functors.ExceptionFactory");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MEeUTQ;v_j#/]h9H{");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<TreeSet<Integer>>) null, (Predicate<? super TreeSet<Integer>>) predicate0);
      UniquePredicate.uniquePredicate();
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer>(mapIterator0);
      HashMap<String, Stack<SQLInvalidAuthorizationSpecException>> hashMap0 = new HashMap<String, Stack<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>>(hashMap0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "o&", 14);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("o&", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException((String) null, "");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("o&", "suffix may not be null", (String) null, (-182));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLInvalidAuthorizationSpecException1.setStackTrace(stackTraceElementArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException((String) null);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("", (String) null);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 4);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<SQLException> predicate1 = UniquePredicate.uniquePredicate();
      assertNotSame(predicate1, predicate0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Closure must not be null", "[k&$7@IxP0u$GJEFNR", 100);
      sQLTimeoutException0.getLocalizedMessage();
      ConstantTransformer<SQLClientInfoException, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<SQLClientInfoException, SQLTimeoutException>(sQLTimeoutException0);
      UniquePredicate.uniquePredicate();
      IteratorUtils.size(resettableListIterator0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Closure must not be null", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTransientConnectionException0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      sQLTransientConnectionException0.printStackTrace();
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransientException>) predicate0);
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      UniquePredicate.uniquePredicate();
      IteratorUtils.toListIterator((Iterator<?>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 2410);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1));
      arrayList1.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayList1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractReferenceMap");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      IteratorUtils.size(resettableIterator0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<InstanceofPredicate>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer>(mapIterator0);
      HashMap<String, Stack<SQLInvalidAuthorizationSpecException>> hashMap0 = new HashMap<String, Stack<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<StringTokenizer>, StringTokenizer>) abstractMapIteratorDecorator0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      hashSet0.iterator();
      UniquePredicate.uniquePredicate();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<String>) entrySetMapIterator0;
      Stack<String> stack0 = new Stack<String>();
      ListIterator<String> listIterator0 = stack0.listIterator();
      iteratorArray0[1] = (Iterator<String>) listIterator0;
      iteratorArray0[2] = (Iterator<String>) entrySetMapIterator0;
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) listIterator0, 1L);
      iteratorArray0[3] = (Iterator<String>) skippingIterator0;
      iteratorArray0[4] = (Iterator<String>) entrySetMapIterator0;
      iteratorArray0[5] = (Iterator<String>) entrySetMapIterator0;
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) entrySetMapIterator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iteratorArray0[1]);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer integer0 = new Integer(1233);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer(1233);
      arrayList0.add(integer1);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedList<LinkedHashSet>>) null, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableIterator0, 1L);
      IteratorUtils.isEmpty(boundedIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("gYRr", "Wu<", 37, mockThrowable0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("gYRr", "");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("gYRr");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("w+G!I@HhfHXx<gmqah", "^R-1", 37);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("gYRr", "w+G!I@HhfHXx<gmqah", 43, sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("w+G!I@HhfHXx<gmqah");
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractLinkedMap", "Node must not be null", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("w+G!I@HhfHXx<gmqah", "Transformer must not be null", 37);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractLinkedMap", "L`3aIa]hb7UcpU", sQLFeatureNotSupportedException5);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-3972));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<SQLTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      UniquePredicate.uniquePredicate();
      int int0 = 29;
      Integer integer0 = new Integer(29);
      OrderedMapIterator<SQLRecoverableException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLDataException>) orderedMapIterator1);
      ListIterator<IIOMetadataNode> listIterator1 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator1, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "$NlLM", 100);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLTimeoutException0.setNextException(sQLDataException0);
      sQLTimeoutException0.getLocalizedMessage();
      ConstantTransformer<SQLClientInfoException, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<SQLClientInfoException, SQLTimeoutException>(sQLTimeoutException0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) transformer0, "", "", "");
      OrderedMapIterator<LinkedList<StringTokenizer>, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<StringTokenizer>, StringTokenizer>) orderedMapIterator0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = linkedHashSet0.iterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      NotNullPredicate.notNullPredicate();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("org.apache.commons.collections4.functors.MapTransformer");
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<String, String> factoryTransformer0 = new FactoryTransformer<String, String>(instantiateFactory0);
      String string0 = "s before the start of the array. ";
      IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) factoryTransformer0, "\"&\",7fS", "", "s before the start of the array. ");
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = hashSet0.iterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<SQLTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      UniquePredicate.uniquePredicate();
      Integer integer0 = new Integer(4164);
      OrderedMapIterator<SQLRecoverableException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLDataException>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.TruePredicate", "kY!m^]Ypm3L-:#e7");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) singletonIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "kY!m^]Ypm3L-:#e7", 181, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 4);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      InvokerTransformer.invokerTransformer("),ZgRU^LS3rOJH:PM", (Class<?>[]) classArray0, (Object[]) classArray0);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Integer integer0 = new Integer(2);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("),ZgRU^LS3rOJH:PM", (String) null, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 2, sQLNonTransientException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(batchUpdateException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 2);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) iterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) list0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("SNi3qd%/", "SNi3qd%/", 100);
      sQLTimeoutException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.bidimap.TreeBidiMap$Node", "ULY=O", 100, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLTransactionRollbackException0);
      ConstantTransformer<SQLClientInfoException, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<SQLClientInfoException, SQLTimeoutException>(sQLTimeoutException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator((SQLClientInfoException) null);
      Transformer<SQLException, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("X?eD9D&h");
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLTimeoutException>) transformer0);
      UniquePredicate.uniquePredicate();
      IteratorUtils.size(iterator0);
      EmptyMapIterator.emptyMapIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      OrderedMapIterator<BatchUpdateException, Transformer<LinkedList, PriorityQueue>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, 100);
      sQLTimeoutException0.spliterator();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, 0L, (long) 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "SNi3qd%/", 1, (-2385));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer>(mapIterator0);
      HashMap<String, Stack<SQLInvalidAuthorizationSpecException>> hashMap0 = new HashMap<String, Stack<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>>(hashMap0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<String>) entrySetMapIterator0, (Transformer<? super String, String>) transformer0, "cr)pS\"Qh!t>", "", "e~_5iim|-}]V4=");
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<StringTokenizer>, StringTokenizer>) abstractMapIteratorDecorator0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      String string0 = "org.apache.commons.collections4.functors.NullIsTruePredicate";
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = hashSet0.iterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      HashMap<SQLDataException, IIOMetadataNode> hashMap0 = new HashMap<SQLDataException, IIOMetadataNode>();
      EntrySetMapIterator<SQLDataException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, IIOMetadataNode>(hashMap0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) entrySetMapIterator0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("The transformer array must not be null", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The transformer array must not be null", sQLTransientException0);
      IteratorUtils.contains((Iterator<SQLNonTransientException>) zippingIterator0, (Object) sQLTransientConnectionException0);
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<EnumSet<Locale.Category>> listIteratorWrapper0 = new ListIteratorWrapper<EnumSet<Locale.Category>>(orderedIterator0);
      ListIteratorWrapper<EnumSet<Locale.Category>> listIteratorWrapper1 = new ListIteratorWrapper<EnumSet<Locale.Category>>(listIteratorWrapper0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 2);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.allOf(class0);
      enumSetArray0[1] = enumSet1;
      ObjectArrayListIterator<EnumSet<Locale.Category>> objectArrayListIterator0 = new ObjectArrayListIterator<EnumSet<Locale.Category>>(enumSetArray0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.Category>>) listIteratorWrapper1, (Iterator<? extends EnumSet<Locale.Category>>) objectArrayListIterator0);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(hashSet0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0, class1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, hashtable0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashtable0, sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashtable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException5;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException1;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      IteratorUtils.contains((Iterator<SQLNonTransientException>) zippingIterator0, (Object) zippingIterator0);
      InvokerTransformer.invokerTransformer("f'`a^@)t:s3LZ`q", (Class<?>[]) null, (Object[]) null);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("0)$0", hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException2;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      long long0 = (-2506L);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, (-2506L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer.invokerTransformer("ListIterator must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      NotNullPredicate.notNullPredicate();
      UniquePredicate<SQLTransientException> uniquePredicate0 = new UniquePredicate<SQLTransientException>();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, SQLIntegrityConstraintViolationException>[] transformerArray0 = (Transformer<Object, SQLIntegrityConstraintViolationException>[]) Array.newInstance(Transformer.class, 2);
      transformerArray0[0] = null;
      transformerArray0[1] = null;
      SwitchTransformer<SQLException, SQLIntegrityConstraintViolationException> switchTransformer0 = new SwitchTransformer<SQLException, SQLIntegrityConstraintViolationException>(predicateArray0, transformerArray0, transformerArray0[1]);
      IteratorUtils.objectGraphIterator((SQLException) sQLNonTransientException0, (Transformer<? super SQLException, ? extends SQLException>) switchTransformer0);
      UniquePredicate<SQLException> uniquePredicate1 = new UniquePredicate<SQLException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "OFhbp_F2T-;");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-2528), sQLNonTransientException0);
      linkedHashSet0.add(sQLFeatureNotSupportedException1);
      Iterator<SQLFeatureNotSupportedException> iterator0 = linkedHashSet0.iterator();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("ListIterator must not be null");
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Properties properties0 = new Properties();
      properties0.elements();
      IteratorUtils.getIterator(orderedIterator0);
      OrderedIterator<TreeSet<Integer>> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<TreeSet<Integer>>) orderedIterator1, (Predicate<? super TreeSet<Integer>>) predicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      sQLRecoverableException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("set() is not supported", sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        sQLTransientException0.initCause(sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.SQLTransientConnectionException
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 825;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null, 825, 825);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer.invokerTransformer("ListIterator must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      NotNullPredicate.notNullPredicate();
      UniquePredicate<SQLTransientException> uniquePredicate0 = new UniquePredicate<SQLTransientException>();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ListIterator must not be null";
      stringArray0[1] = "ListIterator must not be null";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("ListIterator must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) objectArrayIterator0, (Transformer<? super String, String>) transformer0, "EI=G4c!+Q9QUO[Z", "ListIterator must not be null", "ListIterator must not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'ListIterator must not be null' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "'3pa91ss[N ", (int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException("'3pa91ss[N ", batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 1, sQLDataException0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer.invokerTransformer("ListIterator must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      NotNullPredicate.notNullPredicate();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, SQLIntegrityConstraintViolationException>[] transformerArray0 = (Transformer<Object, SQLIntegrityConstraintViolationException>[]) Array.newInstance(Transformer.class, 0);
      SwitchTransformer<SQLException, SQLIntegrityConstraintViolationException> switchTransformer0 = new SwitchTransformer<SQLException, SQLIntegrityConstraintViolationException>(predicateArray0, transformerArray0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) null);
      IteratorUtils.objectGraphIterator((SQLException) sQLNonTransientException0, (Transformer<? super SQLException, ? extends SQLException>) switchTransformer0);
      int int0 = 1;
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      UniquePredicate.uniquePredicate();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) mapIterator0, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      int int1 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<String>) listIterator0, (Transformer<? super String, String>) transformer0, "", "e~_5iim|-}]V4=", "e~_5iim|-}]V4=");
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (Throwable) null);
      Integer integer0 = new Integer(1);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      UniquePredicate.uniquePredicate();
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException0;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 1);
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals("[java.sql.SQLTimeoutException: , java.sql.SQLTimeoutException: , java.sql.SQLTimeoutException: , java.sql.SQLTimeoutException: , java.sql.SQLTimeoutException: , java.sql.SQLTimeoutException: , java.sql.SQLTimeoutException: , java.sql.SQLTimeoutException: ]", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer>(mapIterator0);
      HashMap<String, Stack<SQLInvalidAuthorizationSpecException>> hashMap0 = new HashMap<String, Stack<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>>(hashMap0);
      ExceptionTransformer.exceptionTransformer();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";hNG}&NB");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      sQLTimeoutException0.getLocalizedMessage();
      ConstantTransformer<SQLClientInfoException, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<SQLClientInfoException, SQLTimeoutException>(sQLTimeoutException0);
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends SQLTimeoutException>) constantTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      UniquePredicate.uniquePredicate();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.singletonListIterator((SQLNonTransientConnectionException) null);
      ExceptionClosure.exceptionClosure();
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("B~");
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) objectArrayIterator0, 125);
      Predicate<SQLNonTransientException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) list0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((SQLNonTransientException) null);
      IteratorUtils.singletonIterator(boolean0);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("0)$0", hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashtable0, (Throwable) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      NotNullPredicate.notNullPredicate();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Integer integer0 = new Integer(4164);
      OrderedMapIterator<SQLRecoverableException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ListIterator must not be null", "ListIterator must not be null", sQLNonTransientException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) listIterator1, 328);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 327
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category1;
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      HashMap<IIOMetadataNode, SQLTimeoutException> hashMap0 = new HashMap<IIOMetadataNode, SQLTimeoutException>();
      EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException>(hashMap0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$KeySet", batchUpdateException0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTimeoutException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableListIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EmptyIterator.emptyIterator();
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer>(mapIterator0);
      HashMap<String, Stack<SQLInvalidAuthorizationSpecException>> hashMap0 = new HashMap<String, Stack<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>>(hashMap0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) entrySetMapIterator0, (Transformer<? super String, String>) transformer0, "org.apache.commons.collections4.iterators.LoopingListIterator", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(linkedList0);
      OrderedMapIterator<SQLNonTransientConnectionException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, String>(orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, String>) abstractOrderedMapIteratorDecorator0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) loopingListIterator0, (Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.contains((Iterator<SQLNonTransientException>) zippingIterator0, (Object) mapIterator0);
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<EnumSet<Locale.Category>> listIteratorWrapper0 = new ListIteratorWrapper<EnumSet<Locale.Category>>(orderedIterator0);
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.Category>>) listIteratorWrapper0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) zippingIterator1);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) loopingListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IteratorUtils.singletonIterator((SQLFeatureNotSupportedException) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 2401, (-423));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("ListIterator must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      NotNullPredicate.notNullPredicate();
      TransformedPredicate.transformedPredicate((Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0, (Predicate<? super SQLTransientException>) predicate0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate1;
      Transformer<Object, SQLIntegrityConstraintViolationException>[] transformerArray0 = (Transformer<Object, SQLIntegrityConstraintViolationException>[]) Array.newInstance(Transformer.class, 0);
      SwitchTransformer<SQLException, SQLIntegrityConstraintViolationException> switchTransformer0 = new SwitchTransformer<SQLException, SQLIntegrityConstraintViolationException>(predicateArray0, transformerArray0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) null);
      IteratorUtils.objectGraphIterator((SQLException) sQLNonTransientException0, (Transformer<? super SQLException, ? extends SQLException>) switchTransformer0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException> hashSet1 = new HashSet<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "ListIterator must not be null");
      hashSet1.add(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = hashSet1.iterator();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("ListIterator must not be null");
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("0qT*M9@EJ%P^{A_vxe", (String) null, (int[]) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", ")J8 v-@l%lS+1GPh#", (int[]) null, batchUpdateException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("F/c:KVXC", (String) null, 10, (int[]) null);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) iterator0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.singletonIterator((SQLFeatureNotSupportedException) null);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      IteratorUtils.size((Iterator<?>) null);
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category1;
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      HashMap<IIOMetadataNode, SQLTimeoutException> hashMap0 = new HashMap<IIOMetadataNode, SQLTimeoutException>();
      EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException>(hashMap0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTimeoutException0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) orderedIterator0, 0L, 0L);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) boundedIterator0);
      IteratorUtils.size(zippingIterator0);
      Iterable<String> iterable0 = IteratorUtils.asIterable((Iterator<? extends String>) orderedIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(iterable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 3);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) resettableListIterator0;
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>((StringTokenizer) null);
      iteratorArray0[1] = (Iterator<StringTokenizer>) singletonIterator0;
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<StringTokenizer>) orderedIterator0;
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      Iterator<Object> iterator1 = IteratorUtils.peekingIterator((Iterator<?>) iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 61;
      Integer integer0 = new Integer(61);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(61);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      IteratorUtils.arrayIterator(integerArray0);
      OrderedMapIterator<SQLRecoverableException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(priorityQueue0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(stack0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) loopingIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) loopingIterator0);
      iteratorArray0[1] = iterator0;
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator1);
      Iterator<BatchUpdateException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("ListIterator must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<SQLTransientException> predicate2 = NotNullPredicate.notNullPredicate();
      TransformedPredicate.transformedPredicate((Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0, (Predicate<? super SQLTransientException>) predicate0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) predicate2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      IteratorUtils.objectGraphIterator((SQLException) sQLNonTransientException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      Predicate<SQLException> predicate3 = new UniquePredicate<SQLException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = hashSet0.iterator();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("f-");
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.elements();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      IteratorUtils.toArray(iterator0);
      OrderedIterator<TreeSet<Integer>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<TreeSet<Integer>>) orderedIterator0, (Predicate<? super TreeSet<Integer>>) predicate0);
      String string1 = "org.apache.commons.collections4.IteratorUtils";
      String string2 = "org.apache.commons.collections4.iterators.EmptyOrderedIterator";
      int int0 = (-1342);
      String string3 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.IteratorUtils", "");
      sQLRecoverableException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.iterators.EmptyOrderedIterator", (-1342), sQLRecoverableException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.IteratorUtils", sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        sQLTransientException0.initCause(sQLRecoverableException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.SQLRecoverableException: org.apache.commons.collections4.IteratorUtils
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayList0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 6);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      classArray0[4] = class3;
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      classArray0[5] = class4;
      InvokerTransformer.invokerTransformer(" N", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<SQLTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      HashMap<Object, SQLTransientConnectionException> hashMap0 = new HashMap<Object, SQLTransientConnectionException>();
      Transformer<Object, SQLTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransientConnectionException>) hashMap0);
      TransformedPredicate.transformedPredicate((Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0, (Predicate<? super SQLTransientException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, (-3410));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 4);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      InvokerTransformer.invokerTransformer(" N", (Class<?>[]) classArray0, (Object[]) classArray0);
      NotNullPredicate.notNullPredicate();
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>((String) null, classArray0, classArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) allPredicate0);
      predicateArray0[0] = predicate0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator0);
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate2);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("z#/!S");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("_J*/O$z", "psRdAHUfUHEx", batchUpdateException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Collection must not be null", "_J*/O$z", (-2207), batchUpdateException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "]`!");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("z#/!S", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 69, (-2207));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      IteratorUtils.size((Iterator<?>) null);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) listIterator0);
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
      
      boolean boolean1 = IteratorUtils.contains((Iterator<SQLWarning>) null, (Object) properties0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 5575;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("G=", "G=", 7, intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("N+tUPRi%.?/", batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("G=", "", (-225), batchUpdateException1);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      IteratorUtils.contains((Iterator<SQLNonTransientException>) zippingIterator0, (Object) zippingIterator0);
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<EnumSet<Locale.Category>> listIteratorWrapper0 = new ListIteratorWrapper<EnumSet<Locale.Category>>(orderedIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.Category>>) listIteratorWrapper0, (Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) listIteratorWrapper0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator((SQLFeatureNotSupportedException) null);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$b{;|6V-!U8uL", "");
      Object object0 = null;
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NjPmC,Z7");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Entry does not exist: ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ListIterator must not be null", "Entry does not exist: ", sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("W)n@a5zJUnn/T&>", sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Transformer must not be null", 42);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Entry does not exist: ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("W)n@a5zJUnn/T&>");
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Transformer must not be null", sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.NullIsFalsePredicate", "Transformer must not be null", 42, sQLNonTransientConnectionException2);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer>(mapIterator0);
      HashMap<String, Stack<SQLInvalidAuthorizationSpecException>> hashMap0 = new HashMap<String, Stack<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<String, Stack<SQLInvalidAuthorizationSpecException>>(hashMap0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<String>) entrySetMapIterator0, (Transformer<? super String, String>) transformer0, "cr)pS\"Qh!t>", "", "e~_5iim|-}]V4=");
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<StringTokenizer>, StringTokenizer>) abstractMapIteratorDecorator0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.NullIsTruePredicate", (Throwable) null);
      Integer integer0 = new Integer(1);
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayIterator(integerArray0);
      OrderedMapIterator<SQLRecoverableException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLDataException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, 46);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 46
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", 1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 1, sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, true);
      int int0 = (-95);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) singletonIterator0, (-95));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      IteratorUtils.contains((Iterator<SQLNonTransientException>) zippingIterator0, (Object) zippingIterator0);
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<EnumSet<Locale.Category>> listIteratorWrapper0 = new ListIteratorWrapper<EnumSet<Locale.Category>>(orderedIterator0);
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) listIteratorWrapper0, (Iterator<? extends EnumSet<Locale.Category>>) listIteratorWrapper0, (Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) zippingIterator1);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator((SQLFeatureNotSupportedException) null);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "'3pa91ss[N ", (int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException("'3pa91ss[N ", batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 1, sQLDataException0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) arrayDeque0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, (-1874L), (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 5575;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("G=", "G=", 7, intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "G=", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("G=", "", intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      int[] intArray1 = new int[5];
      intArray1[0] = 5575;
      intArray1[1] = 7;
      intArray1[2] = 7;
      intArray1[3] = 5575;
      intArray1[4] = 7;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("52P:L!", "G=", 7, intArray1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(objectArrayListIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIteratorWrapper0);
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(priorityQueue0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(listIterator0, true);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Q,ZgRU^LS3rOk[:PM");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$whLMH=*Et^p*:^");
      StringTokenizer stringTokenizer0 = new StringTokenizer("$whLMH=*Et^p*:^");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) enumeration0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 4);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("eF#g");
      iIOMetadataNode0.getChildNodes();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>((String) null, classArray0, classArray0);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate2 = new UniquePredicate<Object>();
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) orderedIterator0, 0L, 0L);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) boundedIterator0);
      IteratorUtils.size(zippingIterator0);
      IteratorUtils.asIterable((Iterator<? extends String>) orderedIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 6);
      HashMap<IIOMetadataNode, SQLTimeoutException> hashMap0 = new HashMap<IIOMetadataNode, SQLTimeoutException>();
      EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException>(hashMap0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTimeoutException0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      NullIsTruePredicate<SQLTransientException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLTransientException>((Predicate<? super SQLTransientException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransientException>) nullIsTruePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      classArray0[4] = class1;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>((String) null, classArray0, classArray0);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      Hashtable<SQLIntegrityConstraintViolationException, LinkedList<String>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedList<String>>();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = hashtable0.keys();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion", "LM.");
      MockThrowable mockThrowable0 = new MockThrowable("ODKj");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLDataException0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) andPredicate0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 2);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion", classArray0, classArray0);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, andPredicate0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) orderedIterator0, (Predicate<? super SQLSyntaxErrorException>) transformedPredicate0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1064));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&^@Y#6Gmq'Mqef", "&^@Y#6Gmq'Mqef");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      Iterator<SQLDataException> iterator1 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator1, (Iterator<? extends SQLNonTransientException>) iterator1);
      IteratorUtils.contains((Iterator<SQLNonTransientException>) zippingIterator0, (Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      ArrayList<SQLClientInfoException> arrayList1 = new ArrayList<SQLClientInfoException>();
      arrayList0.containsAll(arrayList1);
      Integer integer1 = new Integer((-1203));
      arrayList0.add(integer1);
      arrayList0.add((Integer) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("?Z/}u<}nfx?g ^n", "3,H");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(867, false, false, 5, (-1203), sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("?Z/}u<}nfx?g ^n", dataTruncation0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 4);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ListIteratorWrapper does not support optional operations of ListIterator.", (int[]) null);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 31);
      assertFalse(list0.contains(batchUpdateException0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>((String) null, classArray0, classArray0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableIterator0, (Predicate<? super Integer>) predicate1);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException((String) null, (String) null, 2769);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("", (String) null, 2769, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException((String) null, (String) null, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 2769);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>((String) null, classArray0, classArray0);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<String, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<String, SQLSyntaxErrorException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLSyntaxErrorException>) mapIterator0);
      MapIterator<String, SQLSyntaxErrorException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertSame(mapIterator2, mapIterator1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = 0;
      iIOMetadataNode0.getAttributeNodeNS("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion", "LM.");
      iIOMetadataNode0.item(0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) singletonIterator0, 1);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 3149L);
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) skippingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator((SQLFeatureNotSupportedException) null);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 0;
      ArrayIterator<TreeSet<InstanceofPredicate>> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<TreeSet<InstanceofPredicate>>("", 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 61;
      Integer integer0 = new Integer(61);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(61);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      IteratorUtils.arrayIterator(integerArray0);
      OrderedMapIterator<SQLRecoverableException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLDataException>(orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) orderedMapIterator1, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      String string0 = "Q,ZgRU^LS3rOk[:PM";
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 4);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("Q,ZgRU^LS3rOk[:PM", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<SQLTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<SQLTransientException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0, (Predicate<? super SQLTransientException>) predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      IteratorUtils.objectGraphIterator((SQLException) sQLNonTransientException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      int int0 = 1976;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) class1, 1976);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = null;
      int int0 = 1453;
      int int1 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1453, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 7;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G=", "G=");
      sQLTimeoutException0.getLocalizedMessage();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      ConstantTransformer.constantTransformer(sQLTimeoutException1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 7, 7);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("&>HeH3%)`Vv>t#$W<h", ", ", true);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("&>HeH3%)`Vv>t#$W<h", ", ");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("&>HeH3%)`Vv>t#$W<h", ", ", true);
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer(", ", "Collection must not be null");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("&>HeH3%)`Vv>t#$W<h", "Collection must not be null");
      stringTokenizerArray0[4] = stringTokenizer4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = null;
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.normalize();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("7~2x.");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0, 0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0);
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&^@Y#6Gmq'Mqef", "&^@Y#6Gmq'Mqef");
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("&^@Y#6Gmq'Mqef", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", (-2390));
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("&>2iRw", "djZ)X13yLVT", (-619));
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "b6iD)`f+GSTLU<", sQLInvalidAuthorizationSpecException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("djZ)X13yLVT");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("4?(^gtC0", "4?(^gtC0", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException((String) null);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("djZ)X13yLVT", "4?(^gtC0", 417);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException(sQLRecoverableException2);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException("&>2iRw", "", 417, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 123, 381);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("cr)pS\"Qh!t>");
      iIOMetadataNode0.getNamespaceURI();
      int int0 = 1718;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 1718, 1718);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLClientInfoException0, true);
      IteratorUtils.isEmpty(singletonIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("[", "", (-1));
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("[", "[");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("[");
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator", "[", 2502);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("[", "org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator", sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-1), (-6));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      int int0 = (-2334);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0, (-2334));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(resettableIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<StringTokenizer>, StringTokenizer>(mapIterator0);
      MapIterator<LinkedList<StringTokenizer>, StringTokenizer> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      String string0 = "org.apache.commons.collections4.functors.NullIsTruePredicate";
      String string1 = "";
      Throwable throwable0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.NullIsTruePredicate", (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("n*h S`RaU<~gsZmO", "prefix may not be null", sQLTimeoutException0);
      String string2 = "}mx|9O";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("}mx|9O", "", sQLTimeoutException0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSet1.add(sQLFeatureNotSupportedException0);
      linkedHashSet1.iterator();
      IteratorUtils.isEmpty(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ArrayListIterator<Iterator<HashSet<SQLWarning>>> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Iterator<HashSet<SQLWarning>>>(sQLInvalidAuthorizationSpecException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(".WL8s");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName(".WL8s");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "$NlLM", 100);
      sQLTimeoutException0.getLocalizedMessage();
      Transformer<SQLClientInfoException, SQLTimeoutException> transformer0 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>((String) null, classArray0, classArray0);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) invokerTransformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      int int0 = (-3052);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, (-3052));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }
}
