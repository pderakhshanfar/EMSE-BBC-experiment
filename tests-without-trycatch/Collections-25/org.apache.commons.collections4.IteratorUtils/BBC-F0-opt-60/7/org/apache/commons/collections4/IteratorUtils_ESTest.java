/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 10:48:47 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 8);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("iZa6l", "iZa6l");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Array class must not be null", "Array class must not be null", 285, sQLInvalidAuthorizationSpecException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iZa6l", sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iZa6l", "iZa6l", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", "/IHfB");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("/IHfB", sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|]COYfwaP(||", "'zM11 !", sQLIntegrityConstraintViolationException4);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("", "(M \"<IN(C", sQLTimeoutException0);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<SQLException, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends Boolean>) hashtable0);
      TransformerPredicate<SQLIntegrityConstraintViolationException> transformerPredicate0 = new TransformerPredicate<SQLIntegrityConstraintViolationException>(transformer0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) transformerPredicate0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) listIterator0;
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator1;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException1);
      iteratorArray0[3] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator1;
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException7);
      iteratorArray0[4] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      iteratorArray0[5] = (Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0;
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException3);
      iteratorArray0[6] = (Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0;
      MapIterator<SQLIntegrityConstraintViolationException, ClientInfoStatus> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[7] = (Iterator<SQLIntegrityConstraintViolationException>) mapIterator0;
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0, (long) 285);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) boundedIterator0, (long) 285, (long) 285);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      loopingListIterator0.add(instanceofPredicate0);
      IteratorUtils.unmodifiableListIterator((ListIterator<InstanceofPredicate>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", (String) null, 2055);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "", (-2068), sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("zTR~8>");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) listIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) listIterator0, class0);
      Predicate<Locale.Category> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.getIterator(predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.getIterator(allPredicate0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException> linkedList1 = new LinkedList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException> linkedList2 = new LinkedList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException> linkedList3 = new LinkedList<SQLRecoverableException>();
      EmptyListIterator.resettableEmptyListIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLDataException0);
      stack0.add(sQLTimeoutException0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.collections4.collection.AbstractCollectionDecorator";
      stringArray0[1] = "s";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2631));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1000);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-206));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1579);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2631));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, 1, (-206));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray(iterator0, class0);
      Class<Object> class1 = Object.class;
      IteratorUtils.toArray(iterator0, class1);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet1 = new TreeSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet2 = new TreeSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet3 = new TreeSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate>[] treeSetArray0 = (TreeSet<InstanceofPredicate>[]) Array.newInstance(TreeSet.class, 0);
      IteratorUtils.arrayListIterator(treeSetArray0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException1 = new SQLDataException("", "", sQLDataException0);
      sQLDataExceptionArray0[0] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("9>o63O@R{t", "", (-1));
      sQLDataExceptionArray0[1] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("9>o63O@R{t", sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[3] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException5;
      int int0 = 1;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1);
      Closure<SQLDataException> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) resettableIterator0, (Closure<? super SQLDataException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedIterator<Predicate<Object>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedIterator0, class0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ServiceLoader<InstanceofPredicate>>) null, (Closure<? super ServiceLoader<InstanceofPredicate>>) closure0);
      SQLException sQLException0 = new SQLException("=F}j~3j$b(JSPK71", "geym");
      SQLWarning sQLWarning0 = new SQLWarning("geym", "geym", sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("geym", sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("geym", sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 10, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("List must not be null", "6@\"^K_;-Alb:hH 9R:", (Map<String, ClientInfoStatus>) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]88]zM", sQLClientInfoException0);
      sQLSyntaxErrorException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("]88]zM", "6@\"^K_;-Alb:hH 9R:", (-249), sQLClientInfoException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) hashSet0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      Predicate<SQLNonTransientException> predicate0 = IdentityPredicate.identityPredicate((SQLNonTransientException) sQLSyntaxErrorException1);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      UniquePredicate.uniquePredicate();
      MapIterator<SQLTransactionRollbackException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterable<SQLTransactionRollbackException> iterable0 = new PriorityQueue<SQLTransactionRollbackException>();
      IteratorUtils.size(mapIterator0);
      PriorityQueue<SQLTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 9);
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLTransientConnectionException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLTransientConnectionException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLTransientConnectionException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLTransientConnectionException> priorityQueue4 = new PriorityQueue<SQLTransientConnectionException>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLTransientConnectionException> priorityQueue5 = new PriorityQueue<SQLTransientConnectionException>();
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<SQLTransientConnectionException> priorityQueue6 = new PriorityQueue<SQLTransientConnectionException>((Collection<? extends SQLTransientConnectionException>) priorityQueue0);
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<SQLTransientConnectionException> priorityQueue7 = new PriorityQueue<SQLTransientConnectionException>();
      priorityQueueArray0[7] = priorityQueue7;
      PriorityQueue<SQLTransientConnectionException> priorityQueue8 = new PriorityQueue<SQLTransientConnectionException>();
      priorityQueueArray0[8] = priorityQueue8;
      IteratorUtils.arrayListIterator(priorityQueueArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      OrderedMapIterator<SQLTimeoutException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, SQLDataException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends SQLDataException>) orderedMapIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (-1L), 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, Class<SQLException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, Class<SQLException>>();
      hashtable0.keys();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot instantiate class: ", (String) null, (Throwable) null);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyIterator();
      OrderedMapIterator<BatchUpdateException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, Predicate<Object>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends Predicate<Object>>) orderedMapIterator0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, Class<SQLException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, Class<SQLException>>();
      hashtable0.keys();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot instantiate class: ", (String) null, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("'qLT6i", sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("'qLT6i", "remove() can only be called once after next()", 123, sQLSyntaxErrorException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException1);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) treeSet0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) listIterator0, class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("S!LH{G!zslJ:1", batchUpdateException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableIterator<LinkedList<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.singletonIterator(linkedList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(605, closure0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      ForClosure.forClosure((-677), (Closure<? super Object>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<LinkedList<SQLSyntaxErrorException>>) resettableIterator0, (Closure<? super LinkedList<SQLSyntaxErrorException>>) chainedClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OrderedIterator<Predicate<Object>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedIterator0, class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("C]jFv]Jz;AN'HsCa", batchUpdateException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableIterator<LinkedList<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.singletonIterator(linkedList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 8);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      Closure<Object> closure1 = ExceptionClosure.exceptionClosure();
      closureArray0[3] = closure1;
      closureArray0[4] = closure0;
      closureArray0[5] = closure0;
      closureArray0[6] = closure0;
      closureArray0[7] = closure0;
      Closure<Object> closure2 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(53, closure2);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      ForClosure.forClosure((-158), (Closure<? super Object>) closure1);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<LinkedList<SQLSyntaxErrorException>>) resettableIterator0, (Closure<? super LinkedList<SQLSyntaxErrorException>>) closure1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(1542);
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, Class<SQLException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, Class<SQLException>>();
      hashtable0.keys();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OrderedIterator<Predicate<Object>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedIterator0, class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("C]jFv]Jz;AN'HsCa", batchUpdateException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableIterator<LinkedList<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.singletonIterator(linkedList0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      ForClosure<Object> forClosure0 = new ForClosure<Object>(53, closure0);
      closureArray0[1] = (Closure<Object>) forClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      Closure<Object> closure1 = ForClosure.forClosure(53, (Closure<? super Object>) chainedClosure0);
      IteratorUtils.apply((Iterator<LinkedList<SQLSyntaxErrorException>>) resettableIterator0, (Closure<? super LinkedList<SQLSyntaxErrorException>>) closure1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2416));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(742);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(742);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1952);
      integerArray0[4] = integer4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2416));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(742);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(742);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1952);
      integerArray0[4] = integer4;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Integer>) resettableIterator0, (Closure<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException>(abstractOrderedMapIteratorDecorator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) arrayDeque0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      int[] intArray0 = new int[3];
      intArray0[0] = 2085;
      intArray0[1] = 1;
      intArray0[2] = 2293;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) singletonListIterator0, (Transformer<? super BatchUpdateException, String>) factoryTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1789, sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, sQLWarning0);
      MockThrowable mockThrowable0 = new MockThrowable("s9_bo2PjCVoLu}H1(~");
      DataTruncation dataTruncation0 = new DataTruncation(58, true, true, 1789, 2, mockThrowable0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientException0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      OrPredicate<DataTruncation> orPredicate0 = new OrPredicate<DataTruncation>(predicate1, predicate1);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      UniquePredicate.uniquePredicate();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLWarning>) predicate0);
      int[] intArray0 = new int[2];
      intArray0[0] = 58;
      intArray0[1] = 58;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(58, true, true, 1376, 58, batchUpdateException1);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) predicate0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException>(abstractOrderedMapIteratorDecorator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator0);
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) arrayDeque0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Closure<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
      IteratorUtils.emptyOrderedIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("R y2+");
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(resettableIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) listIteratorWrapper0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException>("v;u<_Wmin#V WYc#%lB", classArray0, classArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(class0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[1] = (Predicate<Object>) comparatorPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(onePredicate0, comparatorPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) andPredicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(invokerTransformer0, predicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) transformedPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1, 2768);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'v;u<_Wmin#V WYc#%lB' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1789, sQLNonTransientException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) singletonListIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer.invokerTransformer("0VEA45,<0|7&h", (Class<?>[]) classArray0, (Object[]) classArray0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) transformer0, "0VEA45,<0|7&h", "", "IiZPA-");
      IteratorUtils.asIterable((Iterator<?>) singletonListIterator0);
      EmptyListIterator.resettableEmptyListIterator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0, "|*fCjHl@\"q1F@xLB,,L", "", "");
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, (-4076));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer(1559);
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1559);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0, "Array class must not be null", "1<f!;", "1<f!;");
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      DataTruncation dataTruncation0 = new DataTruncation((-1769), false, true, 1750, 3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("InstantiateFactory: InstantiationException", dataTruncation0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("n", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 3, (-2637));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size((Iterator<?>) null);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(transformerPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) nullIsTruePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Enumeration<String> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration1, (Collection<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      NullPredicate.nullPredicate();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Hashtable<BatchUpdateException, IIOMetadataNode> hashtable0 = new Hashtable<BatchUpdateException, IIOMetadataNode>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.keys();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      StringValueTransformer.stringValueTransformer();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Object object0 = IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.size(resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.getIterator("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int int0 = 1744;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("W!*r0lqJdV&x-", "W!*r0lqJdV&x-", 1744, sQLSyntaxErrorException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      MapIterator<SQLTimeoutException, String> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) mapIterator1, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.size(resettableIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Iterator<Properties> iterator0 = null;
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedHashSet0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", true);
      IteratorUtils.emptyMapIterator();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate1);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer(1542);
      IteratorUtils.getIterator(integer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      MapIterator<SQLIntegrityConstraintViolationException, Object> mapIterator1 = IteratorUtils.emptyMapIterator();
      NullIsExceptionPredicate<SQLIntegrityConstraintViolationException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLIntegrityConstraintViolationException>(predicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) mapIterator1, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsExceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator((Object) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(">!yh");
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      MapIterator<SQLIntegrityConstraintViolationException, Object> mapIterator1 = IteratorUtils.emptyMapIterator();
      NullIsExceptionPredicate<SQLIntegrityConstraintViolationException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLIntegrityConstraintViolationException>(equalPredicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) mapIterator1, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsExceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.size(resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 4);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends SQLTransactionRollbackException>) mapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      iteratorArray0[0] = iterator1;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.IfTransformer");
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "khA4R@!LBPiX xJqM'3", 3719, sQLNonTransientException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) singletonListIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IteratorUtils.isEmpty(iterator0);
      ReverseListIterator<Properties> reverseListIterator0 = null;
//      try {
        reverseListIterator0 = new ReverseListIterator<Properties>((List<Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ReverseListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Object object0 = new Object();
      IteratorUtils.size(resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(linkedList0);
      reverseListIterator0.reset();
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) reverseListIterator0);
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Vector<Class<Integer>> vector0 = new Vector<Class<Integer>>();
      IteratorUtils.singletonIterator(vector0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties3;
      propertiesArray0[1] = properties5;
      propertiesArray0[2] = properties3;
      propertiesArray0[3] = properties3;
      propertiesArray0[4] = properties3;
      propertiesArray0[5] = properties1;
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0, "|*fCjHl@\"q1F@xLB,,L", "", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(":c>8mxLD{$,^wbEV;");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning(">!yh", "", 1789, sQLNonTransientException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0VEA45,<0|7&h");
      IteratorUtils.isEmpty(iterator0);
      Class<Properties> class0 = Properties.class;
      ReverseListIterator<Properties> reverseListIterator0 = null;
//      try {
        reverseListIterator0 = new ReverseListIterator<Properties>((List<Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ReverseListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(148);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      Vector<Class<Integer>> vector0 = new Vector<Class<Integer>>();
      IteratorUtils.singletonIterator(vector0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties(properties0);
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 148);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      StringValueTransformer.stringValueTransformer();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) orderedIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning(">!yh", "", 1789, sQLNonTransientException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) singletonListIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 1);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      classArray0[0] = class0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = "maxSize parameter must not be negative.";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) transformer0, "ecW3", "0VEA45,<0|7&h", ":");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLWarning' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1789, sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLNonTransientException0);
      EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) objectArrayIterator0, (Transformer<? super Properties, ? extends String>) transformer0);
      Class<Properties> class0 = Properties.class;
      IteratorUtils.toArray((Iterator<? extends Properties>) objectArrayIterator0, class0);
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) objectArrayIterator0);
      IteratorUtils.size(listIterator0);
      Iterator<SQLNonTransientException>[] iteratorArray0 = (Iterator<SQLNonTransientException>[]) Array.newInstance(Iterator.class, 4);
      Iterator<SQLNonTransientException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLFeatureNotSupportedException0);
      iteratorArray0[1] = (Iterator<SQLNonTransientException>) listIterator1;
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) listIterator1);
      iteratorArray0[2] = iterator1;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[4] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[6] = sQLNonTransientException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 1789, 8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.getIterator(sQLDataException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      IteratorUtils.isEmpty((Iterator<?>) null);
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1789, sQLNonTransientException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      MapIterator<SQLTimeoutException, String> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(iterator0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) mapIterator1, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
      MapIterator<SQLIntegrityConstraintViolationException, Object> mapIterator2 = IteratorUtils.emptyMapIterator();
      NullIsExceptionPredicate<SQLIntegrityConstraintViolationException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLIntegrityConstraintViolationException>(predicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) mapIterator2, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("T>");
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) constantTransformer0, "`1azx3@pB$Mf^@Ry0+W", "}hIBca", "}hIBca");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("}hIBca", "}hIBca}hIBca", 1284, sQLDataException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLRecoverableException0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.emptyMapIterator();
      NullIsExceptionPredicate<SQLIntegrityConstraintViolationException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLIntegrityConstraintViolationException>(predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("}hIBca", "}hIBca}hIBca", 1284);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator1 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, 1277L);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) boundedIterator0);
      iteratorArray0[0] = iterator0;
      OrderedMapIterator<SQLTransactionRollbackException, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      IteratorUtils.toString((Iterator<Object>) null);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, 2293);
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) list0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      SingletonListIterator<LinkedHashSet<SQLTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransientConnectionException>>(linkedHashSet0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 9);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[0] = class1;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>((String) null, classArray0, classArray0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) invokerTransformer0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) listIterator0, 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      StringValueTransformer.stringValueTransformer();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("|*fCjHl@\"q1F@xLB,,L", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|*fCjHl@\"q1F@xLB,,L", "@", 2639, sQLTransactionRollbackException0);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) singletonListIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) instanceofPredicate0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) vector0);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(listIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mAp&H6&VX+/");
      EmptyListIterator.emptyListIterator();
      StringValueTransformer.stringValueTransformer();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>(">kQ<:", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      Iterator<String> iterator2 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator1, (Transformer<? super Properties, ? extends String>) transformer0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator2);
      Stack<Object> stack0 = new Stack<Object>();
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) iterator2);
      Iterator<String> iterator3 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) list0);
      IteratorUtils.toList((Iterator<? extends String>) iterator3);
      IteratorUtils.loopingListIterator(list0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, 1381);
      Stack<SQLTimeoutException> stack1 = new Stack<SQLTimeoutException>();
      Stack<SQLTimeoutException> stack2 = new Stack<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack1);
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.emptyMapIterator();
      NullIsExceptionPredicate<SQLIntegrityConstraintViolationException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLIntegrityConstraintViolationException>(predicate1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Factory<SQLIntegrityConstraintViolationException> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      Transformer<DataTruncation, SQLIntegrityConstraintViolationException> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends SQLIntegrityConstraintViolationException>) factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends SQLIntegrityConstraintViolationException>) transformer1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 1);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) singletonIterator0;
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) iteratorArray0[0], (Iterator<? extends InstanceofPredicate>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) zippingIterator0;
      ZippingIterator<InstanceofPredicate> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) zippingIterator1, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0, "|*fCjHl@\"q1F@xLB,,L", "@", "@");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(":c>8mxLD{$,^wbEV;");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-105), (-105));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale locale0 = Locale.ITALIAN;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      OrderedMapIterator<String, ServiceLoader<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) treeSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((String[]) null, 1854, 1789);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0);
      String string0 = "|*fCjHl@\"q1F@xLB,,L";
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "@", "@", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 1);
      IteratorUtils.arrayIterator(enumSetArray0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class1;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      classArray0[3] = class1;
      classArray0[4] = class1;
      classArray0[5] = class1;
      classArray0[6] = class1;
      classArray0[7] = class1;
      classArray0[8] = class1;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>((String) null, classArray0, classArray0);
      IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) invokerTransformer0);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) reverseListIterator0, (Transformer<? super SQLTransientException, ? extends InstanceofPredicate>) invokerTransformer0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1789, sQLNonTransientException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("", classArray0, classArray0);
      IteratorUtils.objectGraphIterator((InstanceofPredicate) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) invokerTransformer0);
      ListIterator<InstanceofPredicate> listIterator0 = new SingletonListIterator<InstanceofPredicate>((InstanceofPredicate) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      SingletonListIterator<LinkedHashSet<SQLTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransientConnectionException>>(linkedHashSet0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 1);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[0] = class1;
      InvokerTransformer.invokerTransformer("*{*", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("maxSize parameter must not be negative.");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, (String) null, (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 1);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) zippingIterator0, (Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.Category>>) zippingIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Object object0 = new Object();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0, "|*fCjHl@\"q1F@xLB,,L", "@", "@");
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      int int0 = 1789;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("0VEA45,<0|7&h", "0VEA45,<0|7&h", (-2431), sQLNonTransientException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) singletonListIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      String string0 = "^8";
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[2] = class2;
      InvokerTransformer.invokerTransformer("^8", (Class<?>[]) classArray0, (Object[]) classArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("maxSize parameter must not be negative.");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) constantTransformer0, "^8", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      SingletonListIterator<LinkedHashSet<SQLTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransientConnectionException>>(linkedHashSet0);
      StringValueTransformer.stringValueTransformer();
      ResettableListIterator<SQLException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) null, "@", "@", "@");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*_/";
      stringArray0[1] = "*_/";
      stringArray0[2] = "*_/";
      stringArray0[3] = "*_/";
      stringArray0[4] = "*_/";
      stringArray0[5] = "!~XaM2\"xw";
      stringArray0[6] = "*_/";
      stringArray0[7] = "*_/";
      stringArray0[8] = "*_/";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(resettableIterator0);
      Iterator<String> iterator0 = new SingletonListIterator<String>("*_/");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) set0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableIterator0);
      IteratorUtils.loopingListIterator(list0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, (-3457));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      StringValueTransformer.stringValueTransformer();
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0, class0);
      Class<Properties> class1 = Properties.class;
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = null;
      iteratorArray0[1] = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Enumeration must not be null");
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iteratorArray0[0]);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedHashSet0);
      iteratorArray0[1] = iterator0;
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", false);
      iteratorArray0[2] = (Iterator<String>) singletonIterator0;
      MapIterator<String, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[3] = (Iterator<String>) mapIterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      SingletonListIterator<LinkedHashSet<SQLTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransientConnectionException>>(linkedHashSet0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("<:p|h/6,/EA:9", "ListIterator must not be null", 16);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 9);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[4] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[5] = class5;
      Class<SQLNonTransientException> class6 = SQLNonTransientException.class;
      classArray0[6] = class6;
      Class<SQLNonTransientException> class7 = SQLNonTransientException.class;
      classArray0[7] = class7;
      Class<SQLNonTransientException> class8 = SQLNonTransientException.class;
      classArray0[8] = class8;
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("ListIterator must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      Class<SQLNonTransientConnectionException> class9 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class9);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'ListIterator must not be null' on 'class java.sql.SQLNonTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) zippingIterator0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) set0);
      IteratorUtils.toList((Iterator<? extends String>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLException sQLException0 = new SQLException(":c>~8mxLD{$,^wbEV;", "", (-173), sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", sQLException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1);
      MapIterator<SQLIntegrityConstraintViolationException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      Transformer<SQLNonTransientException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ListIterator<LinkedHashSet<SQLTransientConnectionException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", "mY&wj<", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 315, 315, sQLTimeoutException0);
      IteratorUtils.contains((Iterator<LinkedHashSet<SQLTransientConnectionException>>) listIterator0, (Object) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      String string0 = "*_/";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*_/");
      IteratorUtils.emptyListIterator();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.getIterator(sQLDataException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 2085);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Transformer must not be null", "Transformer must not be null", "", 2);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("3", "Transformer must not be null", "", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("'2snotadabCBHZr[BC0", "", "3", (-2898));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "w-y+70:HI34_#65]", (String) null, (-2898));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "w-y+70:HI34_#65]", "", (-2898));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("3", "C=UBJ", "Array class must not be null", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      Object object0 = new Object();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(hashSet0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      DefaultEquator.defaultEquator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("'2snotadabCBHZr[BC0", "'2snotadabCBHZr[BC0", sQLDataException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ListIterator<LinkedHashSet<SQLTransientConnectionException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SQLException sQLException0 = new SQLException("", "n:U~Mb G*6", 1118);
      sQLTimeoutException0.initCause(sQLException0);
      DataTruncation dataTruncation0 = new DataTruncation(5, true, true, (-1609), (-2290), sQLTimeoutException0);
      IteratorUtils.contains((Iterator<LinkedHashSet<SQLTransientConnectionException>>) listIterator0, (Object) sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ArrayDeque<Integer>[]) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<SQLRecoverableException>[] linkedListArray0 = (LinkedList<SQLRecoverableException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLRecoverableException> linkedList1 = new LinkedList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException> linkedList2 = new LinkedList<SQLRecoverableException>();
      IteratorUtils.arrayIterator(linkedListArray0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate0;
      predicateArray0[8] = predicate0;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-142));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(linkedHashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransientConnectionException1, comparator0, comparatorPredicate_Criterion0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.iterators.PushbackIterator", "Estimated size must be greater than 0");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLWarning0, comparator1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate1);
      EmptyMapIterator.emptyMapIterator();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      String string0 = "org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", "mY&wj<", sQLTimeoutException0);
      IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer.invokerTransformer("node must not be null!", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string1 = "maxSize parameter must not be negative.";
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableListIterator0, (-70L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 10;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 10;
      longArray0[5] = (long) 10;
      longArray0[6] = (long) 10;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 10, longArray0, sQLRecoverableException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) singletonIterator0;
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<BatchUpdateException>) orderedIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) singletonIterator0);
      iteratorArray0[2] = iterator0;
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      Class<Properties> class1 = Properties.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) null, class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Object object0 = new Object();
      IteratorUtils.size(resettableListIterator0);
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.Category>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      enumSetArray0[0] = enumSet0;
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) zippingIterator0, (Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.Category>>) zippingIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Object object0 = new Object();
      String string0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      int int0 = 1789;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1789, sQLNonTransientException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) singletonListIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("0VEA45,<0|7&h", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) transformer0, "", "", "maxSize parameter must not be negative.");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '0VEA45,<0|7&h' on 'class java.sql.SQLWarning' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0);
      String string0 = "x";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("x");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("x", "x", true);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("x");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("x");
      stringTokenizerArray0[2] = stringTokenizer2;
      stringTokenizer1.nextToken("&bk$yI4t!oVUnh>?");
      stringTokenizer0.nextToken("' out of bounds for size '");
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0, (Iterator<? extends StringTokenizer>) objectArrayIterator0, (Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string1 = "Transformers must not be null";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Transformers must not be null", "Transformers must not be null", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException1.addSuppressed(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException1);
      sQLClientInfoException0.getStackTrace();
      IteratorUtils.emptyMapIterator();
      sQLClientInfoException1.setNextException(sQLClientInfoException0);
      IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0, 1789);
      MapIterator<SQLFeatureNotSupportedException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, Properties> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends Properties>) mapIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator1, 2124L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%AYo,3", "", 1789);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 1789);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataTruncation dataTruncation0 = new DataTruncation(1789, false, true, 1789, 1789);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, (-3740), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";NGUOW!w#>f?B2");
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) zippingIterator0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) set0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) iterator0);
      IteratorUtils.loopingListIterator(list0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, 2);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator1, (Predicate<? super SQLTimeoutException>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Hashtable<SQLNonTransientException, ArrayList>, LinkedHashSet<Class<String>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)iIOMetadataNode0.getChildNodes();
      iIOMetadataNode1.getUserObject();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<?>) mapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 1);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", "mY&wj<", sQLTimeoutException0);
      IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class2;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", classArray0, classArray0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) invokerTransformer0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>((Factory<? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0, defaultEquator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTimeoutException0, comparator0, comparatorPredicate_Criterion0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) comparatorPredicate0, comparator1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      predicateArray0[4] = predicate1;
      MapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicateArray0[3]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "M<h}WJ)2atS&+7HD@p", 10);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Entry does not exist: ", "", (-1175), sQLInvalidAuthorizationSpecException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Transformer must not be null");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, sQLNonTransientConnectionException0);
      sQLClientInfoException0.getSuppressed();
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", map1);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "Transformer must not be null", map0);
      MockFile mockFile0 = new MockFile("The predicate and transformer map must not be null");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      sQLNonTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(map1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 10;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<?>) mapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 1);
      IteratorUtils.singletonIterator(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyMapIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "", hashtable0);
      SQLWarning sQLWarning0 = new SQLWarning("CRug.JnPn", sQLClientInfoException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("CRug.JnPn", (String) null, 9, sQLWarning0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 1095, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<SQLRecoverableException>[] linkedListArray0 = (LinkedList<SQLRecoverableException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLRecoverableException> linkedList1 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLRecoverableException> linkedList2 = new LinkedList<SQLRecoverableException>();
      IteratorUtils.arrayIterator(linkedListArray0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, 100);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0, "|*fCjHl@\"q1F@xLB,,L", "@", "0VEA45,<0|7&h");
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator1 = new SingletonListIterator<Properties>(properties0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends InstanceofPredicate>) singletonIterator0, 4456L, (-4502L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0, "|*fCjHl@\"q1F@xLB,,L", "@", "0VEA45,<0|7&h");
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("y=");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("y=");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("org.apache.commons.collections4.functors.AbstractQuantifierPredicate");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      int int0 = (-1933);
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 10, (-1933));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0);
      Hashtable<DataTruncation, BatchUpdateException> hashtable0 = new Hashtable<DataTruncation, BatchUpdateException>();
      EntrySetMapIterator<DataTruncation, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, BatchUpdateException>(hashtable0);
      MapIterator<DataTruncation, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, BatchUpdateException>) entrySetMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends BatchUpdateException>) mapIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) resettableListIterator0, (-1494L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      ArrayListIterator<SQLException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLException>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>((Factory<? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0, defaultEquator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTimeoutException0, comparator0, comparatorPredicate_Criterion0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) comparatorPredicate0, comparator1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate1;
      predicateArray0[5] = predicate0;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) equalPredicate0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) anyPredicate0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      Object object0 = new Object();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(hashSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[0] = predicate0;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicateArray0[2] = predicate2;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashSet0, defaultEquator0);
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(predicateArray0[3]);
      predicateArray0[4] = (Predicate<Object>) equalPredicate1;
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(priorityQueue0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      predicateArray0[5] = (Predicate<Object>) comparatorPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[5]);
      predicateArray0[6] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<SQLException> predicate4 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate3);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate4);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyMapIterator();
      String string0 = "CRug.JnPn";
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(classArray0, 9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException> linkedList1 = new LinkedList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException> linkedList2 = new LinkedList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException>[] linkedListArray0 = (LinkedList<SQLRecoverableException>[]) Array.newInstance(LinkedList.class, 9);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList2;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedListArray0[6] = linkedList0;
      linkedListArray0[7] = linkedList1;
      LinkedList<SQLRecoverableException> linkedList3 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[8] = linkedList3;
      IteratorUtils.arrayIterator(linkedListArray0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MapIterator<ServiceLoader<Hashtable>, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      LinkedList<SQLRecoverableException>[] linkedListArray0 = (LinkedList<SQLRecoverableException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLRecoverableException> linkedList1 = new LinkedList<SQLRecoverableException>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLRecoverableException> linkedList2 = new LinkedList<SQLRecoverableException>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      linkedListArray0[2] = linkedList2;
      ResettableIterator<LinkedList<SQLRecoverableException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0);
      assertEquals(3, linkedListArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      List<EnumSet<Locale.Category>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, 100);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(resettableIterator1);
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator1, (Predicate<? super SQLTimeoutException>) predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(boolean0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      IteratorUtils.pushbackIterator((Iterator<?>) mapIterator0);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      int int0 = 0;
      IteratorUtils.arrayIterator(stringTokenizerArray0, 0, 0);
      IteratorUtils.emptyOrderedIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      SingletonIterator<EnumSet<Locale.Category>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.Category>>(enumSet0);
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) singletonIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0, (Collection<? super EnumSet<Locale.Category>>) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS((String) null, (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0, (Iterator<? extends StringTokenizer>) objectArrayIterator0, (Iterator<? extends StringTokenizer>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) zippingIterator0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) set0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) iterator0);
      IteratorUtils.loopingListIterator(list0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, 2);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator1, (Predicate<? super SQLTimeoutException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) zippingIterator0);
      assertNotNull(enumeration0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) set0);
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(iterator0);
      
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) iterator0);
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) zippingIterator0);
      assertNotNull(enumeration0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      int int0 = 1206;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, (-2809), 1206);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ListIterator<LinkedHashSet<SQLTransientConnectionException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", sQLTimeoutException0.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(2809, false, true, 315, (-1609), sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", sQLTimeoutException0.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<LinkedHashSet<SQLTransientConnectionException>>) listIterator0, (Object) dataTruncation0);
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", sQLTimeoutException0.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      BoundedIterator<EnumSet<Locale.Category>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.Category>>) listIterator0, 0L);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(boundedIterator0);
      
      int int0 = 1789;
      List<EnumSet<Locale.Category>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) boundedIterator0, 1789);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int1 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) boundedIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      assertNotNull(transformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = null;
      int int0 = 3061;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 3061);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableListIterator<HashSet<Properties>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(iterable0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterable0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<SQLClientInfoException>, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("XD?t");
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: XD?t", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("XD?t", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      int int0 = 4066;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0, 4066);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<Transformer<ArrayList, IIOMetadataNode>, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "=", 584, hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(584, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("=", sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, (String) null, hashtable0, sQLClientInfoException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(584, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("=", sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNotNull(sQLClientInfoException2);
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable0);
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException3.toString());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("", sQLClientInfoException3.getMessage());
      assertNotNull(sQLClientInfoException3);
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashtable0, sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException4.getMessage());
      assertNull(sQLClientInfoException4.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException: ", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertNotNull(sQLClientInfoException4);
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("=", "", hashtable0);
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("=", sQLClientInfoException5.getMessage());
      assertEquals("", sQLClientInfoException5.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: =", sQLClientInfoException5.toString());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertNotNull(sQLClientInfoException5);
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertNull(sQLClientInfoException6.getMessage());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException6.toString());
      assertNull(sQLClientInfoException6.getSQLState());
      assertNotNull(sQLClientInfoException6);
      
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException(hashtable0, sQLClientInfoException2);
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException5));
      assertEquals(0, sQLClientInfoException7.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException", sQLClientInfoException7.toString());
      assertNull(sQLClientInfoException7.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException7.getMessage());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(584, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("=", sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNotNull(sQLClientInfoException7);
      
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException((String) null, "o4CwRWR", 100, hashtable0, sQLClientInfoException4);
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException5));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(sQLClientInfoException8.getMessage());
      assertEquals(100, sQLClientInfoException8.getErrorCode());
      assertEquals("o4CwRWR", sQLClientInfoException8.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException8.toString());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException4.getMessage());
      assertNull(sQLClientInfoException4.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException: ", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertNotNull(sQLClientInfoException8);
      
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 246, (-1010));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MapIterator<String, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<String, Object> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) mapIterator1);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      int int0 = (-1);
      int int1 = 1500;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringTokenizerArray0, (-1), 1500);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0);
      assertNotNull(iterator0);
      
      Hashtable<DataTruncation, BatchUpdateException> hashtable0 = new Hashtable<DataTruncation, BatchUpdateException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<DataTruncation, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, BatchUpdateException>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      MapIterator<DataTruncation, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, BatchUpdateException>) entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(mapIterator0);
      
      MapIterator<DataTruncation, BatchUpdateException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends BatchUpdateException>) mapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      assertNotNull(mapIterator1);
      
      Iterator<DataTruncation> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) mapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      assertNotNull(iterator1);
      
      Iterator<DataTruncation> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) iterator1);
      assertFalse(iterator2.equals((Object)iterator1));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      assertNotNull(iterator2);
      
      OrderedIterator<SQLTransientException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      String string0 = "org.apache.commons.collections4.iterators.ArrayIterator";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.ArrayIterator", "org.apache.commons.collections4.iterators.ArrayIterator", sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.ArrayIterator", sQLTimeoutException0.getMessage());
      assertEquals("org.apache.commons.collections4.iterators.ArrayIterator", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.iterators.ArrayIterator", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      PipedOutputStream pipedOutputStream0 = null;
//      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 894);
      assertEquals(894, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Array class must not be null", "Array class must not be null", 894, sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals(894, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Array class must not be null", sQLTransactionRollbackException1.toString());
      assertEquals(894, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("Array class must not be null", sQLTransactionRollbackException1.getMessage());
      assertEquals("Array class must not be null", sQLTransactionRollbackException1.getSQLState());
      assertNotNull(sQLTransactionRollbackException1);
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", "Array class must not be null", sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertEquals(894, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("Array class must not be null", sQLTransactionRollbackException2.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLTransactionRollbackException2.getMessage());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLTransactionRollbackException2.toString());
      assertNotNull(sQLTransactionRollbackException2);
      
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException3.toString());
      assertNull(sQLTransactionRollbackException3.getSQLState());
      assertNull(sQLTransactionRollbackException3.getMessage());
      assertEquals(0, sQLTransactionRollbackException3.getErrorCode());
      assertNotNull(sQLTransactionRollbackException3);
      
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("Array class must not be null");
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException3));
      assertEquals("Array class must not be null", sQLTransactionRollbackException4.getMessage());
      assertEquals(0, sQLTransactionRollbackException4.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Array class must not be null", sQLTransactionRollbackException4.toString());
      assertNull(sQLTransactionRollbackException4.getSQLState());
      assertNotNull(sQLTransactionRollbackException4);
      
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "", 894, sQLTransactionRollbackException1);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException1));
      assertEquals(894, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Array class must not be null", sQLTransactionRollbackException1.toString());
      assertEquals(894, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("Array class must not be null", sQLTransactionRollbackException1.getMessage());
      assertEquals("Array class must not be null", sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException5.getSQLState());
      assertEquals("", sQLTransactionRollbackException5.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException5.toString());
      assertEquals(894, sQLTransactionRollbackException5.getErrorCode());
      assertNotNull(sQLTransactionRollbackException5);
      
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("", "", 894);
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException0));
      assertEquals("", sQLTransactionRollbackException6.getMessage());
      assertEquals("", sQLTransactionRollbackException6.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException6.toString());
      assertEquals(894, sQLTransactionRollbackException6.getErrorCode());
      assertNotNull(sQLTransactionRollbackException6);
      
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException(sQLTransactionRollbackException5);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException2));
      assertEquals(894, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Array class must not be null", sQLTransactionRollbackException1.toString());
      assertEquals(894, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("Array class must not be null", sQLTransactionRollbackException1.getMessage());
      assertEquals("Array class must not be null", sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException5.getSQLState());
      assertEquals("", sQLTransactionRollbackException5.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException5.toString());
      assertEquals(894, sQLTransactionRollbackException5.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException7.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException7.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException7.getMessage());
      assertNull(sQLTransactionRollbackException7.getSQLState());
      assertNotNull(sQLTransactionRollbackException7);
      
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 3);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertEquals(3, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertNotNull(objectArrayIterator0);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) objectArrayIterator0);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertEquals(3, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) listIterator0, (-1404));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1404
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Hashtable<Properties, String>[] hashtableArray0 = (Hashtable<Properties, String>[]) Array.newInstance(Hashtable.class, 3);
      Hashtable<Properties, String> hashtable0 = new Hashtable<Properties, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      hashtableArray0[0] = hashtable0;
      Hashtable<Properties, String> hashtable1 = new Hashtable<Properties, String>();
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      hashtableArray0[1] = hashtable1;
      Hashtable<Properties, String> hashtable2 = new Hashtable<Properties, String>();
      assertTrue(hashtable2.equals((Object)hashtable1));
      assertTrue(hashtable2.equals((Object)hashtable0));
      assertTrue(hashtable2.isEmpty());
      assertEquals(0, hashtable2.size());
      assertNotNull(hashtable2);
      
      hashtableArray0[2] = hashtable2;
      ResettableListIterator<Hashtable<Properties, String>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashtableArray0);
      assertEquals(3, hashtableArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) arrayDeque0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      assertNotNull(resettableIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      assertNotNull(enumeration0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(iterator0);
      
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("(this Map)", true);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      MapIterator<String, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Document document0 = iIOMetadataNode0.getOwnerDocument();
      assertNull(document0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Predicate<BatchUpdateException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super BatchUpdateException>>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(predicate0);
      
      PredicateTransformer<BatchUpdateException> predicateTransformer0 = new PredicateTransformer<BatchUpdateException>(predicate0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(predicateTransformer0);
      
      Boolean boolean0 = predicateTransformer0.transform((BatchUpdateException) null);
      assertTrue(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(boolean0);
      
      ConstantTransformer<Boolean, Boolean> constantTransformer0 = new ConstantTransformer<Boolean, Boolean>(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(constantTransformer0);
      
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) constantTransformer0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Document document0 = iIOMetadataNode0.getOwnerDocument();
      assertNull(document0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(sQLNonTransientConnectionExceptionArray0);
      
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Iterator<SQLException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      assertNotNull(iterator1);
      
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(resettableIterator0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      int int0 = 0;
      int int1 = 705;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 0, 705);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "I?CJT}'Z6@S&axG)/", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "Invalid map index: ", 1551, sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "[", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException((String) null, "", 2528, sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("I?CJT}'Z6@S&axG)/", "[", sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 2528, 1551);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Integer integer0 = new Integer((-3687));
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("L<");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("L<", (String) null, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException((String) null);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // You must invoke setComparator() to set a comparator first.
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyMapIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "", hashtable0);
      SQLWarning sQLWarning0 = new SQLWarning("CRug.JnPn", sQLClientInfoException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("CRug.JnPn", (String) null, 9, sQLWarning0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNode0.setUserObject(iIOMetadataNode1);
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.insertBefore((Node) null, (Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // newChild == null!
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int int0 = (-2647);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0, (-2647));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -2647
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0, "|*fCjHl@\"q1F@xLB,,L", "@", "@");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator1 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator1, 6);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 5
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      int int0 = (-1742);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, (-1742));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) orderedMapIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      arrayList0.add(locale_Category0);
      IteratorUtils.loopingListIterator((List<Locale.Category>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 2028);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLDataException>) null, (Object) null);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) resettableListIterator0, 0L);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLDataException sQLDataException0 = new SQLDataException("Closure must not be null", "InvokerTransformer: The method '", (-360));
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Closure must not be null", sQLDataException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("Closure must not be null");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("Closure must not be null");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("InvokerTransformer: The method '");
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("InvokerTransformer: The method '", "");
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      int[] intArray0 = new int[9];
      intArray0[0] = 633;
      intArray0[1] = 633;
      intArray0[2] = 0;
      intArray0[3] = 1864;
      intArray0[4] = 633;
      intArray0[5] = 633;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 633;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1864, 633, batchUpdateException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, false, 1864, (-1473));
      dataTruncationArray0[1] = dataTruncation1;
      IteratorUtils.arrayListIterator(dataTruncationArray0, 0);
      StringTokenizer stringTokenizer0 = null;
//      try {
        stringTokenizer0 = new StringTokenizer((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1725), (-1725));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }
}
