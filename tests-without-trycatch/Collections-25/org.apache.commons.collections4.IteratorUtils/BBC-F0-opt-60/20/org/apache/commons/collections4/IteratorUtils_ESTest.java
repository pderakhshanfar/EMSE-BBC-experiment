/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 03:52:22 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) singletonIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) null, "Array class must not be null", "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Locale.Category>) singletonListIterator0, (Predicate<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1`Z}|9($^fW`6");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 497);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.getIterator("x$");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("D>G/+\"iVY]o.", "a,", (-3323), (Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("%", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("R#2L", "D>G/+\"iVY]o.", (-3323), sQLNonTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException((String) null, "%", 364);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("D>G/+\"iVY]o.", "");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1363);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "org.apache.commons.collections4.bidimap.AbstractDualBidiMap", 44);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      classArray0[5] = class1;
      InvokerTransformer<Object, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransactionRollbackException>("suffix may not be null", classArray0, classArray0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) invokerTransformer0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>((Predicate<? super SQLException>) null);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Predicate<? super SQLTransactionRollbackException>) nullIsExceptionPredicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'suffix may not be null' on 'class java.sql.SQLTransactionRollbackException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 8, 0);
      dataTruncation0.getNextWarning();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) null, (Equator<SQLException>) defaultEquator0);
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 8, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(classArray0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FactoryTransformer<SQLTransactionRollbackException, String> factoryTransformer0 = new FactoryTransformer<SQLTransactionRollbackException, String>((Factory<? extends String>) null);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) orderedMapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) factoryTransformer0, "2I1F[N5iPAlz", "2I1F[N5iPAlz", "DycJ*ny9vg&, ");
      OrderedMapIterator<SQLRecoverableException, SQLNonTransientException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLNonTransientException>(orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLRecoverableException, ? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 2576, sQLTransientException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLFeatureNotSupportedException0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<LinkedList<TreeSet>>) iterator0, (Predicate<? super LinkedList<TreeSet>>) comparatorPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, 0L);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) boundedIterator0, class0);
      IteratorUtils.getIterator(class0);
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyListIterator.resettableEmptyListIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableListIterator0, 3302);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 1, 3302);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Properties>) null, 2579);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "ListIterator must not be null";
      IteratorUtils.getIterator("ListIterator must not be null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<SQLDataException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Predicate<? super SQLDataException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.isEmpty(zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DataTruncation dataTruncation0 = new DataTruncation(8, true, true, 8, 8);
      dataTruncation0.getNextWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "6b6+(`9U*");
      sQLTransientConnectionException0.initCause((Throwable) null);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, 3185);
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2935), false, true, (-2935), (-2935));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-2935), false, false, 354, (-2935), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-2935), false, true, 784, 0);
      dataTruncationArray0[2] = dataTruncation2;
      dataTruncationArray0[3] = dataTruncation0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) ifTransformer0, "", "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("uc,<3mAw~pf-~");
      IteratorUtils.getIterator(iIOMetadataNode1);
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      Hashtable<Object, SQLNonTransientException> hashtable0 = new Hashtable<Object, SQLNonTransientException>();
      Transformer<Object, SQLNonTransientException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientException>) hashtable0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`opme$@#SrHoVYit}", "uc,<3mAw~pf-~", sQLIntegrityConstraintViolationException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("uc,<3mAw~pf-~", "`opme$@#SrHoVYit}");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("uc,<3mAw~pf-~");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("The transformer array must not contain a null transformer, index ", (String) null, 10, sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<TreeSet<HashMap>>) objectArrayListIterator0, (Closure<? super TreeSet<HashMap>>) closure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Hashtable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")", "", (-1));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(")", "", (-1), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("ExceptionFactory invoked", "", (-1700));
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Object) sQLInvalidAuthorizationSpecException2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLTimeoutException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException((String) null, (String) null, 1892);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLWarning sQLWarning0 = new SQLWarning("p6S\"X;QV^g1ZpA_S", "z=tm\"", sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLWarning0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("z=tm\"", sQLTransactionRollbackException3);
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("`-><_s!", "z=tm\"");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) resettableListIterator0);
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (long) 1892, 285L);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) boundedIterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException3);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iteratorArray0[0]);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("FxC@d");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super SQLTransactionRollbackException, String>) constantTransformer0, "F?dhtb(", (String) null, "p6S\"X;QV^g1ZpA_S");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, ArrayDeque<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2935), true, true, (-2935), (-2935));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncation0.fillInStackTrace();
      DataTruncation dataTruncation1 = new DataTruncation((-2935), true, false, 354, (-2935), dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLDataException sQLDataException0 = new SQLDataException("", "Y8w.sy#&<%z+t!`");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedIterator0, class0);
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<Object, SQLNonTransientException> hashtable0 = new Hashtable<Object, SQLNonTransientException>();
      Transformer<Object, SQLNonTransientException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientException>) hashtable0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<TreeSet<HashMap>>) orderedIterator0, (Closure<? super TreeSet<HashMap>>) closure0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAll((Iterator<Class<String>>) null, (Predicate<? super Class<String>>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2935), true, true, (-2935), (-2935));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-2935), true, false, 354, (-2935), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-2935), false, true, 784, 0);
      dataTruncationArray0[2] = dataTruncation2;
      dataTruncationArray0[3] = dataTruncation0;
      DataTruncation dataTruncation3 = new DataTruncation((-2935), false, true, 784, 354);
      dataTruncationArray0[4] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-2935), false, false, (-2585), 24);
      dataTruncationArray0[5] = dataTruncation4;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      dataTruncation0.getSuppressed();
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) objectArrayListIterator0);
      IteratorUtils.get(iterator0, 0);
      objectArrayListIterator0.reset();
      EmptyListIterator.resettableEmptyListIterator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedIterator0, class0);
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<Object, SQLNonTransientException> hashtable0 = new Hashtable<Object, SQLNonTransientException>();
      Transformer<Object, SQLNonTransientException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientException>) hashtable0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<TreeSet<HashMap>>) orderedIterator0, (Closure<? super TreeSet<HashMap>>) closure0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLDataException1);
      SQLDataException sQLDataException3 = new SQLDataException("^d", "NB'", sQLTransientException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("fromIndex(", "", sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator");
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("", "|di*; .2y");
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("NB'", "Y8w.sy#&<%z+t!`");
      sQLDataExceptionArray0[8] = sQLDataException8;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      Hashtable<Object, SQLNonTransientException> hashtable0 = new Hashtable<Object, SQLNonTransientException>();
      Transformer<Object, SQLNonTransientException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientException>) hashtable0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<TreeSet<HashMap>>) null, (Closure<? super TreeSet<HashMap>>) closure0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, 0L);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) boundedIterator0, class0);
      IteratorUtils.getIterator(class0);
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<Object, SQLNonTransientException> hashtable0 = new Hashtable<Object, SQLNonTransientException>();
      Transformer<Object, SQLNonTransientException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientException>) hashtable0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<TreeSet<HashMap>>) boundedIterator0, (Closure<? super TreeSet<HashMap>>) closure0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("Iterator must not be null", "R#r&P1yY~", 0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("org.apache.commons.collections4.IteratorUtils", "");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "/92,", "", "org.apache.commons.collections4.IteratorUtils");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "{\\L%+]uJxDT@Tq\\`7";
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("{L%+]uJxDT@Tq`7");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("yJb\"XhpRyzdDQ", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("{L%+]uJxDT@Tq`7");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("yJb\"XhpRyzdDQ", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      int int0 = 61;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("Index: ", "yJb\"XhpRyzdDQ", 61, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null, (Collection<? super SQLInvalidAuthorizationSpecException>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 603);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(vector0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) loopingIterator0);
      int int0 = new Integer(603);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(1414, false, false, 784, 1414);
      DataTruncation dataTruncation1 = new DataTruncation(784, false, false, (-2459), 784);
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>((-2459));
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      EmptyListIterator.emptyListIterator();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) uniquePredicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, ArrayDeque<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransactionRollbackException, ArrayDeque<SQLInvalidAuthorizationSpecException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = "";
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) mapIterator1, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "", "");
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, ArrayDeque<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("_");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) arrayDeque0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(stack0);
      linkedList0.add((SQLDataException) null);
      linkedList0.removeFirstOccurrence(resettableIterator0);
      IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(784, false, true, 825, 1414);
      dataTruncation0.getStackTrace();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>((-359));
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      EmptyListIterator.emptyListIterator();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) uniquePredicate0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2935), true, true, (-2935), (-2935));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-2935), true, true, 368, (-2935), dataTruncation0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(dataTruncation0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientConnectionException0, (Equator<Object>) defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsExceptionPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) notPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, ArrayDeque<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(3530, true, true, 3530, 1073741824);
      DataTruncation dataTruncation1 = new DataTruncation(1073741824, true, true, 4, 824, dataTruncation0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      dataTruncationArray0[0] = dataTruncation1;
      dataTruncationArray0[1] = dataTruncation1;
      dataTruncationArray0[2] = dataTruncation1;
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 1073741824);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, ArrayDeque<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(3530, true, true, 3530, 1073741824);
      DataTruncation dataTruncation1 = new DataTruncation(1073741824, true, true, 3530, 824, dataTruncation0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) priorityQueue0);
      InvokerTransformer<SQLException, SQLTimeoutException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTimeoutException>("o'C'cxM(66M.V)\"", (Class<?>[]) null, (Object[]) null);
      InvokerTransformer.invokerTransformer("&olk8", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<String> class0 = String.class;
      SingletonIterator<Class<String>> singletonIterator0 = new SingletonIterator<Class<String>>(class0);
      Class<Object> class1 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      IteratorUtils.matchesAll((Iterator<Class<String>>) singletonIterator0, (Predicate<? super Class<String>>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, 0L);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) boundedIterator0, class0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>(588);
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      ExceptionTransformer.exceptionTransformer();
      ResettableListIterator<Class<String>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Class<String>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Class<String>>) resettableListIterator0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      IteratorUtils.matchesAll((Iterator<Class<String>>) listIterator0, (Predicate<? super Class<String>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) loopingIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2935), true, true, (-2935), (-2935));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-2935), true, true, 368, (-2935), dataTruncation0);
      DataTruncation dataTruncation2 = new DataTruncation((-2935), false, true, 784, 0);
      dataTruncationArray0[2] = dataTruncation2;
      dataTruncationArray0[3] = dataTruncation0;
      DataTruncation dataTruncation3 = new DataTruncation((-2935), true, false, 784, 368);
      dataTruncationArray0[4] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-2935), false, false, (-2585), 24);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation(1414, true, true, 784, 1414);
      DataTruncation dataTruncation1 = new DataTruncation(784, true, true, (-2459), 784);
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>((-2459));
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) uniquePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      Iterator<ComparatorPredicate.Criterion> iterator0 = (Iterator<ComparatorPredicate.Criterion>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      SingletonListIterator<Iterator<ComparatorPredicate.Criterion>> singletonListIterator0 = new SingletonListIterator<Iterator<ComparatorPredicate.Criterion>>(iterator0);
      OrderedMapIterator<BatchUpdateException, Iterator<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Iterator<DataTruncation>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Iterator<DataTruncation>>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) objectArrayListIterator0, 1243);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, StringTokenizer>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<SQLTimeoutException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) mapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      IteratorUtils.isEmpty(iteratorArray0[0]);
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Object>) null, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FS-#'~<>p;gTS&EdC11";
      stringArray0[1] = "";
      stringArray0[2] = "(qWZqNSakQ7_'";
      stringArray0[3] = "o9gK+a|5.";
      stringArray0[4] = "-u;'%j";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.toString((Iterator<String>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/$HBYMk'}D", (String) null);
      IteratorUtils.getIterator((Object) null);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/$HBYMk'}D", "KvyLmL=)o_*a{", sQLNonTransientConnectionException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("/$HBYMk'}D", "getValue() can only be called after next() and before remove()");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, 791L);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, (Iterator<? extends SQLRecoverableException>) boundedIterator0);
      IteratorUtils.toString(iterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation(1414, true, true, 784, 1414);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DataTruncation dataTruncation1 = new DataTruncation(784, true, true, (-2459), 784);
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>((-2459));
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) uniquePredicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (long) 1414, 2624L);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("m`", "Entry does not exist: ", (-1), dataTruncation0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", "}f$|52");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1414, true, true, 1414, 1414);
      DataTruncation dataTruncation1 = new DataTruncation(784, true, true, 10, (-164));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation1;
      Iterator<ComparatorPredicate.Criterion> iterator0 = (Iterator<ComparatorPredicate.Criterion>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      SingletonListIterator<Iterator<ComparatorPredicate.Criterion>> singletonListIterator0 = new SingletonListIterator<Iterator<ComparatorPredicate.Criterion>>(iterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("P_8:.\"v+OV8FdC", dataTruncation1);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLRecoverableException0);
      IteratorUtils.find((Iterator<Iterator<ComparatorPredicate.Criterion>>) singletonListIterator0, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2935), true, true, (-2935), (-2935));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(798, false, true, 406, 406);
      dataTruncationArray0[1] = dataTruncation1;
      dataTruncation1.getParameter();
      DataTruncation dataTruncation2 = new DataTruncation((-2935), false, false, 798, 0);
      dataTruncationArray0[2] = dataTruncation2;
      dataTruncationArray0[3] = dataTruncation0;
      DataTruncation dataTruncation3 = new DataTruncation((-2935), false, false, 798, 406);
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, ArrayDeque<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransactionRollbackException, ArrayDeque<SQLInvalidAuthorizationSpecException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) mapIterator1, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "", "");
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) orderedIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLSyntaxErrorException, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(iterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) listIteratorWrapper0, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      IteratorUtils.size(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      IteratorUtils.getIterator((Object) null);
      InvokerTransformer<SQLException, SQLTimeoutException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTimeoutException>("bnqnO;(", (Class<?>[]) null, (Object[]) null);
      InvokerTransformer.invokerTransformer("bnqnO;(", (Class<?>[]) null, (Object[]) null);
      InvokerTransformer.invokerTransformer("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", (Class<?>[]) null, (Object[]) null);
      InvokerTransformer.invokerTransformer("bnqnO;(", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLTimeoutException>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("I");
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0);
      IteratorUtils.size(objectArrayListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "I", comparator0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) objectArrayListIterator0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) allPredicate0);
      predicateArray0[3] = predicate2;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Locale.LanguageRange>[] iteratorArray0 = (Iterator<Locale.LanguageRange>[]) Array.newInstance(Iterator.class, 6);
      ArrayListIterator<Locale.LanguageRange> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Locale.LanguageRange>(allPredicate0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<TreeSet<HashMap>>) zippingIterator0, (Closure<? super TreeSet<HashMap>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("prefix may not be null");
      arrayDeque0.add(iIOMetadataNode0);
      ArrayDeque<IIOMetadataNode> arrayDeque1 = new ArrayDeque<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = arrayDeque1.descendingIterator();
      IteratorUtils.unmodifiableIterator(iterator0);
      Class<String> class0 = String.class;
      SingletonIterator<Class<String>> singletonIterator0 = new SingletonIterator<Class<String>>(class0, true);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAll((Iterator<Class<String>>) singletonIterator0, (Predicate<? super Class<String>>) instanceofPredicate0);
      IteratorUtils.isEmpty(iterator0);
      Hashtable<SQLTimeoutException, Class<SQLClientInfoException>> hashtable0 = new Hashtable<SQLTimeoutException, Class<SQLClientInfoException>>();
      EntrySetMapIterator<SQLTimeoutException, Class<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, Class<SQLClientInfoException>>(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0, (-2686L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("V7?pUPg*`Yc\"$", "V7?pUPg*`Yc\"$");
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList1);
      Iterator<ComparatorPredicate.Criterion> iterator0 = (Iterator<ComparatorPredicate.Criterion>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("V7?pUPg*`Yc\"$", (String) null).when(iterator0).toString();
      SingletonListIterator<Iterator<ComparatorPredicate.Criterion>> singletonListIterator0 = new SingletonListIterator<Iterator<ComparatorPredicate.Criterion>>(iterator0);
      Iterator<ComparatorPredicate.Criterion> iterator1 = IteratorUtils.find((Iterator<Iterator<ComparatorPredicate.Criterion>>) singletonListIterator0, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) predicate0);
      IteratorUtils.getIterator(iterator1);
      ConstantTransformer.constantTransformer("V7?pUPg*`Yc\"$");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.isEmpty(zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, 3185);
      IteratorUtils.getIterator(zippingIterator0);
      ConstantTransformer.constantTransformer("jh~*bXGJ1&cBfd%+a+");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", ", "5Z~+P6VXlaCPN2/", 1989);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 31);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) hashSet0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, 0L);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) boundedIterator0, class0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>((-1098));
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator1, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, 0L, 0L);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(vector0);
      IteratorUtils.find((Iterator<SQLClientInfoException>) loopingListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends Integer>) iterator0, 61);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) resettableListIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Iterator<ComparatorPredicate.Criterion> iterator1 = (Iterator<ComparatorPredicate.Criterion>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("@?m \"J", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("{L%+]uJxDT@Tq`7", "Node must not be null", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("\"vk=5c:80pM", "Node must not be null", 228, sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0, (Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      IteratorUtils.size(objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.isEmpty(zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DataTruncation dataTruncation0 = new DataTruncation(8, true, true, 8, 8);
      Iterator<ComparatorPredicate.Criterion> iterator0 = (Iterator<ComparatorPredicate.Criterion>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      SingletonListIterator<Iterator<ComparatorPredicate.Criterion>> singletonListIterator0 = new SingletonListIterator<Iterator<ComparatorPredicate.Criterion>>(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Iterator<ComparatorPredicate.Criterion>>) singletonListIterator0, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, 61);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator1, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "8epV~@tDC");
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      TreeSet<SQLNonTransientConnectionException> treeSet0 = new TreeSet<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) treeSet0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(singletonListIterator0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) listIteratorWrapper0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
//      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 0 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (-2347L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ArrayList<Integer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, ArrayList<Integer>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, ArrayList<Integer>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, ArrayList<Integer>>(mapIterator1);
      IteratorUtils.size(mapIterator1);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Predicate<Object>, IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      Integer integer0 = new Integer((-4580));
      Integer integer1 = new Integer((-396));
      IteratorUtils.singletonListIterator(integer1);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(orderedMapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(orderedMapIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(abstractOrderedMapIteratorDecorator1);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator1, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.size(iterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      Class<String> class4 = String.class;
      classArray0[3] = class4;
      Class<String> class5 = String.class;
      classArray0[4] = class5;
      Class<String> class6 = String.class;
      classArray0[5] = class6;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, predicateArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      int int0 = 539;
      DataTruncation dataTruncation0 = new DataTruncation(1413, false, true, (-1), (-1131));
      dataTruncation0.getNextWarning();
      String string0 = "dOkt#J*5od`";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dOkt#J*5od`", "");
      sQLTransientConnectionException0.initCause((Throwable) null);
      EmptyListIterator.resettableEmptyListIterator();
      String string1 = null;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, dataTruncation0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) listIterator0, (-1131));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(8, false, false, 539, (-1));
      dataTruncation0.getNextWarning();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (long) 539);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dOkt#J*5od`");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Attr attr0 = null;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        iIOMetadataNode2.setAttributeNodeNS((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = "(this Map)";
      String string1 = "Array class must not be null";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "Array class must not be null", 2353);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.size(iterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[1] = predicate1;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) hashSet0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, 0L);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("XYuy&ewWP");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        iIOMetadataNode1.setAttributeNodeNS((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mu;");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("mu;", sQLSyntaxErrorException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      SQLWarning sQLWarning0 = new SQLWarning("Q1j1Obl^^a4*F(Fdxe", "Q1j1Obl^^a4*F(Fdxe", 3185);
      DataTruncation dataTruncation0 = new DataTruncation((-698), false, false, 2686, 3, sQLWarning0);
      dataTruncationArray0[0] = dataTruncation0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.UK;
      mockPrintWriter0.printf(locale0, "Q1j1Obl^^a4*F(Fdxe", (Object[]) dataTruncationArray0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) vector0);
      dataTruncation0.getStackTrace();
      Hashtable<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion>(hashtable0);
      MapIterator<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion>) entrySetMapIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) treeSet0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0, 2910L, (-2387L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      int int0 = (-1);
      DataTruncation dataTruncation0 = new DataTruncation(8, false, false, 539, (-1));
      dataTruncation0.getNextWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dOkt#J*5od`", "?3Tz%aj){1+");
      sQLTransientConnectionException0.initCause(dataTruncation0);
      EmptyListIterator.resettableEmptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException("", sQLTransientConnectionException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) listIterator0, 8);
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Index: ", (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) zippingIterator0, 0L, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, 61);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1413, sQLTransientException0);
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException(sQLWarning0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, 61);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("wQ'UPHZ(", (String) null);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Iterator<ComparatorPredicate.Criterion> iterator1 = (Iterator<ComparatorPredicate.Criterion>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iterator1).toString();
      SingletonListIterator<Iterator<ComparatorPredicate.Criterion>> singletonListIterator0 = new SingletonListIterator<Iterator<ComparatorPredicate.Criterion>>(iterator1);
      IteratorUtils.find((Iterator<Iterator<ComparatorPredicate.Criterion>>) singletonListIterator0, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      MockFile mockFile0 = new MockFile((File) null, "org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(9, true, true, 9, 0);
      dataTruncation0.getNextWarning();
      DefaultEquator.defaultEquator();
      DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("];]ufT7f", "];]ufT7f", (-1389));
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<Properties> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator1);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("snp322^{1j@'RM;b", "5GG`-bIB`WWY[rqEr&,", 0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NodeList must not be null", "zBM");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("snp322^{1j@'RM;b", "snp322^{1j@'RM;b", 0, sQLTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("YrT9iFep6E`kribC,L", "5GG`-bIB`WWY[rqEr&,", 0, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("zBM", sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<EnumSet<ComparatorPredicate.Criterion>>) null, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) constantTransformer0, "d#WF.,)z", "FQFiPFk]XGl~_C", "8/n@K&u");
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer(168);
      IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyOrderedMapIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(orderedMapIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedMapIterator1);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator2, class0);
      iteratorArray0[3] = iterator0;
      iteratorArray0[4] = (Iterator<SQLTimeoutException>) orderedMapIterator2;
      iteratorArray0[6] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("i2YC3'QN/q\u0002p<", "i2YC3'QN/q\u0002p<");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(2950, true, true, 933, (-3277), sQLClientInfoException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("", clientInfoStatus0);
      dataTruncation0.getNextWarning();
      sQLTransientException0.initCause((Throwable) null);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = 3185;
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, 933);
      IteratorUtils.loopingListIterator(list0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      ResettableListIterator<SQLTransientException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) hashMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.size(iterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0, 16, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.size(iterator0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "d";
      stringArray0[2] = "";
      stringArray0[3] = "7W>";
      stringArray0[4] = "Axk!xR&xF2q'l-V 4?l";
      String string0 = "Hs>I$~OG)";
      stringArray0[6] = "W{|$P<tDWZw8c{X";
      stringArray0[2] = "";
      stringArray0[8] = "/D";
      int int0 = (-902);
      int int1 = 244;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringArray0, (-902), 244);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Iterator<ComparatorPredicate.Criterion> iterator0 = (Iterator<ComparatorPredicate.Criterion>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iterator0).toString();
      SingletonListIterator<Iterator<ComparatorPredicate.Criterion>> singletonListIterator0 = new SingletonListIterator<Iterator<ComparatorPredicate.Criterion>>(iterator0);
      IteratorUtils.find((Iterator<Iterator<ComparatorPredicate.Criterion>>) singletonListIterator0, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, 61);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      SingletonListIterator<Iterator<ComparatorPredicate.Criterion>> singletonListIterator0 = new SingletonListIterator<Iterator<ComparatorPredicate.Criterion>>((Iterator<ComparatorPredicate.Criterion>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<Iterator<ComparatorPredicate.Criterion>>) singletonListIterator0, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      SQLWarning sQLWarning0 = new SQLWarning("Q1j1Obl^^a4*F(Fdxe", "Q1j1Obl^^a4*F(Fdxe", 3185);
      DataTruncation dataTruncation0 = new DataTruncation((-698), false, false, 2686, 3, sQLWarning0);
      dataTruncationArray0[0] = dataTruncation0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.UK;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Q1j1Obl^^a4*F(Fdxe", (Object[]) dataTruncationArray0);
      sQLWarning0.printStackTrace(printWriter0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) vector0);
      dataTruncation0.getStackTrace();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, (-1823L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(951);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) integer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mu;");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("mu;", sQLSyntaxErrorException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(orderedMapIterator1);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      InvokerTransformer<SQLException, SQLTimeoutException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTimeoutException>("", (Class<?>[]) null, (Object[]) null);
      Transformer<SQLNonTransientException, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLTimeoutException>) transformer0);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(9, true, true, 9, 0);
      dataTruncation0.getNextWarning();
      DefaultEquator.defaultEquator();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) null, (Equator<SQLException>) defaultEquator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("];]ufT7f", "];]ufT7f", (-1389));
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-3053), (-1215));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.find((Iterator<Iterator<ComparatorPredicate.Criterion>>) null, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) predicate0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("null keys not allowed");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.StringValueTransformer");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      int int0 = 1413;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "6k9'w)m&k'W~^", 1413);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.StringValueTransformer", "", 1413);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 9);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.isEmpty(zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttribute("");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.isEmpty(zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttribute("");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DataTruncation dataTruncation0 = new DataTruncation(8, false, false, 8, 1412);
      dataTruncation0.getNextWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("6b6+(`9U*", "");
      sQLTransientConnectionException0.initCause(dataTruncation0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, 1412);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      IteratorUtils.getIterator((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ConstantTransformer.constantTransformer("euOG{!X{pJY7_");
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Iterator<DataTruncation>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableListIterator0;
      String string0 = "f1le7q$";
      int[] intArray0 = new int[1];
      intArray0[0] = (-1697);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("f1le7q$", "f1le7q$", intArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 941);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Hashtable<String, SQLException>> linkedList0 = new LinkedList<Hashtable<String, SQLException>>();
      linkedList0.push((Hashtable<String, SQLException>) null);
      IteratorUtils.loopingListIterator((List<Hashtable<String, SQLException>>) linkedList0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (-67L), (-67L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ?>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) orderedMapIterator1, (Iterator<? extends SQLWarning>) orderedMapIterator1, (Iterator<? extends SQLWarning>) orderedMapIterator1);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      int int0 = (-1466);
      SQLWarning sQLWarning0 = new SQLWarning("pR1a6KsH", "org.apache.commons.collections4.iterators.EmptyListIterator", (-1466));
      sQLWarningArray0[0] = sQLWarning0;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      int int1 = 0;
      sQLWarning0.fillInStackTrace();
      int int2 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 168;
      Integer integer0 = new Integer(168);
      IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer(168);
      IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyOrderedMapIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(orderedMapIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      InvokerTransformer<SQLException, SQLTimeoutException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTimeoutException>(" k=[.", (Class<?>[]) null, dataTruncationArray0);
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer(" k=[.", (Class<?>[]) null, (Object[]) dataTruncationArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The parameter types must match the arguments
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(3181, false, false, 1, 3181);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-3653), false, false, 3, (-598), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1, false, false, 654, (-598));
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2, true, true, 2, (-1595));
      dataTruncationArray0[3] = dataTruncation3;
      IteratorUtils.arrayIterator(dataTruncationArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.find((Iterator<Iterator<ComparatorPredicate.Criterion>>) null, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IteratorUtils.singletonIterator(linkedList0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1699);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-751);
      intArray0[4] = 0;
      intArray0[5] = (-472);
      intArray0[6] = 0;
      intArray0[7] = (-2596);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(batchUpdateException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.ExceptionClosure", "org.apache.commons.collections4.functors.ExceptionClosure", hashtable0, sQLNonTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("c(TR7qz[V}IJ", "org.apache.commons.collections4.functors.ExceptionClosure", hashtable1, sQLNonTransientConnectionException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, "", (-1272), hashtable1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(predicate0);
      int int0 = 2179;
      Integer integer0 = new Integer(2179);
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      booleanArray0[0] = boolean0;
      int int1 = 3552;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(booleanArray0, 3552, 3552);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      String string0 = "Collection must not be null";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "Collection must not be null");
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("Collection must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Collection must not be null", "0");
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals("0", sQLSyntaxErrorException1.getSQLState());
      assertEquals("Collection must not be null", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Collection must not be null", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = (SQLSyntaxErrorException)sQLSyntaxErrorException1.fillInStackTrace();
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertEquals("0", sQLSyntaxErrorException1.getSQLState());
      assertEquals("Collection must not be null", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Collection must not be null", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: Collection must not be null", sQLSyntaxErrorException2.toString());
      assertEquals("0", sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("Collection must not be null", sQLSyntaxErrorException2.getMessage());
      assertNotNull(sQLSyntaxErrorException2);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 14, 304);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(326);
      assertEquals(326, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(927);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(927, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(833);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(833, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1084));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-1084), (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1084));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertEquals((-1084), (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, int0);
      assertEquals(8, integerArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      assertEquals(8, integerArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "&Jz2'm^k$zK");
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("&Jz2'm^k$zK", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, 2256, sQLFeatureNotSupportedException0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("&Jz2'm^k$zK", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(2256, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", "", 1107, sQLTransientConnectionException0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("&Jz2'm^k$zK", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(2256, sQLTransientConnectionException0.getErrorCode());
      assertEquals(1107, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      ArrayIterator<Integer> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Integer>(sQLDataException0, 1107);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 10, 0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNull(sQLWarning0);
      
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) null, (Equator<SQLException>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) mapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(boolean0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 176;
      DataTruncation dataTruncation0 = new DataTruncation(1073741824, false, false, 1073741824, 176);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      Transformer<SQLWarning, SQLWarning> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator((SQLWarning) dataTruncation0, (Transformer<? super SQLWarning, ? extends SQLWarning>) transformer0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 1073741824, 176);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", sQLWarning0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(spliterator0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertNotNull(iterator0);
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
      
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 8);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      predicateArray0[1] = predicate1;
      // Undeclared exception!
//      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 2 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 10;
      int int1 = 188;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 10, 188);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = arrayDeque0.add(iIOMetadataNode0);
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(iIOMetadataNode0));
      
      Iterator<IIOMetadataNode> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.contains(iIOMetadataNode0));
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(iterator1);
      assertTrue(arrayDeque0.contains(iIOMetadataNode0));
      
      Class<String> class0 = String.class;
      SingletonIterator<Class<String>> singletonIterator0 = new SingletonIterator<Class<String>>(class0, true);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Class<String>>) singletonIterator0, (Predicate<? super Class<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "transformer may not be null";
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "transformer may not be null", 4, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation(1414, true, true, 784, 1414);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-2337), true, true, 1414, (-2337));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertNotNull(dataTruncation1);
      
      dataTruncationArray0[1] = dataTruncation1;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      assertEquals(2, dataTruncationArray0.length);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(objectArrayListIterator0);
      
      Throwable[] throwableArray0 = dataTruncation1.getSuppressed();
      assertNotSame(dataTruncation1, dataTruncation0);
      assertEquals(0, throwableArray0.length);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertNotNull(throwableArray0);
      
      DataTruncation dataTruncation2 = objectArrayListIterator0.next();
      assertNotSame(dataTruncation2, dataTruncation1);
      assertSame(dataTruncation2, dataTruncation0);
      assertEquals(2, dataTruncationArray0.length);
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertNotNull(dataTruncation2);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 1414);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1413
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      String string0 = "NodeList must not be null";
      iIOMetadataNode0.setNodeValue("NodeList must not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(";");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(node0, iIOMetadataNode1);
      assertNotSame(node0, iIOMetadataNode0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertNotNull(node0);
      
      Node node1 = iIOMetadataNode0.removeChild(node0);
      assertNotSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertSame(iIOMetadataNode1, node1);
      assertSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(node0, node1);
      assertSame(node0, iIOMetadataNode1);
      assertNotSame(node0, iIOMetadataNode0);
      assertSame(node1, node0);
      assertNotSame(node1, iIOMetadataNode0);
      assertSame(node1, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(node1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node1);
      assertNotSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertSame(iIOMetadataNode1, node1);
      assertSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(node0, node1);
      assertSame(node0, iIOMetadataNode1);
      assertNotSame(node0, iIOMetadataNode0);
      assertSame(node1, node0);
      assertNotSame(node1, iIOMetadataNode0);
      assertSame(node1, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)node1));
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeListIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) node0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer(168);
      assertEquals(168, (int)integer0);
      assertNotNull(integer0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      assertNotNull(iterator0);
      
      OrderedMapIterator<SQLTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator1);
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertNotNull(orderedMapIterator2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator2);
      assertSame(orderedMapIterator2, orderedMapIterator3);
      assertSame(orderedMapIterator3, orderedMapIterator2);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator3.hasPrevious());
      assertNotNull(orderedMapIterator3);
      
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator3));
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean1 = stack0.addAll((Collection<? extends SQLNonTransientConnectionException>) vector0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(resettableIterator0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedMapIterator2);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator3));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator3, class0);
      assertSame(orderedMapIterator2, orderedMapIterator3);
      assertSame(orderedMapIterator3, orderedMapIterator2);
      assertEquals(0, sQLExceptionArray0.length);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator3));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator3.hasPrevious());
      assertNotNull(sQLExceptionArray0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 1412);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = arrayDeque0.add(iIOMetadataNode0);
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(iIOMetadataNode0));
      
      Iterator<IIOMetadataNode> iterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      assertNotNull(iterator0);
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      Class<String> class0 = String.class;
      SingletonIterator<Class<String>> singletonIterator0 = new SingletonIterator<Class<String>>(class0, true);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      assertEquals(0, sQLFeatureNotSupportedExceptionArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLInvalidAuthorizationSpecException: ", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLRecoverableException1);
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("");
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException2.toString());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("", sQLRecoverableException2.getMessage());
      assertNull(sQLRecoverableException2.getSQLState());
      assertNotNull(sQLRecoverableException2);
      
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException3.toString());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertEquals("", sQLRecoverableException3.getMessage());
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLRecoverableException3);
      
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException();
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException2));
      assertEquals(0, sQLRecoverableException4.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException4.toString());
      assertNull(sQLRecoverableException4.getSQLState());
      assertNull(sQLRecoverableException4.getMessage());
      assertNotNull(sQLRecoverableException4);
      
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException2));
      assertNull(sQLRecoverableException5.getSQLState());
      assertEquals(0, sQLRecoverableException5.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException5.toString());
      assertNull(sQLRecoverableException5.getMessage());
      assertNotNull(sQLRecoverableException5);
      
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException(sQLRecoverableException0);
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException3));
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLRecoverableException: java.sql.SQLInvalidAuthorizationSpecException: ", sQLRecoverableException6.toString());
      assertNull(sQLRecoverableException6.getSQLState());
      assertEquals(0, sQLRecoverableException6.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLInvalidAuthorizationSpecException: ", sQLRecoverableException6.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLInvalidAuthorizationSpecException: ", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException6);
      
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException(sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException4));
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLRecoverableException: ", sQLRecoverableException7.toString());
      assertNull(sQLRecoverableException7.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException7.getMessage());
      assertEquals(0, sQLRecoverableException7.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLRecoverableException7);
      
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1278);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<Locale.Category, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractMapIteratorDecorator<Locale.Category, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.Category, String>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(abstractMapIteratorDecorator0);
      
      iteratorArray0[0] = (Iterator<Locale.Category>) abstractMapIteratorDecorator0;
      OrderedMapIterator<Locale.Category, DataTruncation> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      iteratorArray0[1] = (Iterator<Locale.Category>) orderedMapIterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, (-1289));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      MapIterator<SQLNonTransientConnectionException, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      int int0 = (-3277);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-3277), true, true, (-3277), (-3277), sQLClientInfoException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put((String) null, clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNull(sQLWarning0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)sQLTransientException0.initCause((Throwable) null);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertNull(sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException1.toString());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertNotNull(sQLTransientException1);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Object) sQLTransientException0);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertFalse(boolean0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      int int1 = 3185;
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, 3185);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(resettableListIterator1);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      assertEquals(0, objectArray0.length);
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      assertFalse(resettableListIterator0.equals((Object)resettableListIterator1));
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(objectArray0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedMapIterator<Predicate<SQLIntegrityConstraintViolationException>, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<Predicate<SQLIntegrityConstraintViolationException>, StringTokenizer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Predicate<SQLIntegrityConstraintViolationException>, StringTokenizer>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 2494, 2494);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) orderedIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Integer integer0 = new Integer((-396));
      assertEquals((-396), (int)integer0);
      assertNotNull(integer0);
      
      ListIterator<Integer> listIterator1 = IteratorUtils.singletonListIterator(integer0);
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertNotNull(listIterator1);
      
      MapIterator<EnumSet<ComparatorPredicate.Criterion>, Vector<SQLRecoverableException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      SQLDataException sQLDataException0 = new SQLDataException(",9s#BI,xz");
      assertNull(sQLDataException0.getSQLState());
      assertEquals(",9s#BI,xz", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ,9s#BI,xz", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(",9s#BI,xz", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ,9s#BI,xz", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(",9s#BI,xz", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ,9s#BI,xz", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLNonTransientException: ", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLNonTransientException: ", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y", ",9s#BI,xz", sQLRecoverableException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(",9s#BI,xz", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ,9s#BI,xz", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLNonTransientException: ", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLNonTransientException: ", sQLRecoverableException0.getMessage());
      assertEquals("y", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: y", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(",9s#BI,xz", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = stack0.add(sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: y]", stack0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(",9s#BI,xz", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ,9s#BI,xz", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLNonTransientException: ", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLNonTransientException: ", sQLRecoverableException0.getMessage());
      assertEquals("y", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: y", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(",9s#BI,xz", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(stack0.contains(sQLInvalidAuthorizationSpecException0));
      
      ListIterator<Stack<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: y]", stack0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertTrue(stack0.contains(sQLInvalidAuthorizationSpecException0));
      
      SkippingIterator<Stack<SQLInvalidAuthorizationSpecException>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Stack<SQLInvalidAuthorizationSpecException>>) listIterator0, 0L);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: y]", stack0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(skippingIterator0);
      assertTrue(stack0.contains(sQLInvalidAuthorizationSpecException0));
      
      boolean boolean1 = IteratorUtils.contains((Iterator<Stack<SQLInvalidAuthorizationSpecException>>) skippingIterator0, (Object) listIterator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: y]", stack0.toString());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(stack0.contains(sQLInvalidAuthorizationSpecException0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(anyPredicate0);
      
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.constantTransformer(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(transformer0);
      
      IfTransformer<SQLException, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<SQLException, SQLFeatureNotSupportedException>(anyPredicate0, transformer0, transformer0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(ifTransformer0);
      
      Transformer<Object, BatchUpdateException> transformer1 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer1);
      
      Transformer<Object, Object> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) anyPredicate0, (Transformer<? super Object, ?>) transformer1);
      assertNotNull(transformer2);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) ifTransformer0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(iterator0);
      
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(zippingIterator0);
      
      Transformer<Object, Object> transformer3 = IfTransformer.ifTransformer((Predicate<? super Object>) anyPredicate0, (Transformer<? super Object, ?>) transformer1);
      assertNotSame(transformer3, transformer2);
      assertFalse(transformer3.equals((Object)transformer2));
      assertNotNull(transformer3);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(enumeration0);
      
      Stack<SQLException> stack1 = new Stack<SQLException>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) stack1);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(iterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<Properties, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<Properties, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<DataTruncation>) orderedIterator0, (Object) null);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      File file0 = MockFile.createTempFile("|[{Q4lTu(SSz/L", "|[{Q4lTu(SSz/L");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/|[{Q4lTu(SSz/L0|[{Q4lTu(SSz/L", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("L", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/|[{Q4lTu(SSz/L0|[{Q4lTu(SSz", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "|[{Q4lTu(SSz/L");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      boolean boolean1 = mockFile0.setExecutable(true, true);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/|[{Q4lTu(SSz/L0|[{Q4lTu(SSz/L", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("L", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/|[{Q4lTu(SSz/L0|[{Q4lTu(SSz", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/|[{Q4lTu(SSz/L0|[{Q4lTu(SSz/L/|[{Q4lTu(SSz", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals("L", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/tmp/|[{Q4lTu(SSz/L0|[{Q4lTu(SSz/L/|[{Q4lTu(SSz/L", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      assertFalse(boolean0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("euOl{!X{pJY7_");
      assertNotNull(transformer0);
      
      String string0 = "8/n@K&u";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<EnumSet<ComparatorPredicate.Criterion>>) null, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, (String) null, "8/n@K&u", "euOl{!X{pJY7_");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getLastChild();
      assertNull(node0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("mu;", sQLSyntaxErrorException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) singletonIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(orderedMapIterator1);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) abstractOrderedMapIteratorDecorator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, 61);
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      int int0 = 10;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0);
      sQLFeatureNotSupportedException0.setNextException(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 10, 2200);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }
}
