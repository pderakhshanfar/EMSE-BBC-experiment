/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 14:01:22 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The closure array must not contain a null closure, index ", "The closure array must not contain a null closure, index ", 4597);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, 3);
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(list0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) ifTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      IteratorUtils.emptyMapIterator();
      Properties properties0 = new Properties();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 9);
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.bidimap.DualTreeBidiMap");
      transformerArray0[0] = transformer0;
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 6);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("org.apache.commons.collections4.bidimap.DualTreeBidiMap", classArray0, transformerArray0);
      transformerArray0[1] = (Transformer<Object, Properties>) invokerTransformer0;
      IfTransformer<Object, Properties> ifTransformer0 = new IfTransformer<Object, Properties>(predicate0, transformerArray0[1], transformerArray0[1]);
      transformerArray0[2] = (Transformer<Object, Properties>) ifTransformer0;
      Properties properties1 = new Properties();
      Transformer<Object, Properties> transformer1 = ConstantTransformer.constantTransformer(properties1);
      transformerArray0[3] = transformer1;
      Hashtable<Object, Properties> hashtable0 = new Hashtable<Object, Properties>();
      Transformer<Object, Properties> transformer2 = MapTransformer.mapTransformer((Map<? super Object, ? extends Properties>) hashtable0);
      transformerArray0[4] = transformer2;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      IfTransformer<Object, Properties> ifTransformer1 = new IfTransformer<Object, Properties>(nullIsTruePredicate0, transformerArray0[1], transformer1);
      transformerArray0[5] = (Transformer<Object, Properties>) ifTransformer1;
      Transformer<Object, Properties> transformer3 = ConstantTransformer.constantTransformer(properties0);
      transformerArray0[6] = transformer3;
      Factory<Properties> factory0 = ConstantFactory.constantFactory(properties1);
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(factory0);
      transformerArray0[7] = (Transformer<Object, Properties>) factoryTransformer0;
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties1);
      transformerArray0[8] = (Transformer<Object, Properties>) constantTransformer0;
      SwitchTransformer<Object, Properties> switchTransformer0 = new SwitchTransformer<Object, Properties>(predicateArray0, transformerArray0, transformer0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) switchTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'org.apache.commons.collections4.bidimap.DualTreeBidiMap' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("DsZQtl,PNlCZhFn@", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'DsZQtl,PNlCZhFn@' on 'class java.sql.SQLDataException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "Closure must not be null";
      String string1 = "";
      SQLWarning sQLWarning0 = new SQLWarning("Closure must not be null", "");
      Transformer<SQLException, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator(sQLWarning0, (Transformer<? super SQLWarning, ? extends SQLWarning>) transformer0);
      Iterator<SQLWarning> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator1, (Predicate<? super SQLWarning>) uniquePredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.getIterator("s+ _]1/@YMhW3X`=L");
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      priorityQueue0.iterator();
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("s+ _]1/@YMhW3X`=L", classArray0, classArray0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator0, 41);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 's+ _]1/@YMhW3X`=L' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int int0 = 5;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(88);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2056));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1138);
      integerArray0[7] = integer7;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 5);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) onePredicate0, (Predicate<? super Object>) onePredicate0);
      predicateArray0[1] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicateArray0[0]);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) anyPredicate0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      int[] intArray0 = new int[7];
      intArray0[0] = 3846;
      intArray0[1] = 3846;
      intArray0[2] = 1423;
      intArray0[3] = 1423;
      intArray0[4] = 1423;
      intArray0[5] = 1423;
      intArray0[6] = 3846;
      SQLException sQLException0 = new SQLException("%fc\"i 3w", "%fc\"i 3w");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("%fc\"i 3w", intArray0, sQLException0);
      batchUpdateException0.spliterator();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1423, 3846, batchUpdateException0);
      stack0.add(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      String string0 = "7T Ae(~61f9Y@s";
      int int0 = 3326;
      int int1 = 9;
      DataTruncation dataTruncation0 = new DataTruncation(9, true, false, 3326, 93);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7T Ae(~61f9Y@s", "7T Ae(~61f9Y@s", dataTruncation0);
      SQLDataException sQLDataException0 = new SQLDataException("7T Ae(~61f9Y@s", "7T Ae(~61f9Y@s", 3326, sQLTransientConnectionException0);
      linkedList0.add(sQLDataException0);
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UniquePredicate<Locale.Category> uniquePredicate0 = new UniquePredicate<Locale.Category>();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "prefix may not be null", sQLWarning0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException((String) null);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "%io");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("}fa=gx,WS", classArray0, classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) objectArrayListIterator0, (Transformer<? super SQLException, ? extends SQLTransientConnectionException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '}fa=gx,WS' on 'class java.sql.SQLTransactionRollbackException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapIterator<SQLTransientConnectionException, Transformer<SQLFeatureNotSupportedException, DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) mapIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Transformer<SQLFeatureNotSupportedException, DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(mapIterator0, false);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "CC(i", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Transformer<SQLFeatureNotSupportedException, DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6ev");
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) anyPredicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) objectArrayIterator0, (Predicate<? super SQLClientInfoException>) notPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1269;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";\"HT>)", "uX{`Uz^", 1269);
      String string0 = "List must not be null";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("List must not be null", "uX{`Uz^", (-1133), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLNonTransientException0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.EmptyListIterator");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@u-_M8::", "org.apache.commons.collections4.iterators.EmptyListIterator", sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("@u-_M8::", "^w#pf=TH;c}_:Q", (-1401), sQLFeatureNotSupportedExceptionArray0[0]);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("^w#pf=TH;c}_:Q", "?;NicOk?)X>r\"{RR@");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException3);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("/tyfKv,", "", sQLNonTransientException0);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("/tyfKv,", "", sQLNonTransientException0);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("", "", sQLFeatureNotSupportedException3);
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0, (-288));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", 1);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("(a1/o<<Y:_sCl]uFl");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$EntrySet");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator1;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator2 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, 1);
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator2;
      HashMap<SQLNonTransientConnectionException, SQLClientInfoException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLClientInfoException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLClientInfoException>(hashMap0);
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "x4t#)$E*";
      Class<Object> class0 = Object.class;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      int int0 = (-2911);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(string0, string0, int0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      String string1 = "Class to instantiate must not be null";
      String string2 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(string1, string2, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      String string3 = "";
      int int1 = 1433;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(string1, string3, int1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(objectArrayListIterator0);
      Factory<InstanceofPredicate> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, InstanceofPredicate> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) factory0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) listIteratorWrapper0, (Transformer<? super SQLSyntaxErrorException, ? extends InstanceofPredicate>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) listIterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLFeatureNotSupportedException1);
      Transformer<SQLException, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<Iterator<SQLTransactionRollbackException>> stack0 = new Stack<Iterator<SQLTransactionRollbackException>>();
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) vector0);
      stack0.add((Iterator<SQLTransactionRollbackException>) resettableIterator0);
      ResettableIterator<Iterator<SQLTransactionRollbackException>> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Iterator<SQLTransactionRollbackException>>) stack0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1;
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableIterator1;
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator1, (Iterator<? extends SQLTransientConnectionException>) resettableIterator1);
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) zippingIterator0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      String string0 = "";
      String string1 = "N\"*{`W%*[";
      String string2 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int int0 = 123;
      String string3 = "";
      String string4 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "org.apache.commons.collections4.map.Flat3Map$KeySet");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null, sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s+ _c/@YMhW3X`=L", "N\"*{`W%*[", 123, sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N\"*{`W%*[", "", hashMap0, sQLNonTransientConnectionException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.CollatingIterator", "org.apache.commons.collections4.iterators.CollatingIterator", 123, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      StackTraceElement[] stackTraceElementArray0 = sQLTransientConnectionException1.getStackTrace();
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      String string5 = "(this Collection)";
      SQLWarning sQLWarning0 = new SQLWarning("s+ _c/@YMhW3X`=L", "(this Collection)", 1);
      IteratorUtils.getIterator(sQLWarning0);
      IteratorUtils.arrayIterator((Object[]) stackTraceElementArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 123);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) stack0);
      SQLWarning sQLWarning0 = new SQLWarning("#QL,[@", "", (-1060));
      stack0.add(sQLWarning0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) predicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      int[] intArray0 = new int[9];
      intArray0[0] = (-3194);
      intArray0[1] = (-2838);
      intArray0[2] = 1244;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-1623);
      intArray0[6] = 100;
      intArray0[7] = 3972;
      intArray0[8] = (-152);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("KX/j:\bz$c-T]p>U,by", batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, (-2838));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyIterator.emptyIterator();
      NOPClosure.nopClosure();
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Iterator<Transformer>>) resettableIterator0, (Transformer<? super Iterator<Transformer>, String>) transformer0, (String) null, "WD .rb", "WD .rb");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      Iterator<SQLDataException> iterator0 = arrayDeque0.iterator();
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 6);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLDataException, String>) transformer0, (String) null, "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (Throwable) null);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "'MNUn{o");
      Predicate<SQLTransientConnectionException> predicate0 = IdentityPredicate.identityPredicate(sQLTransientConnectionException1);
      AndPredicate<SQLTransientConnectionException> andPredicate0 = new AndPredicate<SQLTransientConnectionException>(predicate0, predicate0);
      Stack<Closure<SQLException>> stack0 = new Stack<Closure<SQLException>>();
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLException>>) stack0);
      WhileClosure<SQLTransientConnectionException> whileClosure0 = new WhileClosure<SQLTransientConnectionException>(andPredicate0, closure0, false);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonIterator0, (Closure<? super SQLTransientConnectionException>) whileClosure0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EmptyIterator.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 5);
      MapIterator<StringTokenizer, Hashtable<ArrayList, Locale.Category>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) mapIterator0;
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) mapIterator0, 0L);
      iteratorArray0[1] = (Iterator<StringTokenizer>) skippingIterator0;
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) skippingIterator0, (Iterator<? extends StringTokenizer>) skippingIterator0, (Iterator<? extends StringTokenizer>) iteratorArray0[0]);
      iteratorArray0[2] = (Iterator<StringTokenizer>) zippingIterator0;
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[3] = iterator0;
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator0);
      iteratorArray0[4] = (Iterator<StringTokenizer>) abstractOrderedMapIteratorDecorator0;
      IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Closure<SQLTransientConnectionException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) closure0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MapIterator<SQLDataException, Transformer<Object, SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null, (Collection<? super SQLDataException>) treeSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.getIterator("s+ _c/@sWhW3X`=L");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s+ _c/@sWhW3X`=L");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 1760, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Closure<SQLTransientConnectionException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) null, (Closure<? super SQLTransientConnectionException>) closure0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, ComparatorPredicate.Criterion> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<StringTokenizer, ComparatorPredicate.Criterion> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, ComparatorPredicate.Criterion>(orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) abstractMapIteratorDecorator0, 1438L, 1438L);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[7] = class7;
      Class<SQLException> class8 = SQLException.class;
      classArray0[8] = class8;
      IteratorUtils.arrayIterator(classArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1290);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      String string0 = "s+ _c/@sWhW3X`=L";
      IteratorUtils.getIterator(linkedHashSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s+ _c/@sWhW3X`=L");
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1223));
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      Transformer<Integer, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("I");
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends SQLClientInfoException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EmptyIterator.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null, sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, 123, sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]\"Sl7W/TQ1]HS4=G&", "N\"*{`W%*[", hashMap0, sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("nvFs", sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("]\"Sl7W/TQ1]HS4=G&", "/Y?vu", 3011, sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MapIterator<ArrayList<SQLDataException>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      sQLExceptionArray0[0] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[2] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[3] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[4] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[5] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLExceptionArray0[6] = (SQLException) sQLWarning0;
      sQLExceptionArray0[7] = (SQLException) sQLIntegrityConstraintViolationException0;
      int int0 = 2;
      IteratorUtils.arrayListIterator(sQLExceptionArray0, 2);
      Class<String> class0 = String.class;
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 5);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[0] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[1] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[2] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[3] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[4] = class5;
      // Undeclared exception!
//      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) sQLExceptionArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter types must match the arguments
//         //
//         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.IteratorUtils");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0$y}yC", "", (-2348));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]", "yf>*[+sv' kaIjz~", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) singletonIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "]cccQ3K", "]cccQ3K", "zdOi_Gg2v6_h3Cn/SmF");
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zdOi_Gg2v6_h3Cn/SmF");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("zdOi_Gg2v6_h3Cn/SmF", "zdOi_Gg2v6_h3Cn/SmF");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.nodeListIterator(nodeList0);
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Closure<SQLTransientConnectionException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) closure0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-1223);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1223));
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      OrderedMapIterator<InstanceofPredicate, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator("s+ _c/@sWhW3X`=L");
      IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1223));
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 30;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null, 30);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1223));
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<?>) iterator0, 570);
      Object object0 = new Object();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", true);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.find((Iterator<String>) singletonIterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-2898));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      IteratorUtils.find((Iterator<Iterator<ArrayDeque>>) iterator0, (Predicate<? super Iterator<ArrayDeque>>) instanceofPredicate0);
      // Undeclared exception!
//      try { 
        properties5.put((Object) null, properties5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Hashtable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zg:r*on{f!1");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "org.apache.commons.collections4.functors.ConstantFactory");
      IteratorUtils.nodeListIterator(nodeList0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) vector0);
      Predicate<Object> predicate0 = null;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      singletonIterator0.next();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0, (Collection<? super Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8K");
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1223), (-1223));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      HashMap<SQLTransientConnectionException, Locale.Category> hashMap0 = new HashMap<SQLTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, Locale.Category>(hashMap0);
      Consumer<SQLTransientConnectionException> consumer0 = (Consumer<SQLTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) entrySetMapIterator0, (Transformer<? super SQLTransientConnectionException, String>) null, "", "JC4gV78y\f!+9,", "\b.3lc-+*zn!x..|cC ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("sufix may not be null");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "sufix may not be null", "sufix may not be null", "yf>*[+sv' kaIjz~");
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[5] = instanceofPredicate4;
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack1);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ListIterator<SQLSyntaxErrorException> listIterator0 = linkedList0.listIterator();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(linkedList0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("sufix may not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "^ky e]I)", "^ky e]I)", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1237));
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer((-1223));
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(".o)Y!f)rIEQ7-i-Ik$", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1223));
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      List<Object> list0 = new LinkedList<Object>();
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("suffix may not be null", "suffix may not be null");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("suffix may not be null", "Cursor closed", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("suffix may not be null", "", (-1223));
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("suffix may not be null");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nonePredicate0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      predicateArray0[3] = predicate2;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) onePredicate0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator("s+ _c/@sWhW3X`=L");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s+ _c/@sWhW3X`=L");
      IteratorUtils.size(iterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) listIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        ComparatorPredicate.comparatorPredicate((SQLException) sQLSyntaxErrorException0, (Comparator<SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Comparator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ConstantTransformer.constantTransformer("suffix may not be null");
      OrderedMapIterator<SQLTransientConnectionException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, Properties>(orderedMapIterator0);
      MapIterator<SQLTransientConnectionException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, Properties>) abstractOrderedMapIteratorDecorator0);
      Transformer<SQLTransientException, String> transformer0 = ConstantTransformer.constantTransformer("delimiter may not be null");
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) mapIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "delimiter may not be null", "delimiter may not be null", "suffix may not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zcP+4J;g(");
      IteratorUtils.emptyMapIterator();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.size(iterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      Hashtable<Object, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<Object, SQLInvalidAuthorizationSpecException>();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer1 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLInvalidAuthorizationSpecException>) hashtable0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer1);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      Iterator<SQLException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator1, (Iterator<? extends SQLException>) iterator0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) iterator1);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny(iterator2, (Predicate<? super SQLException>) predicate1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      Transformer<Object, SQLNonTransientConnectionException> transformer2 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, SQLNonTransientConnectionException> ifTransformer0 = new IfTransformer<Object, SQLNonTransientConnectionException>(predicate0, transformer2, transformer2);
      Iterator<SQLNonTransientConnectionException> iterator3 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) ifTransformer0);
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      IteratorUtils.arrayIterator(propertiesArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator3, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      ConstantTransformer.nullTransformer();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      IteratorUtils.nodeListIterator(nodeList0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(2972, true, true, 1821, 49);
      stack0.add(dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation(343, true, true, 343, 91);
      stack0.add(dataTruncation1);
      IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator("s+ _c/@sWhW3X`=L");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformer must not be null");
      Object object0 = new Object();
      IteratorUtils.size((Iterator<?>) null);
      HashMap<SQLIntegrityConstraintViolationException, DataTruncation> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, DataTruncation>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation>(hashMap0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      Hashtable<Object, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<Object, SQLInvalidAuthorizationSpecException>();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer1 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLInvalidAuthorizationSpecException>) hashtable0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer1);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      Iterator<SQLException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator1, (Iterator<? extends SQLException>) iterator0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny(iterator2, (Predicate<? super SQLException>) predicate1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        FactoryTransformer.factoryTransformer((Factory<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Predicate<IIOMetadataNode> predicate0 = EqualPredicate.equalPredicate(iIOMetadataNode0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, (int) 125);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-271));
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncationArray0[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(resettableListIterator0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIteratorWrapper0, (Predicate<? super SQLDataException>) predicate1);
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLNonTransientException> linkedList2 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLNonTransientException> linkedList3 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[3] = linkedList3;
      ObjectArrayIterator<LinkedList<SQLNonTransientException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLNonTransientException>>(linkedListArray0);
      IteratorUtils.peekingIterator((Iterator<? extends LinkedList<SQLNonTransientException>>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      ConstantTransformer.nullTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getElementsByTagNameNS("", "");
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, PriorityQueue<IIOMetadataNode>> mapIterator1 = IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      Object object1 = new Object();
      IteratorUtils.singletonListIterator((Stack<Vector>) null);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) mapIterator1, (Iterator<? extends SQLException>) mapIterator1);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableListIterator0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedHashSet0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLDataException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-1));
      Class<Locale.LanguageRange>[] classArray0 = (Class<Locale.LanguageRange>[]) Array.newInstance(Class.class, 9);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      classArray0[2] = class1;
      classArray0[3] = class0;
      Class<Locale.LanguageRange> class2 = Locale.LanguageRange.class;
      classArray0[4] = class2;
      Class<Locale.LanguageRange> class3 = Locale.LanguageRange.class;
      classArray0[5] = class3;
      Class<Locale.LanguageRange> class4 = Locale.LanguageRange.class;
      classArray0[6] = class4;
      Class<Locale.LanguageRange> class5 = Locale.LanguageRange.class;
      classArray0[7] = class5;
      Class<Locale.LanguageRange> class6 = Locale.LanguageRange.class;
      classArray0[8] = class6;
      InvokerTransformer<Object, SQLDataException> invokerTransformer0 = new InvokerTransformer<Object, SQLDataException>("", classArray0, classArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) invokerTransformer0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLDataException>) orPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLDataException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      DefaultEquator.defaultEquator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("gSQ", "G|*", (-1));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLNonTransientException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("gSQ", hashMap0, sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("8", "gSQ", sQLClientInfoException1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0);
      Object object0 = new Object();
      IteratorUtils.singletonListIterator((Stack<Vector>) null);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) equalPredicate0);
      sQLClientInfoException1.setNextException((SQLException) null);
      Iterator<SQLException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-271));
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncationArray0[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
      Object object0 = new Object();
      IteratorUtils.emptyIterator();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-271);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-271);
      longArray0[6] = (long) (-271);
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">Wh", "8h", (-271), longArray0, dataTruncation0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      ConstantTransformer.nullTransformer();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("_$LWqG|d'");
      Object object0 = new Object();
      IteratorUtils.size(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, PriorityQueue<IIOMetadataNode>> mapIterator1 = IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = new EqualPredicate<Object>(mapIterator0);
      Object object1 = new Object();
      IteratorUtils.singletonListIterator((Stack<Vector>) null);
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) mapIterator1, (Iterator<? extends SQLException>) mapIterator1);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.LanguageRange>) null, (Predicate<? super Locale.LanguageRange>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("suffix may not be null");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "suffix may not be null", "suffix may not be null", "delimiter may not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("awS-h");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "suffix may not be null", comparator0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "delimiter may not be null", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("?E!yF>(jst", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("H/.C", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate2);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicate2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 2102L, 2102L);
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLDataException>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 2102L, 2102L);
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      ListIterator<DataTruncation> listIterator1 = EmptyListIterator.emptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) listIterator1, (Transformer<? super DataTruncation, ? extends SQLDataException>) transformer0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLDataException>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 0, 1);
      Stack<Properties> stack0 = new Stack<Properties>();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      HashSet<SQLTransientException> hashSet0 = new HashSet<SQLTransientException>();
      IteratorUtils.emptyIterator();
      OrderedMapIterator<InstanceofPredicate, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Integer integer0 = new Integer((-1));
      Properties properties0 = new Properties();
      properties0.putIfAbsent(integer0, integer0);
      IteratorUtils.getIterator(properties0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Closure collection must not be null");
      Object object0 = new Object();
      IteratorUtils.size(orderedMapIterator0);
      HashMap<SQLIntegrityConstraintViolationException, DataTruncation> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, DataTruncation>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation>(hashMap0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Transformer<? super SQLNonTransientException, ? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 0, 1);
      Stack<Properties> stack0 = new Stack<Properties>();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      Iterable<SQLTransientException> iterable0 = new HashSet<SQLTransientException>(0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<InstanceofPredicate, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Integer integer0 = new Integer((-1));
      Properties properties0 = new Properties();
      properties0.putIfAbsent(integer0, integer0);
      IteratorUtils.getIterator(properties0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Closure collection must not be null");
      Object object0 = new Object();
      IteratorUtils.size(orderedMapIterator0);
      HashMap<SQLIntegrityConstraintViolationException, DataTruncation> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, DataTruncation>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation>(hashMap0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Transformer<? super SQLNonTransientException, ? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Invalid map index: ");
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 2102L, 2102L);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation(3778, true, true, 3778, 3778);
      dataTruncationArray0[0] = dataTruncation0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("boDGnH-\"=0~u|I_F3R", dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation(3778, true, true, 3778, 3778, sQLTransactionRollbackException0);
      dataTruncationArray0[1] = dataTruncation1;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.toString((Iterator<DataTruncation>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<InstanceofPredicate>[] vectorArray0 = (Vector<InstanceofPredicate>[]) Array.newInstance(Vector.class, 0);
      int int0 = 31;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(vectorArray0, 31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(anyPredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTimeoutException>) anyPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) nullIsTruePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      ConstantTransformer.nullTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      IteratorUtils.nodeListIterator(nodeList0);
      ArrayList<ArrayDeque<SQLIntegrityConstraintViolationException>> arrayList0 = new ArrayList<ArrayDeque<SQLIntegrityConstraintViolationException>>();
      LoopingListIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> loopingListIterator0 = new LoopingListIterator<ArrayDeque<SQLIntegrityConstraintViolationException>>(arrayList0);
      MapIterator<EnumSet<Locale.Category>, Object> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) mapIterator1, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1223));
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("suffix may not be null");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "suffix may not be null", "suffix may not be null", "delimiter may not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getFirstChild();
      MapIterator<DataTruncation, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) null, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      IteratorUtils.emptyListIterator();
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) entrySetMapIterator0, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      ConstantTransformer.nullTransformer();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class3);
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class1);
      MapIterator<SQLTransientConnectionException, PriorityQueue<IIOMetadataNode>> mapIterator1 = IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      IteratorUtils.size(mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      MapIterator<SQLTransientConnectionException, PriorityQueue<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      IteratorUtils.size(mapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLDataException>) instanceofPredicate1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-940);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) iterator0);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) resettableIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<InstanceofPredicate, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) orderedMapIterator0);
      Integer integer0 = new Integer((-897));
      IteratorUtils.getIterator(orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("eiNZ");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      int[] intArray0 = new int[5];
      int int0 = (-1695);
      intArray0[0] = (-1695);
      intArray0[1] = (-897);
      intArray0[2] = (-777);
      intArray0[3] = (-897);
      intArray0[4] = (-897);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("eiNZ", (String) null, intArray0, batchUpdateException1);
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>((BatchUpdateException[]) null, (-777), 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("suffix may not be null");
      Iterator<SQLTransientConnectionException> iterator0 = null;
      String string0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "delimiter may not be null", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Iterator getKey() can only be called after next() and before remove()");
      iIOMetadataNode0.getFirstChild();
      MapIterator<DataTruncation, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) instanceofPredicateArray0[0], (Equator<Object>) defaultEquator0);
      Hashtable<SQLTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, Locale.Category>(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransientConnectionException>) entrySetMapIterator0, (Predicate<? super SQLTransientConnectionException>) instanceofPredicateArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-271));
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncationArray0[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      dataTruncation0.fillInStackTrace();
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) transformedPredicate0);
      IteratorUtils.singletonListIterator((SQLRecoverableException) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      ConstantTransformer.nullTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      IteratorUtils.nodeListIterator(nodeList0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("F-yz[@lG2??>6?(");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("LW", "", sQLNonTransientException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      dataTruncationArray0[4] = dataTruncationArray0[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      IteratorUtils.toList((Iterator<?>) resettableIterator0, 2236);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) objectArrayListIterator0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("A");
      IteratorUtils.toString((Iterator<SQLException>) zippingIterator0, (Transformer<? super SQLException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      ConstantTransformer.nullTransformer();
      IteratorUtils.getIterator((Object) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      int int0 = 1061;
      intArray0[1] = 1061;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 10;
      intArray1[1] = 1061;
      intArray1[2] = 10;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("|_s(]sb}g@*crd", "transformer may not be null", intArray1, sQLSyntaxErrorException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      batchUpdateExceptionArray0[0] = batchUpdateException2;
      batchUpdateExceptionArray0[1] = batchUpdateException2;
      batchUpdateExceptionArray0[2] = batchUpdateException1;
      batchUpdateExceptionArray0[3] = batchUpdateException2;
      batchUpdateExceptionArray0[4] = batchUpdateException1;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 1061, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("LxCh[FVmQG?\"", "LxCh[FVmQG?\"", 1, sQLFeatureNotSupportedException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "@=RD", 1, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "transformer may not be null", sQLFeatureNotSupportedException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.AbstractQuantifierPredicate", "@=RD", 48);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "", 7, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("LxCh[FVmQG?\"", "G[_", 1922, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("2K1T}V", sQLFeatureNotSupportedException0);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 7);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DataTruncation dataTruncation0 = new DataTruncation(31, false, true, 3, 1224);
      dataTruncation0.getTransferSize();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      dataTruncation0.getLocalizedMessage();
      DataTruncation dataTruncation1 = new DataTruncation(3, true, true, (-535), 514);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation1);
      dataTruncation0.getStackTrace();
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) resettableIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      IteratorUtils.emptyIterator();
      SingletonIterator<LinkedHashSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLClientInfoException>>((LinkedHashSet<SQLClientInfoException>) null, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLClientInfoException>>) singletonIterator0, (Transformer<? super LinkedHashSet<SQLClientInfoException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Locale.Category> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Locale.Category>();
      DataTruncation dataTruncation0 = new DataTruncation(8, false, false, 0, 3070);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[2] = dataTruncation0;
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncation0;
      dataTruncationArray0[5] = dataTruncation0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) properties0);
      Consumer<SQLWarning> consumer0 = (Consumer<SQLWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate0);
      ListIterator<Object> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("[]");
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) singletonListIterator0, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("suffix may not be null");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "suffix may not be null", "suffix may not be null", "delimiter may not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      MapIterator<DataTruncation, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, SQLWarning> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.singletonIterator((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Start index must not be less than zero", "Start index must not be less than zero", (Throwable) null);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) sQLWarning0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(resettableIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1223), true, true, (-1223), (-3423));
      dataTruncation0.getNextWarning();
      IteratorUtils.contains((Iterator<Object>) listIteratorWrapper0, (Object) null);
      Stack<Properties> stack0 = new Stack<Properties>();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator0, 3070);
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableListIterator1, (long) 0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<EnumSet>>) resettableListIterator1);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("`C}ryPz@FzTs(z");
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "i;pbwj", "", "Array class must not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      MapIterator<DataTruncation, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) iterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) zippingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3M!%pH)[}B", "The type to check instanceof must not be null", 2756);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      properties1.put(sQLFeatureNotSupportedException0, iIOMetadataNode0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      IteratorUtils.arrayIterator(propertiesArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("sufix may not be null");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "sufix may not be null", "sufix may not be null", "yf>*[+sv' kaIjz~");
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) null, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) null);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) null);
      Stack<Properties> stack0 = new Stack<Properties>();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) zippingIterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<InstanceofPredicate, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ConstantTransformer.constantTransformer("suffix may not be null");
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(stack0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) zippingIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zdOi_Gg2v6_h3Cn/SmF");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("zdOi_Gg2v6_h3Cn/SmF", "zdOi_Gg2v6_h3Cn/SmF");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.nodeListIterator(nodeList0);
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Closure<SQLTransientConnectionException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) closure0);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<ServiceLoader<SQLDataException>, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<ServiceLoader<SQLDataException>>) orderedMapIterator0, (long)  (-69));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) mapIterator0, 669L);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) skippingIterator0, (Iterator<? extends IIOMetadataNode>) skippingIterator0, (Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) zippingIterator0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      iteratorArray0[2] = iterator0;
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>((IIOMetadataNode) null, false);
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) singletonIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) zippingIterator1);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-271));
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncationArray0[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) transformedPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) null, (-433L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) null);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) null);
      Stack<Properties> stack0 = new Stack<Properties>();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) zippingIterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<InstanceofPredicate, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) orderedMapIterator0);
      Integer integer0 = new Integer((-897));
      IteratorUtils.getIterator(integer0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("eiNZ");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-897);
      intArray0[1] = (-897);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("gwNNvFS", "eiNZ", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 1223, 9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) resettableListIterator0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) resettableListIterator0;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", (Class<?>[]) null, objectArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.find((Iterator<LinkedList<SQLClientInfoException>>) null, (Predicate<? super LinkedList<SQLClientInfoException>>) predicate0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedHashSet0.add(instanceofPredicate0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      linkedList0.spliterator();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) linkedList0);
      MapIterator<SQLSyntaxErrorException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, (Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<TreeSet<TreeSet>>) resettableIterator0, (Transformer<? super TreeSet<TreeSet>, String>) transformer0);
      String string0 = ", ";
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>(", ");
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      MapIterator<Properties, ComparatorPredicate.Criterion> mapIterator1 = IteratorUtils.emptyMapIterator();
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      ResettableIterator<LinkedList<SQLTransientConnectionException>> resettableIterator1 = IteratorUtils.singletonIterator(linkedList1);
      IteratorUtils.skippingIterator((Iterator<LinkedList<SQLTransientConnectionException>>) resettableIterator1, 1L);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack1);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ListIterator<SQLSyntaxErrorException> listIterator0 = linkedList0.listIterator();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(linkedList0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 2102L, 2102L);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      int int0 = (-50);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, (-50), (-4555));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-271));
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncationArray0[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      EqualPredicate.equalPredicate((Object) dataTruncation0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(")M>oZpUR", ").", 0);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
      IteratorUtils.toList((Iterator<?>) resettableIterator0, 2230);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3M!%pH)[}B", "The type to check instanceof must not be null", 2756);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The type to check instanceof must not be null", "org.apache.commons.collections4.bidimap.TreeBidiMap", (-144));
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      String string1 = null;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, "org.apache.commons.collections4.map.AbstractHashedMap", (-841));
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      int int0 = 10;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 7
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(10, false, true, 10, 10);
      dataTruncation0.getTransferSize();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      DataTruncation dataTruncation1 = new DataTruncation(10, true, false, 10, 10, dataTruncation0);
      dataTruncation1.getLocalizedMessage();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      dataTruncation0.getStackTrace();
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) listIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      IteratorUtils.emptyIterator();
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      SingletonIterator<LinkedHashSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLClientInfoException>>(linkedHashSet0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLClientInfoException>>) singletonIterator0, (Transformer<? super LinkedHashSet<SQLClientInfoException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      MapIterator<SQLTransientConnectionException, PriorityQueue<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      IteratorUtils.size(mapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "transformer may not be null", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 10, 10, sQLNonTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1), true, true, (-1), 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-2335), true, false, (-2335), (-1), (Throwable) null);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, false, false, 0, (-271));
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, false, false, 0, 12);
      dataTruncationArray0[4] = dataTruncation4;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      EqualPredicate.equalPredicate((Object) dataTruncation3);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, DataTruncation> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, DataTruncation>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      hashMap0.remove((Object) null, (Object) sQLTimeoutException0);
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation>(hashMap0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("[", "[", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("[", "");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("[");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", "=", sQLDataException1);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException(sQLDataException3);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("", sQLTimeoutException0);
      sQLDataExceptionArray0[6] = sQLDataException6;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-271));
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncationArray0[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) transformedPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      IteratorUtils.emptyIterator();
      SingletonIterator<LinkedHashSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLClientInfoException>>((LinkedHashSet<SQLClientInfoException>) null, false);
      IteratorUtils.pushbackIterator((Iterator<? extends LinkedHashSet<SQLClientInfoException>>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3M!%pH)[}B", "The type to check instanceof must not be null", 2756);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The type to check instanceof must not be null", "org.apache.commons.collections4.bidimap.TreeBidiMap", (-144));
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, "org.apache.commons.collections4.map.AbstractHashedMap", (-841));
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionException2.initCause(sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 9, 290);
      dataTruncation0.getStackTrace();
      ResettableListIterator<SQLWarning> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (Iterator<? extends SQLWarning>) resettableListIterator0, (Iterator<? extends SQLWarning>) resettableListIterator0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.emptyIterator();
      SingletonIterator<LinkedHashSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLClientInfoException>>((LinkedHashSet<SQLClientInfoException>) null, true);
      singletonIterator0.reset();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLClientInfoException>>) singletonIterator0, (Transformer<? super LinkedHashSet<SQLClientInfoException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3M!%pH)[}B", "The type to check instanceof must not be null", 2756);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      properties1.put(sQLFeatureNotSupportedException0, iIOMetadataNode0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      SingletonIterator<LinkedHashSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLClientInfoException>>((LinkedHashSet<SQLClientInfoException>) null, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLClientInfoException>>) singletonIterator0, (Transformer<? super LinkedHashSet<SQLClientInfoException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties(properties2);
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = (-1223);
      DataTruncation dataTruncation0 = new DataTruncation((-1223), true, true, (-1223), (-1223));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.getTransferSize();
      dataTruncation0.forEach(consumer0);
      dataTruncation0.getLocalizedMessage();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      dataTruncation0.getStackTrace();
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) resettableIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      IteratorUtils.emptyIterator();
      SingletonIterator<LinkedHashSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLClientInfoException>>((LinkedHashSet<SQLClientInfoException>) null, false);
      Transformer<Object, String> transformer0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLClientInfoException>>) singletonIterator0, (Transformer<? super LinkedHashSet<SQLClientInfoException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      IteratorUtils.singletonIterator((LinkedList<Transformer>) linkedList0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, (-444L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "transformer may not be null", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 10, 10, sQLNonTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1), true, true, (-1), 0, (Throwable) null);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-2335), true, false, (-2335), (-1), (Throwable) null);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, false, false, 0, (-271));
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, false, false, 0, 12);
      dataTruncationArray0[4] = dataTruncation4;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation3);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) objectArrayListIterator0, (Predicate<? super Object>) predicate1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyMapIterator();
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      int int0 = 1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Collection must not be null", "Collection must not be null", 1);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("]", "Collection must not be null");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", "Collection must not be null");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("]", (String) null);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("", "");
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException((String) null);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1, 3447);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 1L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<Integer, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, Locale.Category>) orderedMapIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      String string0 = ",0";
      StringTokenizer stringTokenizer0 = new StringTokenizer(",0", ",0");
      // Undeclared exception!
//      try { 
        stringTokenizer0.nextToken(",0");
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 47;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 47);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) mapIterator1);
      IteratorUtils.loopingListIterator(list0);
      int int0 = (-5582);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-5582));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3M!%pH)[}B", "The type to check instanceof must not be null", 2756);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      properties1.put(sQLFeatureNotSupportedException0, iIOMetadataNode0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      IteratorUtils.arrayIterator(propertiesArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) null, (Predicate<? super EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = (-940);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "| Y4 j@Jr]Kl", (-824), (-940));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 2);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 1518;
      Integer integer0 = new Integer(1518);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 1518);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&OCS1K#f$21I5VYMM<C", "&OCS1K#f$21I5VYMM<C", sQLTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("&OCS1K#f$21I5VYMM<C", (String) null, 0, mockThrowable0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      mockThrowable0.getSuppressed();
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", "transformer may not be null", (-1), intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<SQLTransactionRollbackException, StringTokenizer> hashtable0 = new Hashtable<SQLTransactionRollbackException, StringTokenizer>();
      EntrySetMapIterator<SQLTransactionRollbackException, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, StringTokenizer>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, StringTokenizer>) entrySetMapIterator0);
      IteratorUtils.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("aa5~Yi+N2sp O", "aa5~Yi+N2sp O");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("aa5~Yi+N2sp O", hashMap0, sQLTransientException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException("aa5~Yi+N2sp O", "aa5~Yi+N2sp O", sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientException1, (-1), (-160));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string0 = "";
      int int0 = 31;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (Throwable) null);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 31, sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(31, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(31, sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLNonTransientException: ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = linkedHashSet0.add(sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(31, sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLNonTransientException: ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(linkedHashSet0.contains(sQLInvalidAuthorizationSpecException0));
      
      boolean boolean1 = linkedHashSet0.add((SQLInvalidAuthorizationSpecException) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(sQLInvalidAuthorizationSpecException0));
      
      ResettableIterator<LinkedHashSet<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(sQLInvalidAuthorizationSpecException0));
      assertNotNull(resettableIterator0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Efo_qvF}JxsN]%HMK");
      assertEquals("java.sql.SQLTransactionRollbackException: Efo_qvF}JxsN]%HMK", sQLTransactionRollbackException0.toString());
      assertEquals("Efo_qvF}JxsN]%HMK", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Efo_qvF}JxsN]%HMK", sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: Efo_qvF}JxsN]%HMK", sQLTransactionRollbackException0.toString());
      assertEquals("Efo_qvF}JxsN]%HMK", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Efo_qvF}JxsN]%HMK", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Efo_qvF}JxsN]%HMK", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLTransactionRollbackException: Efo_qvF}JxsN]%HMK", sQLTransactionRollbackException0.toString());
      assertEquals("Efo_qvF}JxsN]%HMK", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Efo_qvF}JxsN]%HMK", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Efo_qvF}JxsN]%HMK", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Efo_qvF}JxsN]%HMK", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLFeatureNotSupportedException: Efo_qvF}JxsN]%HMK", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 10, (-513));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 10;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) zippingIterator0, class0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, class0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(sQLExceptionArray0);
      assertEquals(0, sQLExceptionArray0.length);
      
      String string0 = "GUV|%'";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("R6sc", "GUV|%'");
      assertEquals("GUV|%'", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("R6sc", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      assertEquals("GUV|%'", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("R6sc", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertEquals("GUV|%'", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("R6sc", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLTransactionRollbackException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("GUV|%'", "GUV|%'", (-3498), sQLTransactionRollbackException0);
      assertEquals("GUV|%'", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("R6sc", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLInvalidAuthorizationSpecException: R6sc", sQLTransactionRollbackException0.toString());
      assertEquals("GUV|%'", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-3498), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: GUV|%'", sQLFeatureNotSupportedException0.toString());
      assertEquals("GUV|%'", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(sQLFeatureNotSupportedException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3M!%pH)[}B", "The type to check instanceof must not be null", 2756);
      assertEquals(2756, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3M!%pH)[}B", sQLFeatureNotSupportedException0.toString());
      assertEquals("The type to check instanceof must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("3M!%pH)[}B", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Enumeration<?> enumeration0 = properties0.propertyNames();
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(enumeration0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Object object0 = properties1.put(sQLFeatureNotSupportedException0, iIOMetadataNode0);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertEquals(2756, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3M!%pH)[}B", sQLFeatureNotSupportedException0.toString());
      assertEquals("The type to check instanceof must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("3M!%pH)[}B", sQLFeatureNotSupportedException0.getMessage());
      assertNull(object0);
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertTrue(properties2.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties1));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotNull(properties2);
      
      propertiesArray0[2] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertNotNull(resettableIterator0);
      assertEquals(3, propertiesArray0.length);
      
      Iterator<EnumSet<Locale.Category>> iterator0 = null;
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<String, HashMap<PriorityQueue, Integer>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashMap<PriorityQueue, Integer>>) mapIterator0);
      assertNotNull(mapIterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
      
      HashMap<SQLIntegrityConstraintViolationException, DataTruncation> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, DataTruncation>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, DataTruncation>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotNull(properties2);
      
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties0));
      assertEquals(0, properties3.size());
      assertTrue(properties3.isEmpty());
      assertNotNull(properties3);
      
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      assertTrue(properties4.equals((Object)properties3));
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties1));
      assertEquals(0, properties4.size());
      assertTrue(properties4.isEmpty());
      assertNotNull(properties4);
      
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties(properties2);
      assertTrue(properties2.equals((Object)properties3));
      assertTrue(properties2.equals((Object)properties4));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties5.equals((Object)properties0));
      assertTrue(properties5.equals((Object)properties2));
      assertTrue(properties5.equals((Object)properties3));
      assertTrue(properties5.equals((Object)properties4));
      assertTrue(properties5.equals((Object)properties1));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertTrue(properties5.isEmpty());
      assertEquals(0, properties5.size());
      assertNotNull(properties5);
      
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      assertTrue(properties6.equals((Object)properties0));
      assertTrue(properties6.equals((Object)properties3));
      assertTrue(properties6.equals((Object)properties5));
      assertTrue(properties6.equals((Object)properties1));
      assertTrue(properties6.equals((Object)properties2));
      assertTrue(properties6.equals((Object)properties4));
      assertTrue(properties6.isEmpty());
      assertEquals(0, properties6.size());
      assertNotNull(properties6);
      
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      assertTrue(properties7.equals((Object)properties1));
      assertTrue(properties7.equals((Object)properties5));
      assertTrue(properties7.equals((Object)properties4));
      assertTrue(properties7.equals((Object)properties3));
      assertTrue(properties7.equals((Object)properties0));
      assertTrue(properties7.equals((Object)properties6));
      assertTrue(properties7.equals((Object)properties2));
      assertEquals(0, properties7.size());
      assertTrue(properties7.isEmpty());
      assertNotNull(properties7);
      
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      assertTrue(properties8.equals((Object)properties0));
      assertTrue(properties8.equals((Object)properties7));
      assertTrue(properties8.equals((Object)properties6));
      assertTrue(properties8.equals((Object)properties5));
      assertTrue(properties8.equals((Object)properties4));
      assertTrue(properties8.equals((Object)properties1));
      assertTrue(properties8.equals((Object)properties3));
      assertTrue(properties8.equals((Object)properties2));
      assertEquals(0, properties8.size());
      assertTrue(properties8.isEmpty());
      assertNotNull(properties8);
      
      propertiesArray0[8] = properties8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 271, 271);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) null);
      assertNotNull(resettableIterator0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) null);
      assertTrue(boolean0);
      
      Stack<Properties> stack0 = new Stack<Properties>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(iterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertNotNull(instanceofPredicate2);
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate2));
      assertNotNull(instanceofPredicate3);
      
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate4);
      
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate1));
      assertNotNull(instanceofPredicate5);
      
      instanceofPredicateArray0[5] = instanceofPredicate5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, (-50), (-50));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(iterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertNotNull(instanceofPredicate2);
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate2));
      assertNotNull(instanceofPredicate3);
      
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate4);
      
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate5);
      
      instanceofPredicateArray0[5] = instanceofPredicate5;
      int int0 = 44;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) class0, (-50), 44);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3M!%pH)[}B", "The type to check instanceof must not be null", 2756);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3M!%pH)[}B", sQLFeatureNotSupportedException0.toString());
      assertEquals("The type to check instanceof must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(2756, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("3M!%pH)[}B", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The type to check instanceof must not be null", "org.apache.commons.collections4.bidimap.TreeBidiMap", (-144));
      assertEquals("The type to check instanceof must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals((-144), sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: The type to check instanceof must not be null", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, "org.apache.commons.collections4.map.AbstractHashedMap", (-841));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap", sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals((-841), sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNotNull(sQLTransientConnectionException1);
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException2.toString());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertNull(sQLTransientConnectionException2.getSQLState());
      assertNull(sQLTransientConnectionException2.getMessage());
      assertNotNull(sQLTransientConnectionException2);
      
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(3, sQLTransientConnectionExceptionArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 7
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 2102L, 0L);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(boundedIterator0);
      
      MapIterator<SQLTransientConnectionException, PriorityQueue<IIOMetadataNode>> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0, (Equator<Object>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(predicate0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = IteratorUtils.find((Iterator<SQLTransientConnectionException>) mapIterator1, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Locale.Category> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Locale.Category>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(sQLFeatureNotSupportedException0, locale_Category0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      EntrySetMapIterator<SQLFeatureNotSupportedException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Locale.Category>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      String string0 = entrySetMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(string0);
      
      Collection<Locale.Category> collection0 = hashMap0.values();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(collection0.contains(locale_Category0));
      assertNotNull(collection0);
      
      entrySetMapIterator0.reset();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0, 3149L, 984L);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(boundedIterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 3);
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator1);
      
      int int0 = (-144);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator1, (-144));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -144
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) listIterator0, (Iterator<? extends SQLRecoverableException>) listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) listIterator0, (Iterator<? extends SQLRecoverableException>) iterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      Iterator<?> iterator1 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      StringTokenizer stringTokenizer0 = new StringTokenizer("G73S ", "G73S ");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("G73S ", "Map is empty");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("", "X]");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("", "Collection must not be null", true);
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("Entry does not exist: ", "P{O", true);
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("\") in this Map", "Map is empty", true);
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("\") in this Map");
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("Entry does not exist: ", "Collection must not be null", true);
      stringTokenizerArray0[7] = stringTokenizer7;
      StringTokenizer stringTokenizer8 = new StringTokenizer("", (String) null);
      stringTokenizerArray0[8] = stringTokenizer8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringTokenizerArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Predicate<SQLTransientException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLTransientException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("suffix may not be null");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "suffix may not be null", "suffix may not be null", "delimiter may not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ArrayDeque<SQLWarning>[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }
}
