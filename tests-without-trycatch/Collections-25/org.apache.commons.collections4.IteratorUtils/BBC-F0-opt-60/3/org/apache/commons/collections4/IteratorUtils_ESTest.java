/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 17:25:01 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Transformer<Properties, SQLWarning> transformer0 = InvokerTransformer.invokerTransformer("3|V~:$gXtiJZGB'd'! ");
      IteratorUtils.getIterator(transformer0);
      Locale[] localeArray0 = new Locale[0];
      IteratorUtils.arrayListIterator(localeArray0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 626;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("0B.VKgFWqU\"FF'", "0B.VKgFWqU\"FF'");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 626, sQLTransientConnectionException0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      Transformer<Object, SQLRecoverableException> transformer0 = InvokerTransformer.invokerTransformer("-9z\"Sy#D~:?EDF)UV", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '-9z\"Sy#D~:?EDF)UV' on 'class java.sql.SQLRecoverableException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 99);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(comparatorPredicate0, (Closure<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) listIterator0, (Closure<? super SQLTransientConnectionException>) ifClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      batchUpdateException0.getStackTrace();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~]*LcGHL])");
      Integer integer0 = new Integer(2456);
      batchUpdateException0.getLocalizedMessage();
      Integer integer1 = new Integer(1977);
      Integer integer2 = new Integer(512);
      Integer integer3 = new Integer((-163));
      Integer integer4 = new Integer((-1127));
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer4;
      integerArray0[1] = integer2;
      Integer integer5 = new Integer((-2286));
      integerArray0[2] = integer5;
      Integer integer6 = new Integer(2029);
      integerArray0[3] = integer6;
      Integer integer7 = new Integer((-163));
      integerArray0[4] = integer7;
      integerArray0[5] = integer3;
      integerArray0[6] = integer3;
      integerArray0[7] = integer4;
      integerArray0[8] = integer4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, 0, (int) integerArray0[0]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.get((Iterator<BatchUpdateException>) singletonIterator0, 0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RlE8", "Y", 0, batchUpdateException1);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("&vwysT'Pl.z&vNW:", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("RlE8", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("RlE8", "&vwysT'Pl.z&vNW:", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0, 0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      Hashtable<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>(hashtable0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("B4gc.");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("*M9ih}W%q");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode(" must be Comparable");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("*M9ih}W%q");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode(" must be Comparable");
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 8, 8);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 10;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>((Predicate<? super SQLException>[]) null);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) nonePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      singletonIterator0.reset();
      IteratorUtils.get((Iterator<BatchUpdateException>) singletonIterator0, 0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.bidimap.TreeBidiMap$Node", "org.apache.commons.collections4.bidimap.TreeBidiMap$Node");
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      int int0 = (-1155);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0, (-1155));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<HashSet<DataTruncation>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 2078, 2556);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Transformer<Object, Locale.Category> transformer0 = InvokerTransformer.invokerTransformer("yb$C)Up*+K:,", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("yb$C)Up*+K:,", "Transformers must not be null", (Throwable) null);
      InvokerTransformer<SQLException, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLNonTransientConnectionException>("yb$C)Up*+K:,", classArray0, classArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'yb$C)Up*+K:,' on 'class java.sql.SQLNonTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OrderedIterator<SQLTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IteratorUtils.getIterator(orderedIterator0);
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>(hashSet0);
      ListIterator<PriorityQueue<Properties>> listIterator0 = IteratorUtils.singletonListIterator(priorityQueue0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<Properties>>) listIterator0, (Transformer<? super PriorityQueue<Properties>, String>) transformer0, "9d:~L-%", "|^*Y,BBT?R.ui", "9d:~L-%");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListIterator<String> listIterator0 = new SingletonListIterator<String>("gW}OhN% :4kij9e}_");
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Class<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Enumeration<Locale.Category> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) stack0);
      Integer integer0 = new Integer(100);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0, 100);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1115;
      intArray0[2] = 14;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTransientConnectionException0);
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("YbL4|EyO[3mVN7m]nM");
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'YbL4|EyO[3mVN7m]nM' on 'class java.sql.BatchUpdateException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>((BatchUpdateException) null);
      IteratorUtils.get((Iterator<BatchUpdateException>) singletonListIterator0, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<ArrayDeque<Stack>>) singletonListIterator0, (Predicate<? super ArrayDeque<Stack>>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<ArrayList<SQLTransientConnectionException>>) null, (Closure<? super ArrayList<SQLTransientConnectionException>>) closure0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      int int0 = 0;
      IteratorUtils.get((Iterator<BatchUpdateException>) singletonIterator0, 0);
      String string0 = ",;BV/]qY`A,7U;yAWY\"";
      Transformer<StringTokenizer, String> transformer0 = InvokerTransformer.invokerTransformer("The closure array must not contain a null closure, index ");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer(",;BV/]qY`A,7U;yAWY\"");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer(",;BV/]qY`A,7U;yAWY\"", ",;BV/]qY`A,7U;yAWY\"");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("oQzb7AqKOjSq$");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("WdALXE1E/kDM}n6SY:3");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("WdALXE1E/kDM}n6SY:3");
      stringTokenizerArray0[4] = stringTokenizer4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      StringTokenizer stringTokenizer5 = new StringTokenizer("%XY\u0006b_^[]-s", "%XY\u0006b_^[]-s", false);
      stringTokenizerArray0[5] = stringTokenizer5;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) objectArrayListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'The closure array must not contain a null closure, index ' on 'class java.util.StringTokenizer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonListIterator0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<ArrayDeque<Stack>>) singletonListIterator0, (Predicate<? super ArrayDeque<Stack>>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.getIterator(class0);
      MapIterator<SQLTransientConnectionException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLTransientException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLTransientException>) mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      MapIterator<LinkedHashSet<IIOMetadataNode>, Stack<BatchUpdateException>> mapIterator2 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator2);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      int int0 = 2;
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 2, 2, sQLFeatureNotSupportedException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(singletonIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<ArrayDeque<Stack>>) singletonListIterator0, (Predicate<? super ArrayDeque<Stack>>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      AndPredicate<String> andPredicate0 = new AndPredicate<String>((Predicate<? super String>) null, (Predicate<? super String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) andPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      batchUpdateException0.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("J8DUi1|(hTc", "J8DUi1|(hTc", 166, batchUpdateException0);
      batchUpdateException0.addSuppressed(sQLTimeoutException0);
      IteratorUtils.get((Iterator<BatchUpdateException>) singletonIterator0, 0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) null, (Predicate<? super Object>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Transformer<? super IIOMetadataNode, ? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<ArrayDeque<Stack>>) orderedMapIterator0, (Predicate<? super ArrayDeque<Stack>>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLDataException0.getLocalizedMessage();
      sQLDataExceptionArray0[0] = sQLDataException0;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("gW}OhN% :4kij9e}_");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",o:48", ",o:48");
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.isEmpty(listIterator0);
      sQLNonTransientConnectionException0.setNextException(sQLNonTransientConnectionException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonListIterator0);
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      stack0.elements();
      EnumSet.range(locale_Category0, locale_Category0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.getIterator("Dihd~");
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<Locale.Category, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Locale.Category, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.Category, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) abstractMapIteratorDecorator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      IteratorUtils.toArray(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 27);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) listIterator0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super DataTruncation>) predicate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      UniquePredicate<SQLClientInfoException> uniquePredicate1 = new UniquePredicate<SQLClientInfoException>();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends Locale.Category>) orderedMapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      int int0 = (-311);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-311), sQLNonTransientException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(singletonListIterator0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) listIteratorWrapper0;
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(linkedList0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) loopingListIterator0;
      Hashtable<SQLTransientConnectionException, ServiceLoader<Object>> hashtable0 = new Hashtable<SQLTransientConnectionException, ServiceLoader<Object>>();
      EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Object>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Object>>(hashtable0);
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) entrySetMapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      UniquePredicate<SQLClientInfoException> uniquePredicate1 = new UniquePredicate<SQLClientInfoException>();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends Locale.Category>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.hasAttributes();
      IteratorUtils.getIterator(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      iIOMetadataNode0.hasAttributes();
      IteratorUtils.getIterator(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer((-418));
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer0);
      IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<BatchUpdateException, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.get((Iterator<BatchUpdateException>) singletonIterator0, 0);
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      Iterator<Properties> iterator0 = priorityQueue0.iterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 75);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 75
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.get((Iterator<BatchUpdateException>) singletonIterator0, 0);
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      priorityQueue0.iterator();
      MapIterator<Properties, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Properties>) mapIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<BatchUpdateException, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, class0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, 93);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 2;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Transformer<Object, SQLClientInfoException>>) null, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("6h@Nt1v\";:Y_wNm", "6h@Nt1v\";:Y_wNm", sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?xZWh7pR7EVq 2LQ?", "6h@Nt1v\";:Y_wNm", 53, sQLDataException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<SQLTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (-1450));
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", 5);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("Entry does not exist: ", "");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>((Factory<? extends Boolean>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[");
      Factory<IIOMetadataNode> factory0 = ConstantFactory.constantFactory(iIOMetadataNode0);
      FactoryTransformer.factoryTransformer((Factory<? extends IIOMetadataNode>) factory0);
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) factoryTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Vector<EnumSet<Locale.Category>> vector0 = new Vector<EnumSet<Locale.Category>>();
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) vector0);
      BoundedIterator<EnumSet<Locale.Category>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, 2036L, 0L);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) boundedIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<Iterator<Class<Object>>>) null, (Predicate<? super Iterator<Class<Object>>>) notPredicate0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) orderedIterator0;
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0, (Iterator<? extends SQLClientInfoException>) zippingIterator0, (Iterator<? extends SQLClientInfoException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null, 53, 53);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.emptyMapIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "Predicate must not be null", 2156, map0, sQLTransientException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("@o", map0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Predicate must not be null", "", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.emptyMapIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) treeSet0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator";
      stringArray0[3] = "";
      stringArray0[4] = "]";
      stringArray0[5] = "NR";
      stringArray0[6] = "org.apache.commons.collections4.FunctorException";
      stringArray0[7] = "7";
      stringArray0[8] = "org.apache.commons.collections4.functors.TruePredicate";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Closure<String> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<String>) objectArrayIterator0, (Closure<? super String>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransactionRollbackException>) null);
      IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Transformer<? super IIOMetadataNode, ? extends SQLTransientException>) transformer0);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>(priorityQueue0);
      LoopingListIterator<Locale.Category> loopingListIterator0 = new LoopingListIterator<Locale.Category>(linkedList0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) loopingListIterator0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator(", ");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) uniquePredicate0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((String[]) null, 3613);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ts*Z#*oYvkz2{\"cZ", "}N[-7v>iww", 0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IteratorUtils.emptyMapIterator();
      ListIterator<Closure<Object>> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = 293;
      List<Closure<Object>> list0 = IteratorUtils.toList((Iterator<? extends Closure<Object>>) listIterator0, 293);
      LoopingListIterator<Closure<Object>> loopingListIterator0 = new LoopingListIterator<Closure<Object>>(list0);
      Predicate<Object> predicate0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Closure<Object>>) loopingListIterator0, (Predicate<? super Closure<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator(", ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",o:48", ",o:48");
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<SQLNonTransientConnectionException> comparatorPredicate0 = new ComparatorPredicate<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<SQLNonTransientConnectionException> andPredicate0 = new AndPredicate<SQLNonTransientConnectionException>(comparatorPredicate0, comparatorPredicate0);
      IteratorUtils.isEmpty(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NOPClosure.nopClosure();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableListIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<TreeSet<ServiceLoader>>) listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure.forClosure(0, (Closure<? super Object>) null);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) resettableListIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(properties0, comparator1, comparatorPredicate_Criterion0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(comparatorPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Iterator<Class<Object>>>) null, (Predicate<? super Iterator<Class<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Iterator<Class<Object>>>) null, (Predicate<? super Iterator<Class<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Closure<Object> closure0 = NOPClosure.nopClosure();
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 9);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category1, locale_Category2, locale_Category0, locale_Category1);
      enumSetArray0[1] = enumSet1;
      enumSetArray0[2] = enumSet0;
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf(enumSet1);
      enumSetArray0[3] = enumSet2;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet3 = EnumSet.allOf(class0);
      enumSetArray0[4] = enumSet3;
      EnumSet<Locale.Category> enumSet4 = EnumSet.complementOf(enumSet1);
      enumSetArray0[5] = enumSet4;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet5 = EnumSet.of(locale_Category3, locale_Category4, locale_Category5);
      enumSetArray0[6] = enumSet5;
      EnumSet<Locale.Category> enumSet6 = EnumSet.of(locale_Category5, locale_Category3);
      enumSetArray0[7] = enumSet6;
      EnumSet<Locale.Category> enumSet7 = EnumSet.complementOf(enumSet6);
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      enumSet5.add(locale_Category6);
      enumSetArray0[8] = enumSet7;
      ObjectArrayIterator<EnumSet<Locale.Category>> objectArrayIterator0 = new ObjectArrayIterator<EnumSet<Locale.Category>>(enumSetArray0, 0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) objectArrayIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      IteratorUtils.size(listIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0, 0);
      IteratorUtils.apply((Iterator<Locale.Category>) objectArrayIterator0, (Closure<? super Locale.Category>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category6, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      OrderedIterator<SQLTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<Iterator<Class<Object>>>) null, (Predicate<? super Iterator<Class<Object>>>) notPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) orderedIterator0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5SoQZ5]5qp+", (Throwable) null);
      Transformer<SQLNonTransientException, SQLNonTransientException> transformer0 = InvokerTransformer.invokerTransformer("5SoQZ5]5qp+");
      IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      MapIterator<SQLNonTransientConnectionException, Iterator<String>> mapIterator0 = null;
      // Undeclared exception!
//      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends Iterator<String>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null", "Closure must not be null", (-23));
      sQLNonTransientConnectionException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      String string0 = null;
      String string1 = "[";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "[", sQLNonTransientConnectionException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      String string2 = "u<#_'+`7N;ccL}d#L";
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("j5U`.,dNe^N}?C", "u<#_'+`7N;ccL}d#L", (-23));
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("[", "j5U`.,dNe^N}?C", (-23), sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("u<#_'+`7N;ccL}d#L");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      objectArrayListIterator0.hasNext();
      AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      NOPClosure.nopClosure();
      int int0 = 9;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      ArrayList<EnumSet<Locale.Category>> arrayList0 = new ArrayList<EnumSet<Locale.Category>>();
      LinkedList<EnumSet<Locale.Category>> linkedList1 = new LinkedList<EnumSet<Locale.Category>>(arrayList0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) linkedList1);
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) zippingIterator0, (Closure<? super EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UniquePredicate.uniquePredicate();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("!d:$f'C a>v=bX*");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) resettableIterator0, 1251);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1250
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) resettableIterator0, 1251);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1250
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      OrderedIterator<SQLTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<Iterator<Class<Object>>>) null, (Predicate<? super Iterator<Class<Object>>>) notPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) orderedIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      IteratorUtils.arrayIterator(locale_CategoryArray0, 0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer[] integerArray0 = new Integer[21];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, int0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer1);
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) identityPredicate0);
      Stack<String> stack0 = new Stack<String>();
      ListIterator<String> listIterator0 = stack0.listIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.asIterable((Iterator<? extends Locale.Category>) resettableListIterator0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashMap0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(orderedIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) linkedList0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("n`m@0q*\"`W]", classArray0, classArray0);
      IteratorUtils.toString(iterator0, (Transformer<? super String, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UniquePredicate.uniquePredicate();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("!d:$f'C a>v=bX*");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      iIOMetadataNodeArray0[0] = iIOMetadataNode3;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransactionRollbackException>) null);
      IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Transformer<? super IIOMetadataNode, ? extends SQLTransientException>) transformer0);
      IteratorUtils.isEmpty(resettableListIterator0);
      MapIterator<Properties, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) resettableListIterator0);
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<HashMap<SQLTransactionRollbackException, TreeSet>>) iterator0, (Transformer<? super HashMap<SQLTransactionRollbackException, TreeSet>, String>) transformer1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.getIterator((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      OrderedMapIterator<BatchUpdateException, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, class0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, 93);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.getIterator((Object) null);
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getSuppressed();
      OrderedMapIterator<SQLNonTransientException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends Integer>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator1, 0L);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("#,_=uD");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Entry does not exist: ", "#,_=uD");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator(", ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",o:48", ",o:48");
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<SQLNonTransientConnectionException> comparatorPredicate0 = new ComparatorPredicate<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<SQLNonTransientConnectionException> andPredicate0 = new AndPredicate<SQLNonTransientConnectionException>(comparatorPredicate0, comparatorPredicate0);
      IteratorUtils.isEmpty(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("The method to invoke must not be null", ",o:48");
      iIOMetadataNode0.getNamespaceURI();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(", ");
      sQLNonTransientConnectionException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNode2.insertBefore(iIOMetadataNode0, (Node) null);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      objectArrayListIterator0.hasNext();
      AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      IteratorUtils.find((Iterator<ArrayDeque<Stack>>) listIterator0, (Predicate<? super ArrayDeque<Stack>>) predicate2);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) priorityQueue0);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue1 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue1);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iw3h|\"o(h'Ut", "iw3h|\"o(h'Ut", (-1343));
      assertEquals("iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1343), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      assertEquals("iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1343), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.toString());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) singletonIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(boolean0);
      assertEquals("iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1343), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: iw3h|\"o(h'Ut", sQLIntegrityConstraintViolationException0.toString());
      assertFalse(singletonIterator0.hasNext());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.singletonListIterator(", ");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      LoopingIterator<Locale.Category> loopingIterator0 = new LoopingIterator<Locale.Category>(treeSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Locale.Category>) loopingIterator0, (Predicate<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator(", ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",o:48", ",o:48");
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<SQLNonTransientConnectionException> comparatorPredicate0 = new ComparatorPredicate<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<SQLNonTransientConnectionException> andPredicate0 = new AndPredicate<SQLNonTransientConnectionException>(comparatorPredicate0, comparatorPredicate0);
      IteratorUtils.isEmpty(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("The method to invoke must not be null", ",o:48");
      iIOMetadataNode0.getNamespaceURI();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      sQLNonTransientConnectionException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNode2.insertBefore(iIOMetadataNode0, (Node) null);
      Comparator<IIOMetadataNode> comparator1 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator1, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator1, (Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator(", ");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(", ");
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLNonTransientConnectionException0);
      UniquePredicate.uniquePredicate();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator1 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) singletonIterator1);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e,");
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      iteratorArray0[1] = (Iterator<String>) listIterator0;
      iteratorArray0[2] = (Iterator<String>) listIterator0;
      iteratorArray0[3] = (Iterator<String>) listIterator0;
      iteratorArray0[4] = (Iterator<String>) listIterator0;
      iteratorArray0[5] = (Iterator<String>) listIterator0;
      iteratorArray0[6] = (Iterator<String>) listIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      UniquePredicate.uniquePredicate();
      MapIterator<Locale.Category, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Locale.Category, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ?>) mapIterator0);
      MapIterator<Locale.Category, Object> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) mapIterator2, (Transformer<? super Locale.Category, String>) transformer0, "' on '", "Predicate must not be null", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("9VlT?iU0{[hi;X[", "9VlT?iU0{[hi;X[", (-215));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Kn!gr`,GJi!V.1G6LO", ">7", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, (-215), sQLTimeoutException0);
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      hashMap0.put(sQLNonTransientConnectionException0, sQLTransactionRollbackException0);
      sQLNonTransientException0.setNextException(sQLTimeoutException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("9VlT?iU0{[hi;X[");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) singletonIterator0, (Transformer<? super Locale.Category, String>) factoryTransformer0, (String) null, "6", "{0|[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      UniquePredicate.uniquePredicate();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("ListIterator must not be null");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Locale.Category>) singletonIterator0, (Transformer<? super Locale.Category, String>) factoryTransformer0, "Iterator remove() can only be called once after next()", "Iterator remove() can only be called once after next()", "8sc=4M$3IU]\"kWox7L");
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLClientInfoException>>) stack0);
      FactoryTransformer<StringTokenizer, String> factoryTransformer1 = new FactoryTransformer<StringTokenizer, String>(constantFactory0);
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) factoryTransformer1, "Iterator remove() can only be called once after next()", "", "");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.toString((Iterator<IIOMetadataNode>) null);
      OrderedMapIterator<SQLDataException, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>("[]", (-1941));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 217;
      intArray0[1] = 217;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "The map size must be 0 or 1", batchUpdateException0);
      sQLNonTransientConnectionException0.setNextException(batchUpdateException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("The map size must be 0 or 1");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) singletonIterator0, (Transformer<? super Locale.Category, String>) factoryTransformer0, "KZO!O", (String) null, "The map size must be 0 or 1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      MapIterator<Locale.Category, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Locale.Category, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ?>) mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("ListIterator must not be null");
      IteratorUtils.toString((Iterator<Locale.Category>) mapIterator1, (Transformer<? super Locale.Category, String>) transformer0, "ListIterator must not be null", "ListIterator must not be null", "ListIterator must not be null");
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLClientInfoException>>) vector0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ListIterator<Vector<SQLWarning>> listIterator1 = IteratorUtils.singletonListIterator(vector0);
      IteratorUtils.skippingIterator((Iterator<Vector<SQLWarning>>) listIterator1, (long) 0);
      IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", "NodeList must not be null", 0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", "", 0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>[]) null, 1408);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("is2/S0Fm", ",o:48");
      IteratorUtils.isEmpty(resettableIterator0);
      sQLNonTransientConnectionException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLDataException sQLDataException0 = new SQLDataException("ObaqqQXCebMG#1=", "p$Px\"8", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLDataException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(",o:48", "is2/S0Fm", 2580);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("is2/S0Fm", "Entry does not exist: ", (-849), sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      objectArrayListIterator0.hasNext();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<ArrayDeque<Stack>>) listIterator0, (Predicate<? super ArrayDeque<Stack>>) predicate1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 39);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure0);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      IteratorUtils.emptyOrderedIterator();
      List<IIOMetadataNode> list0 = new Vector<IIOMetadataNode>();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(">7BxM(n.+X");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("MapIterator must not be null");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("Node must not be null");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransactionRollbackException>) null);
      IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Transformer<? super IIOMetadataNode, ? extends SQLTransientException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UniquePredicate.uniquePredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) linkedList0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[8];
      intArray0[0] = 5819;
      intArray0[1] = (-2639);
      intArray0[2] = 752;
      intArray0[3] = 1189;
      intArray0[4] = 0;
      intArray0[5] = (-641);
      intArray0[6] = 16;
      intArray0[7] = 1417;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      arrayList0.add(batchUpdateException0);
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      UniquePredicate.uniquePredicate();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      OrderedMapIterator<BatchUpdateException, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = 1251;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) orderedMapIterator0, 1251);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1251
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      UniquePredicate.uniquePredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      OrderedMapIterator<BatchUpdateException, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = 27;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) orderedMapIterator0, 27);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 27
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("KZO!O", "ET33y|!J_S8iM", hashtable1);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("KZO!O", hashtable0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("KZO!O", "ET33y|!J_S8iM", map0, sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Closure must not be null", 0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ICS6):)YV", sQLClientInfoException1);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("KZO!O", "-#3Ewo'_y>*'q]fd8");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, (-3989));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-3989), true, true, (-919), 1317);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-3989), false, false, 735, (-1));
      dataTruncationArray0[2] = dataTruncation2;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator1, (Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{0|[", "'jPPK^|JC@VHrD", 10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'jPPK^|JC@VHrD", "Transformer must not be null", 0, sQLNonTransientException0);
      hashMap0.put(sQLNonTransientConnectionException0, sQLTransactionRollbackException0);
      sQLNonTransientException0.setNextException(sQLNonTransientConnectionException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("KZO!O");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Locale.Category>) singletonIterator0, (Transformer<? super Locale.Category, String>) factoryTransformer0, "KZO!O", "ListIterator must not be null", "Transformer must not be null");
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLClientInfoException>>) stack0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ListIterator<Vector<SQLWarning>> listIterator1 = IteratorUtils.singletonListIterator(vector0);
      IteratorUtils.skippingIterator((Iterator<Vector<SQLWarning>>) listIterator1, (long) 0);
      IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, Vector<SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, Vector<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, Vector<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Vector<SQLFeatureNotSupportedException>>(hashtable0);
      entrySetMapIterator0.reset();
      entrySetMapIterator0.toString();
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0);
      Properties properties0 = new Properties();
      int int0 = 621;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 621, (-2616));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{0|[", "'jPPK^|JC@VHrD", 10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'jPPK^|JC@VHrD", "Transformer must not be null", 0, sQLNonTransientException0);
      hashMap0.put(sQLNonTransientConnectionException0, sQLTransactionRollbackException0);
      sQLNonTransientException0.setNextException(sQLNonTransientConnectionException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("KZO!O");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Locale.Category>) singletonIterator0, (Transformer<? super Locale.Category, String>) factoryTransformer0, "Transformer must not be null", "#iG?i2Iox<)ls$K=Z,", "#iG?i2Iox<)ls$K=Z,");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) entrySetMapIterator0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Iterable<Locale.Category> iterable0 = new HashSet<Locale.Category>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ListIterator<String> listIterator0 = new SingletonListIterator<String>(", ");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<String> listIterator1 = new SingletonListIterator<String>(", ");
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<IIOMetadataNode, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.Category> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.Category>(orderedMapIterator0);
      OrderedMapIterator<IIOMetadataNode, Locale.Category> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends Locale.Category>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator1, (Iterator<? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator1);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, (Iterator<? extends SQLTransientException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{0|[", "'jPPK^|JC@VHrD", 10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'jPPK^|JC@VHrD", "Transformer must not be null", 0, sQLNonTransientException0);
      hashMap0.put(sQLNonTransientConnectionException0, sQLTransactionRollbackException0);
      sQLNonTransientException0.setNextException(sQLNonTransientConnectionException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("KZO!O");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      MapIterator<SQLFeatureNotSupportedException, ServiceLoader<SQLException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "<8ih[7");
      IteratorUtils.isEmpty(orderedMapIterator0);
      sQLNonTransientConnectionException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<ArrayDeque<Stack>>) orderedMapIterator0, (Predicate<? super ArrayDeque<Stack>>) predicate1);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<SQLClientInfoException> predicate0 = new UniquePredicate<SQLClientInfoException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashMap0);
      String string0 = "'jPPK^\\|JC@VHrD";
      int int0 = 10;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{0|[", "'jPPK^|JC@VHrD", 10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'jPPK^|JC@VHrD", "Transformer must not be null", 0, sQLNonTransientException0);
      hashMap0.put(sQLNonTransientConnectionException0, sQLTransactionRollbackException0);
      sQLNonTransientException0.setNextException(sQLNonTransientConnectionException0);
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLNonTransientConnectionException> comparatorPredicate0 = new ComparatorPredicate<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<SQLNonTransientConnectionException> andPredicate0 = new AndPredicate<SQLNonTransientConnectionException>(comparatorPredicate0, comparatorPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = 0;
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ListIterator<Vector<SQLWarning>> listIterator1 = IteratorUtils.singletonListIterator(vector0);
      IteratorUtils.skippingIterator((Iterator<Vector<SQLWarning>>) listIterator1, (long) 0);
      IteratorUtils.emptyOrderedIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      ListIterator<SQLClientInfoException> listIterator2 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator2);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLClientInfoException>) resettableListIterator0, (Object) sQLInvalidAuthorizationSpecException1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ListIterator<Vector<SQLWarning>> listIterator1 = IteratorUtils.singletonListIterator(vector0);
      IteratorUtils.skippingIterator((Iterator<Vector<SQLWarning>>) listIterator1, (long) 0);
      IteratorUtils.emptyOrderedIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      ListIterator<SQLClientInfoException> listIterator2 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator2);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.loopingListIterator((List<SQLClientInfoException>) stack0);
      IteratorUtils.contains((Iterator<SQLClientInfoException>) listIterator2, (Object) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Collection must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      int[] intArray0 = new int[4];
      intArray0[0] = 1073741824;
      intArray0[1] = (-2439);
      intArray0[2] = 2416;
      intArray0[3] = 10;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("b", intArray0, sQLTimeoutException0);
      arrayList0.add(batchUpdateException0);
      int[] intArray1 = new int[2];
      intArray1[0] = (-2474);
      intArray1[1] = 1815;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("M;eD:W/", intArray1);
      arrayList0.add(batchUpdateException1);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException1);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("transformer may not be null");
      SQLDataException sQLDataException0 = new SQLDataException("transformer may not be null", "transformer may not be null", sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) listIterator0;
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) listIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray1 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1676, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, Properties>) orderedMapIterator0);
      IteratorUtils.singletonListIterator("org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Transformer<Object, String> transformer0 = null;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0, (Transformer<? super Locale.Category, String>) null, "KZO!O", "W>2hrMnV'<>g", "W>2hrMnV'<>g");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 7);
      int int0 = (-884);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "", 12, (-884));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, SQLNonTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) mapIterator1);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(mapIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator(", ");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(") > toIndex(", "O$_");
      SQLTransientException sQLTransientException0 = new SQLTransientException("{");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("@", ") > toIndex(", 10, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("M", "O_/K^CI3c<,ZLSD#", 495, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("@", sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "@", (-4107));
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException3;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("null keys not allowed", "_tCwm?~YS", (Throwable) null);
      assertEquals("_tCwm?~YS", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: null keys not allowed", sQLTransientConnectionException0.toString());
      assertEquals("null keys not allowed", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("null keys not allowed", sQLTransientConnectionException0);
      assertEquals("_tCwm?~YS", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: null keys not allowed", sQLTransientConnectionException0.toString());
      assertEquals("null keys not allowed", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: null keys not allowed", sQLTimeoutException0.toString());
      assertEquals("null keys not allowed", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      sQLTransientConnectionException0.addSuppressed(sQLTimeoutException0);
      assertEquals("_tCwm?~YS", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: null keys not allowed", sQLTransientConnectionException0.toString());
      assertEquals("null keys not allowed", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: null keys not allowed", sQLTimeoutException0.toString());
      assertEquals("null keys not allowed", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 10, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 8);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) listIterator0);
      assertTrue(list0.contains(locale_Category0));
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      LoopingListIterator<Locale.Category> loopingListIterator0 = new LoopingListIterator<Locale.Category>(list0);
      assertTrue(list0.contains(locale_Category0));
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, loopingListIterator0.size());
      assertTrue(loopingListIterator0.hasNext());
      assertTrue(loopingListIterator0.hasPrevious());
      assertNotNull(loopingListIterator0);
      
      iteratorArray0[0] = (Iterator<Locale.Category>) loopingListIterator0;
      ListIterator<Locale.Category> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) loopingListIterator0);
      assertTrue(list0.contains(locale_Category0));
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, loopingListIterator0.size());
      assertTrue(loopingListIterator0.hasNext());
      assertTrue(loopingListIterator0.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertTrue(listIterator1.hasPrevious());
      assertNotNull(listIterator1);
      
      iteratorArray0[1] = (Iterator<Locale.Category>) listIterator1;
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      iteratorArray0[2] = (Iterator<Locale.Category>) resettableListIterator0;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0, 804, (-984));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Transformer<Object, String> transformer0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) resettableListIterator0, (Transformer<? super Locale.Category, String>) null, "KZO!O", "KZO!O", "KZO!O");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertNotNull(singletonListIterator0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0);
      assertNotNull(equalPredicate0);
      
      ArrayDeque<Stack> arrayDeque0 = IteratorUtils.find((Iterator<ArrayDeque<Stack>>) singletonListIterator0, (Predicate<? super ArrayDeque<Stack>>) equalPredicate0);
      assertSame(locale_Category0, arrayDeque0);
      assertEquals(Locale.Category.DISPLAY, arrayDeque0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertNotNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 217;
      intArray0[1] = 217;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {217, 217}, intArray0);
      
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      assertFalse(arrayList0.contains(batchUpdateException0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(batchUpdateException0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(batchUpdateException0));
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {217, 217}, intArray0);
      
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) arrayList0);
      assertTrue(arrayList0.contains(batchUpdateException0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<ArrayDeque<Stack>>) resettableListIterator0, (Predicate<? super ArrayDeque<Stack>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Hashtable<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertNotNull(iterable0);
      
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) entrySetMapIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertNotNull(iterable0);
      
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertNotNull(objectArrayIterator0);
      assertEquals(0, locale_CategoryArray0.length);
      
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertNotNull(enumeration0);
      assertEquals(0, locale_CategoryArray0.length);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) hashSet0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterator0);
      assertEquals(0, locale_CategoryArray0.length);
      
      NonePredicate<Locale.Category> nonePredicate0 = new NonePredicate<Locale.Category>((Predicate<? super Locale.Category>[]) null);
      assertNotNull(nonePredicate0);
      
      Iterator<Locale.Category> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) iterator0, (Predicate<? super Locale.Category>) nonePredicate0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterator1);
      assertEquals(0, locale_CategoryArray0.length);
      
      Iterable<Locale.Category> iterable1 = IteratorUtils.asIterable((Iterator<? extends Locale.Category>) iterator1);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterable1);
      assertEquals(0, locale_CategoryArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      BatchUpdateException batchUpdateException1 = IteratorUtils.get((Iterator<BatchUpdateException>) singletonIterator0, 0);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertFalse(singletonIterator0.hasNext());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNotNull(batchUpdateException1);
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      assertNotNull(transformer0);
      
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 1);
      transformerArray0[0] = transformer0;
      SwitchTransformer<Object, Boolean> switchTransformer0 = new SwitchTransformer<Object, Boolean>((Predicate<? super Object>[]) null, transformerArray0, transformer0);
      assertNotNull(switchTransformer0);
      assertEquals(1, transformerArray0.length);
      
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) switchTransformer0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      assertEquals(1, transformerArray0.length);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class0);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate2);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(orPredicate0);
      assertEquals(1, transformerArray0.length);
      
      ArrayDeque<Stack> arrayDeque0 = new ArrayDeque<Stack<SQLFeatureNotSupportedException>>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = IteratorUtils.find((Iterator<SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(", ", "", 2033);
      assertEquals("java.sql.SQLSyntaxErrorException: , ", sQLSyntaxErrorException0.toString());
      assertEquals(", ", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(2033, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(", ", "$@Ph", 2033);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals(2033, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("$@Ph", sQLSyntaxErrorException1.getSQLState());
      assertEquals(", ", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: , ", sQLSyntaxErrorException1.toString());
      assertNotNull(sQLSyntaxErrorException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("$@Ph", "$@Ph", sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertEquals(2033, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("$@Ph", sQLSyntaxErrorException1.getSQLState());
      assertEquals(", ", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: , ", sQLSyntaxErrorException1.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: $@Ph", sQLSyntaxErrorException2.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("$@Ph", sQLSyntaxErrorException2.getSQLState());
      assertEquals("$@Ph", sQLSyntaxErrorException2.getMessage());
      assertNotNull(sQLSyntaxErrorException2);
      
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("");
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("", sQLSyntaxErrorException3.getMessage());
      assertNotNull(sQLSyntaxErrorException3);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+:L/aQx70P\"", hashMap0, sQLSyntaxErrorException3);
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("", sQLSyntaxErrorException3.getMessage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: +:L/aQx70P\"", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("+:L/aQx70P\"", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotSame(sQLSyntaxErrorException3, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException3, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException3, sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("", sQLSyntaxErrorException3.getMessage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: +:L/aQx70P\"", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("+:L/aQx70P\"", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("@rE`z]k1]#K{", "", hashMap0, sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLSyntaxErrorException: , ", sQLSyntaxErrorException0.toString());
      assertEquals(", ", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(2033, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: @rE`z]k1]#K{", sQLClientInfoException1.toString());
      assertEquals("@rE`z]k1]#K{", sQLClientInfoException1.getMessage());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertNotNull(sQLClientInfoException1);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" j*CfAsBt", "", 2033);
      assertEquals(" j*CfAsBt", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(2033, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException:  j*CfAsBt", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertEquals(" j*CfAsBt", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(2033, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException:  j*CfAsBt", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLInvalidAuthorizationSpecException:  j*CfAsBt", sQLSyntaxErrorException4.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException:  j*CfAsBt", sQLSyntaxErrorException4.getMessage());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertNotNull(sQLSyntaxErrorException4);
      
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("$@Ph", (String) null, (-1526));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertEquals((-1526), sQLSyntaxErrorException5.getErrorCode());
      assertEquals("$@Ph", sQLSyntaxErrorException5.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: $@Ph", sQLSyntaxErrorException5.toString());
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertNotNull(sQLSyntaxErrorException5);
      
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException((String) null, sQLSyntaxErrorException5);
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertEquals((-1526), sQLSyntaxErrorException5.getErrorCode());
      assertEquals("$@Ph", sQLSyntaxErrorException5.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: $@Ph", sQLSyntaxErrorException5.toString());
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertNull(sQLSyntaxErrorException6.getSQLState());
      assertNull(sQLSyntaxErrorException6.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException6.toString());
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertNotNull(sQLSyntaxErrorException6);
      
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("", "h:");
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException0));
      assertEquals("h:", sQLSyntaxErrorException7.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException7.toString());
      assertEquals("", sQLSyntaxErrorException7.getMessage());
      assertEquals(0, sQLSyntaxErrorException7.getErrorCode());
      assertNotNull(sQLSyntaxErrorException7);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException3;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException7;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException1;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(3, sQLSyntaxErrorExceptionArray0.length);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertNotNull(iterable0);
      
      MapIterator<Locale.Category, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<Locale.Category, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ?>) mapIterator0);
      assertNotNull(mapIterator1);
      
      MapIterator<Locale.Category, Object> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertSame(mapIterator1, mapIterator2);
      assertSame(mapIterator2, mapIterator1);
      assertNotNull(mapIterator2);
      
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      assertFalse(vector0.contains(predicate0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Locale.Category>) mapIterator2, (Predicate<? super Locale.Category>) predicate0);
      assertSame(mapIterator1, mapIterator2);
      assertSame(mapIterator2, mapIterator1);
      assertTrue(boolean0);
      assertFalse(vector0.contains(predicate0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator(", ");
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",o:48", ",o:48");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(",o:48", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(",o:48", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,o:48", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("The method to invoke must not be null", ",o:48");
      assertNull(attr0);
      
      String string0 = iIOMetadataNode0.getNamespaceURI();
      assertNull(string0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(", ");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      sQLNonTransientConnectionException0.setNextException((SQLException) null);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(",o:48", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(",o:48", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,o:48", sQLNonTransientConnectionException0.toString());
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      Node node0 = iIOMetadataNode2.insertBefore(iIOMetadataNode0, (Node) null);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode2);
      assertSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode2, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode2, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode2, node0);
      assertSame(node0, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode2);
      assertNotSame(node0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(node0.equals((Object)iIOMetadataNode2));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertNotNull(node0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode2);
      assertSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNotNull(nodeListIterator0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      boolean boolean1 = objectArrayListIterator0.hasNext();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<SQLException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      boolean boolean2 = IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate2);
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.cloneNode(true);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(node0, iIOMetadataNode0);
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertNotNull(node0);
      
      Node node1 = iIOMetadataNode0.insertBefore(node0, node0);
      assertNotSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(node0, iIOMetadataNode0);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotSame(node1, iIOMetadataNode0);
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(node1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, node0);
      assertFalse(iIOMetadataNode0.equals((Object)node1));
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertNotNull(nodeListIterator0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = objectArrayListIterator0.hasNext();
      assertFalse(boolean0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<SQLException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) predicate1);
      assertTrue(boolean1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate2);
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      ArrayDeque<Stack> arrayDeque0 = IteratorUtils.find((Iterator<ArrayDeque<Stack>>) reverseListIterator0, (Predicate<? super ArrayDeque<Stack>>) predicate3);
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate2));
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNull(arrayDeque0);
      
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(enumeration0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Enumeration<SQLRecoverableException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0);
      assertNotSame(enumeration1, enumeration0);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(enumeration1);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration1, (Collection<? super SQLRecoverableException>) priorityQueue0);
      assertNotSame(enumeration1, enumeration0);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertEquals(0, priorityQueue0.size());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(iterator0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertNotNull(iterable0);
      
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertNotNull(objectArrayIterator0);
      assertEquals(0, locale_CategoryArray0.length);
      
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertNotNull(enumeration0);
      assertEquals(0, locale_CategoryArray0.length);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) hashSet0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterator0);
      assertEquals(0, locale_CategoryArray0.length);
      
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransactionRollbackException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{0|[", "'jPPK^|JC@VHrD", 10);
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'jPPK^|JC@VHrD", "Transformer must not be null", 0, sQLNonTransientException0);
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("Transformer must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("'jPPK^|JC@VHrD", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: 'jPPK^|JC@VHrD", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = hashMap0.put(sQLNonTransientConnectionException0, sQLTransactionRollbackException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Transformer must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("'jPPK^|JC@VHrD", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: 'jPPK^|JC@VHrD", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException1);
      
      sQLNonTransientException0.setNextException(sQLNonTransientConnectionException0);
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLNonTransientConnectionException> comparatorPredicate0 = new ComparatorPredicate<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(comparatorPredicate0);
      
      AndPredicate<SQLNonTransientConnectionException> andPredicate0 = new AndPredicate<SQLNonTransientConnectionException>(comparatorPredicate0, comparatorPredicate0);
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(andPredicate0);
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0, (Predicate<? super SQLNonTransientConnectionException>) andPredicate0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("'jPPK^|JC@VHrD", "'jPPK^|JC@VHrD");
      assertNull(attr0);
      
      String string0 = iIOMetadataNode0.getNamespaceURI();
      assertNull(string0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      sQLNonTransientConnectionException0.setNextException(sQLNonTransientException0);
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      Node node0 = iIOMetadataNode1.appendChild(iIOMetadataNode0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode1, node0);
      assertSame(node0, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode1);
      assertSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNotNull(node0);
      
      Node node1 = iIOMetadataNode0.insertBefore(node0, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, node1);
      assertSame(node0, iIOMetadataNode0);
      assertSame(node0, node1);
      assertNotSame(node0, iIOMetadataNode1);
      assertSame(node1, iIOMetadataNode0);
      assertNotSame(node1, iIOMetadataNode1);
      assertSame(node1, node0);
      assertSame(iIOMetadataNode0, node0);
      assertSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode1.equals((Object)node0));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertFalse(node1.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNotNull(node1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, node1);
      assertSame(node0, iIOMetadataNode0);
      assertSame(node0, node1);
      assertNotSame(node0, iIOMetadataNode1);
      assertSame(node1, iIOMetadataNode0);
      assertNotSame(node1, iIOMetadataNode1);
      assertSame(node1, node0);
      assertSame(iIOMetadataNode0, node0);
      assertSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode1.equals((Object)node0));
      assertFalse(iIOMetadataNode1.equals((Object)node1));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertFalse(node1.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNotNull(nodeListIterator0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      boolean boolean1 = objectArrayListIterator0.hasNext();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<SQLException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      boolean boolean2 = IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) predicate1);
      assertTrue(boolean2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      assertNotNull(predicate2);
      
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate2);
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      ArrayDeque<Stack> arrayDeque0 = IteratorUtils.find((Iterator<ArrayDeque<Stack>>) iterator0, (Predicate<? super ArrayDeque<Stack>>) predicate3);
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("'jPPK^|JC@VHrD", sQLNonTransientException0.getSQLState());
      assertEquals("{0|[", sQLNonTransientException0.getMessage());
      assertEquals(10, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {0|[", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<SQLTransientException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, Properties>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) uniquePredicate0);
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertNotNull(listIterator1);
      
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) listIterator1, 2416);
      assertFalse(list0.contains("org.apache.commons.collections4.iterators.AbstractEmptyIterator"));
      assertFalse(listIterator0.equals((Object)listIterator1));
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = null;
      Transformer<SQLException, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends IIOMetadataNode>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("%4yB,AY", "No next() entry in the iteration");
      assertEquals("java.sql.SQLDataException: %4yB,AY", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("No next() entry in the iteration", sQLDataException0.getSQLState());
      assertEquals("%4yB,AY", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(2576, true, true, 2576, 2576);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      int int0 = dataTruncation0.getIndex();
      assertEquals(2576, int0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      sQLDataException0.addSuppressed(dataTruncation0);
      assertEquals("java.sql.SQLDataException: %4yB,AY", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("No next() entry in the iteration", sQLDataException0.getSQLState());
      assertEquals("%4yB,AY", sQLDataException0.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      sQLDataException0.setNextException(dataTruncation0);
      assertEquals("java.sql.SQLDataException: %4yB,AY", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("No next() entry in the iteration", sQLDataException0.getSQLState());
      assertEquals("%4yB,AY", sQLDataException0.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      int int0 = 2313;
      DataTruncation dataTruncation0 = new DataTruncation(2313, true, true, 2313, 4233);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      iteratorArray0[0] = (Iterator<DataTruncation>) singletonListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[0]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLSyntaxErrorException>(orderedMapIterator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator0, (-590L), (-315L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator1, 85L, (-1543L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      String string0 = "";
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string0, throwable0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      String string1 = "LESS";
      String string2 = "EQUAL";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("EQUAL", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("LESS", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: LESS", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      String string3 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string1, string3, sQLNonTransientConnectionException0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("LESS", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: LESS", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      String string4 = "";
      int int0 = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string0, string4, int0, sQLNonTransientConnectionException0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      int int1 = 100;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, int0, int1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.peekingIterator((Iterator<?>) resettableIterator0);
      assertNotNull(iterator0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 2033);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(2033, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "", 2033);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals(2033, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(2033, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException2.toString());
      assertEquals("", sQLSyntaxErrorException2.getSQLState());
      assertEquals("", sQLSyntaxErrorException2.getMessage());
      assertNotNull(sQLSyntaxErrorException2);
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("+:L/aQx70P\"");
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: +:L/aQx70P\"", sQLSyntaxErrorException3.toString());
      assertEquals("+:L/aQx70P\"", sQLSyntaxErrorException3.getMessage());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertNotNull(sQLSyntaxErrorException3);
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(2033, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(2033, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "Transformer must not be null", map0, sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(2033, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("Transformer must not be null", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLClientInfoException1);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(2033, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("Transformer must not be null", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLSyntaxErrorException4.getMessage());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: ", sQLSyntaxErrorException4.toString());
      assertNotNull(sQLSyntaxErrorException4);
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("Closure must not be null", "", 0);
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      assertEquals("Closure must not be null", sQLSyntaxErrorException5.getMessage());
      assertEquals("", sQLSyntaxErrorException5.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Closure must not be null", sQLSyntaxErrorException5.toString());
      assertNotNull(sQLSyntaxErrorException5);
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals("", sQLSyntaxErrorException6.getMessage());
      assertNull(sQLSyntaxErrorException6.getSQLState());
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException6.toString());
      assertEquals(2033, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertNotNull(sQLSyntaxErrorException6);
      
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("Closure must not be null", "+:L/aQx70P\"");
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException2));
      assertEquals("+:L/aQx70P\"", sQLSyntaxErrorException7.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Closure must not be null", sQLSyntaxErrorException7.toString());
      assertEquals("Closure must not be null", sQLSyntaxErrorException7.getMessage());
      assertEquals(0, sQLSyntaxErrorException7.getErrorCode());
      assertNotNull(sQLSyntaxErrorException7);
      
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(8, sQLSyntaxErrorExceptionArray0.length);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
      assertEquals(8, sQLSyntaxErrorExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, int0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(4, integerArray0.length);
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer1);
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertNotNull(identityPredicate0);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) identityPredicate0);
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("transformer may not be null");
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: transformer may not be null", sQLSyntaxErrorException0.toString());
      assertEquals("transformer may not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("transformer may not be null", "transformer may not be null", sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: transformer may not be null", sQLSyntaxErrorException0.toString());
      assertEquals("transformer may not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: transformer may not be null", sQLDataException0.toString());
      assertEquals("transformer may not be null", sQLDataException0.getMessage());
      assertEquals("transformer may not be null", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: transformer may not be null", sQLSyntaxErrorException0.toString());
      assertEquals("transformer may not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: transformer may not be null", sQLDataException0.toString());
      assertEquals("transformer may not be null", sQLDataException0.getMessage());
      assertEquals("transformer may not be null", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: transformer may not be null", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException: transformer may not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: transformer may not be null", sQLSyntaxErrorException0.toString());
      assertEquals("transformer may not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: transformer may not be null", sQLDataException0.toString());
      assertEquals("transformer may not be null", sQLDataException0.getMessage());
      assertEquals("transformer may not be null", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: transformer may not be null", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException: transformer may not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) listIterator0;
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      assertFalse(stack0.contains(sQLTimeoutException0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(stack0);
      assertFalse(stack0.contains(sQLTimeoutException0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertNotNull(loopingListIterator0);
      
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) loopingListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) stack0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableListIterator<LinkedHashSet<ServiceLoader>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "TxOc6j0f@=", (-1227));
      assertEquals("TxOc6j0f@=", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-1227), sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 61, (-1227), sQLTimeoutException0);
      assertEquals("TxOc6j0f@=", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-1227), sQLTimeoutException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, (-105), 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      SQLDataException sQLDataException0 = new SQLDataException("Load factor must be greater than 0");
      assertEquals("java.sql.SQLDataException: Load factor must be greater than 0", sQLDataException0.toString());
      assertEquals("Load factor must be greater than 0", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      boolean boolean0 = stack0.add(sQLDataException0);
      assertTrue(boolean0);
      assertTrue(stack0.contains(sQLDataException0));
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLDataException: Load factor must be greater than 0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("java.sql.SQLDataException: Load factor must be greater than 0", sQLDataException0.toString());
      assertEquals("Load factor must be greater than 0", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      
      SQLDataException sQLDataException1 = new SQLDataException("Load factor must be greater than 0");
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNull(sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: Load factor must be greater than 0", sQLDataException1.toString());
      assertEquals("Load factor must be greater than 0", sQLDataException1.getMessage());
      assertNotNull(sQLDataException1);
      
      boolean boolean1 = stack0.add(sQLDataException1);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[java.sql.SQLDataException: Load factor must be greater than 0, java.sql.SQLDataException: Load factor must be greater than 0]", stack0.toString());
      assertFalse(stack0.empty());
      assertNull(sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: Load factor must be greater than 0", sQLDataException1.toString());
      assertEquals("Load factor must be greater than 0", sQLDataException1.getMessage());
      
      String string0 = "";
      String string1 = "k";
      SQLDataException sQLDataException2 = new SQLDataException("", "k");
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("", sQLDataException2.getMessage());
      assertEquals("k", sQLDataException2.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException2.toString());
      assertNotNull(sQLDataException2);
      
      boolean boolean2 = stack0.add(sQLDataException2);
      assertNotSame(sQLDataException2, sQLDataException1);
      assertNotSame(sQLDataException2, sQLDataException0);
      assertTrue(boolean2);
      assertTrue(stack0.contains(sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals("[java.sql.SQLDataException: Load factor must be greater than 0, java.sql.SQLDataException: Load factor must be greater than 0, java.sql.SQLDataException: ]", stack0.toString());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("", sQLDataException2.getMessage());
      assertEquals("k", sQLDataException2.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException2.toString());
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) stack0);
      assertTrue(stack0.contains(sQLDataException1));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals("[java.sql.SQLDataException: Load factor must be greater than 0, java.sql.SQLDataException: Load factor must be greater than 0, java.sql.SQLDataException: ]", stack0.toString());
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLException> resettableIterator1 = IteratorUtils.singletonIterator((SQLException) sQLDataException2);
      assertNotSame(sQLDataException2, sQLDataException1);
      assertNotSame(sQLDataException2, sQLDataException0);
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("", sQLDataException2.getMessage());
      assertEquals("k", sQLDataException2.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException2.toString());
      assertNotNull(resettableIterator1);
      
      int int0 = (-2182);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "Load factor must be greater than 0", (-2182), (-2182));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OrderedIterator<HashSet<Vector>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (-2116L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(0, iteratorArray0.length);
      
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("prefix may not be null", "7i\"YAyFt4uPaZLK!#x\"", 0);
      assertEquals("7i\"YAyFt4uPaZLK!#x\"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = linkedHashSet0.add(sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(sQLInvalidAuthorizationSpecException0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("7i\"YAyFt4uPaZLK!#x\"", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      
      ListIterator<LinkedHashSet<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      assertTrue(linkedHashSet0.contains(sQLInvalidAuthorizationSpecException0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("U");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("(j9y~fOGCl&Q");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("U");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode(".Z!='c)^nuEtXr#r+-");
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "}n00k/a)t'>Z;", 1202);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("}n00k/a)t'>Z;", "}n00k/a)t'>Z;", 1, sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 765);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 2314);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator1, (-1513L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("iterator", "iterator", sQLTimeoutException0);
      sQLTimeoutException0.spliterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      String string0 = "";
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNode1.setAttribute("Vp0G(bQj5; 2#y", "");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      int int0 = 512;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Hashtable<StringTokenizer, SQLRecoverableException> hashtable0 = new Hashtable<StringTokenizer, SQLRecoverableException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Already at start of list.", "Already at start of list.", true);
      stringTokenizer0.nextToken();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      hashtable0.put(stringTokenizer0, sQLRecoverableException0);
      EntrySetMapIterator<StringTokenizer, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, SQLRecoverableException>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLRecoverableException>) entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2474);
      intArray0[1] = 217;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("M;eD:W/", intArray0);
      arrayList0.add(batchUpdateException0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) arrayList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<EnumSet<Locale.Category>> linkedList0 = new LinkedList<EnumSet<Locale.Category>>();
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      linkedList0.add(enumSet0);
      LoopingIterator<EnumSet<Locale.Category>> loopingIterator0 = new LoopingIterator<EnumSet<Locale.Category>>(linkedList0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) loopingIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<SQLSyntaxErrorException>, SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.Category>>) listIterator0, (Closure<? super EnumSet<Locale.Category>>) closure1);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ListIterator<Vector<SQLWarning>> listIterator1 = IteratorUtils.singletonListIterator(vector0);
      IteratorUtils.skippingIterator((Iterator<Vector<SQLWarning>>) listIterator1, (long) 0);
      IteratorUtils.emptyOrderedIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      ListIterator<SQLClientInfoException> listIterator2 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator2);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.contains((Iterator<SQLClientInfoException>) resettableListIterator0, (Object) sQLClientInfoException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("dn+j'zW`B");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = "ldip!1))nm3`%";
      String string1 = "";
      int int0 = 100;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ldip!1))nm3`%", "", 100);
      sQLSyntaxErrorException0.spliterator();
      properties0.put(sQLSyntaxErrorException0, "");
      int int1 = 31;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0, 31);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
