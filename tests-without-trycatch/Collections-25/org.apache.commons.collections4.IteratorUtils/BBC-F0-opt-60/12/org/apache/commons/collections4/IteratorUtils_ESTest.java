/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 08:38:15 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Vector<Integer> vector0 = new Vector<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(vector0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) reverseListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<Integer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Integer>(onePredicate0);
      ListIterator<Integer> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) nullIsExceptionPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Integer>) listIterator1, (Closure<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(2082);
      IteratorUtils.getIterator(integer0);
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(priorityQueue0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) loopingIterator0, (Transformer<? super SQLTransientException, ? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      EqualPredicate.equalPredicate((Properties) null);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>((Properties) null);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) singletonListIterator0, (Predicate<? super Properties>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.list.CursorableLinkedList$Cursor");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) factoryTransformer0, "L&_Kb*])PY8'UT", "iterator", "L&_Kb*])PY8'UT");
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      loopingListIterator0.reset();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SingletonIterator<Stack<SQLDataException>> singletonIterator0 = new SingletonIterator<Stack<SQLDataException>>((Stack<SQLDataException>) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      ConstantTransformer<Object, SQLClientInfoException> constantTransformer0 = new ConstantTransformer<Object, SQLClientInfoException>(sQLClientInfoException0);
      ConstantTransformer.constantTransformer((Transformer<Object, String>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=m", "v!549");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException0, comparator0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<Stack<SQLDataException>>) singletonIterator0, (Predicate<? super Stack<SQLDataException>>) predicate1);
      OrderedMapIterator<SQLTimeoutException, Closure<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Closure<Object>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Closure<Object>>) orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator1, (Iterator<? extends SQLTransientException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashMap<Predicate, SQLIntegrityConstraintViolationException>>) null, (Transformer<? super HashMap<Predicate, SQLIntegrityConstraintViolationException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      Predicate<Properties> predicate0 = EqualPredicate.equalPredicate((Properties) null);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>((Properties) null);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) singletonListIterator0);
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(list0);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<Properties>) loopingIterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      EmptyIterator.resettableEmptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) singletonListIterator0, comparator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<Stack<SQLDataException>>) null, (Predicate<? super Stack<SQLDataException>>) nullIsExceptionPredicate0);
      OrderedMapIterator<SQLTimeoutException, Closure<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Closure<Object>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Closure<Object>>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator1, (Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator1);
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", size=", (String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(", size=", sQLIntegrityConstraintViolationException0);
      ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      IdentityPredicate.identityPredicate((Object) sQLInvalidAuthorizationSpecException0);
      Stack<SQLDataException>[] stackArray0 = (Stack<SQLDataException>[]) Array.newInstance(Stack.class, 4);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      stackArray0[0] = stack0;
      Stack<SQLDataException> stack1 = new Stack<SQLDataException>();
      stackArray0[1] = stack1;
      Stack<SQLDataException> stack2 = new Stack<SQLDataException>();
      stackArray0[2] = stack2;
      Stack<SQLDataException> stack3 = new Stack<SQLDataException>();
      stackArray0[3] = stack3;
      ObjectArrayIterator<Stack<SQLDataException>> objectArrayIterator0 = new ObjectArrayIterator<Stack<SQLDataException>>(stackArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException1, defaultEquator0);
      IteratorUtils.matchesAny((Iterator<Stack<SQLDataException>>) objectArrayIterator0, (Predicate<? super Stack<SQLDataException>>) equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer(2082);
      IteratorUtils.getIterator(integer0);
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      properties1.elements();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) properties0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      NOPClosure.nopClosure();
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer(2082);
      IteratorUtils.getIterator(integer0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      locale_FilteringModeArray0[0] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode3;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode1;
      locale_FilteringModeArray0[4] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode4;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      locale_FilteringModeArray0[7] = locale_FilteringMode1;
      locale_FilteringModeArray0[8] = locale_FilteringMode1;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      DataTruncation dataTruncation0 = new DataTruncation(26, true, true, 755, 53);
      DataTruncation dataTruncation1 = new DataTruncation(8, false, false, (-1378), 8);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation1.forEach(consumer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("dwIMEtj'8Gi4AZ)/>", dataTruncation0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) objectArrayIterator0, (Object) locale_FilteringMode3);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = "e)o.Xx$8=H`";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("7.&ih", "e)o.Xx$8=H`", 613, hashMap0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, (Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      DataTruncation dataTruncation0 = new DataTruncation(8, false, true, 8, 8);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", dataTruncation0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) objectArrayIterator0, (Object) sQLTimeoutException0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Integer>) null, (Closure<? super Integer>) closure0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Closure<Integer> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Integer>) null, (Closure<? super Integer>) closure0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "", sQLDataException0);
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("org.apache.commons.collections4.iterators.SingletonIterator", biFunction0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, sQLNonTransientException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, (Iterator<? extends SQLClientInfoException>) singletonIterator0);
      Closure<SQLClientInfoException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) zippingIterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.size(zippingIterator0);
      Iterator<Stack<SQLDataException>> iterator0 = EmptyIterator.emptyIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null);
      Transformer<SQLTimeoutException, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) transformer0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Stack<SQLDataException>>) predicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("iterator", "iterator", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("iterator", "HQ,UTp!ronjsb\"a");
      stringTokenizerArray0[0] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("iterator");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("Qy[b,");
      stringTokenizerArray0[3] = stringTokenizer3;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0);
      ListIterator<StringTokenizer> listIterator1 = new SingletonListIterator<StringTokenizer>(stringTokenizer3);
      IteratorUtils.find((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.isEmpty(listIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.emptyListIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("TP:d/m", sQLNonTransientException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(nullIsFalsePredicate0, nullIsFalsePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) null, (Object) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("nodeList must not be null!", "nodeList must not be null!");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("nodeList must not be null!", sQLTransactionRollbackException0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nodeList must not be null!", "");
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) listIterator0, (Transformer<? super SQLTransientException, ? extends SQLNonTransientConnectionException>) transformer0);
      Stack<SQLNonTransientConnectionException> stack1 = new Stack<SQLNonTransientConnectionException>();
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransactionRollbackException1);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonIterator0);
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "", sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, sQLNonTransientException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, (Iterator<? extends SQLClientInfoException>) singletonIterator0);
      Closure<SQLClientInfoException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) zippingIterator0, (Closure<? super SQLClientInfoException>) closure0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      DataTruncation dataTruncation0 = new DataTruncation(8, false, true, 8, 8);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", dataTruncation0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) objectArrayIterator0, (Object) sQLTimeoutException0);
      IteratorUtils.emptyListIterator();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", size=", (String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(", size=", sQLIntegrityConstraintViolationException0);
      ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      IdentityPredicate.identityPredicate((Object) sQLInvalidAuthorizationSpecException0);
      Stack<SQLDataException>[] stackArray0 = (Stack<SQLDataException>[]) Array.newInstance(Stack.class, 4);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      stackArray0[0] = stack0;
      Stack<SQLDataException> stack1 = new Stack<SQLDataException>();
      stackArray0[1] = stack1;
      Stack<SQLDataException> stack2 = new Stack<SQLDataException>();
      stackArray0[2] = stack2;
      Stack<SQLDataException> stack3 = new Stack<SQLDataException>();
      stackArray0[3] = stack3;
      ObjectArrayIterator<Stack<SQLDataException>> objectArrayIterator0 = new ObjectArrayIterator<Stack<SQLDataException>>(stackArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException1, defaultEquator0);
      IteratorUtils.matchesAny((Iterator<Stack<SQLDataException>>) objectArrayIterator0, (Predicate<? super Stack<SQLDataException>>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      EmptyListIterator.resettableEmptyListIterator();
      Properties properties0 = new Properties();
      EqualPredicate.equalPredicate(properties0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) constantTransformer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "org.apache.commons.collections4.IteratorUtils", "}ay|Yy/6\"WdP0Qx=0", "_.W|h");
      IdentityPredicate<Properties> identityPredicate0 = new IdentityPredicate<Properties>(properties0);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Properties>) identityPredicate0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_.W|h";
      stringArray0[1] = "org.apache.commons.collections4.IteratorUtils";
      stringArray0[2] = "_.W|h";
      stringArray0[3] = "_.W|h";
      stringArray0[4] = "ListIteratorWrapper does not support optional operations of ListIterator.";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 3);
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) resettableListIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("}ay|Yy/6\"WdP0Qx=0");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "%{?0$hRY", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("%{?0$hRY");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("}ay|Yy/6\"WdP0Qx=0_.W|h", sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("m}*dKQL,++0", "}ay|Yy/6\"WdP0Qx=0", 3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("ListIteratorWrapper does not support optional operations of ListIterator.", "", 3, sQLDataException4);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException();
      sQLDataExceptionArray0[8] = sQLDataException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 3, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      IteratorUtils.emptyListIterator();
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("`)~");
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer1, ">3~`l'Zvi$Z&nr&", "G`D ^", ">3~`l'Zvi$Z&nr&");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '`)~' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedIterator0, 2082);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      IteratorUtils.emptyListIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "F;c%!r|~-+", 0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("F;c%!r|~-+", "F;c%!r|~-+", 2082, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("(this Map)", sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException(sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException(sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("F;c%!r|~-+", "");
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Predicate<SQLTransientConnectionException> predicate0 = IdentityPredicate.identityPredicate(sQLTransientConnectionException8);
      SQLTransientConnectionException sQLTransientConnectionException9 = IteratorUtils.find((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(sQLTransientConnectionException9, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      IteratorUtils.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "Comparator must not be null.");
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      LinkedList<SQLRecoverableException> linkedList2 = new LinkedList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(linkedList2);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("delimiter may not be null", (String) null, 10);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Comparator must not be null.");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutException0.fillInStackTrace();
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      IteratorUtils.isEmpty(objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedIterator0, 2082);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null, false);
      singletonIterator0.reset();
      singletonIterator0.next();
      IteratorUtils.toList((Iterator<?>) orderedIterator0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 1);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("NodeList must not be null", classArray0, classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) null, (Transformer<? super SQLTransientException, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7+Z%;R$%S*?JIL");
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      EmptyListIterator.resettableEmptyListIterator();
      Class<Object> class0 = Object.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      ResettableListIterator<StringTokenizer> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator1, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 19);
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[3] = class1;
      classArray0[4] = class0;
      classArray0[5] = class1;
      classArray0[6] = class1;
      classArray0[7] = class1;
      classArray0[8] = class1;
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("X]},^<%LjPVH#", classArray0, classArray0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) resettableListIterator1, (Transformer<? super SQLTransientException, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList1);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-451), 881, sQLDataException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) listIterator0, 881);
      Integer integer0 = new Integer(1103);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList1);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.CatchAndRethrowClosure", "-");
      loopingListIterator0.add(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      EqualPredicate.equalPredicate((Object) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) listIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyMapIterator();
      LinkedList<Predicate<IIOMetadataNode>> linkedList0 = new LinkedList<Predicate<IIOMetadataNode>>();
      IteratorUtils.loopingListIterator((List<Predicate<IIOMetadataNode>>) linkedList0);
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 2);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      hashSetArray0[0] = (HashSet<Properties>) linkedHashSet0;
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Properties properties0 = new Properties();
      properties0.put(iterable0, iterable0);
      hashSet0.add(properties0);
      hashSet0.clone();
      hashSetArray0[1] = hashSet0;
      ResettableListIterator<HashSet<Properties>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0);
      IteratorUtils.emptyOrderedIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("R0tbMcF AH1n3q", hashtable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("R0tbMcF AH1n3q", sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLWarning0);
      IteratorUtils.singletonListIterator((Object) sQLTimeoutException0);
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientException>) mapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientException>(mapIterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.size(orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) null, "", "", "H|<pWjJn-NvVRE[1.c");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.size(orderedIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<StringTokenizer> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super StringTokenizer>>) treeSet0);
      IteratorUtils.find((Iterator<StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) predicate1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator1, (Predicate<? super BatchUpdateException>) predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(") greater than the size of the ", ") greater than the size of the ", 10, (Throwable) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.size(orderedIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "", "", "");
      Properties properties0 = new Properties();
      EqualPredicate.equalPredicate(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "7.&ih", 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2);
      EnumSet.copyOf(enumSet0);
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Transformer<Object, EnumSet<Locale.FilteringMode>> transformer0 = InvokerTransformer.invokerTransformer("kmv|pA^jQG%o4#%");
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.objectGraphIterator(enumSet1, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends EnumSet<Locale.FilteringMode>>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0, 1374);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'kmv|pA^jQG%o4#%' on 'class java.util.RegularEnumSet' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedIterator0, 2082);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) constantTransformer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "org.apache.commons.collections4.IteratorUtils", "remove() method not supported for a NodeListIterator.", "7.&ih");
      Predicate<Properties> predicate0 = EqualPredicate.equalPredicate(properties0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      IteratorUtils.matchesAll(iterator1, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      IteratorUtils.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "FL]");
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException1);
      IteratorUtils.get((Iterator<SQLDataException>) singletonListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H|<pWjJn-NvVRE[1.c");
      OrderedMapIterator<String, PriorityQueue<LinkedHashSet>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) orderedIterator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Hashtable<SQLClientInfoException, SQLWarning>[]) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<String, BatchUpdateException>(orderedMapIterator0);
      InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.SingletonListIterator");
      IteratorUtils.getIterator(orderedMapIterator1);
      Properties properties0 = new Properties();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The predicate array must not contain a null predicate, index ", "The predicate array must not contain a null predicate, index ", sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("The predicate array must not contain a null predicate, index ", "", sQLSyntaxErrorException1);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("R}hX^&am");
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.SingletonListIterator", mockThrowable0);
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", "R}hX^&am");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null, 249, 249);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends BatchUpdateException>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("R");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Transformer<Object, Properties> transformer0 = ConstantTransformer.constantTransformer(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer1, "", "R", "+7kkEF)Cn%");
      ArrayList<ArrayList<SQLException>> arrayList0 = new ArrayList<ArrayList<SQLException>>();
      ReverseListIterator<ArrayList<SQLException>> reverseListIterator0 = new ReverseListIterator<ArrayList<SQLException>>(arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ArrayList<SQLException>>) reverseListIterator0);
      IteratorUtils.emptyOrderedIterator();
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      IteratorUtils.find((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, (-1664));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) resettableListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends BatchUpdateException>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("The predicate array must not contain a null predicate, index ");
      IteratorUtils.getIterator(orderedMapIterator0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) constantTransformer0);
      ConstantTransformer.nullTransformer();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLRecoverableException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLDataException>) singletonListIterator0, 1520);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1519
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(";9=C", "[|/CZ");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      InvokerTransformer.invokerTransformer("A rY@wK;'UZ|");
      IteratorUtils.getIterator(singletonIterator0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) constantTransformer0);
      ConstantTransformer.nullTransformer();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) factoryTransformer0, ";9=C", "", "7");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("MngJ", "yMsaj/q5A`[PnV^S", 13);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Estimated size must be greater than 0", "A|Ao+", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (long) 13);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) boundedIterator0, class0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<SQLDataException, SQLFeatureNotSupportedException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLFeatureNotSupportedException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLFeatureNotSupportedException>) orderedMapIterator2);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) orderedMapIterator1, 2218L);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("4/![a;\",n]4", "Unsupported object type: ");
      Integer integer0 = new Integer(100);
      IteratorUtils.getIterator((Object) null);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedIterator<HashSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.emptyListIterator();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) orderedMapIterator0;
      IteratorUtils.getIterator(iterator1);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.size(resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("/6QRw", ";9=CX ");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      Node node1 = iIOMetadataNode0.appendChild(node0);
      IteratorUtils.nodeListIterator(node1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList1);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Sb\u0007bF&K", "Sb\u0007bF&K", (-1));
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      singletonIterator0.reset();
      SQLTransientConnectionException sQLTransientConnectionException1 = singletonIterator0.next();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("NodeList must not be null", classArray0, sQLNonTransientExceptionArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) singletonIterator0, (Transformer<? super SQLTransientException, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) list0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) singletonIterator0, (Iterator<? extends SQLTransientException>) singletonIterator0, (Iterator<? extends SQLTransientException>) singletonIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Sb\u0007bF&K", "8y8oac ", sQLTransientConnectionException1);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientConnectionException1);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("#F;C?", "InstantiateTransformer: The constructor must exist and be public ", mockThrowable0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("org.apache.commons.collections4.bidimap.TreeBidiMap");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("NodeList must not be null", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0, (-2227));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Node must not be null", "nvRl");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Node must not be null");
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) resettableIterator0, (-2615L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Node must not be null", "nvRl");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Node must not be null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("nvRl");
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) linkedHashSet0);
      IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.size(resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIteratorWrapper does not support optional operations of ListIterator.", "/6QRw");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$hIX+#t/");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ListIteratorWrapper<StringTokenizer> listIteratorWrapper0 = new ListIteratorWrapper<StringTokenizer>(iterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIteratorWrapper0, (Predicate<? super StringTokenizer>) predicate0);
      Predicate<StringTokenizer> predicate1 = EqualPredicate.equalPredicate(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super StringTokenizer>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.util.StringTokenizer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList1);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      ResettableListIterator<LinkedList<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.size(resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("/6QRw", "q");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, class0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      Locale.FilteringMode locale_FilteringMode8 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[8] = locale_FilteringMode8;
      IteratorUtils.arrayIterator(locale_FilteringModeArray0, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(";9=CX ", "[|/CZ");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      stringTokenizer0.hasMoreElements();
      singletonIterator0.reset();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      int int0 = (-2201);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("_`", ";9=CX ", (-2201));
      SingletonIterator<SQLTransientConnectionException> singletonIterator1 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      singletonIterator1.reset();
      singletonIterator1.next();
      IteratorUtils.toList((Iterator<?>) resettableIterator0);
      PriorityQueue<Predicate<Object>> priorityQueue1 = new PriorityQueue<Predicate<Object>>();
      Predicate<StringTokenizer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super StringTokenizer>>) priorityQueue1);
      IteratorUtils.find((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.emptyMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, class0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 7);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(vector0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) reverseListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList1);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) loopingListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedIterator<HashSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      IteratorUtils.toArray(iterator1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null");
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "org.apache.commons.collections4.map.Flat3Map$KeySetIterator", 794, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLTransientException0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) objectArrayListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(vector0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(loopingListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) loopingListIterator0, 2218L);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator1, 794);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 794
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fromIndex = ", "R");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("R");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("|c:P0@R#ku");
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) reverseListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("[|/CZ");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      stringTokenizer0.hasMoreElements();
      singletonIterator0.reset();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      int int0 = (-2201);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("_`", ";9=CX ", (-2201));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("_`");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("[|/CZ");
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2201);
      longArray0[1] = (long) (-2201);
      longArray0[2] = (long) (-2201);
      longArray0[3] = (long) (-2201);
      longArray0[4] = (long) (-2201);
      longArray0[5] = (long) (-2201);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";9=CX ", "-NZ5r<<-F0y.{R[e5va", (-2201), longArray0, sQLIntegrityConstraintViolationException1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends BatchUpdateException>) orderedMapIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("\"m&");
      IteratorUtils.toString((Iterator<String>) orderedMapIterator1, (Transformer<? super String, String>) constantTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "[]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("The predicate array must not contain a null predicate, index ");
      StringTokenizer stringTokenizer1 = new StringTokenizer("The predicate array must not contain a null predicate, index ", "[]");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer1, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      ConstantTransformer.nullTransformer();
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) constantTransformer0, "*n O[dlj?MS", "", "Predicate must not be null.");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Node must not be null", "nvRl");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Node must not be null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(";9=CX ", "[/C+");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      singletonIterator0.reset();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) singletonIterator0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[/C+");
      SingletonIterator<SQLTransientConnectionException> singletonIterator1 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      singletonIterator1.reset();
      singletonIterator1.next();
      IteratorUtils.toList((Iterator<?>) singletonIterator1);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<StringTokenizer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super StringTokenizer>>) priorityQueue0);
      IteratorUtils.find((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";9=CX ", "[/C+");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-1100));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends BatchUpdateException>) orderedMapIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("\"m&");
      IteratorUtils.toString((Iterator<String>) orderedMapIterator1, (Transformer<? super String, String>) constantTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "[]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("The predicate array must not contain a null predicate, index ");
      StringTokenizer stringTokenizer1 = new StringTokenizer("The predicate array must not contain a null predicate, index ", "[]");
      IteratorUtils.objectGraphIterator(stringTokenizer1, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      Iterator<StringTokenizer> iterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, false);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<Properties, Closure<Object>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Properties> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) orderedMapIterator2, (Iterator<? extends Properties>) orderedMapIterator2);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator1);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Properties> iterator2 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) priorityQueue0);
      IteratorUtils.toString(iterator2, (Transformer<? super Properties, String>) transformer1, "Iterator must not be null", "", "\"m&");
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLNonTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("M)tS%[IHZ\u0002RC;}q/BL", "M)tS%[IHZ\u0002RC;}q/BL", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException((String) null, "Predicate must not be null", 1, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException((String) null, "", 1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("zv", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("\"m&", "remove() cannot be called", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("a<b1U'9F+Lzw", "M)tS%[IHZ\u0002RC;}q/BL", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException("a<b1U'9F+Lzw", "\"m&", 1, sQLTransactionRollbackException7);
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      SQLDataException sQLDataException0 = new SQLDataException("Goy<5hu", "Goy<5hu");
      IteratorUtils.emptyListIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Goy<5hu", "+]XWfQmA*OK", false);
      stringTokenizer0.nextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.InstantiateTransformer");
      Transformer<Object, StringTokenizer> transformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLDataException> mapIterator1 = IteratorUtils.emptyMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1, class0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "Estimated size must be greater than 0";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      iIOMetadataNode0.item(1203);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.singletonListIterator(linkedList0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      SQLDataException sQLDataException0 = new SQLDataException("Goy<5hu", "Goy<5hu");
      IteratorUtils.emptyListIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("+]XWfQmA*OK");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) factoryTransformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9QES&tA3");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("transformer may not be null", (String) null, 0, sQLNonTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      SQLDataException sQLDataException1 = new SQLDataException("add() not supported for empty Iterator", sQLNonTransientException0);
      IteratorUtils.getIterator("add() not supported for empty Iterator");
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "org.apache.commons.collections4.IteratorUtils", "remove() method not supported for a NodeListIterator.", "7.&ih");
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends BatchUpdateException>) orderedMapIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("\"m&");
      IteratorUtils.toString((Iterator<String>) orderedMapIterator1, (Transformer<? super String, String>) constantTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "[]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("The predicate array must not contain a null predicate, index ");
      StringTokenizer stringTokenizer1 = new StringTokenizer("The predicate array must not contain a null predicate, index ", "[]");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer1, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(resettableListIterator0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) listIteratorWrapper0, 2218L);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLDataException>) boundedIterator0, (-731));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -731
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      linkedList1.add(sQLIntegrityConstraintViolationException0);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList1);
      loopingListIterator0.reset();
      DataTruncation dataTruncation0 = new DataTruncation((-3203), false, false, (-3203), (-714));
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("f_ZX*5!4AD 8", "y l\"rGXCG {", (Throwable) null);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("f_ZX*5!4AD 8", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("L=0fwUenN TF:", "y l\"rGXCG {", 5, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.iterators.SkippingIterator", "L=0fwUenN TF:");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      MapIterator<Properties, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) mapIterator0, (Transformer<? super Properties, String>) transformer0, "", "f_ZX*5!4AD 8", "L=0fwUenN TF:");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<?>) mapIterator0);
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      IteratorUtils.size(mapIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      StringTokenizer stringTokenizer0 = new StringTokenizer("~Mbgka2W0:2mwcQi", "}1}zT8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("~Mbgka2W0:2mwcQi");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("=");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.singletonListIterator(linkedList0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      SQLDataException sQLDataException0 = new SQLDataException("Goy<5hu", "Goy<5hu");
      IteratorUtils.emptyListIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("+]XWfQmA*OK");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) factoryTransformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9QES&tA3");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("iterator", "Goy<5hu", 0, sQLTimeoutException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException2.forEach(consumer0);
      SQLDataException sQLDataException1 = new SQLDataException("9QES&tA3", sQLDataException0);
      IteratorUtils.getIterator(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(";9=CX ", "[/C+");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      stringTokenizer0.hasMoreElements();
      singletonIterator0.reset();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) singletonIterator0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-1));
      SingletonIterator<SQLTransientConnectionException> singletonIterator1 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      singletonIterator1.next();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) list0);
      // Undeclared exception!
//      try { 
        Locale.FilteringMode.valueOf(";9=CX ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant java.util.Locale.FilteringMode.;9=CX 
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-3857), sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLFeatureNotSupportedException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3857), sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ck}|yP", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("wX~");
      MapIterator<Properties, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) mapIterator0, (Transformer<? super Properties, String>) transformer0, "", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.emptyIterator();
      int int0 = (-3857);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-3857), sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3857), sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ck}|yP", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("wX~");
      String string0 = null;
      MapIterator<Properties, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) mapIterator0, (Transformer<? super Properties, String>) transformer0, "", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      sQLTimeoutException0.getSuppressed();
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator", sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLDataException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("g~ig+8tH", "", 10);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException1.forEach(consumer0);
      IteratorUtils.getIterator(enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends BatchUpdateException>) orderedMapIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("\"m&");
      IteratorUtils.toString((Iterator<String>) orderedMapIterator1, (Transformer<? super String, String>) constantTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "[]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      InvokerTransformer.invokerTransformer("[]");
      IteratorUtils.getIterator(stringTokenizer0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer1 = new ConstantTransformer<Object, Properties>(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) constantTransformer1);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer0, "", "2Dh7Dn/M'jIBB21A", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedIterator<HashSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends String>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "6Y-", 730, sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, 9);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 9);
      Properties properties0 = new Properties();
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends String>) orderedMapIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator2);
      IteratorUtils.emptyListIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("WEHiUC(>EsF*`p?Q=?");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) factoryTransformer0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("WEHiUC(>EsF*`p?Q=?");
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      FactoryTransformer<Properties, String> factoryTransformer1 = new FactoryTransformer<Properties, String>(constantFactory0);
      FactoryTransformer<Object, String> factoryTransformer2 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) factoryTransformer2, "s beyond the end of the array. ", (String) null, "%\"26N%5`9{A6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends BatchUpdateException>) orderedMapIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("\"m&");
      IteratorUtils.toString((Iterator<String>) orderedMapIterator1, (Transformer<? super String, String>) constantTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "[]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      InvokerTransformer.invokerTransformer("The predicate array must not contain a null predicate, index ");
      IteratorUtils.getIterator(orderedMapIterator0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer1 = new ConstantTransformer<Object, Properties>(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) constantTransformer1);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer0, "", "2Dh7Dn/M'jIBB21A", "7.&ih");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<HashSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      IteratorUtils.toArray(iterator1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null");
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "org.apache.commons.collections4.map.Flat3Map$KeySetIterator", 794, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("VQl ?9(:).PGs", (String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("D[&TL;j{", "X}6(tH&T");
      OrderedMapIterator<String, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, StringTokenizer>(orderedMapIterator0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Transformer must not be null";
      stringArray0[1] = null;
      stringArray0[2] = "VQl ?9(:).PGs";
      stringArray0[3] = "org.apache.commons.collections4.map.Flat3Map$KeySetIterator";
      stringArray0[4] = "4/![a;\",n]4";
      stringArray0[5] = "org.apache.commons.collections4.map.Flat3Map$KeySetIterator";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.toList((Iterator<? extends String>) objectArrayIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedIterator<HashSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      IteratorUtils.toArray(iterator1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null");
      sQLTimeoutException0.getSuppressed();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "org.apache.commons.collections4.map.Flat3Map$KeySetIterator", 794, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      IteratorUtils.getIterator(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Array class must not be null");
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<ClientInfoStatus>[] linkedListArray0 = (LinkedList<ClientInfoStatus>[]) Array.newInstance(LinkedList.class, 8);
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      linkedListArray0[0] = linkedList0;
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      linkedListArray0[1] = linkedList1;
      LinkedList<ClientInfoStatus> linkedList2 = new LinkedList<ClientInfoStatus>(linkedList1);
      linkedListArray0[2] = linkedList2;
      LinkedList<ClientInfoStatus> linkedList3 = new LinkedList<ClientInfoStatus>();
      linkedListArray0[3] = linkedList3;
      LinkedList<ClientInfoStatus> linkedList4 = new LinkedList<ClientInfoStatus>();
      linkedListArray0[4] = linkedList4;
      LinkedList<ClientInfoStatus> linkedList5 = new LinkedList<ClientInfoStatus>();
      linkedListArray0[5] = linkedList5;
      LinkedList<ClientInfoStatus> linkedList6 = new LinkedList<ClientInfoStatus>();
      linkedListArray0[6] = linkedList6;
      LinkedList<ClientInfoStatus> linkedList7 = new LinkedList<ClientInfoStatus>();
      linkedListArray0[7] = linkedList7;
      ResettableListIterator<LinkedList<ClientInfoStatus>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<ClientInfoStatus>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(">w2c,yGz:87`9$", ">w2c,yGz:87`9$");
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">w2c,yGz:87`9$", ">w2c,yGz:87`9$");
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLNonTransientConnectionException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) listIterator0, (Transformer<? super SQLTransientException, ? extends SQLNonTransientConnectionException>) transformer0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      MapIterator<SQLSyntaxErrorException, Locale.FilteringMode> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((EnumSet<ClientInfoStatus>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 100, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedIterator<HashSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends String>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, (String) null, 0, sQLNonTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException1.forEach(consumer0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLNonTransientException0);
      IteratorUtils.getIterator(sQLDataException0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties1);
      IteratorUtils.objectGraphIterator(properties1, (Transformer<? super Properties, ? extends Properties>) constantTransformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-3857), sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      EmptyIterator.resettableEmptyIterator();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "org.apache.commons.collections4.IteratorUtils", "W", "Predicate must not be null");
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.singletonListIterator(linkedList0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      SQLDataException sQLDataException0 = new SQLDataException("Goy<5hu", "Goy<5hu");
      IteratorUtils.emptyListIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("+]XWfQmA*OK");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) factoryTransformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9QES&tA3");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("transformer may not be null", (String) null, 0, sQLNonTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      SQLDataException sQLDataException1 = new SQLDataException("add() not supported for empty Iterator", sQLNonTransientException0);
      IteratorUtils.getIterator("add() not supported for empty Iterator");
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(";9=CX ", "[|/CZ");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      singletonIterator0.reset();
      stringTokenizer0.hasMoreElements();
      singletonIterator0.reset();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("_`", ";9=CX ", (-2201));
      SingletonIterator<SQLTransientConnectionException> singletonIterator1 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      singletonIterator1.reset();
      singletonIterator1.next();
      IteratorUtils.toList((Iterator<?>) resettableIterator0);
      PriorityQueue<Predicate<Object>> priorityQueue1 = new PriorityQueue<Predicate<Object>>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[|/CZ", ";9=CX ");
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedIterator<HashSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends String>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      IteratorUtils.emptyListIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) factoryTransformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, (String) null, 0, sQLNonTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException1.forEach(consumer0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLNonTransientException0);
      IteratorUtils.getIterator(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("D[&TL;j{", "D[&TL;j{");
      Integer integer0 = new Integer(1203);
      IteratorUtils.getIterator(iIOMetadataNode0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList1 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList1);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedIterator0, 2082);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("D[&TL;j{", "4/![a;\",n]4");
      Integer integer0 = new Integer(2082);
      IteratorUtils.getIterator(integer0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.singletonListIterator(linkedList0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      SQLDataException sQLDataException0 = new SQLDataException("Goy<5hu", "Goy<5hu");
      Integer integer0 = new Integer(144);
      Integer integer1 = new Integer(10);
      int int0 = (-1376);
      Integer integer2 = new Integer((-1376));
      Integer integer3 = new Integer(1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Goy<5hu", "Array class must not be null", 1, sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Goy<5hu");
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("<!Q]njoFPT?/7z<6N-");
      FactoryTransformer<Properties, String> factoryTransformer0 = new FactoryTransformer<Properties, String>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) factoryTransformer0, (String) null, "Predicate must not be null", "Array class must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList1);
      loopingListIterator0.reset();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("D!", "D!", 870, hashtable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 10, sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 10, sQLTimeoutException0);
      linkedList1.add(sQLIntegrityConstraintViolationException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) stack0);
      IteratorUtils.size(resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("~Mbgka2W0:2mwcQi", "~Mbgka2W0:2mwcQi");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~Mbgka2W0:2mwcQi");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<StringTokenizer> iterator1 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("]");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode2;
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.loopingIterator((Collection<? extends Closure<Object>>) linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 748;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null, 748, 748);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      arrayDeque0.add(uniquePredicate0);
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<Class<IIOMetadataNode>, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) mapIterator0);
      IteratorUtils.loopingListIterator(list0);
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) stack0);
      IteratorUtils.size(resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("~Mbgka2W0:2mwcQi", "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~Mbgka2W0:2mwcQi");
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The method to invoke must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.size(resettableListIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 2, 0, sQLInvalidAuthorizationSpecException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2082, true, true, 2, 10);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(100, true, true, (-594), 3155);
      dataTruncationArray0[2] = dataTruncation2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(dataTruncation2);
      DataTruncation dataTruncation3 = new DataTruncation(10, true, false, (-594), 10, sQLFeatureNotSupportedException0);
      dataTruncationArray0[3] = dataTruncation3;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends String>) orderedMapIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator2);
      IteratorUtils.emptyListIterator();
      String string0 = "WEHiUC(>EsF*`p?Q=?";
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("WEHiUC(>EsF*`p?Q=?");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) factoryTransformer0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      PredicateTransformer<Class<Object>> predicateTransformer0 = new PredicateTransformer<Class<Object>>(predicate0);
      Class<Object> class0 = Object.class;
      Boolean boolean0 = predicateTransformer0.transform(class0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<SQLException> predicate2 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate1);
      IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate2);
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      HashSet<SQLNonTransientConnectionException> hashSet1 = new HashSet<SQLNonTransientConnectionException>();
      int int0 = (-1503);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((HashSet<SQLNonTransientConnectionException>[]) null, (-1503));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")", "", (-3857), sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(")", ")", (-3857), sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ck}|yP", ")");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("wX~");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException2;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      Properties properties0 = new Properties();
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<LinkedList<BatchUpdateException>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<BatchUpdateException>, String>) orderedMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BP>h4z4'g_?-e");
      singletonIterator0.next();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.checkError();
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLWarning0.getLocalizedMessage();
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0, 0L, 0L);
      EmptyListIterator.resettableEmptyListIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("D[&XL;j9", "D[&XL;j9");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      IteratorUtils.unmodifiableIterator(iterator0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("D[&XL;j9", "D[&XL;j9", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("D[&XL;j9", "4/![a;\",n]4");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("4/![a;\",n]4");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 3615, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = 2082;
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Integer integer0 = new Integer(2082);
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.singletonListIterator(linkedList0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OrderedIterator<HashSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      assertNotNull(predicate0);
      
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends String>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(orderedMapIterator1);
      
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(enumeration0);
      
      ResettableListIterator<SQLClientInfoException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      assertNotNull(constantFactory0);
      
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(constantFactory0);
      assertNotNull(factoryTransformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) factoryTransformer0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) orderedMapIterator1;
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) resettableListIterator1;
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) resettableListIterator1;
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(4, iteratorArray0.length);
      
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLRecoverableException>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator1, (Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      MapIterator<SQLRecoverableException, StringTokenizer> mapIterator2 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) mapIterator2, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<Boolean, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Boolean, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Boolean, ? extends Integer>) orderedMapIterator0);
      MapIterator<Boolean, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedMapIterator<Boolean, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Boolean, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Boolean, ? extends Integer>) orderedMapIterator0);
      MapIterator<Boolean, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[8];
      int int0 = 123;
      Integer integer0 = new Integer(123);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2414));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2414));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(123);
      Integer integer6 = new Integer(2743);
      Integer integer7 = new Integer(2743);
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      Integer integer8 = new Integer((-2354));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer8, true);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) singletonIterator0, (Iterator<? extends Integer>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=$e5-5nf5eE", "=$e5-5nf5eE");
      linkedList0.addLast(sQLTransientConnectionException0);
      IteratorUtils.loopingListIterator((List<SQLException>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[8];
      int int0 = 123;
      Integer integer0 = new Integer(123);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2435));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2435));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(123);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(91);
      integerArray0[7] = integer7;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 4);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) objectArrayIterator0, (Iterator<? extends Integer>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends String>) orderedMapIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator2);
      IteratorUtils.emptyListIterator();
      String string0 = "WEHiUC(>EsF*`p?Q=?";
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("WEHiUC(>EsF*`p?Q=?");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) factoryTransformer0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      PredicateTransformer<Class<Object>> predicateTransformer0 = new PredicateTransformer<Class<Object>>(predicate0);
      Class<Object> class0 = Object.class;
      Boolean boolean0 = predicateTransformer0.transform(class0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<SQLException> predicate2 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate1);
      IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate2);
      HashSet<SQLNonTransientConnectionException>[] hashSetArray0 = (HashSet<SQLNonTransientConnectionException>[]) Array.newInstance(HashSet.class, 3);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      hashSetArray0[0] = (HashSet<SQLNonTransientConnectionException>) linkedHashSet0;
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      hashSetArray0[1] = hashSet0;
      HashSet<SQLNonTransientConnectionException> hashSet1 = new HashSet<SQLNonTransientConnectionException>();
      hashSetArray0[2] = hashSet1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(hashSetArray0, (-1503));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1438);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, 0, (-2028));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ListIterator<SQLWarning> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("z^L3.F+'P5`'yCxF", "cI` W`(", 10);
      SQLTransientException sQLTransientException0 = new SQLTransientException("#1IVbw}-Ip/D-S%6", (String) null, sQLInvalidAuthorizationSpecException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[0] = predicate0;
      // Undeclared exception!
//      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 1 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      loopingListIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(2336, true, true, 2336, 0, sQLTransientException0);
      IteratorUtils.singletonIterator((SQLWarning) dataTruncation0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) loopingListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "t ZzlwmE*q(");
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<SQLException, SQLDataException> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends SQLDataException>) transformer0, (Transformer<? super SQLException, ? extends SQLDataException>) transformer0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException1, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLDataException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation(1425, false, false, 1425, 61, sQLTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1425, false, false, 44, 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2330, false, false, 44, 61, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2330, false, false, 5, 324, dataTruncation0);
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 44);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends BatchUpdateException>) orderedMapIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("\"m&");
      IteratorUtils.toString((Iterator<String>) orderedMapIterator1, (Transformer<? super String, String>) constantTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "[]");
      int int0 = 3431;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, 3431, 3431);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<Stack<SQLTimeoutException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<Stack<SQLTimeoutException>>) resettableListIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = (-1850);
      intArray0[3] = 16;
      intArray0[4] = (-1384);
      intArray0[5] = 3928;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[3];
      intArray1[0] = 10;
      intArray1[1] = 3928;
      intArray1[2] = 3928;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray1);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[1] = (-1384);
      intArray2[2] = 10;
      intArray2[3] = 0;
      intArray2[4] = 1901;
      intArray2[5] = 16;
      intArray2[6] = 0;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", intArray2);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "ExceptionTransformer invoked", 0, intArray1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", "suffix may not be null", 0, intArray2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(batchUpdateException3);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) resettableListIterator1, (long) 16);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", defaultEquator0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      SingletonIterator<Stack<SQLDataException>> singletonIterator0 = new SingletonIterator<Stack<SQLDataException>>(stack0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      ConstantTransformer<Object, SQLClientInfoException> constantTransformer0 = new ConstantTransformer<Object, SQLClientInfoException>(sQLClientInfoException0);
      ConstantTransformer.constantTransformer((Transformer<Object, String>) null);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) equalPredicate0);
      IteratorUtils.matchesAny((Iterator<Stack<SQLDataException>>) singletonIterator0, (Predicate<? super Stack<SQLDataException>>) predicate0);
      OrderedMapIterator<SQLTimeoutException, Closure<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Closure<Object>>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLException>) resettableListIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends IIOMetadataNode>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) mapIterator0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableIterator0;
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, 2697L);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) boundedIterator0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("transformer may not be null");
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.singletonIterator(iIOMetadataNode1);
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) resettableIterator1;
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode1, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      iteratorArray0[4] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "*", intArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Iterator<? extends BatchUpdateException>) listIterator0, (Iterator<? extends BatchUpdateException>) listIterator0);
      IteratorUtils.singletonIterator((SQLSyntaxErrorException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) transformer0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.singletonListIterator(linkedList0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      String string0 = "Goy<5hu";
      SQLDataException sQLDataException0 = new SQLDataException("Goy<5hu", "Goy<5hu");
      hashMap0.put(sQLDataException0, ",P;] jf .Ke");
      IteratorUtils.singletonIterator(hashMap0);
      Stack<Stack<SQLIntegrityConstraintViolationException>> stack0 = new Stack<Stack<SQLIntegrityConstraintViolationException>>();
      IteratorUtils.loopingListIterator((List<Stack<SQLIntegrityConstraintViolationException>>) stack0);
      HashMap<SQLTransactionRollbackException, SQLFeatureNotSupportedException> hashMap1 = new HashMap<SQLTransactionRollbackException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException>(hashMap1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      StringTokenizer stringTokenizer0 = new StringTokenizer(",P;] jf .Ke", ",P;] jf .Ke", false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stringTokenizer0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The method to invoke must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MapIterator<Locale.FilteringMode, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) mapIterator0, (Object) mapIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ListIterator<LinkedList<IIOMetadataNode>> listIterator0 = new SingletonListIterator<LinkedList<IIOMetadataNode>>(linkedList0);
      HashMap<SQLDataException, String> hashMap0 = new HashMap<SQLDataException, String>();
      SQLDataException sQLDataException0 = new SQLDataException("Goy<5hu", "Goy<5hu");
      String string0 = ",P;] jf .Ke";
      int int0 = 266;
      String string1 = null;
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null);
      int int1 = 100;
      DataTruncation dataTruncation0 = new DataTruncation(266, false, false, 512, 100, sQLDataException0);
      DataTruncation dataTruncation1 = new DataTruncation(512, false, false, 512, 512);
      SQLDataException sQLDataException1 = new SQLDataException((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException1, 100, 993);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      String string0 = "[0 X3\"!Ry1fNi5`";
      StringTokenizer stringTokenizer0 = new StringTokenizer("[0 X3\"!Ry1fNi5`", "");
      stringTokenizerArray0[0] = stringTokenizer0;
      String string1 = "iterator";
      stringTokenizer0.nextToken("iterator");
      int int0 = (-2180);
      stringTokenizer0.hasMoreTokens();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, (-2180));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[8];
      int int0 = 123;
      Integer integer0 = new Integer(123);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2414));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2414));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(123);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(91);
      integerArray0[7] = integer7;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 4);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) objectArrayIterator0, (Iterator<? extends Integer>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      String string0 = "peek() or element() called before remove()";
      StringTokenizer stringTokenizer0 = new StringTokenizer("peek() or element() called before remove()");
      stringTokenizerArray0[0] = stringTokenizer0;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) resettableIterator0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>((SortedSet<StringTokenizer>) treeSet0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) treeSet1);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("peek() or element() called before remove()", sQLDataException0);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      Comparator<Object> comparator0 = null;
      OrderedMapIterator<Properties, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLClientInfoException>(orderedMapIterator0);
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) orderedMapIterator0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      int int0 = 4228;
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(stringTokenizer0, 4228, 4228);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("0", "org.apache.commons.collections4.iterators.ArrayIterator");
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.iterators.ArrayIterator", "", sQLNonTransientConnectionException0);
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      IteratorUtils.objectGraphIterator((Object) sQLNonTransientConnectionException0, (Transformer<? super Object, ?>) transformer0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedMapIterator<Properties, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Properties, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) orderedMapIterator0, (Iterator<? extends Properties>) mapIterator0);
      int int0 = 0;
      int int1 = 266;
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 266, sQLWarning0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 993, 993);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedIterator0, 2082);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, (-2395L), 2404L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")", "", (-3857), sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(")", ")", (-3857), sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ck}|yP", ")");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("wX~");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException2;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      Properties properties0 = new Properties();
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "wX~", 1416);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<LinkedList<BatchUpdateException>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<BatchUpdateException>, String>) orderedMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BP>h4z4'g_?-e");
      singletonIterator0.next();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.checkError();
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLWarning0.getLocalizedMessage();
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0, 0L, 0L);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.find((Iterator<StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 369);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-3857), sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((-3857), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((-3857), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3857), sQLNonTransientConnectionException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((-3857), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals((-3857), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ck}|yP", "");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Ck}|yP", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Ck}|yP", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("wX~");
      assertEquals("wX~", sQLIntegrityConstraintViolationException2.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: wX~", sQLIntegrityConstraintViolationException2.toString());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException2);
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException2;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 4, 4);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals(4, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(4, sQLIntegrityConstraintViolationExceptionArray0.length);
      
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals(4, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(iterator1);
      assertEquals(4, sQLIntegrityConstraintViolationExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-3857), sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals((-3857), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals((-3857), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3857), sQLNonTransientConnectionException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals((-3857), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals((-3857), sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      int int0 = 123;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 123);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedMapIterator<LinkedHashSet<SQLDataException>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<LinkedHashSet<SQLDataException>, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedHashSet<SQLDataException>, BatchUpdateException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      SQLException sQLException0 = new SQLException("5X7", "5X7");
      assertEquals("5X7", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: 5X7", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("5X7", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5X7", sQLException0);
      assertEquals("5X7", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: 5X7", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("5X7", sQLException0.getMessage());
      assertEquals("5X7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 5X7", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("5X7", "5X7", "5X7", (-3076));
      assertEquals("5X7", stackTraceElement0.getFileName());
      assertEquals("5X7", stackTraceElement0.getMethodName());
      assertEquals("5X7.5X7(5X7)", stackTraceElement0.toString());
      assertEquals("5X7", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals((-3076), stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      int int0 = 0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("m/_b", "m/_b", "5X7", 0);
      assertEquals("m/_b", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("m/_b.m/_b(5X7:0)", stackTraceElement1.toString());
      assertEquals("5X7", stackTraceElement1.getFileName());
      assertEquals("m/_b", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
//      try {
        stackTraceElement2 = new StackTraceElement("m/_b", (String) null, (String) null, (-3076));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Method name is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      assertNotNull(resettableIterator0);
      assertEquals(0, enumSetArray0.length);
      
      OrderedMapIterator<Iterator<Locale.FilteringMode>, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<Iterator<Locale.FilteringMode>, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<Locale.FilteringMode>, Object>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      Iterable<Iterator<Locale.FilteringMode>> iterable0 = IteratorUtils.asIterable((Iterator<? extends Iterator<Locale.FilteringMode>>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(iterable0);
      
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 1058, (-1200));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      String string0 = "HcFw~ybO";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("HcFw~ybO", "HcFw~ybO");
      assertEquals("HcFw~ybO", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: HcFw~ybO", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("HcFw~ybO", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("HcFw~ybO", "HcFw~ybO", sQLSyntaxErrorException0);
      assertEquals("HcFw~ybO", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: HcFw~ybO", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("HcFw~ybO", sQLSyntaxErrorException0.getSQLState());
      assertEquals("HcFw~ybO", sQLTransactionRollbackException0.getSQLState());
      assertEquals("HcFw~ybO", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: HcFw~ybO", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackException0.setNextException(sQLSyntaxErrorException0);
      assertEquals("HcFw~ybO", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: HcFw~ybO", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("HcFw~ybO", sQLSyntaxErrorException0.getSQLState());
      assertEquals("HcFw~ybO", sQLTransactionRollbackException0.getSQLState());
      assertEquals("HcFw~ybO", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: HcFw~ybO", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        sQLTransactionRollbackException0.initCause(sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.SQLSyntaxErrorException: HcFw~ybO
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      SQLDataException sQLDataException0 = new SQLDataException("Hh*;x5h");
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The list must not be null", "The list must not be null", sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: The list must not be null", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The list must not be null", "9/{,v,J6%pB0Y/Dz;zi", 3766, sQLTransactionRollbackException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: The list must not be null", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals(3766, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("The list must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: The list must not be null", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLException sQLException0 = new SQLException("9/{,v,J6%pB0Y/Dz;zi", ":", sQLNonTransientConnectionException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: The list must not be null", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals(3766, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("The list must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: The list must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(":", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: 9/{,v,J6%pB0Y/Dz;zi", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-1), (-1), sQLException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: The list must not be null", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals(3766, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("The list must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: The list must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(":", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: 9/{,v,J6%pB0Y/Dz;zi", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(3218, true, true, (-3964), 3218, dataTruncation0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: The list must not be null", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals(3766, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("The list must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: The list must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(":", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: 9/{,v,J6%pB0Y/Dz;zi", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation1);
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(3218, true, true, 2845, (-2041), sQLTransactionRollbackException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: The list must not be null", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertNotNull(dataTruncation2);
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2845, false, true, 5455, (-1), dataTruncation0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: The list must not be null", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals(3766, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("The list must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: The list must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(":", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: 9/{,v,J6%pB0Y/Dz;zi", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("01004", dataTruncation3.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertEquals(0, dataTruncation3.getErrorCode());
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation3);
      
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1182), true, false, 1319, 0);
      assertEquals(0, dataTruncation4.getErrorCode());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertEquals("22001", dataTruncation4.getSQLState());
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertNotNull(dataTruncation4);
      
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, false, true, 3218, (-2041));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation5.toString());
      assertEquals("01004", dataTruncation5.getSQLState());
      assertEquals(0, dataTruncation5.getErrorCode());
      assertEquals("Data truncation", dataTruncation5.getMessage());
      assertFalse(dataTruncation5.equals((Object)dataTruncation1));
      assertFalse(dataTruncation5.equals((Object)dataTruncation2));
      assertFalse(dataTruncation5.equals((Object)dataTruncation4));
      assertFalse(dataTruncation5.equals((Object)dataTruncation3));
      assertFalse(dataTruncation5.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation5);
      
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, false, true, (-2656), 10, dataTruncation1);
      assertEquals(0, dataTruncation6.getErrorCode());
      assertEquals("01004", dataTruncation6.getSQLState());
      assertEquals("Data truncation", dataTruncation6.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation6.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: The list must not be null", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The list must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals(3766, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("The list must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: The list must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(":", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: 9/{,v,J6%pB0Y/Dz;zi", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("9/{,v,J6%pB0Y/Dz;zi", sQLException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertFalse(dataTruncation6.equals((Object)dataTruncation4));
      assertFalse(dataTruncation6.equals((Object)dataTruncation1));
      assertFalse(dataTruncation6.equals((Object)dataTruncation2));
      assertFalse(dataTruncation6.equals((Object)dataTruncation5));
      assertFalse(dataTruncation6.equals((Object)dataTruncation3));
      assertFalse(dataTruncation6.equals((Object)dataTruncation0));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation4));
      assertFalse(dataTruncation0.equals((Object)dataTruncation5));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertFalse(dataTruncation1.equals((Object)dataTruncation4));
      assertFalse(dataTruncation1.equals((Object)dataTruncation2));
      assertFalse(dataTruncation1.equals((Object)dataTruncation5));
      assertFalse(dataTruncation1.equals((Object)dataTruncation3));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation6);
      
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(0, true, true, (-659), 4263, sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Hh*;x5h", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Hh*;x5h", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation7.toString());
      assertEquals("Data truncation", dataTruncation7.getMessage());
      assertEquals("01004", dataTruncation7.getSQLState());
      assertEquals(0, dataTruncation7.getErrorCode());
      assertFalse(dataTruncation7.equals((Object)dataTruncation5));
      assertFalse(dataTruncation7.equals((Object)dataTruncation3));
      assertFalse(dataTruncation7.equals((Object)dataTruncation0));
      assertFalse(dataTruncation7.equals((Object)dataTruncation6));
      assertFalse(dataTruncation7.equals((Object)dataTruncation2));
      assertFalse(dataTruncation7.equals((Object)dataTruncation1));
      assertFalse(dataTruncation7.equals((Object)dataTruncation4));
      assertNotNull(dataTruncation7);
      
      dataTruncationArray0[7] = dataTruncation7;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(8, dataTruncationArray0.length);
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      assertTrue(list0.contains(dataTruncation1));
      assertEquals(8, dataTruncationArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ServiceLoader<Object>[] serviceLoaderArray0 = (ServiceLoader<Object>[]) Array.newInstance(ServiceLoader.class, 9);
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      serviceLoaderArray0[0] = serviceLoader0;
      Class<Object> class1 = Object.class;
      ServiceLoader<Object> serviceLoader1 = ServiceLoader.load(class1, (ClassLoader) null);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader1.toString());
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertNotNull(serviceLoader1);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      
      serviceLoaderArray0[1] = serviceLoader1;
      Class<Object> class2 = Object.class;
      ServiceLoader<Object> serviceLoader2 = ServiceLoader.load(class2, (ClassLoader) null);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader2.toString());
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertNotNull(serviceLoader2);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      
      serviceLoaderArray0[2] = serviceLoader2;
      ServiceLoader<Object> serviceLoader3 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader3.toString());
      assertFalse(serviceLoader3.equals((Object)serviceLoader2));
      assertFalse(serviceLoader3.equals((Object)serviceLoader0));
      assertFalse(serviceLoader3.equals((Object)serviceLoader1));
      assertNotNull(serviceLoader3);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertNotSame(serviceLoader3, serviceLoader2);
      assertNotSame(serviceLoader3, serviceLoader0);
      assertNotSame(serviceLoader3, serviceLoader1);
      
      serviceLoaderArray0[3] = serviceLoader3;
      ServiceLoader<Object> serviceLoader4 = ServiceLoader.load(class2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader4.toString());
      assertFalse(serviceLoader4.equals((Object)serviceLoader0));
      assertFalse(serviceLoader4.equals((Object)serviceLoader3));
      assertFalse(serviceLoader4.equals((Object)serviceLoader1));
      assertFalse(serviceLoader4.equals((Object)serviceLoader2));
      assertNotNull(serviceLoader4);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(serviceLoader4, serviceLoader0);
      assertNotSame(serviceLoader4, serviceLoader3);
      assertNotSame(serviceLoader4, serviceLoader1);
      assertNotSame(serviceLoader4, serviceLoader2);
      
      serviceLoaderArray0[4] = serviceLoader4;
      Class<Object> class3 = Object.class;
      ServiceLoader<Object> serviceLoader5 = ServiceLoader.load(class3, (ClassLoader) null);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader5.toString());
      assertFalse(serviceLoader5.equals((Object)serviceLoader1));
      assertFalse(serviceLoader5.equals((Object)serviceLoader3));
      assertFalse(serviceLoader5.equals((Object)serviceLoader2));
      assertFalse(serviceLoader5.equals((Object)serviceLoader4));
      assertFalse(serviceLoader5.equals((Object)serviceLoader0));
      assertNotNull(serviceLoader5);
      assertSame(class3, class1);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertNotSame(serviceLoader5, serviceLoader1);
      assertNotSame(serviceLoader5, serviceLoader3);
      assertNotSame(serviceLoader5, serviceLoader2);
      assertNotSame(serviceLoader5, serviceLoader4);
      assertNotSame(serviceLoader5, serviceLoader0);
      
      serviceLoaderArray0[5] = serviceLoader5;
      ServiceLoader<Object> serviceLoader6 = ServiceLoader.load(class1);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader6.toString());
      assertFalse(serviceLoader6.equals((Object)serviceLoader2));
      assertFalse(serviceLoader6.equals((Object)serviceLoader4));
      assertFalse(serviceLoader6.equals((Object)serviceLoader5));
      assertFalse(serviceLoader6.equals((Object)serviceLoader1));
      assertFalse(serviceLoader6.equals((Object)serviceLoader0));
      assertFalse(serviceLoader6.equals((Object)serviceLoader3));
      assertNotNull(serviceLoader6);
      assertNotSame(serviceLoader6, serviceLoader2);
      assertNotSame(serviceLoader6, serviceLoader4);
      assertNotSame(serviceLoader6, serviceLoader5);
      assertNotSame(serviceLoader6, serviceLoader1);
      assertNotSame(serviceLoader6, serviceLoader0);
      assertNotSame(serviceLoader6, serviceLoader3);
      assertSame(class1, class2);
      assertSame(class1, class3);
      assertSame(class1, class0);
      
      serviceLoaderArray0[6] = serviceLoader6;
      ServiceLoader<Object> serviceLoader7 = ServiceLoader.load(class1, (ClassLoader) null);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader7.toString());
      assertFalse(serviceLoader7.equals((Object)serviceLoader2));
      assertFalse(serviceLoader7.equals((Object)serviceLoader5));
      assertFalse(serviceLoader7.equals((Object)serviceLoader3));
      assertFalse(serviceLoader7.equals((Object)serviceLoader1));
      assertFalse(serviceLoader7.equals((Object)serviceLoader6));
      assertFalse(serviceLoader7.equals((Object)serviceLoader0));
      assertFalse(serviceLoader7.equals((Object)serviceLoader4));
      assertNotNull(serviceLoader7);
      assertNotSame(serviceLoader7, serviceLoader2);
      assertNotSame(serviceLoader7, serviceLoader5);
      assertNotSame(serviceLoader7, serviceLoader3);
      assertNotSame(serviceLoader7, serviceLoader1);
      assertNotSame(serviceLoader7, serviceLoader6);
      assertNotSame(serviceLoader7, serviceLoader0);
      assertNotSame(serviceLoader7, serviceLoader4);
      assertSame(class1, class2);
      assertSame(class1, class3);
      assertSame(class1, class0);
      
      serviceLoaderArray0[7] = serviceLoader7;
      ServiceLoader<Object> serviceLoader8 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader8.toString());
      assertFalse(serviceLoader8.equals((Object)serviceLoader5));
      assertFalse(serviceLoader8.equals((Object)serviceLoader3));
      assertFalse(serviceLoader8.equals((Object)serviceLoader2));
      assertFalse(serviceLoader8.equals((Object)serviceLoader6));
      assertFalse(serviceLoader8.equals((Object)serviceLoader1));
      assertFalse(serviceLoader8.equals((Object)serviceLoader7));
      assertFalse(serviceLoader8.equals((Object)serviceLoader4));
      assertFalse(serviceLoader8.equals((Object)serviceLoader0));
      assertNotNull(serviceLoader8);
      assertSame(class0, class3);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertNotSame(serviceLoader8, serviceLoader5);
      assertNotSame(serviceLoader8, serviceLoader3);
      assertNotSame(serviceLoader8, serviceLoader2);
      assertNotSame(serviceLoader8, serviceLoader6);
      assertNotSame(serviceLoader8, serviceLoader1);
      assertNotSame(serviceLoader8, serviceLoader7);
      assertNotSame(serviceLoader8, serviceLoader4);
      assertNotSame(serviceLoader8, serviceLoader0);
      
      serviceLoaderArray0[8] = serviceLoader8;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      ServiceLoader<SQLRecoverableException> serviceLoader9 = ServiceLoader.loadInstalled(class4);
      assertEquals("java.util.ServiceLoader[java.sql.SQLRecoverableException]", serviceLoader9.toString());
      assertNotNull(serviceLoader9);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(serviceLoaderArray0, 10, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MapIterator<EnumSet<Locale.FilteringMode>, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.commons.collections4.functors.NotPredicate", (-1));
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NotPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 93, sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NotPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(93, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$]nu", sQLTransactionRollbackException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NotPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(93, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("$]nu", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: $]nu", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      sQLExceptionArray0[0] = (SQLException) sQLTimeoutException0;
      int int0 = 169;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("$]nu", "[", 169, sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NotPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(169, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("$]nu", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: $]nu", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.functors.NotPredicate", "[", sQLTimeoutException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NotPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(93, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("$]nu", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: $]nu", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: org.apache.commons.collections4.functors.NotPredicate", sQLNonTransientException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NotPredicate", sQLNonTransientException0.getMessage());
      assertEquals("[", sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientException0;
      sQLNonTransientConnectionException0.setNextException(sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NotPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(169, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("$]nu", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: $]nu", sQLNonTransientConnectionException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("$]nu", "");
      assertEquals("java.sql.SQLFeatureNotSupportedException: $]nu", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("$]nu", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLExceptionArray0[3] = (SQLException) sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals("java.sql.SQLFeatureNotSupportedException: $]nu", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("$]nu", sQLFeatureNotSupportedException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Node must not be null", "$]nu", 169, sQLExceptionArray0[1]);
      assertEquals("Node must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("$]nu", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(169, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Node must not be null", sQLFeatureNotSupportedException1.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(5, sQLExceptionArray0.length);
      
      sQLExceptionArray0[4] = (SQLException) sQLFeatureNotSupportedException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (-1), 1003);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }
}
