/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:46:32 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~ vQbUpEQS<O)lq(+~", "Node3must not be null");
      Vector<Boolean> vector0 = new Vector<Boolean>(2, 2682);
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) vector0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) resettableListIterator0, (Predicate<? super Boolean>) equalPredicate0);
      PredicateTransformer<SQLTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLTransientConnectionException>(equalPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException0);
      vector0.add(boolean0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) listIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", sQLSyntaxErrorException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 9, hashtable0, sQLTransientConnectionException0);
      ConstantTransformer<String, SQLClientInfoException> constantTransformer0 = new ConstantTransformer<String, SQLClientInfoException>(sQLClientInfoException0);
      SwitchTransformer<String, SQLClientInfoException> switchTransformer0 = new SwitchTransformer<String, SQLClientInfoException>(predicateArray0, (Transformer<? super String, ? extends SQLClientInfoException>[]) null, constantTransformer0);
      arrayList0.add((Object) switchTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<ArrayList<Vector>>) loopingListIterator0, 0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0, 4111);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation((-603), false, false, (-603), (-603), (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1901, true, false, 834, (-603), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1591, true, false, (-603), 1208, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[2] = predicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) resettableListIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[4] = predicate1;
      SQLDataException sQLDataException0 = new SQLDataException("]\"WWo,'0*m8__lSbe(", "", 7, dataTruncation1);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLDataException0);
      predicateArray0[5] = (Predicate<Object>) identityPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) allPredicate0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.getIterator("");
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      int[] intArray0 = new int[9];
      intArray0[0] = 452;
      intArray0[1] = (-1098);
      intArray0[2] = 2000;
      intArray0[3] = 10;
      intArray0[4] = 3;
      intArray0[5] = 1135;
      intArray0[6] = 544;
      intArray0[7] = 573;
      intArray0[8] = 2471;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[9];
      intArray1[0] = 2000;
      intArray1[1] = 544;
      intArray1[2] = 2471;
      intArray1[3] = 2000;
      intArray1[4] = 2471;
      intArray1[5] = 2000;
      intArray1[6] = (-1098);
      intArray1[7] = 573;
      intArray1[8] = 3;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.getIterator("7R{}#k)J_ZH<D");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("BAKE");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("7R{}#k)J_ZH<D", (Transformer<? super String, ? extends String>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'BAKE' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 1, 1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, (long) 1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.BatchUpdateException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyMapIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 7);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("lzDN");
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      iteratorArray0[0] = iterator0;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableIterator0;
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) listIterator0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.objectGraphIterator(iIOMetadataNode1, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) iterator1, 899L, 899L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y");
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      StringTokenizer stringTokenizer0 = new StringTokenizer(", ");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>((StringTokenizer) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]gbO_NU'");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Closure must not be null", hashMap0, sQLInvalidAuthorizationSpecException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Y", "%7+#d%W<^v;S*h.", map0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Y", "org.apache.commons.collections4.IteratorUtils", 100, sQLClientInfoException1);
      IteratorUtils.getIterator(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, true);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLNonTransientConnectionException> hashMap0 = new HashMap<IIOMetadataNode, SQLNonTransientConnectionException>();
      EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException>(hashMap0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("#Q>", "equator may not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=", sQLSyntaxErrorException0);
      linkedList0.add(sQLInvalidAuthorizationSpecException0);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<Integer, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) mapIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`.Hd.duuKS;o0gk");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Transformer<SQLTransientException, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      Class<String> class0 = String.class;
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(instantiateFactory0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("qmwS#wN.n}4$ntMV", "qmwS#wN.n}4$ntMV", 12, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("qmwS#wN.n}4$ntMV", "qmwS#wN.n}4$ntMV", 12, sQLSyntaxErrorException0);
      factoryTransformer0.transform(sQLTransientConnectionException0);
      factoryTransformer0.transform(sQLSyntaxErrorException0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) factoryTransformer0, "]tTO/G<T&8DAk5", "", "");
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 12);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Class<SQLWarning>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Class<SQLWarning>>) orderedMapIterator0, (Transformer<? super Class<SQLWarning>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      IteratorUtils.getIterator(defaultEquator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(arrayList0);
      arrayList0.add((SQLTimeoutException) null);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) loopingIterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultEquator.defaultEquator();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      String string0 = "NodeList must not be null";
      String string1 = "7OMAKP=;KFFq,{&X";
      SQLWarning sQLWarning0 = new SQLWarning("NodeList must not be null", "7OMAKP=;KFFq,{&X", (-1));
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      vector0.add(sQLDataException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("a", "a");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      StringTokenizer stringTokenizer1 = IteratorUtils.get((Iterator<StringTokenizer>) singletonListIterator0, 0);
      IteratorUtils.getIterator(stringTokenizer1);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("a");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("a");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("a", "a");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", (String) null, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException((String) null, "YjsJuc?^;", 0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("", "", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, 1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // newChild == null!
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Predicate<TreeSet<Hashtable>> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.getIterator(predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) null);
      predicateArray0[1] = predicate1;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate1 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate1;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) singletonListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y");
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>((StringTokenizer) null);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) singletonListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) treeSet0);
      Iterator<StringTokenizer> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.get(iterator1, 0);
      ArrayList<Stack<IIOMetadataNode>> arrayList1 = new ArrayList<Stack<IIOMetadataNode>>();
      IteratorUtils.toArray(iterator1);
      OrderedMapIterator<SQLDataException, Vector<Closure<Object>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator0, class0);
      IteratorUtils.toArray(iterator1);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0, 502, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 0, 0);
      AbstractMapIteratorDecorator<Boolean, Integer> abstractMapIteratorDecorator0 = null;
//      try {
        abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, Integer>((MapIterator<Boolean, Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultEquator.defaultEquator();
      Integer integer0 = new Integer((-2234));
      Integer integer1 = new Integer(1307);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(integer1, comparator0);
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) loopingListIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.getIterator("]");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      StringTokenizer stringTokenizer0 = new StringTokenizer("]");
      stringTokenizerArray0[0] = stringTokenizer0;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) objectArrayListIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 100;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Unsupported object type: ", "Unsupported object type: ", 100);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Unsupported object type: ", "Unsupported object type: ", (Map<String, ClientInfoStatus>) null, sQLNonTransientConnectionException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Unsupported object type: ", "Unsupported object type: ", 100, sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      Transformer<SQLTransientException, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      ForClosure<SQLException> forClosure0 = new ForClosure<SQLException>(100, closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTimeoutException>) forClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = (-994);
      intArray0[2] = (-994);
      intArray0[3] = 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation((-994), false, false, 3, (-994), sQLNonTransientConnectionException0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Transformer<DataTruncation, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("L", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'L' on 'class java.sql.DataTruncation' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<Stack<SQLInvalidAuthorizationSpecException>> stack0 = new Stack<Stack<SQLInvalidAuthorizationSpecException>>();
      Stack<SQLInvalidAuthorizationSpecException> stack1 = new Stack<SQLInvalidAuthorizationSpecException>();
      stack0.add(stack1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableListIterator<Stack<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Stack<SQLInvalidAuthorizationSpecException>>) stack0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("l<q'8n'^U.*GdtS <1");
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      ConstantTransformer.constantTransformer(linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Stack<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Transformer<? super Stack<SQLInvalidAuthorizationSpecException>, String>) constantTransformer0, "l<q'8n'^U.*GdtS <1", "l<q'8n'^U.*GdtS <1", "l<q'8n'^U.*GdtS <1");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.Category>>) null, (-268L), (-268L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<DataTruncation>) resettableIterator0, (Object) resettableIterator0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "bUH#^%K4t ?<fd>m`";
      stringArray0[1] = ", ";
      stringArray0[2] = "g";
      stringArray0[3] = "<~z7";
      IteratorUtils.arrayIterator(stringArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Hashtable<SQLException, Properties> hashtable0 = new Hashtable<SQLException, Properties>();
      Transformer<SQLException, Properties> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends Properties>) hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends Properties>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Properties properties0 = new Properties();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) null, 122);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      ResettableListIterator<Stack<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Stack<IIOMetadataNode>>) arrayList0);
      arrayList0.add(0, (Stack<IIOMetadataNode>) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<Boolean, Stack<Locale.Category>> hashMap0 = new HashMap<Boolean, Stack<Locale.Category>>();
      PredicateTransformer<SQLTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLTransientConnectionException>(uniquePredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+q", "+q");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+q", sQLInvalidAuthorizationSpecException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException0);
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      hashMap0.replace(boolean0, stack0);
      EntrySetMapIterator<Boolean, Stack<Locale.Category>> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, Stack<Locale.Category>>(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator");
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
      Class<Locale.Category> class1 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (long) 3);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      HashMap<Boolean, Stack<Locale.Category>> hashMap0 = new HashMap<Boolean, Stack<Locale.Category>>();
      EntrySetMapIterator<Boolean, Stack<Locale.Category>> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, Stack<Locale.Category>>(hashMap0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.getIterator(iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<Boolean, Stack<Locale.Category>> hashMap0 = new HashMap<Boolean, Stack<Locale.Category>>();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("oX", (Class<?>[]) null, (Object[]) null);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator((IIOMetadataNode) null);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "M[VsPbfc", "org.apache.commons.collections4.functors.ChainedTransformer", "CMX~IxS1h8=IQ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) instanceofPredicate0);
      IteratorUtils.size((Iterator<?>) null);
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLNonTransientException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException>(orderedMapIterator1);
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      DefaultEquator.defaultEquator();
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) priorityQueue0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      Iterator<InstanceofPredicate> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      Class<String> class1 = String.class;
      classArray0[5] = class1;
      ObjectArrayIterator<Class<String>> objectArrayIterator0 = new ObjectArrayIterator<Class<String>>(classArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Class<String>>) objectArrayIterator0, (Closure<? super Class<String>>) closure0);
      int int0 = 866;
      Integer integer0 = new Integer(866);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) equalPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null, (-2661));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot put new key/value pair - Map is fixed size singleton");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, 3122);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Set and List must be empty", (String) null, intArray0);
      EqualPredicate.equalPredicate((Object) batchUpdateException0, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>((Predicate<? super Object>[]) null, (Closure<? super Object>[]) null, closure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1, switchClosure0);
      ForClosure.forClosure((-1), (Closure<? super Object>) closure0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      ObjectArrayIterator<Class<String>> objectArrayIterator0 = new ObjectArrayIterator<Class<String>>(classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Class<String>>) objectArrayIterator0, (Closure<? super Class<String>>) forClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) listIterator0, (Transformer<? super IIOMetadataNode, String>) null, "uDOO;0TaQ`zF/'", "uDOO;0TaQ`zF/'", "CMX~IxS1h8=IQ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer1, comparator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Boolean> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Boolean>>) hashSet0);
      WhileClosure<Boolean> whileClosure0 = new WhileClosure<Boolean>(predicate1, closure0, false);
      SingletonIterator<Closure<Boolean>> singletonIterator0 = new SingletonIterator<Closure<Boolean>>(whileClosure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) null, (Predicate<? super EnumSet<Locale.Category>>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2903, true, true, 2354, 2354);
      Transformer<SQLException, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<Object, SQLSyntaxErrorException>("x#1O|I4k", classArray0, classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, (Predicate<? super Object>) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(transformedPredicate0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(nullIsTruePredicate0, (Predicate<? super SQLException>) null);
      Predicate<DataTruncation> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0, (Predicate<? super DataTruncation>) orPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException1);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) sQLIntegrityConstraintViolationException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate2;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate2;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate0);
      Comparator<SQLIntegrityConstraintViolationException> comparator2 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(any(java.sql.SQLIntegrityConstraintViolationException.class) , any(java.sql.SQLIntegrityConstraintViolationException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLIntegrityConstraintViolationException> predicate3 = ComparatorPredicate.comparatorPredicate(sQLIntegrityConstraintViolationException0, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate3);
      IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(792).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) class0, comparator0);
      HashMap<Boolean, Stack<Locale.Category>> hashMap0 = new HashMap<Boolean, Stack<Locale.Category>>();
      PredicateTransformer<SQLTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLTransientConnectionException>(instanceofPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "_");
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException0);
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      hashMap0.put(boolean0, stack0);
      EntrySetMapIterator<Boolean, Stack<Locale.Category>> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, Stack<Locale.Category>>(hashMap0);
      IteratorUtils.matchesAny((Iterator<Boolean>) entrySetMapIterator0, (Predicate<? super Boolean>) predicate0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) predicateTransformer0;
      objectArray0[1] = (Object) predicate0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "";
      HashMap<Object, LinkedList<SQLException>> hashMap1 = new HashMap<Object, LinkedList<SQLException>>();
      EntrySetMapIterator<Object, LinkedList<SQLException>> entrySetMapIterator1 = new EntrySetMapIterator<Object, LinkedList<SQLException>>(hashMap1);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) entrySetMapIterator1, (-1619));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1619
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Node must not be null");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      StringTokenizer stringTokenizer1 = IteratorUtils.get((Iterator<StringTokenizer>) singletonListIterator0, 0);
      ArrayList<Stack<IIOMetadataNode>> arrayList1 = new ArrayList<Stack<IIOMetadataNode>>();
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null", "1lT(UNG#DQfm");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) resettableIterator0, (Object) stringTokenizer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      IteratorUtils.loopingListIterator((List<Stack<IIOMetadataNode>>) arrayList0);
      arrayList0.add(0, (Stack<IIOMetadataNode>) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Node must not be null");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      IteratorUtils.get((Iterator<StringTokenizer>) singletonListIterator0, 0);
      String string0 = "C\\MX~IxS1h8=IQ";
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) class0, comparator0);
      HashMap<Boolean, Stack<Locale.Category>> hashMap0 = new HashMap<Boolean, Stack<Locale.Category>>();
      EntrySetMapIterator<Boolean, Stack<Locale.Category>> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, Stack<Locale.Category>>(hashMap0);
      IteratorUtils.matchesAny((Iterator<Boolean>) entrySetMapIterator0, (Predicate<? super Boolean>) predicate0);
      ResettableIterator<Stack<DataTruncation>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.matchesAny((Iterator<Stack<DataTruncation>>) resettableIterator0, (Predicate<? super Stack<DataTruncation>>) predicate0);
      IteratorUtils.emptyMapIterator();
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.singletonListIterator((EnumSet<Locale.Category>) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<EnumSet<Locale.Category>>) listIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Boolean> predicate1 = AndPredicate.andPredicate((Predicate<? super Boolean>) predicate0, (Predicate<? super Boolean>) predicate0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      WhileClosure<Boolean> whileClosure0 = new WhileClosure<Boolean>(predicate1, closure0, false);
      SingletonIterator<Closure<Boolean>> singletonIterator0 = new SingletonIterator<Closure<Boolean>>(whileClosure0);
      IteratorUtils.matchesAll((Iterator<Closure<Boolean>>) singletonIterator0, (Predicate<? super Closure<Boolean>>) predicate0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Transformer must not be null";
      stringArray0[1] = "SD";
      stringArray0[2] = "'$;vN/:m";
      stringArray0[3] = "^Q'{JF=,";
      stringArray0[4] = "";
      stringArray0[5] = "F]FBdq=K2b&bZdw";
      stringArray0[6] = "Entry does not exist: ";
      stringArray0[7] = "K5P*/:lXs";
      stringArray0[8] = "7II[fC[[`:";
      ObjectArrayListIterator<String> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 650);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultEquator.defaultEquator();
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 5);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category3);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category3, locale_Category1, locale_Category1);
      enumSetArray0[1] = enumSet1;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet2 = EnumSet.of(locale_Category4, locale_Category5, locale_Category6, locale_Category2);
      enumSetArray0[2] = enumSet2;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      locale_CategoryArray0[0] = locale_Category5;
      locale_CategoryArray0[1] = locale_Category2;
      EnumSet<Locale.Category> enumSet3 = EnumSet.of(locale_Category7, locale_CategoryArray0);
      enumSetArray0[3] = enumSet3;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet4 = EnumSet.noneOf(class0);
      enumSetArray0[4] = enumSet4;
      ObjectArrayListIterator<EnumSet<Locale.Category>> objectArrayListIterator0 = new ObjectArrayListIterator<EnumSet<Locale.Category>>(enumSetArray0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.Category>>) objectArrayListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) objectArrayListIterator0);
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) enumSet0);
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) class0, comparator0);
      HashMap<Boolean, Stack<Locale.Category>> hashMap0 = new HashMap<Boolean, Stack<Locale.Category>>();
      PredicateTransformer<SQLTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLTransientConnectionException>(instanceofPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "_");
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException0);
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      hashMap0.put(boolean0, stack0);
      EntrySetMapIterator<Boolean, Stack<Locale.Category>> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, Stack<Locale.Category>>(hashMap0);
      IteratorUtils.matchesAny((Iterator<Boolean>) entrySetMapIterator0, (Predicate<? super Boolean>) predicate0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) predicateTransformer0;
      objectArray0[1] = (Object) predicate0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "";
      HashMap<Object, LinkedList<SQLException>> hashMap1 = new HashMap<Object, LinkedList<SQLException>>();
      EntrySetMapIterator<Object, LinkedList<SQLException>> entrySetMapIterator1 = new EntrySetMapIterator<Object, LinkedList<SQLException>>(hashMap1);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) entrySetMapIterator1, (-1619));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1619
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(integer0, comparator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(":TT5.JVc~/`~z{V^$=");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException1;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException1);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NotNullPredicate.notNullPredicate();
      SQLDataException sQLDataException0 = new SQLDataException(":TT5.JVc~/`~z{V^$=", "", sQLIntegrityConstraintViolationException1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) sQLDataException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>((Predicate<? super SQLException>[]) null);
      Predicate<SQLException> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate1);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate2);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      IteratorUtils.get((Iterator<StringTokenizer>) singletonListIterator0, 0);
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      HashMap<Boolean, Stack<Locale.Category>> hashMap0 = new HashMap<Boolean, Stack<Locale.Category>>();
      EntrySetMapIterator<Boolean, Stack<Locale.Category>> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, Stack<Locale.Category>>(hashMap0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAny((Iterator<Boolean>) entrySetMapIterator0, (Predicate<? super Boolean>) predicate0);
      ResettableIterator<Stack<DataTruncation>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.matchesAny((Iterator<Stack<DataTruncation>>) resettableIterator0, (Predicate<? super Stack<DataTruncation>>) predicate0);
      IteratorUtils.emptyMapIterator();
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.singletonListIterator((EnumSet<Locale.Category>) null);
      ListIterator<EnumSet<Locale.Category>> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) listIterator0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.Category>>) listIterator1, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<Integer>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<Integer>) singletonListIterator0;
      iteratorArray0[2] = (Iterator<Integer>) singletonListIterator0;
      iteratorArray0[3] = (Iterator<Integer>) singletonListIterator0;
      iteratorArray0[4] = (Iterator<Integer>) singletonListIterator0;
      iteratorArray0[5] = (Iterator<Integer>) singletonListIterator0;
      iteratorArray0[6] = (Iterator<Integer>) singletonListIterator0;
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(0);
      SQLWarning sQLWarning0 = new SQLWarning();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLWarning0, (Equator<Object>) defaultEquator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate1);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Closure<Boolean>>) null, (Predicate<? super Closure<Boolean>>) orPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.collection.UnmodifiableCollection");
      OrderedIterator<Closure<Boolean>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Closure<Boolean>>) orderedIterator0, (Predicate<? super Closure<Boolean>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Boolean> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Boolean>>) hashSet0);
      WhileClosure<Boolean> whileClosure0 = new WhileClosure<Boolean>(predicate0, closure0, false);
      Closure<Boolean> closure1 = NOPClosure.nopClosure();
      SingletonIterator<Closure<Boolean>> singletonIterator0 = new SingletonIterator<Closure<Boolean>>(closure1);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Closure<Boolean>>) singletonIterator0, (Predicate<? super Closure<Boolean>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(648);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      OrderedMapIterator<Class<String>, Hashtable<Properties, Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>>(orderedMapIterator0);
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("l ", "l ", sQLTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("l ", "", sQLTransactionRollbackException0);
      EqualPredicate.equalPredicate((Object) sQLTimeoutException0, (Equator<Object>) defaultEquator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = (Predicate<Object>) nullIsFalsePredicate0;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, (Closure<? super Object>) null);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1), switchClosure0);
      ForClosure.forClosure(648, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<Class<String>>) abstractOrderedMapIteratorDecorator0, (Closure<? super Class<String>>) switchClosure0);
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.matchesAll((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) nullIsFalsePredicate0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer(2368);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(2368);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) defaultEquator0, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      predicateArray0[2] = (Predicate<Object>) nullIsFalsePredicate0;
      predicateArray0[3] = (Predicate<Object>) nullIsFalsePredicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, (Closure<? super Object>) null);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(574, (Closure<? super Object>) null);
      ForClosure.forClosure(9, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<Class<String>>) null, (Closure<? super Class<String>>) forClosure0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, 11);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      IteratorUtils.isEmpty(singletonIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 123, 123);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator1, 0L);
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      OrderedMapIterator<Class<String>, Hashtable<Properties, Integer>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>>(orderedMapIterator2);
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Set and List must be empty");
      IteratorUtils.getIterator(abstractOrderedMapIteratorDecorator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) objectArrayListIterator0, comparator0);
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Boolean>) orderedIterator0, (Predicate<? super Boolean>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(integer0, comparator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray0[2] = predicate2;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) sQLIntegrityConstraintViolationException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[3] = predicate3;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate1);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate1);
      IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      assertEquals(0, objectArray0.length);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) null, (Collection<? super ClientInfoStatus>) arrayDeque0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      Enumeration<SQLDataException> enumeration0 = null;
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null, (Collection<? super SQLDataException>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(2368);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) "Set and List must be empty", (Equator<Object>) defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate1;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(onePredicate0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, (Closure<? super Object>) null);
      SwitchClosure<Object> switchClosure1 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, (Closure<? super Object>) null);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(2368, switchClosure1);
      ForClosure.forClosure(0, (Closure<? super Object>) forClosure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Class<String>>) null, (Closure<? super Class<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      IteratorUtils.loopingListIterator((List<Stack<IIOMetadataNode>>) arrayList0);
      arrayList0.add(0, (Stack<IIOMetadataNode>) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Node must not be null");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      IteratorUtils.get((Iterator<StringTokenizer>) singletonListIterator0, 0);
      ArrayList<Stack<IIOMetadataNode>> arrayList1 = new ArrayList<Stack<IIOMetadataNode>>();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) priorityQueue0);
      Enumeration<SQLDataException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration1);
      IteratorUtils.emptyIterator();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) nullIsExceptionPredicate0);
      IteratorUtils.toArray(iterator1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1368));
      Integer integer1 = new Integer(91);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 8L);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 3);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classArray0[2] = class2;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("0$Vb_kR", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, String>) transformer0, "nt&VO$9K9tD<", "", "p# u\f");
      assertEquals("p# u\f", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 746;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 746, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "List must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0, true);
      ZippingIterator<ClientInfoStatus> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) singletonIterator0, (Iterator<? extends ClientInfoStatus>) singletonIterator0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<ClientInfoStatus> comparatorPredicate0 = new ComparatorPredicate<ClientInfoStatus>(clientInfoStatus0, (Comparator<ClientInfoStatus>) null, comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<ClientInfoStatus>) zippingIterator0, (Predicate<? super ClientInfoStatus>) comparatorPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(integer1, comparator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      Predicate<SQLException> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) anyPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("The predicate to call must not be null");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "The predicate to call must not be null");
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate1);
      LinkedHashSet<HashMap> linkedHashSet0 = IteratorUtils.find((Iterator<LinkedHashSet<HashMap>>) iterator0, (Predicate<? super LinkedHashSet<HashMap>>) andPredicate0);
      assertEquals("The predicate to call must not be null", linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("c-R<u^)&VR]6P[u", classArray0, sQLDataExceptionArray0);
      IteratorUtils.toString((Iterator<SQLDataException>) mapIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "[]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (long) 3);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("nt&VO$9K9tD<", (Class<?>[]) classArray0, (Object[]) iIOMetadataNodeArray0);
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "CMX~IxS1h8=IQ", "=BkLU5a.7;VN^l1((", "");
      assertEquals("=BkLU5a.7;VN^l1((", string0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      String string1 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      assertEquals("[]", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) priorityQueue0);
      Enumeration<SQLDataException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration1);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) iterator1, (Transformer<? super SQLDataException, ? extends Properties>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("C", "8Dqy", false);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 7);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, StringTokenizer> invokerTransformer0 = new InvokerTransformer<Object, StringTokenizer>("", classArray0, classArray0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.util.StringTokenizer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 0L);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("nt&VO$9K9tD<", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) listIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "nt&VO$9K9tD<", ":KrQ;N9H+", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer(2368);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(2368);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer1, comparator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) listIterator0);
      IteratorUtils.size(zippingIterator0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("v/ZfzRm6f)-:Y,\"R:");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) reverseListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, (String) null, "+GV]_", "_F[c#");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      HashSet<SQLTimeoutException>[] hashSetArray0 = (HashSet<SQLTimeoutException>[]) Array.newInstance(HashSet.class, 5);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      hashSetArray0[0] = hashSet0;
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      hashSetArray0[2] = (HashSet<SQLTimeoutException>) linkedHashSet0;
      HashSet<SQLTimeoutException> hashSet1 = new HashSet<SQLTimeoutException>();
      hashSetArray0[3] = hashSet1;
      HashSet<SQLTimeoutException> hashSet2 = new HashSet<SQLTimeoutException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      hashSetArray0[4] = hashSet2;
      IteratorUtils.arrayIterator(hashSetArray0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      ObjectArrayListIterator<Class<SQLNonTransientConnectionException>> objectArrayListIterator0 = new ObjectArrayListIterator<Class<SQLNonTransientConnectionException>>(classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Class<SQLNonTransientConnectionException>>) objectArrayListIterator0, (Predicate<? super Class<SQLNonTransientConnectionException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLFeatureNotSupportedException0);
      IteratorUtils.matchesAny((Iterator<Boolean>) null, (Predicate<? super Boolean>) predicate0);
      Hashtable<String, TreeSet<SQLRecoverableException>> hashtable0 = new Hashtable<String, TreeSet<SQLRecoverableException>>();
      Enumeration<String> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>(priorityQueue0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>(priorityQueue1);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) priorityQueue2);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) priorityQueue0);
      Enumeration<SQLDataException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration1);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) iterator1, (Transformer<? super SQLDataException, ? extends Properties>) transformer0);
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      IteratorUtils.find((Iterator<TreeSet<Map.Entry<DataTruncation, SQLTransactionRollbackException>>>) null, (Predicate<? super TreeSet<Map.Entry<DataTruncation, SQLTransactionRollbackException>>>) predicate0);
      IteratorUtils.getIterator((Object) null);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Boolean>) null, (Predicate<? super Boolean>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode2;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      iIOMetadataNodeArray0[7] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 0L);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) boundedIterator0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("nt&VO$9K9tD<", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "", "=ZHj'P!H;vBWw~t|:*", "i;)^qX4>!FrPZCu");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'nt&VO$9K9tD<' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer((-354));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 3757L);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 3);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classArray0[2] = class2;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Ysx/.qHX6Z", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "CMX~IxS1h8=IQ", (String) null, "Y%<+|P-o%&9k");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      ResettableListIterator<Stack<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Stack<IIOMetadataNode>>) arrayList0);
      int int0 = 0;
      arrayList0.add(0, (Stack<IIOMetadataNode>) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      int int1 = 10;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = null;
//      try {
        resettableListIterator1 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException[]) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      IteratorUtils.isEmpty(orderedIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.TruePredicate", "org.apache.commons.collections4.functors.TruePredicate", 0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int int0 = 5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.TruePredicate", "org.apache.commons.collections4.functors.TruePredicate", 5);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException((String) null, "");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 5, 5);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      Predicate<SQLException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Integer integer0 = new Integer(84);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      ListIterator<Integer> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator1, (Iterator<? extends Integer>) listIterator0);
      IteratorUtils.size(orderedIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.ListOrderedMap");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(558);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.ListOrderedMap", "org.apache.commons.collections4.map.ListOrderedMap", hashtable0, sQLTimeoutException0);
      Throwable throwable0 = sQLTimeoutException0.initCause(sQLClientInfoException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) singletonIterator0, 637);
      IteratorUtils.loopingListIterator(list0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.ListOrderedMap");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.map.ListOrderedMap");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("A:jh|w5$`(x", "A:jh|w5$`(x", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("org.apache.commons.collections4.map.ListOrderedMap", "org.apache.commons.collections4.map.ListOrderedMap", 558);
      sQLDataExceptionArray0[3] = sQLDataException3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLDataException sQLDataException4 = new SQLDataException("A:jh|w5$`(x", "A:jh|w5$`(x", sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "org.apache.commons.collections4.map.ListOrderedMap", throwable0);
      SQLDataException sQLDataException6 = new SQLDataException(sQLDataException5);
      sQLDataExceptionArray0[5] = sQLDataException6;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.MapTransformer", "", 637, sQLDataException2);
      SQLDataException sQLDataException7 = new SQLDataException("L!~Oz?,*&", "L!~Oz?,*&", sQLRecoverableException0);
      sQLDataExceptionArray0[6] = sQLDataException7;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(objectArrayListIterator0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) listIteratorWrapper0, (long) 558, (long) 637);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<Integer, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) mapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("7?5(|ko3w:bC5MJ");
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 0L);
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer1, comparator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MapIterator<Integer, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) mapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("7?5(|ko3w:bC5MJ");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 0L);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) boundedIterator0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 4);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("nt&VO$9K9tD<", (Class<?>[]) classArray0, (Object[]) iIOMetadataNodeArray0);
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) listIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "CMX~IxS1h8=IQ", "CMX~IxS1h8=IQ", "nt&VO$9K9tD<");
      assertEquals("CMX~IxS1h8=IQnt&VO$9K9tD<", string0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(2368);
      StringTokenizer stringTokenizer0 = new StringTokenizer("NodeList must not be null");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      SingletonListIterator<Integer> singletonListIterator1 = new SingletonListIterator<Integer>(integer0);
      HashMap<Integer, IIOMetadataNode> hashMap0 = new HashMap<Integer, IIOMetadataNode>();
      EntrySetMapIterator<Integer, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<Integer, IIOMetadataNode>(hashMap0);
      MapIterator<Integer, IIOMetadataNode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) singletonListIterator1, (Iterator<? extends Integer>) singletonListIterator1);
      int int0 = IteratorUtils.size(singletonListIterator1);
      assertFalse(singletonListIterator1.hasNext());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator1, 0L);
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      OrderedMapIterator<Class<String>, Hashtable<Properties, Integer>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>>(orderedMapIterator2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) "Set and List must be empty", (Equator<Object>) defaultEquator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, (Closure<? super Object>) null);
      IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer1, comparator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) listIterator0);
      IteratorUtils.size(zippingIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<SQLWarning, Class<SQLTimeoutException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) mapIterator0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      int int0 = 2342;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ServiceLoader<Object>[]) null, 2342, 2342);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("cb#%");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      Properties properties0 = new Properties();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(instanceofPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      String string0 = "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", "C~TGiDU>|7wOqcEm", (-4439));
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.isEmpty(orderedIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 0, (-3210));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("1x(eD Cs#c&>Y", "Z5");
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.ListOrderedMap");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) singletonIterator0, 637);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0, (-1424));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      int int0 = 128;
      int int1 = (-1922);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 128, (-1922));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
      OrderedMapIterator<String, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLWarning>(orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0);
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 0, (-1796));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.PredicateTransformer");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("oYXpG L=kfc@]&{|=g.", "", (-3137), sQLTransientConnectionException0);
      Integer integer0 = new Integer(227);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator0);
      ListIterator<Integer> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      Iterator<Properties> iterator0 = null;
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) listIterator1, (Transformer<? super SQLDataException, ? extends Properties>) transformer0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedList0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(arrayList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator((Object) null);
      SQLException sQLException0 = new SQLException("", "", 84);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Hl|");
      NodeListIterator nodeListIterator1 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotSame(nodeListIterator1, nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator((Object) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, SQLRecoverableException>[] transformerArray0 = (Transformer<Object, SQLRecoverableException>[]) Array.newInstance(Transformer.class, 4);
      SQLException sQLException0 = new SQLException((String) null, (Throwable) null);
      SQLException sQLException1 = new SQLException((String) null, (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("InstantiateTransformer: Constructor threw an exception", "$rks", 84, sQLException1);
      Transformer<Object, SQLRecoverableException> transformer0 = ConstantTransformer.constantTransformer(sQLRecoverableException0);
      sQLRecoverableException0.spliterator();
      transformerArray0[1] = transformer0;
      Transformer<Object, SQLRecoverableException> transformer1 = InvokerTransformer.invokerTransformer("$rks");
      transformerArray0[2] = transformer1;
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, SQLRecoverableException> invokerTransformer0 = new InvokerTransformer<Object, SQLRecoverableException>("", classArray0, transformerArray0);
      transformerArray0[2] = (Transformer<Object, SQLRecoverableException>) invokerTransformer0;
      sQLException1.spliterator();
      Transformer<Object, SQLRecoverableException> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends SQLRecoverableException>) transformer1, (Transformer<? super Object, ? extends SQLRecoverableException>) transformer0);
      transformerArray0[3] = transformer2;
      SwitchTransformer<Object, SQLRecoverableException> switchTransformer0 = new SwitchTransformer<Object, SQLRecoverableException>(predicateArray0, transformerArray0, invokerTransformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(switchTransformer0, instanceofPredicate0);
      IteratorUtils.matchesAny((Iterator<Boolean>) null, (Predicate<? super Boolean>) transformedPredicate0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      instanceofPredicateArray0[4] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) arrayList0, (-230), (-230));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) resettableListIterator0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", "[]");
      IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException("|9Fd2NF`Hhp$TH", sQLNonTransientConnectionException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "|9Fd2NF`Hhp$TH");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Estimated size must be greater than 0", (String) null, sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Enumeration<SQLDataException> enumeration0 = (Enumeration<SQLDataException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) priorityQueue0);
      Enumeration<SQLDataException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration1);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Transformer<SQLException, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) iterator1, (Transformer<? super SQLDataException, ? extends Properties>) transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(arrayList0);
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) loopingListIterator0);
      // Undeclared exception!
//      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      OrderedMapIterator<SQLDataException, Transformer<Object, SQLTimeoutException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLDataException, Transformer<Object, SQLTimeoutException>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends Transformer<Object, SQLTimeoutException>>) orderedMapIterator0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) priorityQueue0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Transformer<? super SQLDataException, ? extends Properties>) transformer0);
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.NullIsFalsePredicate", "org.apache.commons.collections4.functors.NullIsFalsePredicate");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("70_M/(eQ}", "Uuw[&*%uHm7MD{6hKy");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("Uuw[&*%uHm7MD{6hKy");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      int[] intArray0 = new int[1];
      intArray0[0] = 594;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException((String) null, "PltyN;", batchUpdateException0);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("6\"B:");
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("6\"B:", "+SiCij=noy0bwMm*");
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException(sQLTransactionRollbackException7);
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NodeList must not be null", "^T9ysVL,Bx`Q.tRho");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("f@!\"FGb[$7.v5R0", "f@!\"FGb[$7.v5R0", batchUpdateException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0);
      int int0 = (-3210);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[java.sql.SQLIntegrityConstraintViolationException: f@!\"FGb[$7.v5R0]");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0, (-3210));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OrderedMapIterator<String, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<String> iterable0 = IteratorUtils.asIterable((Iterator<? extends String>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterable0, 1, 2396);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<Locale.Category, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      OrderedMapIterator<String, SQLWarning> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLWarning>(orderedMapIterator1);
      IteratorUtils.asIterable((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0);
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 4, 4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator1, 0L);
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) objectArrayListIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) objectArrayListIterator0, (Iterator<? extends Integer>) objectArrayListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Closure must not be null");
      sQLTimeoutException0.initCause((Throwable) null);
      sQLTimeoutException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLException sQLException0 = new SQLException("t+m3mr2\"", "", 1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 10, 955);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      IteratorUtils.find((Iterator<TreeSet<Map.Entry<DataTruncation, SQLTransactionRollbackException>>>) null, (Predicate<? super TreeSet<Map.Entry<DataTruncation, SQLTransactionRollbackException>>>) predicate0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Boolean>) null, (Predicate<? super Boolean>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=jMuK");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate1;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      OnePredicate<SQLNonTransientException> onePredicate0 = new OnePredicate<SQLNonTransientException>(predicateArray0);
      Predicate<SQLIntegrityConstraintViolationException> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLIntegrityConstraintViolationException>) onePredicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate2);
      IteratorUtils.isEmpty(resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("=jMuK");
      SQLDataException sQLDataException1 = new SQLDataException("=jMuK");
      ArrayIterator<Properties> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Properties>(sQLDataException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate.uniquePredicate();
      NotNullPredicate.notNullPredicate();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<SQLNonTransientException>[] predicateArray0 = (Predicate<SQLNonTransientException>[]) Array.newInstance(Predicate.class, 1);
      Predicate<SQLNonTransientException> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      OnePredicate<SQLNonTransientException> onePredicate0 = new OnePredicate<SQLNonTransientException>(predicateArray0);
      Predicate<SQLIntegrityConstraintViolationException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLIntegrityConstraintViolationException>) onePredicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate1);
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "e5mI/|: 6ssawv-");
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, 2007L);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) boundedIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) boundedIterator0, (long) 673);
      MapIterator<String, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(integer1, comparator0);
      ListIterator<Integer> listIterator0 = new SingletonListIterator<Integer>(integer1);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyMapIterator();
      Iterator<Transformer<Object, SQLTimeoutException>> iterator0 = EmptyIterator.emptyIterator();
      ListIteratorWrapper<Transformer<Object, SQLTimeoutException>> listIteratorWrapper0 = new ListIteratorWrapper<Transformer<Object, SQLTimeoutException>>(iterator0);
      Enumeration<Transformer<Object, SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLTimeoutException>>) listIteratorWrapper0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLTimeoutException>>) enumeration0, (Collection<? super Transformer<Object, SQLTimeoutException>>) vector0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer>(orderedMapIterator0);
      AbstractMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, StringTokenizer>(abstractOrderedMapIteratorDecorator0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) abstractMapIteratorDecorator0;
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) vector1);
      IteratorUtils.skippingIterator((Iterator<StringTokenizer>) resettableIterator0, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator1, 0L);
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      OrderedMapIterator<Class<String>, Hashtable<Properties, Integer>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>>(orderedMapIterator2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (-689));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0, (Equator<Object>) defaultEquator0);
      predicateArray0[1] = predicate1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate1);
      predicateArray0[2] = (Predicate<Object>) nullIsFalsePredicate0;
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      ArrayList<SQLDataException> arrayList1 = new ArrayList<SQLDataException>();
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      arrayList0.add(0, (Stack<IIOMetadataNode>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.fillInStackTrace();
      Predicate<SQLTransientConnectionException> predicate0 = EqualPredicate.equalPredicate(sQLTransientConnectionException0);
      PredicateTransformer<SQLTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLTransientConnectionException>(predicate0);
      predicateTransformer0.transform(sQLTransientConnectionException0);
      Iterator<Transformer<Object, SQLTimeoutException>> iterator0 = EmptyIterator.emptyIterator();
      ListIteratorWrapper<Transformer<Object, SQLTimeoutException>> listIteratorWrapper0 = new ListIteratorWrapper<Transformer<Object, SQLTimeoutException>>(iterator0);
      Enumeration<Transformer<Object, SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLTimeoutException>>) listIteratorWrapper0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLTimeoutException>>) enumeration0, (Collection<? super Transformer<Object, SQLTimeoutException>>) vector0);
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer>(orderedMapIterator0);
      AbstractMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, StringTokenizer>(orderedMapIterator0);
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) vector1);
      IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, (long) 61);
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<StringTokenizer> iterator1 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=jMuK");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.initCause((Throwable) null);
      sQLTimeoutException0.getStackTrace();
      sQLTimeoutException0.forEach(consumer0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      SQLException sQLException0 = new SQLException("", "", 955);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.<ommfns.collections4.set.ListOrderedSet", 52, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0, (-3210));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.PredicateTransformer");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("oYXpG L=kfc@]&{|=g.", "", (-3137), sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0, (-1424));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=jMuK");
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator0, 12L);
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) objectArrayListIterator0);
      IteratorUtils.singletonIterator((Integer) null);
      ObjectArrayIterator<Integer> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<Integer>((Integer[]) null, (-841));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("qlk&7J=");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer integer0 = new Integer(0);
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.singletonIterator(integer0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>(arrayList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) reverseListIterator0, (-3804L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, (-2170));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<Transformer<Object, SQLTimeoutException>> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Transformer<Object, SQLTimeoutException>>) null, (Iterator<? extends Transformer<Object, SQLTimeoutException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=jMuK");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.initCause((Throwable) null);
      sQLTimeoutException0.getStackTrace();
      sQLTimeoutException0.forEach(consumer0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      SQLException sQLException0 = new SQLException("", "", 955);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLException0, 955, (-652));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("5O6v{;pYUWW", "5O6v{;pYUWW", 130);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "", 130, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException1);
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLTransientException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("9TLyaq+?OM*(6w[$", sQLRecoverableException3);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("et1M(", "5O6v{;pYUWW", 130, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("et1M(", "5O6v{;pYUWW", 130, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("", "NodeList must not be null", 130, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) objectArrayListIterator0, (-3332L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      SkippingIterator<SQLNonTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>(arrayList0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("delimiter may not be null", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", false);
      arrayList0.add(stringTokenizer0);
      Integer integer0 = new Integer(431);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator0);
      Stack<Integer> stack0 = new Stack<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) stack0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      IteratorUtils.getIterator(defaultEquator0);
      HashMap<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException>(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 5);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) singletonIterator0);
      iteratorArray0[0] = iterator0;
      int int0 = 100;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("p~iMMuAB?eqD+o0t@", hashMap0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "[", 100, sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      DataTruncation dataTruncation0 = new DataTruncation(3385, false, false, 107, (-1));
      linkedList0.add(dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation(1, true, false, 15, (-585));
      dataTruncation1.getRead();
      linkedList0.add(dataTruncation1);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      reverseListIterator0.previousIndex();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) reverseListIterator0, (Predicate<? super SQLWarning>) predicate0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-2649));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MapIterator<SQLRecoverableException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, (-3698));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", true);
      IteratorUtils.asEnumeration((Iterator<? extends String>) singletonIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("+.*ahV7w4!n]=&", "", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", "", hashMap0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException8;
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException9;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      int int0 = 294;
      int int1 = (-1274);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 294, (-1274));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator1, 0L);
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(arrayList0);
      Comparator<Object> comparator0 = null;
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) loopingListIterator0, (Iterator<? extends SQLDataException>) loopingListIterator0);
      OrderedMapIterator<Class<String>, Hashtable<Properties, Integer>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>>(orderedMapIterator2);
      int int0 = 740;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (-689));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0, (Equator<Object>) defaultEquator0);
      predicateArray0[1] = predicate1;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate1);
      predicateArray0[2] = (Predicate<Object>) nullIsFalsePredicate0;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, (Closure<? super Object>) null);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(2026, switchClosure0);
      Closure<Object> closure0 = ForClosure.forClosure(740, (Closure<? super Object>) forClosure0);
      IteratorUtils.apply((Iterator<Class<String>>) abstractOrderedMapIteratorDecorator0, (Closure<? super Class<String>>) closure0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("))rgL)Hj)g]", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "'q>7", 673, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("must call next() or previous() before a call to set()", "))rgL)Hj)g]", 100, sQLRecoverableException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertEquals("[java.sql.SQLIntegrityConstraintViolationException: must call next() or previous() before a call to set()]", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException>[] arrayListArray0 = (ArrayList<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayList.class, 4);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList1 = new ArrayList<SQLIntegrityConstraintViolationException>(arrayList0);
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList2 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayList2.spliterator();
      arrayListArray0[2] = arrayList2;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList3 = new ArrayList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayList2.add(sQLIntegrityConstraintViolationException0);
      arrayList3.add((SQLIntegrityConstraintViolationException) null);
      arrayListArray0[3] = arrayList3;
      arrayList2.add((SQLIntegrityConstraintViolationException) null);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      arrayList3.addAll((Collection<? extends SQLIntegrityConstraintViolationException>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 61);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("mmj-!Sf", "");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("mmj-!Sf");
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, (Predicate<? super SQLTransactionRollbackException>) identityPredicate0);
      Integer integer0 = new Integer(0);
      IteratorUtils.singletonListIterator(integer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vO}1'", "", (-920), sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 701, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer1, comparator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) singletonListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MapIterator<SQLDataException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>) orderedMapIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = null;
      hashSet0.add((SQLInvalidAuthorizationSpecException) null);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) hashSet0);
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      int int0 = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", ">=zK9;FB", 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("gL>=Ha^4Mb", "Node must not be null", sQLTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("gL>=Ha^4Mb", sQLTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("gL>=Ha^4Mb", "gL>=Ha^4Mb");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null, "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "-=is&<x|`5", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1637), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(10);
      integerArray0[3] = integer1;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray1 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
//      try { 
        iIOMetadataNode0.getUserData("Entry does not exist: ");
//        fail("Expecting exception: DOMException");
      
//      } catch(DOMException e) {
//         //
//         // Method not supported
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      HashSet<SQLTimeoutException>[] hashSetArray0 = (HashSet<SQLTimeoutException>[]) Array.newInstance(HashSet.class, 5);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      hashSetArray0[0] = hashSet0;
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>(1229, 2248.108F);
      hashSetArray0[1] = (HashSet<SQLTimeoutException>) linkedHashSet0;
      LinkedHashSet<SQLTimeoutException> linkedHashSet1 = new LinkedHashSet<SQLTimeoutException>();
      hashSetArray0[2] = (HashSet<SQLTimeoutException>) linkedHashSet1;
      HashSet<SQLTimeoutException> hashSet1 = new HashSet<SQLTimeoutException>();
      hashSetArray0[3] = hashSet1;
      HashSet<SQLTimeoutException> hashSet2 = new HashSet<SQLTimeoutException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLFeatureNotSupportedException0);
      hashSet2.add(sQLTimeoutException0);
      hashSetArray0[4] = hashSet2;
      IteratorUtils.arrayIterator(hashSetArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, 1229);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      Iterable<InstanceofPredicate> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 100, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 2155, 100, batchUpdateException1);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1494, true, true, 3189, 2155);
      dataTruncationArray0[1] = dataTruncation1;
      int int0 = (-948);
      DataTruncation dataTruncation2 = new DataTruncation((-4938), false, false, 3189, (-948), batchUpdateException1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1356, false, false, 3370, 3189, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(128, true, true, (-948), (-943));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-1064), true, true, 2155, 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, true, true, 128, 2019);
      dataTruncationArray0[6] = dataTruncation6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 2019, 3189);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>(arrayList0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(linkedHashSet0);
      linkedHashSet0.add((StringTokenizer) null);
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator";
      StringTokenizer stringTokenizer0 = new StringTokenizer("delimiter may not be null", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", false);
      loopingIterator0.reset();
      arrayList0.add(stringTokenizer0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) linkedHashSet0);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<Properties, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Properties, EnumSet<Locale.Category>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator1, (Transformer<? super Properties, ? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<Object, SQLTimeoutException>[] transformerArray0 = (Transformer<Object, SQLTimeoutException>[]) Array.newInstance(Transformer.class, 5);
      Hashtable<Object, SQLTimeoutException> hashtable0 = new Hashtable<Object, SQLTimeoutException>();
      Transformer<Object, SQLTimeoutException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTimeoutException>) hashtable0);
      transformerArray0[0] = transformer0;
      String string0 = ">yrG'GkKxqPGO=k]#w";
      Transformer<Object, SQLTimeoutException> transformer1 = InvokerTransformer.invokerTransformer(">yrG'GkKxqPGO=k]#w");
      transformerArray0[1] = transformer1;
      Transformer<Object, SQLTimeoutException> transformer2 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTimeoutException>) hashtable0);
      transformerArray0[2] = transformer2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I$NNC9FA/o$d", ">yrG'GkKxqPGO=k]#w");
      ConstantTransformer<Object, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<Object, SQLTimeoutException>(sQLTimeoutException0);
      transformerArray0[3] = (Transformer<Object, SQLTimeoutException>) constantTransformer0;
      ConstantTransformer<Object, SQLTimeoutException> constantTransformer1 = new ConstantTransformer<Object, SQLTimeoutException>(sQLTimeoutException0);
      transformerArray0[4] = (Transformer<Object, SQLTimeoutException>) constantTransformer1;
      int int0 = 1660;
      int int1 = (-2870);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(transformerArray0, 1660, (-2870));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator1, 0L);
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      OrderedMapIterator<Class<String>, Hashtable<Properties, Integer>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Class<String>, Hashtable<Properties, Integer>>(orderedMapIterator2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Set and List must be empty", "", (-2529));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) "", (Equator<Object>) defaultEquator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, (Closure<? super Object>) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[java.sql.SQLIntegrityConstraintViolationException]", "Set and List must be empty", (-1297));
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator1, 0L);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      locale_CategoryArray0[0] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 7);
      enumSetArray0[0] = enumSet0;
      enumSetArray0[1] = enumSet0;
      enumSetArray0[2] = enumSet0;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet1 = EnumSet.noneOf(class0);
      enumSetArray0[3] = enumSet1;
      enumSetArray0[4] = enumSet0;
      enumSetArray0[5] = enumSet0;
      enumSetArray0[6] = enumSet0;
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      List<EnumSet<Locale.Category>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=jMuK");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.initCause((Throwable) null);
      sQLTimeoutException0.getStackTrace();
      sQLTimeoutException0.forEach(consumer0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 3);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.range(locale_Category0, locale_Category0);
      enumSetArray0[1] = enumSet1;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category2;
      EnumSet<Locale.Category> enumSet2 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      enumSetArray0[2] = enumSet2;
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      List<EnumSet<Locale.Category>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("JXs_c8%F");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("3RR-C?l?1aJfG", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("JXs_c8%F", "", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0;
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iteratorArray0[0], (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0;
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLInvalidAuthorizationSpecException0);
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>(sQLTransientException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      IteratorUtils.getIterator(defaultEquator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      OrderedMapIterator<String, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("cb#%");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode2;
      iIOMetadataNodeArray0[3] = iIOMetadataNode2;
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0, 182L);
      ArrayList<Stack<IIOMetadataNode>> arrayList0 = new ArrayList<Stack<IIOMetadataNode>>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      int[] intArray0 = new int[8];
      intArray0[0] = 44;
      intArray0[1] = 44;
      intArray0[2] = 44;
      intArray0[3] = 44;
      intArray0[4] = 44;
      intArray0[5] = 44;
      intArray0[6] = 44;
      intArray0[7] = 44;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("pfLUS<Zj]E_B;yY4C", "EB-piOI'jz-JR\u0003L-R<", 44, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("pfLUS<Zj]E_B;yY4C", "pfLUS<Zj]E_B;yY4C", 44, sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("lq$SSzKIl");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = 743;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 743);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("_EF3T", (Throwable) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "l";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("l");
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.removeAttributeNode((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getNodeValue();
      iIOMetadataNode0.setUserObject((Object) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNode1.getAttributeNodeNS("JaY~}yL", "JaY~}yL");
      iIOMetadataNode0.removeChild(iIOMetadataNode1);
//      try { 
        iIOMetadataNode0.getUserData("");
//        fail("Expecting exception: DOMException");
      
//      } catch(DOMException e) {
//         //
//         // Method not supported
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2913);
      int int0 = 32;
      intArray0[1] = 32;
      intArray0[2] = 91;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Integer integer0 = new Integer(2368);
      StringTokenizer stringTokenizer0 = new StringTokenizer("NodeList must not be null");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) singletonListIterator0, 12);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 11
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = 12;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) orderedMapIterator0, 12);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 12
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      boolean boolean0 = false;
      Node node0 = iIOMetadataNode0.cloneNode(false);
      iIOMetadataNode0.setNodeValue("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node0);
      IteratorUtils.boundedIterator((Iterator<?>) nodeListIterator0, 0L);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      int int1 = 954;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, 954);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = ",?q#$";
      SQLDataException sQLDataException0 = new SQLDataException(",?q#$", ",?q#$");
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "'q>7");
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, 2007L);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) boundedIterator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) boundedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      int int0 = 0;
      int int1 = (-131);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 0, (-131));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 8);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      String string0 = ", Size: ";
      int int0 = 1763;
      SQLException sQLException0 = new SQLException(", Size: ", ", Size: ", 1763);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
