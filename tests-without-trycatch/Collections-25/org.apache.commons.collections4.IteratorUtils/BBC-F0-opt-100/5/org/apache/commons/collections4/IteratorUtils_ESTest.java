/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:01:45 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Properties> stack0 = new Stack<Properties>();
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 3);
      vectorArray0[0] = (Vector<Properties>) stack0;
      vectorArray0[1] = (Vector<Properties>) stack0;
      vectorArray0[2] = (Vector<Properties>) stack0;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      ConstantTransformer.nullTransformer();
      Integer integer0 = new Integer((-1861));
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) identityPredicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLException sQLException0 = new SQLException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("] m{.=dD5/a", "ExceptionTransformer invoked", (-1861), sQLException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("AgMz't][($5z", sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&},O@W6|yslzr", "&},O@W6|yslzr", (-1861), sQLNonTransientException0);
      sQLNonTransientException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&},O@W6|yslzr", sQLInvalidAuthorizationSpecException0);
      Stack<Predicate<Object>> stack1 = new Stack<Predicate<Object>>();
      IteratorUtils.get((Iterator<Hashtable<LinkedList, LinkedList>>) iterator0, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AgMz't][($5z", "] m{.=dD5/a");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("] m{.=dD5/a", "", (-1861), sQLInvalidAuthorizationSpecException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator");
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransientConnectionException2;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "");
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientExceptionArray0[6] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("P", "&},O@W6|yslzr");
      sQLTransientExceptionArray0[7] = (SQLTransientException) sQLTransientConnectionException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0, (-1861));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<EnumSet<Locale.Category>> predicateTransformer0 = new PredicateTransformer<EnumSet<Locale.Category>>(predicate0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category0, locale_Category2, locale_Category3);
      Boolean boolean0 = predicateTransformer0.transform(enumSet0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[7] = class7;
      Class<SQLException> class8 = SQLException.class;
      classArray0[8] = class8;
      InvokerTransformer<Boolean, Boolean> invokerTransformer0 = new InvokerTransformer<Boolean, Boolean>("Transformer must not be null", classArray0, classArray0);
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) invokerTransformer0);
      Class<Boolean> class9 = Boolean.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Boolean>) iterator0, class9);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Transformer must not be null' on 'class java.lang.Boolean' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      int int0 = (-1934);
      Integer integer0 = new Integer((-1934));
      treeSet0.add(integer0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends Integer>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.get((Iterator<Hashtable<LinkedList, LinkedList>>) resettableListIterator0, 4);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("]");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("]");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("Transformer must not be null");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 4, 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.get((Iterator<Hashtable<LinkedList, LinkedList>>) resettableListIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationException0.setNextException(sQLIntegrityConstraintViolationException0);
      IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("j(V!Q");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      reverseListIterator0.previousIndex();
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) reverseListIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      Stack<Properties> stack0 = new Stack<Properties>();
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 3);
      vectorArray0[0] = (Vector<Properties>) stack0;
      vectorArray0[1] = (Vector<Properties>) stack0;
      vectorArray0[2] = (Vector<Properties>) stack0;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      ConstantTransformer.nullTransformer();
      Integer integer0 = new Integer((-1861));
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) identityPredicate0);
      IteratorUtils.getIterator(integer0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLException sQLException0 = new SQLException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("] m{.=dD5/a", "ExceptionTransformer invoked", (-1861), sQLException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("AgMz't][($5z", sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&},O@W6|yslzr", "&},O@W6|yslzr", (-1861), sQLNonTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&},O@W6|yslzr", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      Stack<Predicate<Object>> stack1 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack1);
      AndPredicate.andPredicate((Predicate<? super SQLNonTransientException>) predicate0, (Predicate<? super SQLNonTransientException>) predicate0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("AgMz't][($5z");
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) iterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Hashtable<LinkedList, LinkedList>>) listIterator0, 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'AgMz't][($5z' on 'class java.sql.SQLSyntaxErrorException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      SQLDataException sQLDataException0 = new SQLDataException("z &'zfzk&2MQ5q{", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "z &'zfzk&2MQ5q{", sQLDataException0);
      stack0.push(sQLFeatureNotSupportedException0);
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Vector<Properties>>) null, (Predicate<? super Vector<Properties>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x.B,wJ.S$");
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      reverseListIterator0.previousIndex();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0, class0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.getIterator(predicate0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, 1073741824, sQLNonTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("E* p?qq9w)OYV", "", 0, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) listIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      Transformer<Locale.Category, Locale.Category> transformer0 = MapTransformer.mapTransformer((Map<? super Locale.Category, ? extends Locale.Category>) hashMap0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) iterator0, (Iterator<? extends Locale.Category>) iterator0);
      IteratorUtils.toArray(iterator0);
      Object object0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      Vector<Predicate<Object>> vector1 = new Vector<Predicate<Object>>();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      vector1.add(predicate0);
      IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) vector1);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      OrderedMapIterator<Boolean, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedMapIterator0);
      Iterator<Boolean> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Boolean>) orderedMapIterator0);
      SkippingIterator<Boolean> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 1L);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Boolean>) skippingIterator0, (Predicate<? super Boolean>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 7);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      UniquePredicate.uniquePredicate();
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(orderedIterator0);
      String string0 = "n{HX>m";
      String string1 = "";
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 25);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) listIteratorWrapper0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) orderedIterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) listIteratorWrapper0;
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) orderedIterator0;
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) listIteratorWrapper0;
      iteratorArray0[5] = (Iterator<SQLTransientConnectionException>) listIteratorWrapper0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<SQLNonTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLDataException0.printStackTrace();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) orderedMapIterator0, (Object) sQLDataException0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 255, 255);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<Properties> stack1 = new Stack<Properties>();
      Vector<Properties> vector0 = new Vector<Properties>();
      Stack<Properties> stack2 = new Stack<Properties>();
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 2);
      vectorArray0[0] = (Vector<Properties>) stack1;
      vectorArray0[1] = (Vector<Properties>) stack2;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(vector0, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) comparatorPredicate0);
      assertTrue(boolean0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Cannot use setValue() when the object being set is already in the map", "nih");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator1 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Factory<String> factory0 = ConstantFactory.constantFactory("nih");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(factory0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) objectArrayIterator1, (Transformer<? super SQLRecoverableException, String>) factoryTransformer0, "", "", "ListIteratorWrapper does not support optional operations of ListIterator.");
      assertEquals("nihnihnihListIteratorWrapper does not support optional operations of ListIterator.", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 1);
      Vector<Properties> vector0 = new Vector<Properties>();
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, class0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      TruePredicate.truePredicate();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 4);
      Stack<Properties> stack0 = new Stack<Properties>();
      vectorArray0[0] = (Vector<Properties>) stack0;
      Stack<Properties> stack1 = new Stack<Properties>();
      vectorArray0[1] = (Vector<Properties>) stack1;
      Vector<Properties> vector0 = new Vector<Properties>();
      vectorArray0[2] = vector0;
      Stack<Properties> stack2 = new Stack<Properties>();
      vectorArray0[3] = (Vector<Properties>) stack2;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(170, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(locale_Category0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) comparatorPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Vector<Properties> vector0 = new Vector<Properties>();
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 1);
      Stack<Properties> stack0 = new Stack<Properties>();
      vectorArray0[0] = (Vector<Properties>) stack0;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(transformer0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) identityPredicate0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) predicate0);
      IteratorUtils.getIterator(transformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-542), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLDataException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-542), (-542));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(1);
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(arrayList0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(vector0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super SQLException>) equalPredicate0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(loopingListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedMapIterator<SQLWarning, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLWarning, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLWarning, SQLDataException>) orderedMapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, String>) transformer0, "HPB", "HPB", "HPB");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]", "", sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (String) null, (-13), sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, class0);
      assertEquals(1, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 1);
      Vector<Properties> vector0 = new Vector<Properties>();
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(vector0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) comparatorPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "org.apache.commons.collections4.iterators.AbstractEmptyMapIterator");
      Iterator<?> iterator0 = IteratorUtils.getIterator(comparatorPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      MapIterator<SQLTransientException, Vector<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLTransientException>) mapIterator0, (Closure<? super SQLTransientException>) closure0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("`K*xDEP\"c", "`K*xDEP\"c", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      TruePredicate.truePredicate();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 4);
      Stack<Properties> stack0 = new Stack<Properties>();
      vectorArray0[0] = (Vector<Properties>) stack0;
      Stack<Properties> stack1 = new Stack<Properties>();
      vectorArray0[1] = (Vector<Properties>) stack1;
      Vector<Properties> vector0 = new Vector<Properties>();
      vectorArray0[2] = vector0;
      Stack<Properties> stack2 = new Stack<Properties>();
      vectorArray0[3] = (Vector<Properties>) stack2;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(locale_Category0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) comparatorPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      uniquePredicate0.evaluate(properties0);
      Vector<Properties> vector0 = new Vector<Properties>();
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 3);
      vectorArray0[0] = vector0;
      Vector<Properties> vector1 = new Vector<Properties>();
      vectorArray0[1] = vector1;
      vectorArray0[2] = vector0;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) uniquePredicate0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.getIterator(sQLClientInfoException0);
      ResettableListIterator<ArrayDeque<ClientInfoStatus>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 1);
      Vector<Properties> vector0 = new Vector<Properties>();
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) predicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(hashSet0);
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 1);
      Vector<Properties> vector0 = new Vector<Properties>();
      vectorArray0[0] = vector0;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) uniquePredicate0);
      IteratorUtils.getIterator(objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 1);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) singletonListIterator0;
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
      SQLTransientConnectionException sQLTransientConnectionException1 = IteratorUtils.find(iterator1, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      uniquePredicate0.evaluate(sQLTransientConnectionException1);
      Vector<Properties> vector0 = new Vector<Properties>();
      vectorArray0[0] = vector0;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) uniquePredicate0);
      assertFalse(objectArrayIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U~XVk3HT&&d");
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Vector<Properties> vector0 = new Vector<Properties>();
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) closure0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NOPClosure.nopClosure();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(";MnSKeMrN", ";MnSKeMrN", 2, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("_j.ME.KIh|", ";MnSKeMrN", 2, sQLSyntaxErrorException0);
      sQLSyntaxErrorException1.spliterator();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("_j.ME.KIh|", "Go1:VBk]_BEe1UbXf", (-1862));
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Go1:VBk]_BEe1UbXf", "Go1:VBk]_BEe1UbXf", sQLSyntaxErrorException3);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException("_j.ME.KIh|", (String) null, sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[3] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLSyntaxErrorException2);
      sQLTransientExceptionArray0[4] = sQLTransientException1;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("u`5%&UENsu-tX~Lbzt");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(equalPredicate0);
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayList0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) nullIsFalsePredicate0, (Closure<? super Object>) closure0);
      Closure<Object> closure2 = ForClosure.forClosure(2, (Closure<? super Object>) closure1);
      IteratorUtils.apply((Iterator<SQLTransientException>) resettableListIterator0, (Closure<? super SQLTransientException>) closure2);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "";
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", false);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) singletonIterator0, (-1925L), 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLDataException0);
      sQLDataException0.getSuppressed();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(orderedIterator0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) resettableIterator0;
      objectArray0[1] = (Object) resettableListIterator0;
      objectArray0[2] = (Object) resettableListIterator0;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.find((Iterator<Object>) resettableIterator1, (Predicate<? super Object>) predicate0);
      objectArray0[3] = null;
      objectArray0[4] = (Object) resettableListIterator0;
      IteratorUtils.arrayIterator(objectArray0, 0, 0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, "");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      ResettableIterator<SQLRecoverableException> resettableIterator2 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      assertNotNull(resettableIterator2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 4598, 723);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLDataException0);
      Throwable throwable0 = sQLDataException0.initCause(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "<x", sQLDataException0);
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      sQLDataException0.fillInStackTrace();
      MockFile mockFile0 = new MockFile("BlDY{q'(j;!@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("<x", "", 100, throwable0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Integer integer0 = new Integer(44);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toList((Iterator<?>) singletonListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("");
      String string0 = null;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, (String) null);
      String string1 = "h:}k+S<A";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", sQLTimeoutException3);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) listIteratorWrapper0, 44);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y", string0);
      
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s'y~Y", "ListIterator must not be null", 10, sQLRecoverableException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) objectArrayIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "<x");
      Throwable throwable0 = sQLDataException0.initCause(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "<x", sQLDataException0);
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Hashtable<LinkedList<SQLSyntaxErrorException>, LinkedList<DataTruncation>> hashtable0 = new Hashtable<LinkedList<SQLSyntaxErrorException>, LinkedList<DataTruncation>>();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "2gB8-Neb", 2702, throwable0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLDataException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, "U*8%WK+0^", 2702, sQLSyntaxErrorException2);
      sQLSyntaxErrorException3.spliterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2702).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException4, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      TruePredicate.truePredicate();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      SQLDataException sQLDataException0 = new SQLDataException("");
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      ConstantTransformer.constantTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) null, (-720));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "<x");
      Throwable throwable0 = sQLDataException0.initCause(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "<x", sQLDataException0);
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Hashtable<LinkedList<SQLSyntaxErrorException>, LinkedList<DataTruncation>> hashtable0 = new Hashtable<LinkedList<SQLSyntaxErrorException>, LinkedList<DataTruncation>>();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "2gB8-Neb", 2702, throwable0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLDataException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, "U*8%WK+0^", 2702, sQLSyntaxErrorException2);
      sQLSyntaxErrorException3.spliterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException4, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TruePredicate.truePredicate();
      IteratorUtils.isEmpty((Iterator<?>) null);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "", "");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIteratorWrapper0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "s'y~Y", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null, 11, 11);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      MapIterator<SQLTransientException, Vector<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLTransientException>) mapIterator0, (Closure<? super SQLTransientException>) closure0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y", "MS{,wQ@vODtj\"");
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends String>) orderedIterator0);
      IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Sr[%JX4v0Na1K| [{", "org.apache.commons.collections4.functors.CatchAndRethrowClosure", 1344, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("MS{,wQ@vODtj\"", "s'y~Y", 2049, sQLNonTransientConnectionException0);
      HashMap<Object, SQLTimeoutException> hashMap0 = new HashMap<Object, SQLTimeoutException>();
      Transformer<SQLException, SQLTimeoutException> transformer1 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLTimeoutException>) hashMap0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTransientConnectionException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransientException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "D", "D", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("m@mFE@$L<|:", (String) null, (-1044));
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "&qK^O%", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "s'y~Y", "", "s'y~Y");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIteratorWrapper0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, (String) null, "org.apache.commons.collections4.bidimap.DualTreeBidiMap", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends String>) orderedIterator0);
      int[] intArray0 = new int[8];
      intArray0[1] = 2049;
      MapIterator<SQLTransientException, Vector<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLTransientException>) mapIterator0, (Closure<? super SQLTransientException>) closure0);
      OrderedIterator<ClientInfoStatus> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = IteratorUtils.toString((Iterator<ClientInfoStatus>) orderedIterator1, (Transformer<? super ClientInfoStatus, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      EmptyMapIterator.emptyMapIterator();
      Vector<Properties> vector0 = new Vector<Properties>();
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 5);
      vectorArray0[0] = vector0;
      vectorArray0[1] = vector0;
      vectorArray0[2] = vector0;
      vectorArray0[3] = vector0;
      vectorArray0[4] = vector0;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Transformer<DataTruncation, DataTruncation>[] transformerArray0 = (Transformer<DataTruncation, DataTruncation>[]) Array.newInstance(Transformer.class, 0);
      Transformer<DataTruncation, DataTruncation> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super DataTruncation, ? extends DataTruncation>[]) transformerArray0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends SQLWarning>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Transformer<DataTruncation, DataTruncation>[] transformerArray0 = (Transformer<DataTruncation, DataTruncation>[]) Array.newInstance(Transformer.class, 0);
      Transformer<DataTruncation, DataTruncation> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super DataTruncation, ? extends DataTruncation>[]) transformerArray0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends SQLWarning>) transformer0);
      ConstantTransformer.constantTransformer("");
      OrderedMapIterator<SQLRecoverableException, Stack<Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 4);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      Class<SQLTransientException> class2 = SQLTransientException.class;
      classArray0[2] = class2;
      Class<SQLTransientException> class3 = SQLTransientException.class;
      classArray0[3] = class3;
      Transformer<Object, Predicate<Object>> transformer1 = InvokerTransformer.invokerTransformer("tBRD!qPvn7 `/t", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, (Transformer<? super SQLRecoverableException, ? extends Predicate<Object>>) transformer1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "1A";
      ResettableListIterator<String> resettableListIterator1 = IteratorUtils.arrayListIterator(stringArray0);
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) resettableListIterator1, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Integer integer0 = new Integer(44);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toList((Iterator<?>) singletonListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("");
      IteratorUtils.emptyMapIterator();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException0;
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLTransientException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, true);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure1, chainedClosure0);
      IteratorUtils.apply((Iterator<SQLTransientException>) objectArrayIterator0, (Closure<? super SQLTransientException>) ifClosure0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      ListIterator<SQLTransientConnectionException> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      MapIterator<SQLTransientException, Vector<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLTransientException>) mapIterator0, (Closure<? super SQLTransientException>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y", string0);
      
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", defaultEquator0);
      Predicate<SQLException> predicate0 = NotPredicate.notPredicate((Predicate<? super SQLException>) equalPredicate0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(objectArrayListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-1440), batchUpdateException0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      batchUpdateException0.getSuppressed();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) resettableIterator0, (long) (-1440));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      ConstantTransformer.constantTransformer("");
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) reverseListIterator0, 7);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      MapIterator<SQLTransientException, Vector<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLTransientException>) mapIterator0, (Closure<? super SQLTransientException>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Vector<SQLTransientConnectionException> vector0 = new Stack<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) loopingListIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends String>) orderedIterator0);
      int[] intArray0 = new int[8];
      intArray0[0] = 9;
      intArray0[1] = 2049;
      intArray0[2] = (-315);
      intArray0[3] = (-225);
      intArray0[4] = 29;
      intArray0[5] = 44;
      intArray0[6] = 0;
      intArray0[7] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.IfClosure", intArray0);
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) listIterator0, (Closure<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "s'y~Y", 1);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("s'y~Y", (String) null, (-1330));
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("aT", (String) null);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, (String) null);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("M1jXGm");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", "s'y~Y", sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-2650));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 1);
      Vector<Properties> vector1 = new Vector<Properties>();
      vectorArray0[0] = vector1;
      ObjectArrayIterator<Vector<Properties>> objectArrayIterator0 = new ObjectArrayIterator<Vector<Properties>>(vectorArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Vector<Properties>>) objectArrayIterator0, (Predicate<? super Vector<Properties>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends String>) orderedIterator0);
      int[] intArray0 = new int[8];
      intArray0[0] = 9;
      intArray0[1] = 2049;
      intArray0[2] = (-315);
      intArray0[3] = (-225);
      intArray0[4] = 29;
      intArray0[5] = 44;
      intArray0[6] = 0;
      intArray0[7] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.IfClosure", intArray0);
      TransformerClosure<BatchUpdateException> transformerClosure0 = new TransformerClosure<BatchUpdateException>(transformer0);
      ClosureTransformer<BatchUpdateException> closureTransformer0 = new ClosureTransformer<BatchUpdateException>(transformerClosure0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) closureTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      NOPClosure.nopClosure();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Vector<Properties>>) null, (Predicate<? super Vector<Properties>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Iterator<DataTruncation> iterator0 = arrayDeque0.iterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (Throwable) null);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", 0, sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLTimeoutException1);
      Transformer<DataTruncation, DataTruncation>[] transformerArray0 = (Transformer<DataTruncation, DataTruncation>[]) Array.newInstance(Transformer.class, 0);
      Transformer<DataTruncation, DataTruncation> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super DataTruncation, ? extends DataTruncation>[]) transformerArray0);
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) iterator0, (Transformer<? super DataTruncation, ? extends SQLWarning>) transformer0);
      Transformer<Object, String>[] transformerArray1 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("remove() can only be called once after next()");
      transformerArray1[0] = transformer1;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("remove() can only be called once after next()", (String) null, 84);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", "remove() can only be called once after next()", (-1), sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      Factory<SQLRecoverableException> factory0 = ConstantFactory.constantFactory((SQLRecoverableException) null);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(factory0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.objectGraphIterator((SQLRecoverableException) null, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) factoryTransformer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLDataException0);
      Vector<String> vector0 = new Vector<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, (-878L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("pbRcZ:V(}y}", (String) null, sQLDataException0);
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      ConstantTransformer.constantTransformer("");
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) resettableIterator0, 2375L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<SQLWarning, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SingletonIterator<Iterator<SQLWarning>> singletonIterator0 = new SingletonIterator<Iterator<SQLWarning>>(mapIterator0);
      int int0 = 2;
      IteratorUtils.toList((Iterator<? extends Iterator<SQLWarning>>) singletonIterator0, 2);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Transformer<? super DataTruncation, ? extends HashSet<BatchUpdateException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<Locale.Category, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) singletonListIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category1);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) listIterator0);
      OrderedMapIterator<ServiceLoader<IIOMetadataNode>, Class<SQLDataException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<ServiceLoader<IIOMetadataNode>>) orderedMapIterator1, (Predicate<? super ServiceLoader<IIOMetadataNode>>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      MapIterator<Locale.Category, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) mapIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      String string0 = "<x";
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLDataException0);
      sQLDataException0.initCause(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "<x", sQLDataException0);
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 16);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      sQLDataException0.initCause(sQLTimeoutException0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIteratorWrapper0, (Transformer<? super SQLTransientConnectionException, String>) null, "^5KL)", "h@{", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Transformer<DataTruncation, DataTruncation>[] transformerArray0 = (Transformer<DataTruncation, DataTruncation>[]) Array.newInstance(Transformer.class, 0);
      Transformer<DataTruncation, DataTruncation> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super DataTruncation, ? extends DataTruncation>[]) transformerArray0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends SQLWarning>) transformer0);
      ConstantTransformer.constantTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ArrayList<Integer>[]) null, 83);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("B3h(yPwH!5x[n%", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("s'y~Y", "kf7", sQLRecoverableException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "kf7", (Map<String, ClientInfoStatus>) null, sQLRecoverableException0);
      DataTruncation dataTruncation1 = new DataTruncation(0, false, false, 2574, 0, sQLClientInfoException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(434, false, true, 0, 2574);
      dataTruncationArray0[2] = dataTruncation2;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Hashtable<LinkedList, LinkedList>>) null, 6);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = "s'y~Y";
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(object0, comparator0, comparatorPredicate_Criterion0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>> comparator2 = (Comparator<HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.add((Predicate<Object>) comparatorPredicate0);
      IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) vector0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0, class0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      vector0.add((Predicate<Object>) null);
      IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) vector0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0, class0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Jw@M1Y~6^Ne'H");
      iIOMetadataNode0.getElementsByTagNameNS((String) null, "");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Class<String> class0 = String.class;
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      Class<String>[] classArray1 = (Class<String>[]) Array.newInstance(Class.class, 1);
      classArray1[0] = class0;
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory1 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class1, classArray1, classArray1);
      FactoryTransformer.factoryTransformer((Factory<? extends SQLInvalidAuthorizationSpecException>) instantiateFactory1);
      OnePredicate<SQLNonTransientException> onePredicate0 = new OnePredicate<SQLNonTransientException>((Predicate<? super SQLNonTransientException>[]) null);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("J!pH['c,({qz6", "Jw@M1Y~6^Ne'H", 0, intArray0, (Throwable) null);
      arrayList0.add(batchUpdateException0);
      arrayDeque0.addAll(arrayList0);
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(object0, comparator0, comparatorPredicate_Criterion0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate("", comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Comparator<SQLException> comparator2 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>> comparator3 = (Comparator<HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.add((Predicate<Object>) comparatorPredicate0);
      IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) vector0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator1 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      reverseListIterator1.reset();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator1, (Class<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<ServiceLoader<IIOMetadataNode>, Class<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLException> class0 = SQLException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<ServiceLoader<IIOMetadataNode>>) orderedMapIterator0, (Predicate<? super ServiceLoader<IIOMetadataNode>>) predicate0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "]~~";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) resettableIterator0);
      String string0 = IteratorUtils.find(iterator0, (Predicate<? super String>) predicate0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      SQLDataException sQLDataException0 = new SQLDataException("+k@HKT$Stgb'0<n9V8.");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+k@HKT$Stgb'0<n9V8.", sQLDataException0);
      sQLDataException0.initCause(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("+k@HKT$Stgb'0<n9V8.", "<x", sQLDataException0);
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<IIOMetadataNode> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      SingletonIterator<ServiceLoader<IIOMetadataNode>> singletonIterator0 = new SingletonIterator<ServiceLoader<IIOMetadataNode>>(serviceLoader0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<ServiceLoader<IIOMetadataNode>>) singletonIterator0, (Predicate<? super ServiceLoader<IIOMetadataNode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      EmptyMapIterator.emptyMapIterator();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Class<String> class0 = String.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<ServiceLoader<IIOMetadataNode>>) null, (Predicate<? super ServiceLoader<IIOMetadataNode>>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) singletonListIterator0, (Iterator<? extends Locale.Category>) singletonListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) singletonListIterator0);
      Hashtable<DataTruncation, IIOMetadataNode> hashtable0 = new Hashtable<DataTruncation, IIOMetadataNode>();
      EntrySetMapIterator<DataTruncation, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, IIOMetadataNode>(hashtable0);
      MapIterator<SQLWarning, IIOMetadataNode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ? extends IIOMetadataNode>) entrySetMapIterator0);
      MapIterator<SQLWarning, IIOMetadataNode> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedMapIterator<ServiceLoader<IIOMetadataNode>, Class<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<ServiceLoader<IIOMetadataNode>>) orderedMapIterator0, (Predicate<? super ServiceLoader<IIOMetadataNode>>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(mapIterator0);
      IteratorUtils.singletonListIterator(boolean0);
      assertSame(mapIterator0, mapIterator1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Ub,OI{p%}p$yqLkVt");
      IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 0L);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      OrderedMapIterator<ServiceLoader<IIOMetadataNode>, Class<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<ServiceLoader<IIOMetadataNode>>) orderedMapIterator0, (Predicate<? super ServiceLoader<IIOMetadataNode>>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Comparator<SQLWarning> comparator0 = null;
      HashMap<DataTruncation, PriorityQueue<Integer>> hashMap0 = new HashMap<DataTruncation, PriorityQueue<Integer>>();
      EntrySetMapIterator<DataTruncation, PriorityQueue<Integer>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, PriorityQueue<Integer>>(hashMap0);
      // Undeclared exception!
//      try { 
        entrySetMapIterator0.getValue();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Iterator getValue() can only be called after next() and before remove()
//         //
//         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<Locale.Category, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      MapIterator<SQLTransientException, Vector<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.apply((Iterator<SQLTransientException>) mapIterator0, (Closure<? super SQLTransientException>) closure0);
      int int0 = 100;
      DataTruncation dataTruncation0 = new DataTruncation(100, false, true, 10, (-1));
      dataTruncation0.getNextWarning();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("jL-rUjKw");
      iIOMetadataNode0.getElementsByTagNameNS("jL-rUjKw", "jL-rUjKw");
      Integer integer0 = new Integer(1119);
      Integer integer1 = new Integer(1125);
      Integer integer2 = new Integer(1125);
      Integer integer3 = new Integer(6);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer2);
      IteratorUtils.toList((Iterator<?>) singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Integer integer0 = new Integer(44);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("");
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, (String) null);
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("spWO", "h:}k+S<A", 10, sQLTimeoutException2);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) list0);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      assertFalse(transformer1.equals((Object)transformer0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(44);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonListIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("s'y~Y");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", (String) null);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException((String) null, "]", 1, sQLTimeoutException3);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) list0);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y");
      assertFalse(transformer1.equals((Object)transformer0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIteratorWrapper0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "s'y~Y", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y", string0);
      
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) singletonListIterator0, (Iterator<? extends Locale.Category>) singletonListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) iterator0);
      Hashtable<DataTruncation, IIOMetadataNode> hashtable0 = new Hashtable<DataTruncation, IIOMetadataNode>();
      EntrySetMapIterator<DataTruncation, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, IIOMetadataNode>(hashtable0);
      MapIterator<SQLWarning, IIOMetadataNode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ? extends IIOMetadataNode>) entrySetMapIterator0);
      MapIterator<SQLWarning, IIOMetadataNode> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator";
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      Vector<SQLTransientConnectionException> vector0 = new Stack<SQLTransientConnectionException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("c", "c", 1118);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("N8bVMi`\"", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", 1125, sQLFeatureNotSupportedException0);
      vector0.add(sQLTransientConnectionException0);
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIteratorWrapper0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "s'y~Y", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterators'y~Y");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "s'y~Y");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLDataException>) orderedIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Ub,OI{p%}p$yqLkVt");
      IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 0L);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getSuppressed();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ub,OI{p%}p$yqLkVt", "Ub,OI{p%}p$yqLkVt", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ub,OI{p%}p$yqLkVt", "Ub,OI{p%}p$yqLkVt", "Ub,OI{p%}p$yqLkVt", 0);
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Ub,OI{p%}p$yqLkVt", "", 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
      ResettableIterator<ServiceLoader<SQLDataException>> resettableIterator1 = IteratorUtils.emptyIterator();
      String string0 = IteratorUtils.toString((Iterator<ServiceLoader<SQLDataException>>) resettableIterator1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<Locale.Category, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 3166);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("[", (String) null, sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException2;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException3;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException2;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) resettableListIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s)Pw-MjB{N`?QZ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 4, sQLNonTransientConnectionException1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 4, sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, sQLSyntaxErrorException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, (String) null, sQLNonTransientConnectionException2);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLRecoverableException1);
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException((String) null, "s)Pw-MjB{N`?QZ", sQLSyntaxErrorException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException((String) null, "prefix may not be null");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("prefix may not be null", "EfqwV}2W");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("", "EfqwV}2W");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException(sQLWarning0);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException("[", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 3326, 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Ub,OI{p%}p$yqLkVt");
      IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 0L);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ub,OI{p%}p$yqLkVt", "Ub,OI{p%}p$yqLkVt", "Ub,OI{p%}p$yqLkVt", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Ub,OI{p%}p$yqLkVt", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Ub,OI{p%}p$yqLkVt", "", "", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Ub,OI{p%}p$yqLkVt", "$lymc&Qe@8ob!|", "", (-2136));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "/FNiQ| 0MKXp!l", "$lymc&Qe@8ob!|", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "X4|F:,-+?r", "X4|F:,-+?r", 0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>> hashtable0 = new Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>>();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) objectArrayIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      DataTruncation dataTruncation0 = new DataTruncation((-1381), true, true, (-2219), (-1381));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 1852, 34);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 10;
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedMapIterator<SQLWarning, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLWarning, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLWarning, SQLDataException>) orderedMapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, String>) transformer0, "HPB", "HPB", "HPB");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 1);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("");
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) objectArrayIterator0, 16);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>> hashtable0 = new Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C&30/f4a`Y37Y");
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException1;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator1 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) objectArrayIterator1, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) sQLTimeoutExceptionArray0, (-798), 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends LinkedHashSet<SQLIntegrityConstraintViolationException>>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[", "[", 4);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("[", "Start index must not be greater than the array length", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("[", "Start index must not be greater than the array length", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("Start index must not be greater than the array length");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) objectArrayIterator0, 4);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>> hashtable0 = new Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>>();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) objectArrayIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0, (-1381), (-1381));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>> hashtable0 = new Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>>();
      int int0 = (-798);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) dataTruncationArray0, (-798), (-798));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3440;
      intArray0[1] = 3440;
      intArray0[2] = 1637;
      intArray0[3] = 0;
      intArray0[4] = 10;
      intArray0[5] = (-1);
      SQLException sQLException0 = new SQLException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      IteratorUtils.singletonListIterator(batchUpdateException1);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) zippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) listIteratorWrapper0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) listIteratorWrapper0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ConstantTransformer<SQLFeatureNotSupportedException, String> constantTransformer0 = new ConstantTransformer<SQLFeatureNotSupportedException, String>("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) zippingIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) constantTransformer0, ",g", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3440;
      intArray0[1] = 3440;
      intArray0[2] = 1637;
      intArray0[3] = 0;
      intArray0[4] = 10;
      intArray0[5] = (-1);
      SQLException sQLException0 = new SQLException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateException1.setNextException(sQLException0);
      IteratorUtils.singletonListIterator(batchUpdateException1);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0, (Iterator<? extends IIOMetadataNode>) zippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>[] hashtableArray0 = (Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>[]) Array.newInstance(Hashtable.class, 7);
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> hashtable1 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>();
      hashtableArray0[1] = hashtable1;
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> hashtable2 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>();
      hashtableArray0[2] = hashtable2;
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> hashtable3 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>();
      hashtableArray0[3] = hashtable3;
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> hashtable4 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>();
      hashtableArray0[4] = hashtable4;
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> hashtable5 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>();
      hashtableArray0[5] = hashtable5;
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> hashtable6 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>();
      hashtableArray0[6] = hashtable6;
      ObjectArrayListIterator<Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>> objectArrayListIterator0 = new ObjectArrayListIterator<Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>>(hashtableArray0);
      String string0 = IteratorUtils.toString((Iterator<Hashtable<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>>) objectArrayListIterator0);
      assertEquals("[{}, {}, {}, {}, {}, {}, {}]", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<LinkedList<IIOMetadataNode>, ArrayList<SQLFeatureNotSupportedException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<LinkedList<IIOMetadataNode>, ArrayList<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<IIOMetadataNode>, ArrayList<SQLFeatureNotSupportedException>>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<SQLWarning, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLWarning, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLWarning, SQLDataException>) orderedMapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, String>) transformer0, "HPB", "HPB", "HPB");
      String string0 = "org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator";
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      int int0 = 0;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.ExceptionClosure", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator", hashtable1, dataTruncation0);
      sQLClientInfoException0.printStackTrace();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<SQLWarning, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLWarning, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLWarning, SQLDataException>) orderedMapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, String>) transformer0, "HPB", "HPB", "HPB");
      String string0 = "org.apache.commons.collections4.functors.ExceptionClosure";
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      int int0 = 0;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.ExceptionClosure", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator", hashtable1, dataTruncation0);
      sQLClientInfoException0.printStackTrace();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Iterator must not be null.", "Te", hashMap0, batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("T8J)/pgM5>2eRj@~`", "Iterator must not be null.", 0, intArray0, sQLClientInfoException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Iterator<DataTruncation> iterator0 = arrayDeque0.iterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (Throwable) null);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", 0, sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLTimeoutException1);
      arrayDeque0.add(dataTruncation0);
      arrayDeque0.stream();
      Transformer<DataTruncation, DataTruncation>[] transformerArray0 = (Transformer<DataTruncation, DataTruncation>[]) Array.newInstance(Transformer.class, 0);
      Transformer<DataTruncation, DataTruncation> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super DataTruncation, ? extends DataTruncation>[]) transformerArray0);
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) iterator0, (Transformer<? super DataTruncation, ? extends SQLWarning>) transformer0);
      Iterator<Integer> iterator1 = null;
      Transformer<Object, String>[] transformerArray1 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("remove() can only be called once after next()");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, transformer1, transformer1);
      Transformer<Object, String> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends String>) ifTransformer0, (Transformer<? super Object, ? extends String>) ifTransformer0);
      transformerArray1[0] = transformer2;
      // Undeclared exception!
//      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Integer>[]) null, (Transformer<? super Integer, ? extends String>[]) transformerArray1, (Transformer<? super Integer, ? extends String>) ifTransformer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "<x", sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Predicate must not be null", sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Predicate must not be null", "RG~j!;80E_tYq\"xp");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-533));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3440;
      intArray0[1] = (-1257);
      intArray0[2] = 1637;
      intArray0[3] = 0;
      intArray0[4] = 10;
      intArray0[5] = (-1);
      String string0 = "";
      SQLException sQLException0 = new SQLException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateException1.setNextException(sQLException0);
      IteratorUtils.singletonListIterator(batchUpdateException1);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0, (Iterator<? extends IIOMetadataNode>) zippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      String string1 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", batchUpdateException0);
      sQLRecoverableException0.spliterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, (-1257), 44);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3440;
      intArray0[1] = (-1257);
      intArray0[2] = 1637;
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = 10;
      int int1 = (-1);
      intArray0[5] = (-1);
      SQLException sQLException0 = new SQLException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateException1.setNextException(sQLException0);
      IteratorUtils.singletonListIterator(batchUpdateException1);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0, (Iterator<? extends IIOMetadataNode>) zippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", batchUpdateException0);
      sQLRecoverableException0.spliterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, (-1257), 44);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      UniquePredicate<SQLSyntaxErrorException> uniquePredicate0 = new UniquePredicate<SQLSyntaxErrorException>();
      Predicate<SQLSyntaxErrorException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLSyntaxErrorException>) uniquePredicate0, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("jL-rUjKw");
      String string0 = ",@*l&Pj`}Ea";
      iIOMetadataNode0.getElementsByTagName(",@*l&Pj`}Ea");
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(orderedIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      vector0.add((Predicate<Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>> hashtable0 = new Hashtable<LinkedList<SQLFeatureNotSupportedException>, LinkedList<TreeSet<SQLWarning>>>();
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0, class0);
      assertEquals(0, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1812);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(100);
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(7);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(100);
      integerArray0[5] = integer5;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null, (Collection<? super SQLTransientException>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3440;
      intArray0[1] = 3440;
      intArray0[2] = 1637;
      intArray0[3] = 0;
      intArray0[4] = 10;
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) nonePredicate0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      Predicate<Object> predicate3 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate2);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate3);
      stack0.add((Predicate<Object>) nullIsFalsePredicate0);
      IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) stack0);
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("m~o w.jz{@$UsF80", "jpX!.hr}/01MOP}j.O");
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ayi)", sQLIntegrityConstraintViolationException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ayi)", "m~o w.jz{@$UsF80", 10, sQLIntegrityConstraintViolationException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException("");
      sQLTransientExceptionArray0[2] = sQLTransientException1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("F`HL0T@5MYO0", "Ayi)", 10);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("8", "");
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientException sQLTransientException2 = new SQLTransientException("vXnMDM+cgvLgHD");
      sQLTransientExceptionArray0[5] = sQLTransientException2;
      ObjectArrayListIterator<SQLTransientException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientException>(sQLTransientExceptionArray0, 1637);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(object0, comparator0, comparatorPredicate_Criterion0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      Comparator<HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>> comparator2 = (Comparator<HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(hashMap0, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ComparatorPredicate.comparatorPredicate((SQLException) sQLNonTransientException0, comparator1);
      vector0.add((Predicate<Object>) comparatorPredicate0);
      IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) vector0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0, class0);
      assertEquals(0, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) locale_Category0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Ub,OI{p%}p$yqLkVt");
      IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 0L);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ub,OI{p%}p$yqLkVt", "Ub,OI{p%}p$yqLkVt", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ub,OI{p%}p$yqLkVt", "Ub,OI{p%}p$yqLkVt", "Ub,OI{p%}p$yqLkVt", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Ub,OI{p%}p$yqLkVt", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Ub,OI{p%}p$yqLkVt", "", "", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Ub,OI{p%}p$yqLkVt", "$lymc&Qe@8ob!|", "", (-2136));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "/FNiQ| 0MKXp!l", "$lymc&Qe@8ob!|", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "X4|F:,-+?r", "X4|F:,-+?r", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      batchUpdateException0.setStackTrace(stackTraceElementArray0);
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      objectArrayListIterator0.next();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.singletonIterator(class0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1746));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1746));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1746));
      integerArray0[7] = integer7;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        OrPredicate.orPredicate((Predicate<? super SQLException>) null, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      LinkedHashSet<Object> linkedHashSet0 = null;
//      try {
        linkedHashSet0 = new LinkedHashSet<Object>((Collection<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) orderedIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("iterator", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(">", ">", 10, hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLException sQLException0 = new SQLException("iterator", "underlying nodeList has no more elements", 10);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(">", hashMap0, sQLException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("underlying nodeList has no more elements", "zm+p$4UUl6UZ>n5Znf", sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(">", hashtable0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("iterator", hashMap1, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(">", ">", hashMap1, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", "{Q'k|H6yTY(x5#}", 10, hashMap1, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException(hashMap0, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) listIteratorWrapper0, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<Vector<Properties>, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      IteratorUtils.matchesAny((Iterator<Vector<Properties>>) mapIterator0, (Predicate<? super Vector<Properties>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 7);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator((SQLSyntaxErrorException) null);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      iteratorArray0[0] = iterator0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) resettableIterator1;
      ArrayListIterator<SQLSyntaxErrorException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLSyntaxErrorException>(iterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "";
      int int0 = 44;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "", 44);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      int[] intArray0 = new int[8];
      intArray0[0] = (-180);
      intArray0[1] = (-135);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 10;
      intArray0[5] = (-1955);
      intArray0[6] = 0;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      sQLExceptionArray0[0] = (SQLException) batchUpdateException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLExceptionArray0[1] = (SQLException) sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("~a");
      sQLExceptionArray0[2] = (SQLException) sQLTransactionRollbackException1;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "ConstantTransformer";
      String string1 = "o$}2?)lPP3d";
      SQLException sQLException0 = new SQLException("o$}2?)lPP3d");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2FV\"gXwKPh", "ConstantTransformer", sQLException0);
      sQLTimeoutException0.getSuppressed();
      int int0 = (-4206);
      sQLTimeoutException0.spliterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, (-4206));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(128);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      String string0 = "[";
      int int0 = 4;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[", "[", 4);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      String string1 = "Start index must not be greater than the array length";
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      String string2 = "";
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Start index must not be greater than the array length", "", 7);
      IteratorUtils.contains(iterator0, (Object) sQLTimeoutException1);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      int[] intArray0 = new int[0];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The parameter types must match the arguments");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The parameter types must match the arguments", "The parameter types must match the arguments", 0, intArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("xP=9@D_Y'/:^>'", (String) null, 0, intArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException((String) null, "xP=9@D_Y'/:^>'", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("The parameter types must match the arguments", (String) null, intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException((String) null, "suffix may not be null", 946, intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("suffix may not be null", "65Q=.qyPa ue3iOIb", intArray0, batchUpdateException4);
      batchUpdateException0.getSuppressed();
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0, 946);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      int int0 = (-3523);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Properties>) orderedIterator0, (-3523));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -3523
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OrderedMapIterator<Locale.Category, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) orderedMapIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<SQLException, String> transformer0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }
}
