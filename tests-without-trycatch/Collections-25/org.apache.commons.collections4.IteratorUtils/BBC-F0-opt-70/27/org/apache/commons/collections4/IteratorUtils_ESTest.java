/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:09:57 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      String string0 = "b!%dH.z-p0bwvmx;";
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("b!%dH.z-p0bwvmx;");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableListIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      List<Locale.LanguageRange> list0 = null;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("sIdOe7TV'G'NeOo,`j", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("#w~P^Z|X9*bTD\"P", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 1L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'sIdOe7TV'G'NeOo,`j' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("rP5H*l!3*A_X@", "", (-1984));
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator1, 2434);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<IIOMetadataNode>[] linkedHashSetArray0 = (LinkedHashSet<IIOMetadataNode>[]) Array.newInstance(LinkedHashSet.class, 0);
      IteratorUtils.arrayListIterator(linkedHashSetArray0, 0);
      TreeSet<String>[] treeSetArray0 = (TreeSet<String>[]) Array.newInstance(TreeSet.class, 6);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSetArray0[0] = treeSet0;
      TreeSet<String> treeSet1 = new TreeSet<String>();
      treeSetArray0[1] = treeSet1;
      TreeSet<String> treeSet2 = new TreeSet<String>();
      treeSetArray0[2] = treeSet2;
      TreeSet<String> treeSet3 = new TreeSet<String>();
      treeSetArray0[3] = treeSet3;
      TreeSet<String> treeSet4 = new TreeSet<String>();
      treeSetArray0[4] = treeSet4;
      TreeSet<String> treeSet5 = new TreeSet<String>();
      treeSetArray0[5] = treeSet5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(treeSetArray0, 0, (-1168));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Closure<SQLInvalidAuthorizationSpecException>, SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>((IIOMetadataNode) null);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator0, 14);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, (Class<IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("z9F7|&{-{t#xHg.Jt", "[V", 9);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLTransactionRollbackException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(batchUpdateException0, comparator0, comparatorPredicate_Criterion0);
      MapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Integer integer0 = new Integer((-4969));
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-205));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(stack0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.functors.ForClosure");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, String>) constantTransformer0, "org.apache.commons.collections4.functors.ForClosure", "9Y8uFA;=A6Rf", "iterator");
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) constantTransformer0, "<vu!irBWT=RE>j<2\"", "<vu!irBWT=RE>j<2\"", "<Qw!Z<k!");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = (-4000);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-4000));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) null, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, TreeSet<SQLException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("EWjxs(BRe-GM", "ListIterator must not be null");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer1, "ListIterator must not be null", "EWjxs(BRe-GM", "v");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, TreeSet<SQLException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableListIterator0, class0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      OrderedMapIterator<Closure<Object>, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<Closure<Object>>) orderedMapIterator0);
      EmptyIterator.emptyIterator();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      Vector<SQLInvalidAuthorizationSpecException>[] vectorArray0 = (Vector<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Vector.class, 9);
      Vector<SQLInvalidAuthorizationSpecException> vector1 = new Vector<SQLInvalidAuthorizationSpecException>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      vectorArray0[1] = (Vector<SQLInvalidAuthorizationSpecException>) stack0;
      Stack<SQLInvalidAuthorizationSpecException> stack1 = new Stack<SQLInvalidAuthorizationSpecException>();
      Stack<SQLInvalidAuthorizationSpecException> stack2 = new Stack<SQLInvalidAuthorizationSpecException>();
      vectorArray0[3] = (Vector<SQLInvalidAuthorizationSpecException>) stack2;
      Vector<SQLInvalidAuthorizationSpecException> vector2 = new Vector<SQLInvalidAuthorizationSpecException>();
      vectorArray0[4] = vector2;
      Stack<SQLInvalidAuthorizationSpecException> stack3 = new Stack<SQLInvalidAuthorizationSpecException>();
      vectorArray0[5] = (Vector<SQLInvalidAuthorizationSpecException>) stack3;
      Vector<SQLInvalidAuthorizationSpecException> vector3 = new Vector<SQLInvalidAuthorizationSpecException>();
      vectorArray0[6] = vector3;
      Stack<SQLInvalidAuthorizationSpecException> stack4 = new Stack<SQLInvalidAuthorizationSpecException>();
      Vector<SQLInvalidAuthorizationSpecException> vector4 = new Vector<SQLInvalidAuthorizationSpecException>();
      vectorArray0[8] = vector4;
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.arrayIterator(vectorArray0, 6, 6);
      DataTruncation dataTruncation0 = new DataTruncation(6, false, true, (-2443), 3786);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Object) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, (Transformer<? super SQLTransientException, ? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<SQLException> predicate2 = NotPredicate.notPredicate((Predicate<? super SQLException>) predicate1);
      IteratorUtils.matchesAny((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate2);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1447);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("`A9vi:1bvI4ukAUE)@");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTimeoutException, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ?>) mapIterator0);
      AbstractMapIteratorDecorator<SQLTimeoutException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, Object>(mapIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) arrayList0);
      int int0 = (-3310);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.TruePredicate", "", (-3310));
      SQLTransientException sQLTransientException0 = new SQLTransientException("[b\"Tf", sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("K#fdmz", "K#fdmz", (-3310), sQLTransientException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) singletonIterator0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("suffix may not be null");
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 5);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[2] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[3] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[4] = class3;
      Object[] objectArray0 = new Object[0];
      InvokerTransformer<Object, Vector<SQLInvalidAuthorizationSpecException>> invokerTransformer0 = new InvokerTransformer<Object, Vector<SQLInvalidAuthorizationSpecException>>("suffix may not be null", classArray0, objectArray0);
      Iterator<Vector<SQLInvalidAuthorizationSpecException>> iterator0 = IteratorUtils.objectGraphIterator(vector0, (Transformer<? super Vector<SQLInvalidAuthorizationSpecException>, ? extends Vector<SQLInvalidAuthorizationSpecException>>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.contains(iterator0, (Object) "suffix may not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'suffix may not be null' on 'class java.util.Vector' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("suffix may not be null");
      ConstantTransformer.constantTransformer("org.apache.commons.collections4.map.AbstractMapDecorator");
      String string0 = "";
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(vector0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("/rNpuH*16[");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "/rNpuH*16[", 100);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) singletonIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "/rNpuH*16[", (String) null, "/rNpuH*16[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Enumeration must not be null", "41}[%3.piQc4_$]", 10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("41}[%3.piQc4_$]", sQLNonTransientConnectionException0);
      vector0.add((SQLNonTransientException) sQLNonTransientConnectionException1);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(vector0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("iterator");
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "", "iterator");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 1);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) invokerTransformer0, (String) null, (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("'mkGvnq", "'mkGvnq");
      IteratorUtils.getIterator(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null, 3435);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(vector0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("iterator");
      String string0 = "+5-8RL2aJ";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "+5-8RL2aJ", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) arrayList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0);
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) vector0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientException, String>) null, "", "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1448, (-2336));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      dataTruncation0.getNextWarning();
      dataTruncation0.setNextWarning((SQLWarning) null);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) singletonIterator0, 0L);
      DataTruncation dataTruncation1 = IteratorUtils.get((Iterator<DataTruncation>) singletonIterator0, 0);
      assertSame(dataTruncation0, dataTruncation1);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("mO$");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'mO$' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(vector0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")<j|xH|#ul", "7?4^D6BI\u0005N'^4X", hashtable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\\_[fYy@R,", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")<j|xH|#ul", ")<j|xH|#ul", (-686), sQLIntegrityConstraintViolationException0);
      vector0.add((SQLNonTransientException) sQLSyntaxErrorException0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("iterator");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "iterator", "934f", "");
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableListIterator0, class0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CANADA_FRENCH;
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      SingletonListIterator<Vector<SQLInvalidAuthorizationSpecException>> singletonListIterator0 = new SingletonListIterator<Vector<SQLInvalidAuthorizationSpecException>>(vector0);
      Vector<SQLTransactionRollbackException> vector1 = new Vector<SQLTransactionRollbackException>();
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.pollFirst();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyOrderedIterator();
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) properties0);
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLTransactionRollbackException>>) null, (Predicate<? super ServiceLoader<SQLTransactionRollbackException>>) predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1480, closure0);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) forClosure0);
      IteratorUtils.getIterator(closure0);
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap0, (Throwable) null);
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null, 1480, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1448, (-2336));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      dataTruncation0.getNextWarning();
      dataTruncation0.setNextWarning((SQLWarning) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1448, (-2336));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      dataTruncation0.getNextWarning();
      dataTruncation0.setNextWarning((SQLWarning) null);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) singletonIterator0, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<SQLException> class1 = SQLException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<SQLException> class2 = SQLException.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class3);
      InstanceofPredicate.instanceOfPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class2);
      Class<Object> class4 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstanceofPredicate.instanceOfPredicate(class4);
      InstanceofPredicate.instanceOfPredicate(class4);
      IteratorUtils.matchesAll((Iterator<Object>) null, (Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[15];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("T-+9s35}'cf~", ", ", (-2830));
      sQLTransientConnectionException0.spliterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Mx=%P~");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(2);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(arrayList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "prefix may not be null", "", "");
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicateTransformer<TreeSet<Properties>> predicateTransformer0 = new PredicateTransformer<TreeSet<Properties>>(predicate0);
      TreeSet<Properties> treeSet0 = new TreeSet<Properties>();
      predicateTransformer0.transform(treeSet0);
      TreeSet<Properties> treeSet1 = new TreeSet<Properties>();
      Boolean boolean0 = predicateTransformer0.transform(treeSet1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(boolean0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) loopingListIterator0, (Predicate<? super SQLException>) equalPredicate0);
      SQLException sQLException0 = new SQLException("");
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("=z`g}7yO5G qw(EO");
      Node node0 = iIOMetadataNode0.cloneNode(true);
      IteratorUtils.nodeListIterator(node0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(42);
      linkedList0.add(integer0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)115;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(t((v#`\"~-2'h.gB", "(t((v#`\"~-2'h.gB", (byte) (-84));
      sQLTransientConnectionException0.spliterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      Integer integer0 = new Integer(3);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("=z`g}7yO5G qw(EO");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("H", "H", 340);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("H", "'?a<[<r9c! 9}KGxF");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLInvalidAuthorizationSpecException0, (Equator<Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Or7", "org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%q$]D.|Q;?RuB", sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", sQLNonTransientConnectionException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("1]4", "N'}~k:DH34H", 0, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", "", 1448);
      sQLDataExceptionArray0[4] = sQLDataException4;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) vector0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(0, integer0);
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      Class<SQLDataException> class0 = SQLDataException.class;
      MapIterator<SQLDataException, Vector<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "'4]\"2:jR0Mu#|n -fY", 900, sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("'4]\"2:jR0Mu#|n -fY", "", sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1037), true, false, (-2323), (-2323));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1004;
      longArray0[1] = (long) (-2323);
      longArray0[2] = (long) (-2323);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Gr7SSa;$0", "Gr7SSa;$0", (-1037), longArray0, dataTruncation0);
      IteratorUtils.singletonIterator(batchUpdateException0);
      EqualPredicate.equalPredicate((SQLException) dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.find(iterator0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.find((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) objectArrayIterator0);
      ConstantTransformer.nullTransformer();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("J");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("npT}RTJwT[", "org.apache.commons.collections4.map.ListOrderedMap", 0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) listIterator0, (Transformer<? super SQLTransientException, ? extends String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.emptyMapIterator();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLWarning sQLWarning0 = new SQLWarning(mockThrowable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "64e", sQLWarning0);
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLNonTransientException0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) singletonListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "org.apache.commons.collections4.map.AbstractHashedMap$Values", "64e", "!eHJ6H M4]");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("93-?}k!KZ#p", "", 1407);
      MockThrowable mockThrowable1 = new MockThrowable("fdq4>Ge_aNsD\"nN$o");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "93-?}k!KZ#p");
      OrderedMapIterator<HashSet<Iterator<HashMap<SQLDataException, IIOMetadataNode>>>, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<HashSet<Iterator<HashMap<SQLDataException, IIOMetadataNode>>>, ClientInfoStatus>) orderedMapIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) ifTransformer0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("F[I!BXq|JVL2w", sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[]", "[]", sQLTimeoutException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(t((v#`\"~-2'h.gB", "", 1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("r+Y~/^1\"u3|j<-dhN.Y", "(t((v#`\"~-2'h.gB", 1, hashtable0, sQLTransientConnectionException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLClientInfoException0, (Equator<Object>) null);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(vector0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(39);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(arrayList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "Array class must not be null", "64e", "64e");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Array class must not be null", "", 213);
      MockThrowable mockThrowable0 = new MockThrowable("93-?}k!KZ#p");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("64e", "64e");
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      IteratorUtils.getIterator((Object) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<SQLException, String> transformer1 = new ConstantTransformer<SQLException, String>("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 2867);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) zippingIterator0, (Transformer<? super SQLTransientException, ? extends String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      SingletonListIterator<Vector<SQLInvalidAuthorizationSpecException>> singletonListIterator0 = new SingletonListIterator<Vector<SQLInvalidAuthorizationSpecException>>(vector0);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) singletonListIterator0, (Object) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Object) vector0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Closure<Object>, SQLClientInfoException> hashMap0 = new HashMap<Closure<Object>, SQLClientInfoException>();
      EntrySetMapIterator<Closure<Object>, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<Closure<Object>, SQLClientInfoException>(hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      IteratorUtils.toString((Iterator<Closure<Object>>) entrySetMapIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(39);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(arrayList0);
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ConstantTransformer.constantTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, 39);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("2x.wlkrp(");
      stack0.add(iIOMetadataNode0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedIterator0);
      MockThrowable mockThrowable0 = new MockThrowable("V2^@");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Array class must not be null", "V2^@");
      IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1037), true, false, (-2323), (-2323));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      DefaultEquator.defaultEquator();
      Object object0 = new Object();
      Predicate<Vector<EnumSet>> predicate0 = UniquePredicate.uniquePredicate();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0, defaultEquator0);
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) equalPredicate0);
      PredicateTransformer<ArrayDeque<IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<IIOMetadataNode>>(equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("~Nd%WpD-5^<f0l8", "w-,4D", (-1037));
      Predicate<SQLException> predicate1 = TruePredicate.truePredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "b", (-1409));
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException1);
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(resettableIterator0);
      IteratorUtils.matchesAny((Iterator<SQLException>) listIteratorWrapper0, (Predicate<? super SQLException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      IteratorUtils.singletonIterator((InstanceofPredicate) null);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      SQLDataException sQLDataException0 = new SQLDataException("vei|JfNj=&&twd(");
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 37;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 37, longArray0, sQLDataException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      EqualPredicate.equalPredicate((SQLException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      Integer integer0 = new Integer(100);
      linkedList0.add(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<Closure<Object>, SQLClientInfoException> hashtable0 = new Hashtable<Closure<Object>, SQLClientInfoException>();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableIterator0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, (Throwable) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(";L37|B,iOi/jif", (int[]) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((int[]) null, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      SQLWarning sQLWarning0 = new SQLWarning(";L37|B,iOi/jif", ";L37|B,iOi/jif");
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(sQLWarning0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException();
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("The prototype must be cloneable via a public clone method", (int[]) null);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(batchUpdateException3);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException(";L37|B,iOi/jif", "evN)pHfN+^>zT]k16t", (int[]) null, batchUpdateException5);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0, 0);
      iteratorArray0[1] = (Iterator<BatchUpdateException>) resettableListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) objectArrayIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(10, false, true, (-2323), 1);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) singletonListIterator0, (Iterator<? extends SQLException>) singletonListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("' out of bounds for size '", dataTruncation0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientException0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(t((v#`\"~-2'h.gB", "\\HQ", 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0, (Equator<Object>) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      assertTrue(boolean0);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 9, 1);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(423, true, false, (-441), 39);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1, true, false, (-441), 39);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(423, false, false, (-3432), 423);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(128, true, true, 423, 3166, dataTruncation1);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(423, true, true, 9, 99);
      dataTruncationArray0[5] = dataTruncation5;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) objectArrayListIterator0);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) equalPredicate0, (Equator<Object>) null);
      IteratorUtils.find((Iterator<DataTruncation>) reverseListIterator0, (Predicate<? super DataTruncation>) predicate0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      IteratorUtils.singletonIterator((InstanceofPredicate) null);
      List<InstanceofPredicate> list0 = new Stack<InstanceofPredicate>();
      IteratorUtils.loopingListIterator(list0);
      SQLDataException sQLDataException0 = new SQLDataException("vei|JfNj=&&twd(");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0, defaultEquator0);
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      PredicateTransformer<ArrayDeque<IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<IIOMetadataNode>>((Predicate<? super ArrayDeque<IIOMetadataNode>>) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vei|JfNj=&&twd(", "vei|JfNj=&&twd(", (-1));
      TruePredicate.truePredicate();
      IteratorUtils.getIterator((Object) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) null, (Transformer<? super SQLTransientException, ? extends String>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLException sQLException0 = new SQLException("Array class must not be null", "Array class must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, 0, sQLException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("equator may not be null");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", "r]'FmHNJqe[Xvz");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException(sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("", "");
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0, (-2950));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator((Vector<SQLInvalidAuthorizationSpecException>) stack0);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Object) null);
      HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      BiFunction<SQLNonTransientException, SQLException, SQLIntegrityConstraintViolationException> biFunction0 = (BiFunction<SQLNonTransientException, SQLException, SQLIntegrityConstraintViolationException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        hashMap0.merge(linkedList1, (SQLIntegrityConstraintViolationException) null, biFunction0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ListIterator<InstanceofPredicate> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator1, 1);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLDataException sQLDataException0 = new SQLDataException("vei|JfNj=&&twd(");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("vei|JfNj=&&twd(", defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) equalPredicate0);
      PredicateTransformer<ArrayDeque<IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<IIOMetadataNode>>(predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vei|JfNj=&&twd(", ") greater than the size of the ", (-949));
      TruePredicate.truePredicate();
      IteratorUtils.getIterator(equalPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vei|JfNj=&&twd(", ") greater than the size of the ", 4231);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(resettableIterator1);
      IteratorUtils.matchesAny((Iterator<SQLException>) listIteratorWrapper0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      int int0 = (-1362);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator0, (-1362));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(39);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(arrayList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "Array class must not be null", "64e", "64e");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("93-?}k!KZ#p", "Array class must not be null", 39);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      IteratorUtils.isEmpty(loopingListIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Locale.LanguageRange locale_LanguageRange0 = null;
//      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 39);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // weight=39.0
//         //
//         verifyException("java.util.Locale$LanguageRange", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Properties properties0 = new Properties();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 558;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray1[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray1);
      properties0.put(", ", predicate0);
      IteratorUtils.getIterator(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(arrayList0, (Equator<Object>) null);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("Eaz)Lm4m~*pq");
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1037), true, true, (-1037), (-1037));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("nodeList must not be null!");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("");
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("d[':ia?6b!d3", "\\HQ", 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MapIterator<Transformer<Object, StringTokenizer>, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, StringTokenizer>>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Transformer<IIOMetadataNode, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Object) vector0);
      HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<DataTruncation, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) zippingIterator0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("m\"-&9n<N7", "AcM,U/.lm:4je", 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("m\"-&9n<N7", "TG", 613, sQLTransientConnectionException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTimeoutException0, (Equator<Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1, 613);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DataTruncation dataTruncation0 = new DataTruncation((-854), true, true, 1162, 3522);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(singletonListIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) listIteratorWrapper0, (long) 1162);
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) singletonListIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) listIteratorWrapper0;
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.getIterator(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) vector0);
      SQLDataException sQLDataException0 = new SQLDataException("KhB");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, defaultEquator0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) equalPredicate0);
      PredicateTransformer<ArrayDeque<IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<IIOMetadataNode>>(equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 3042);
      TruePredicate.truePredicate();
      IteratorUtils.getIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>(hashtable0);
      Stack<Object> stack0 = new Stack<Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      int[] intArray0 = new int[0];
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) loopingListIterator0, 2576L, 2576L);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) boundedIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator0);
      MapIterator<SQLTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) mapIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Properties properties0 = new Properties();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "q1", (-363));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("?iCSu<~o/3<A", sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException(", ", "org.apache.commons.collections4.TransformerUtils");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) constantTransformer0);
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayIterator0, (Transformer<? super SQLNonTransientException, String>) ifTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((ArrayDeque<SQLTransactionRollbackException>[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Stack<Boolean> stack0 = new Stack<Boolean>();
      IteratorUtils.loopingListIterator((List<Boolean>) stack0);
      DataTruncation dataTruncation0 = new DataTruncation(538, false, false, 124, 124);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation(538, false, false, 538, (-1599), sQLTimeoutException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-3240), (-2323));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("hoN8j!5(>S&}SVVvgg=");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(comparatorPredicate0, comparatorPredicate0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(comparatorPredicate0, closure0, closure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(33, ifClosure0);
      WhileClosure.whileClosure((Predicate<? super SQLTransientException>) orPredicate0, (Closure<? super SQLTransientException>) ifClosure0, true);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) null, (Closure<? super SQLTimeoutException>) closure0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("}ZV5Xhl%z[h", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ListIterator<InstanceofPredicate> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator1, 1);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLDataException sQLDataException0 = new SQLDataException("vei|JfNj=&&twd(");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("vei|JfNj=&&twd(", defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) equalPredicate0);
      PredicateTransformer<ArrayDeque<IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<IIOMetadataNode>>(predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vei|JfNj=&&twd(", ") greater than the size of the ", (-949));
      TruePredicate.truePredicate();
      OrderedMapIterator<SQLDataException, ServiceLoader<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLDataException, ServiceLoader<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, ServiceLoader<SQLIntegrityConstraintViolationException>>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) mapIterator0);
      Transformer<Object, SQLNonTransientException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) closure0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(t((v#`\"~-2'h.gB", "(t((v#`\"~-2'h.gB", (-2848));
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(zippingIterator0, (Equator<Object>) null);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.getElementsByTagName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1037), true, false, (-1037), (-1037));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Gr7SSa;$0", "Gr7SSa;$0", 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonListIterator0, (Equator<Object>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Gr7SSa;$0");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("MG/VHRE+S3\"`,|ZF");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iIOMetadataNode0, (Equator<Object>) null);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("MG/VHRE+S3\"`,|ZF");
      NodeList nodeList0 = iIOMetadataNode1.getElementsByTagName("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(538, true, false, (-1), (-1));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) singletonListIterator0, (Iterator<? extends SQLException>) singletonListIterator0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLException>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(t((v#`\"~-2'h.gB", "\\HQ", 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0, (Equator<Object>) null);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      arrayList0.iterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int[] intArray0 = new int[6];
      intArray0[0] = 2567;
      intArray0[1] = 558;
      intArray0[2] = 558;
      intArray0[3] = 0;
      intArray0[4] = 558;
      intArray0[5] = 558;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-6i<!/g", "", 0, intArray0, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-6i<!/g", "-6i<!/g", sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, "", sQLRecoverableException1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[4] = (Predicate<Object>) transformedPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Properties properties0 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", sQLRecoverableException2);
      properties0.put(sQLRecoverableException2, sQLTransientConnectionException0);
      IteratorUtils.getIterator(transformer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Properties properties0 = new Properties();
      int[] intArray0 = new int[27];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 558;
      intArray0[8] = 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("a#o`og&", "At$Fel.", 0, intArray0, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(", ", "#V;6 ", sQLRecoverableException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(zippingIterator0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) listIteratorWrapper0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) listIterator0, 16);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 16
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Properties properties0 = new Properties();
      int[] intArray0 = new int[27];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 558;
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("#V;6 ", ", ");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("a#o`og&", ", ", batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("#V;6 ", "#V;6 ", 0, sQLTransientException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLRecoverableException0);
      IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(comparatorPredicate0, comparatorPredicate0);
      int int0 = 5;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(comparatorPredicate0, comparatorPredicate0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", ", ";yJEI:qv?_");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLNonTransientException0);
      SQLException sQLException0 = new SQLException(";yJEI:qv?_", ";yJEI:qv?_", sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLException0);
      orPredicate0.evaluate(sQLTimeoutException0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(anyPredicate0, closure0, closure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(5, ifClosure0);
      Closure<SQLTransientException> closure1 = WhileClosure.whileClosure((Predicate<? super SQLTransientException>) orPredicate0, (Closure<? super SQLTransientException>) forClosure0, true);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) zippingIterator0, (Closure<? super SQLTimeoutException>) closure1);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException((Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("}ZV5Xhl%z[h", sQLNonTransientException1);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 5);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1037), true, false, (-2323), (-2323));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      int int0 = (-3977);
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 5, (-3977));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation1, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) singletonIterator0, (long) (-2323));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) objectArrayIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 463L);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("}Tz*WU>5h7sff", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("}Tz*WU>5h7sff", "org.apache.commons.collections4.functors.ExceptionPredicate", 19);
      Vector<Object> vector0 = new Vector<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Transformers must not be null", "The closure array must not contain a null closure, index ", 652);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTimeoutException0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      vector0.add((Object) comparatorPredicate0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator0);
      MapIterator<Object, ArrayDeque<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<Object>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<ServiceLoader<EnumSet>>) mapIterator0, (-1490));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1490
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 463L);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) skippingIterator0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "cQ`#MS_vhG@");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("cQ`#MS_vhG@", "", 777);
      Vector<Object> vector0 = new Vector<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("cQ`#MS_vhG@", "", 2879);
      vector0.add((Object) sQLInvalidAuthorizationSpecException0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator1);
      MapIterator<Object, ArrayDeque<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<Object>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<ServiceLoader<EnumSet>>) resettableListIterator0, 2879);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2879
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Iterator<HashMap<SQLDataException, IIOMetadataNode>>>) null, (Iterator<? extends Iterator<HashMap<SQLDataException, IIOMetadataNode>>>) null, (Iterator<? extends Iterator<HashMap<SQLDataException, IIOMetadataNode>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      SingletonListIterator<Vector<SQLInvalidAuthorizationSpecException>> singletonListIterator0 = new SingletonListIterator<Vector<SQLInvalidAuthorizationSpecException>>(vector0);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) singletonListIterator0, (Object) vector0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1b;|PrY");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("1b;|PrY", defaultEquator0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.size((Iterator<?>) null);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) null, (Iterator<? extends String>) resettableIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) objectArrayIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-2293), false, false, (-2293), (-2293));
      DataTruncation dataTruncation1 = new DataTruncation((-2194), false, false, (-2293), (-2293), dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation1);
      dataTruncation1.fillInStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("<|6_1ef;+qoI[{KPI", "t7|)U<5-ZN9C:QN");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<|6_1ef;+qoI[{KPI", dataTruncation1);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("t7|)U<5-ZN9C:QN", "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "Array class must not be null", (-2194), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("qkhr{EdOR{Pt[ jpl", "B8L}ZN9Ic`5!U");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("<|6_1ef;+qoI[{KPI");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 463L);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) skippingIterator0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "cQ`#MS_vhG@");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("cQ`#MS_vhG@", "", 777);
      Vector<Object> vector0 = new Vector<Object>();
      int int0 = 2879;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("cQ`#MS_vhG@", "", 2879);
      vector0.add((Object) sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null, (Collection<? super SQLClientInfoException>) vector0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null, (Collection<? super SQLClientInfoException>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>(hashtable0);
      entrySetMapIterator0.toString();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) entrySetMapIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("DS'_6,", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(list0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("MapIterator[]", "yF{gp", sQLFeatureNotSupportedException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UgD*SJFzryz", sQLFeatureNotSupportedException3);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("yF{gp", sQLFeatureNotSupportedException0);
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      MapIterator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>>(mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>(hashtable0);
      entrySetMapIterator0.toString();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) entrySetMapIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      vector0.add((Object) sQLFeatureNotSupportedException0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<SQLDataException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator0);
      assertNotNull(iterable0);
      
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Object>) nullIsExceptionPredicate0);
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.isEmpty(resettableIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-89), true, true, (-89), (-89));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/?o{~@qLm|&`!3;JE]", "org.apache.commons.collections4.map.AbstractHashedMap");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, (-2323), 1534);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("D%u", (String) null, 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("v!{])``W", "WJ}%V0", sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.FilterIterator", (String) null, (-1444));
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(comparatorPredicate0, comparatorPredicate0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(anyPredicate0, closure0, closure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(5, ifClosure0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 5);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", ", size=");
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("1[Tq-N=sR8oyP:t+}(", sQLTransactionRollbackException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.size(zippingIterator0);
      IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 1, 125);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) singletonIterator0, (long) 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) boundedIterator0, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 9
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Object) vector0);
      HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<DataTruncation, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) zippingIterator0;
      DataTruncation dataTruncation0 = new DataTruncation(1162, true, true, 1, 2995);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      iteratorArray0[1] = (Iterator<DataTruncation>) listIterator0;
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(iteratorArray0[1]);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIteratorWrapper0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableListIterator0;
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      iteratorArray0[4] = (Iterator<DataTruncation>) resettableListIterator1;
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<DataTruncation>) listIterator0, (long) 1162);
      iteratorArray0[5] = (Iterator<DataTruncation>) skippingIterator0;
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      TruePredicate.truePredicate();
      OrderedMapIterator<SQLNonTransientConnectionException, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 5);
      IteratorUtils.getIterator(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-204);
      String string0 = ";KXmo3FP\"BWAc3\"";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) ";KXmo3FP\"BWAc3\"");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 463L);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) skippingIterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "cQ`#MS_vhG@");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("cQ`#MS_vhG@", "", 777);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("cQ`#MS_vhG@", sQLFeatureNotSupportedExceptionArray0[2]);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException2;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) resettableListIterator0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1);
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(list0);
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) reverseListIterator0;
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1, true);
      iteratorArray0[4] = (Iterator<SQLFeatureNotSupportedException>) singletonIterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray1 = new SQLFeatureNotSupportedException[5];
      sQLFeatureNotSupportedExceptionArray1[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Entry does not exist: ", "cQ`#MS_vhG@", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray1[3] = sQLFeatureNotSupportedException3;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("cQ`#MS_vhG@", sQLFeatureNotSupportedExceptionArray0[0]);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      sQLFeatureNotSupportedExceptionArray1[4] = sQLFeatureNotSupportedException4;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator2 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray1);
      iteratorArray0[5] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator2;
      MapIterator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>>(mapIterator0);
      MapIterator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>>) abstractMapIteratorDecorator0);
      iteratorArray0[6] = (Iterator<SQLFeatureNotSupportedException>) mapIterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Properties properties0 = new Properties();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 558;
      intArray0[8] = 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("a#o`og&", "?iCSu<~o/3<A", 0, intArray0, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(", ", "#V;6 ", sQLRecoverableException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      properties0.put(sQLRecoverableException1, allPredicate0);
      IteratorUtils.getIterator(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OPrpb;wDAb2h@r)ujh");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 5);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) orderedIterator0;
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator(iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(vector0);
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) reverseListIterator0;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = null;
      int int0 = 2424;
      int int1 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 2424, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) vector0);
      SQLDataException sQLDataException0 = new SQLDataException("B");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) equalPredicate0);
      Boolean[] booleanArray0 = new Boolean[7];
      PredicateTransformer<ArrayDeque<IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<IIOMetadataNode>>(equalPredicate0);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[2] = boolean2;
      predicateTransformer0.transform(arrayDeque0);
      Hashtable<SQLWarning, ClientInfoStatus> hashtable0 = new Hashtable<SQLWarning, ClientInfoStatus>();
      IteratorUtils.singletonListIterator((Hashtable<ServiceLoader, HashMap>) hashtable0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 50;
      longArray0[1] = (long) 996;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 50;
      longArray0[4] = (long) 996;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) 996;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("v<_TG", "?U!t@'", 996, longArray0, sQLDataException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      EqualPredicate.equalPredicate((SQLException) batchUpdateException0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*uAFJ{1+|h?{I~mb[", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("}=fN");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 50, (-1181));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Vector<SQLNonTransientConnectionException>>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Vector<SQLException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("AYa PjpV6C3)$6Z", ")U VD}\"d;hV4", (-204));
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("AYa PjpV6C3)$6Z", "WJ}%V0", 0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException1);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("AYa PjpV6C3)$6Z", "AYa PjpV6C3)$6Z", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("x@VO?qG", "x@VO?qG");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "WJ}%V0", 100);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", "rt+T'Jb", 0);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Properties properties0 = new Properties();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 558;
      intArray0[8] = 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("a#o`og&", "At$Fel.", 0, intArray0, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(", ", "#V;6 ", sQLRecoverableException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      properties0.put(sQLRecoverableException1, allPredicate0);
      IteratorUtils.getIterator(properties0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) objectArrayIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]", "\\HQ", 1577);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("\\HQ", (Equator<Object>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\\HQ", "]", 10, sQLTransientConnectionException0);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLTransactionRollbackException>) transformer0, (Transformer<? super Object, ? extends SQLTransactionRollbackException>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("|j)8Zs1A=Rz2PuA~");
      Transformer<Object, IIOMetadataNode> transformer1 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) transformer1);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) singletonListIterator0, (Closure<? super SQLTimeoutException>) closure0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(comparatorPredicate0, comparatorPredicate0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(anyPredicate0, closure0, closure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(5, ifClosure0);
      Closure<SQLTransientException> closure1 = WhileClosure.whileClosure((Predicate<? super SQLTransientException>) orPredicate0, (Closure<? super SQLTransientException>) forClosure0, true);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) zippingIterator0, (Closure<? super SQLTimeoutException>) closure1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("}ZV5Xhl%z[h", sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("G", sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 5, 3043, sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(t((v#`\"~-2'h.gB", "\\HQ", 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0, (Equator<Object>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|j)8Zs1A=Rz2PuA~", "", 1, sQLTransientConnectionException0);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, SQLTransactionRollbackException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends SQLTransactionRollbackException>) transformer0, (Transformer<? super Object, ? extends SQLTransactionRollbackException>) transformer0);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) singletonListIterator0, (Closure<? super SQLTimeoutException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      int int0 = (-1524);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, (-1524), (-1524));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("AYa PjpV6C3)$6Z", ")U VD}\"d;hV4", (-204));
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("AYa PjpV6C3)$6Z", "WJ}%V0", 0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException1);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("AYa PjpV6C3)$6Z", "AYa PjpV6C3)$6Z", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("x@VO?qG", "x@VO?qG");
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "WJ}%V0", 100);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", "rt+T'Jb", 0);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) objectArrayIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B=aS", "B=aS", 0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("u%>p", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("u%>p", "u%>p", 0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("B=aS", "1[Tq-N=sR8oyP:t+}(");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("B=aS", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1037), true, false, (-2323), (-2323));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 662, (-1037));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("e9F0V\"ajw&XwU1G+");
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 1, (-1), sQLTimeoutException0);
      sQLTimeoutException0.initCause(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, (-2670), (-2670));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ListIterator<InstanceofPredicate> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator1, 1);
      IteratorUtils.loopingListIterator(list0);
      SQLDataException sQLDataException0 = new SQLDataException("vei|JfNj=&&twd(");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("vei|JfNj=&&twd(", defaultEquator0);
      ListIterator<InstanceofPredicate> listIterator2 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) listIterator2, (Predicate<? super InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) comparatorPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Transformer<Object, SQLNonTransientException> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLInvalidAuthorizationSpecException0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Object) vector0);
      HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<SQLException, SQLException, SQLIntegrityConstraintViolationException> biFunction0 = (BiFunction<SQLException, SQLException, SQLIntegrityConstraintViolationException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        hashMap0.merge(linkedList0, (SQLIntegrityConstraintViolationException) null, biFunction0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      OrderedMapIterator<LinkedList<SQLRecoverableException>, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.contains((Iterator<LinkedList<SQLRecoverableException>>) orderedMapIterator0, (Object) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "";
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.getElementsByTagNameNS("fm", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "1C:gpD=";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("1C:gpD=");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("%1c7JH)SOi", sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer1);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.size(listIterator0);
      MapIterator<SQLTimeoutException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) mapIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(1);
      BiFunction<String, Object, ClientInfoStatus> biFunction0 = (BiFunction<String, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      hashtable0.compute("InstantiateFactory: Constructor must be public", biFunction0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 100, hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) objectArrayIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-2293), false, false, (-2293), (-2293));
      DataTruncation dataTruncation1 = new DataTruncation((-2194), false, false, (-2293), (-2293), dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation1);
      dataTruncation1.fillInStackTrace();
      IteratorUtils.size(singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Hashtable<IIOMetadataNode, Object> hashtable0 = new Hashtable<IIOMetadataNode, Object>();
      Enumeration<IIOMetadataNode> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayIterator<Properties> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Properties>(instanceofPredicate0, (-1422));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyIterator();
      TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0, sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "Iterator must not be null", 0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("Iterator must not be null", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "9!epnPbd<7ml", (-2241), sQLNonTransientException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("Iterator must not be null");
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-2241));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) resettableIterator0;
      MapIterator<SQLClientInfoException, Stack<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, Stack<SQLFeatureNotSupportedException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, Stack<SQLFeatureNotSupportedException>>(mapIterator0);
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) abstractMapIteratorDecorator0;
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = null;
      // Undeclared exception!
//      try { 
        abstractMapIteratorDecorator0.next();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // Iterator contains no elements
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(t((v#`\"~-2'h.gB", "H", 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0, (Equator<Object>) null);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(39);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(arrayList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Enumeration must not be null");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "Array class must not be null", "934f", "934f");
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0;
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 1L, 0L);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) boundedIterator0;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("pDxz>&rrwJ&u+si_`", "", (-1), sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Array class must not be null", sQLDataException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("]", (String) null, (-1), sQLRecoverableException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("]");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("*> MvWC", "org.apache.commons.collections4.functors.AndPredicate", sQLNonTransientConnectionException0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("1><sqG", "*> MvWC", (-5497), sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException6);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException8 = new SQLInvalidAuthorizationSpecException("", "z}eSX9':`6z", (-2602));
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException8;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException6, true);
      iteratorArray0[3] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      iteratorArray0[4] = (Iterator<SQLInvalidAuthorizationSpecException>) objectArrayIterator0;
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      iteratorArray0[5] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLSyntaxErrorException0, (-2602));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      DataTruncation dataTruncation0 = new DataTruncation((-2323), false, false, (-2323), (-2323));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation((-3240), false, false, (-1266), 61, sQLTimeoutException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "t7|)U<5-ZN9C:QN");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation1, (-1282), 892);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayList0.iterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.emptyMapIterator();
      String string0 = "$b]fY(F!";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "$b]fY(F!", (Throwable) null);
      HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, sQLIntegrityConstraintViolationException0);
      EntrySetMapIterator<LinkedList<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<LinkedList<Object>, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<Object>, SQLIntegrityConstraintViolationException>) entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>(hashtable0);
      entrySetMapIterator0.toString();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) entrySetMapIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) singletonIterator0, 613);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) list0);
      predicateArray0[0] = predicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0, (Equator<Object>) null);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate1, equalPredicate0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(anyPredicate0, closure0, closure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(654, ifClosure0);
      WhileClosure.whileClosure((Predicate<? super SQLTransientException>) predicateArray0[1], (Closure<? super SQLTransientException>) forClosure0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MapIterator[]", "MapIterator[]");
      ArrayIterator<SQLTimeoutException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTimeoutException>(sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Properties properties0 = new Properties();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 2840, 2840);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) singletonIterator0, (long) 125);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) singletonIterator0, 125);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 124
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, TreeSet<SQLException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<Properties, SQLTransactionRollbackException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransactionRollbackException>(orderedMapIterator1);
      OrderedMapIterator<Properties, SQLTransactionRollbackException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) orderedMapIterator2);
      iteratorArray0[0] = iterator0;
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) orderedMapIterator1, (Iterator<? extends Properties>) orderedMapIterator2);
      iteratorArray0[1] = iterator1;
      IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>[]) iteratorArray0);
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-739);
      intArray0[2] = 1073741824;
      intArray0[3] = 3638;
      intArray0[4] = 2413;
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, (Throwable) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((Throwable) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-739);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("$$]{k%CP4uH?Zz(", "", 3539, longArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "lf=a_C?1*SSp{Mvm1av", 3638, intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((TreeSet<Iterator<HashMap<SQLDataException, IIOMetadataNode>>>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iterator", "cQ`#MS_vhG@", (Throwable) null);
      linkedHashSet0.add(sQLTransientConnectionException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 463L);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) skippingIterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("iterator", "cQ`#MS_vhG@");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "cQ`#MS_vhG@");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("iterator", "", (-614), sQLRecoverableException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Entry does not exist: ", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("cQ`#MS_vhG@", "", 777);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("cQ`#MS_vhG@", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("iterator");
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) resettableListIterator0;
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException2);
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) listIterator1;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1);
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(list0);
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) reverseListIterator0;
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException4, true);
      iteratorArray0[4] = (Iterator<SQLFeatureNotSupportedException>) singletonIterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray1 = new SQLFeatureNotSupportedException[5];
      sQLFeatureNotSupportedExceptionArray1[0] = sQLFeatureNotSupportedException4;
      sQLFeatureNotSupportedExceptionArray1[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray1[2] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("Entry does not exist: ", "cQ`#MS_vhG@", sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray1[3] = sQLFeatureNotSupportedException7;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("cQ`#MS_vhG@", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      sQLFeatureNotSupportedExceptionArray1[4] = sQLFeatureNotSupportedException8;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator2 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray1);
      iteratorArray0[5] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator2;
      MapIterator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>>(mapIterator0);
      MapIterator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Class<SQLFeatureNotSupportedException>>) abstractMapIteratorDecorator0);
      iteratorArray0[6] = (Iterator<SQLFeatureNotSupportedException>) mapIterator1;
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>(hashtable0);
      entrySetMapIterator0.toString();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) entrySetMapIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      vector0.add((Object) sQLFeatureNotSupportedException0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator0);
      Hashtable<SQLTransientConnectionException, LinkedHashSet<SQLNonTransientException>> hashtable1 = new Hashtable<SQLTransientConnectionException, LinkedHashSet<SQLNonTransientException>>();
      EntrySetMapIterator<SQLTransientConnectionException, LinkedHashSet<SQLNonTransientException>> entrySetMapIterator1 = new EntrySetMapIterator<SQLTransientConnectionException, LinkedHashSet<SQLNonTransientException>>(hashtable1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator1, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) vector0);
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) equalPredicate0);
      Boolean[] booleanArray0 = new Boolean[7];
      PredicateTransformer<ArrayDeque<IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<IIOMetadataNode>>(equalPredicate0);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[4] = boolean4;
      predicateTransformer0.transform(arrayDeque0);
      booleanArray0[5] = boolean0;
      Boolean boolean5 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[6] = boolean5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) boolean5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) vector0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) equalPredicate0);
      Boolean[] booleanArray0 = new Boolean[7];
      PredicateTransformer<ArrayDeque<IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<IIOMetadataNode>>(equalPredicate0);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[6] = boolean6;
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(booleanArray0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Stack<HashSet<InstanceofPredicate>> stack0 = new Stack<HashSet<InstanceofPredicate>>();
      IteratorUtils.loopingListIterator((List<HashSet<InstanceofPredicate>>) stack0);
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) comparator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "X,'6$3$jgm,!TR";
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("X,'6$3$jgm,!TR");
      singletonIterator0.next();
      singletonIterator0.reset();
      singletonIterator0.reset();
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) singletonIterator0);
      int int0 = 1325;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "X,'6$3$jgm,!TR", 1325);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1448, (-2336));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      dataTruncation0.getNextWarning();
      dataTruncation0.setNextWarning((SQLWarning) null);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) singletonIterator0, 0L);
      IteratorUtils.get((Iterator<DataTruncation>) singletonIterator0, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) mapIterator0, (Iterator<? extends SQLNonTransientException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLWarning sQLWarning0 = new SQLWarning(" ldwb>~EvmCTZN@");
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (-2278), (-2962));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) linkedHashSet0, 0, (-599));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<SQLException, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends Boolean>) hashtable0);
      Predicate<SQLRecoverableException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLRecoverableException, Boolean>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate0, 2361);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MapIterator<Object, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, LinkedList<Closure>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, LinkedList<Closure>>) mapIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) mapIterator1, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 1334);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, (long) 0, (long) 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.contains((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Object) vector0);
      HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<LinkedList<Object>, SQLIntegrityConstraintViolationException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<DataTruncation, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) zippingIterator0;
      DataTruncation dataTruncation0 = new DataTruncation(1162, true, true, 1, 2995);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      iteratorArray0[1] = (Iterator<DataTruncation>) listIterator0;
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(iteratorArray0[1]);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIteratorWrapper0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableListIterator0;
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      iteratorArray0[4] = (Iterator<DataTruncation>) resettableListIterator1;
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<DataTruncation>) listIterator0, (long) 1162);
      iteratorArray0[5] = (Iterator<DataTruncation>) skippingIterator0;
      ResettableListIterator<DataTruncation> resettableListIterator2 = IteratorUtils.emptyListIterator();
      iteratorArray0[6] = (Iterator<DataTruncation>) resettableListIterator2;
      ZippingIterator<DataTruncation> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) zippingIterator1, 43);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 41
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      int int0 = 3043;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) listIterator0, 3043);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3042
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
