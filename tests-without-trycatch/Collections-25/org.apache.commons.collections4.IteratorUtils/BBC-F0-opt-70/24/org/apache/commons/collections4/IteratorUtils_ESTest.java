/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 10:14:46 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 8);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      ResettableListIterator<ArrayDeque<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      IteratorUtils.get((Iterator<ArrayDeque<SQLTransientConnectionException>>) resettableListIterator0, 0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string1 = "o:z|Gu:{$3CI:";
      String string2 = "org.apache.commons.collections4.functors.CloneTransformer";
      String string3 = "Predicate must not be null";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Predicate must not be null");
      int int0 = (-2346);
      SQLDataException sQLDataException0 = new SQLDataException("o:z|Gu:{$3CI:", "org.apache.commons.collections4.functors.CloneTransformer", (-2346));
      int int1 = 2862;
      DataTruncation dataTruncation0 = new DataTruncation((-2346), false, true, (-2346), 2862, sQLDataException0);
      sQLDataException0.initCause(dataTruncation0);
      dataTruncation0.fillInStackTrace();
      sQLDataException0.getLocalizedMessage();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLDataException0);
      // Undeclared exception!
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "6*[sXQaRQI/k>T2\"b~", (-3013));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) singletonListIterator0, (Predicate<? super SQLRecoverableException>) nullIsTruePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 8);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      OrderedMapIterator<BatchUpdateException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLDataException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<BatchUpdateException>) orderedMapIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) stack0);
      int int0 = 2286;
      int int1 = 122;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLWarning[]) null, 2286, 122);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator("maN-", (Transformer<? super String, ? extends String>) transformer0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer(100);
      IteratorUtils.getIterator(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringTokenizer stringTokenizer0 = new StringTokenizer("bf=DS", "bf=DS");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      Integer integer0 = new Integer(126);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      Throwable throwable0 = sQLSyntaxErrorException0.fillInStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", throwable0);
      sQLSyntaxErrorException0.getSuppressed();
      sQLSyntaxErrorException0.setNextException(sQLTransientException0);
      sQLSyntaxErrorException0.spliterator();
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 8);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[5] = class5;
      Class<Properties> class6 = Properties.class;
      classArray0[6] = class6;
      Class<Properties> class7 = Properties.class;
      classArray0[7] = class7;
      int int0 = 1;
      int int1 = (-2775);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(classArray0, 1, (-2775));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Transformer<SQLNonTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("add() is not supported by this iterator");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) objectArrayListIterator0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "Equator must not be null.");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Predicate<BatchUpdateException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super BatchUpdateException>) predicate0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate1);
      IteratorUtils.pushbackIterator((Iterator<?>) resettableListIterator0);
      Stack<Closure<Object>>[] stackArray0 = (Stack<Closure<Object>>[]) Array.newInstance(Stack.class, 0);
      IteratorUtils.arrayListIterator(stackArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      ArrayDeque<InstanceofPredicate> arrayDeque1 = arrayDeque0.clone();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque1);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super BatchUpdateException>) predicate0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ExceptionTransformer.exceptionTransformer();
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) hashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLNonTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("1C<}df4v)%,?9@N'}");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLException sQLException0 = new SQLException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1C<}df4v)%,?9@N'}", sQLException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("d", "");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("[", "d", 1381, sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("%ne%1=] =@m,@Da", "[", 1381);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "ListIterator must not be null", 1310);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("[", "ListIterator must not be null");
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException("&,)Rx&!oq@sE9!K", "0", sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "1C<}df4v)%,?9@N'}", "ListIterator must not be null", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '1C<}df4v)%,?9@N'}' on 'class java.sql.SQLSyntaxErrorException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 8);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      Transformer<SQLNonTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, 1437, (Throwable) null);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "Gu0:KW\"ORKylP>^q", "0!Lvv_S2x3%u", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 1680;
      intArray0[5] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLNonTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("1C<}df4v)%,?9@N'}");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "1C<}df4v)%,?9@N'}");
      IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) priorityQueue0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IdentityPredicate.identityPredicate((SQLException) sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      Transformer<SQLException, String>[] transformerArray0 = (Transformer<SQLException, String>[]) Array.newInstance(Transformer.class, 2);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      transformerArray0[0] = transformer0;
      Transformer<SQLException, String> transformer1 = ConstantTransformer.constantTransformer("");
      transformerArray0[1] = transformer1;
      SwitchTransformer<SQLFeatureNotSupportedException, String> switchTransformer0 = new SwitchTransformer<SQLFeatureNotSupportedException, String>((Predicate<? super SQLFeatureNotSupportedException>[]) null, transformerArray0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) switchTransformer0, "", "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("H]&&Vq", (Transformer<? super String, ? extends String>) transformer0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super String>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(71);
      IteratorUtils.getIterator(integer0);
      int[] intArray0 = new int[7];
      intArray0[0] = 71;
      intArray0[1] = 71;
      intArray0[2] = 71;
      intArray0[3] = 71;
      intArray0[4] = 71;
      intArray0[5] = 10;
      intArray0[6] = 71;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      DefaultEquator<BatchUpdateException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<BatchUpdateException> predicate0 = EqualPredicate.equalPredicate(batchUpdateException0, (Equator<BatchUpdateException>) defaultEquator0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer(100);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("07/;?Lq", (Class<?>[]) null, (Object[]) null);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("07/;?Lq", (Transformer<? super String, ? extends String>) invokerTransformer0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      closureArray0[2] = (Closure<Object>) transformerClosure0;
      Closure<Object> closure1 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      IteratorUtils.apply(iterator0, (Closure<? super String>) closure1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator(node0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer(100);
      IteratorUtils.getIterator(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<Integer, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      IteratorUtils.toString((Iterator<Integer>) entrySetMapIterator0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("NodeList must not be null", "NodeList must not be null", false);
      ConstantTransformer<SQLTransactionRollbackException, StringTokenizer> constantTransformer0 = new ConstantTransformer<SQLTransactionRollbackException, StringTokenizer>(stringTokenizer0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends StringTokenizer>) constantTransformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("delimiter may not be null", sQLSyntaxErrorException0);
      priorityQueue0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) priorityQueue0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate1);
      Boolean boolean0 = predicateTransformer0.transform((String) null);
      SingletonListIterator<Boolean> singletonListIterator0 = new SingletonListIterator<Boolean>(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(3255);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = "Entry does not exist: ";
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("Entry does not exist: ", (Transformer<? super String, ? extends String>) transformer0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[0] = closure0;
      closureArray0[3] = closure0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nullIsExceptionPredicate0, closure0, closure0);
      closureArray0[4] = (Closure<Object>) ifClosure0;
      ChainedClosure<String> chainedClosure0 = new ChainedClosure<String>(closureArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super String>) chainedClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) hashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, (String) null, "qiXr.", "qiXr.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      LoopingIterator<SQLRecoverableException> loopingIterator0 = new LoopingIterator<SQLRecoverableException>(stack0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) loopingIterator0, 972);
      stack0.add((SQLRecoverableException) null);
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(stack0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) loopingIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      StringValueTransformer.stringValueTransformer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) transformer0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      TreeSet<BatchUpdateException> treeSet1 = new TreeSet<BatchUpdateException>((SortedSet<BatchUpdateException>) treeSet0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) treeSet1);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, 0L, 1L);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) boundedIterator0);
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 489, 489);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 2614);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("me{GlUCi", "me{GlUCi");
      arrayDeque1.add(sQLTransientConnectionException0);
      arrayDequeArray0[4] = arrayDequeArray0[0];
      ArrayDeque<SQLTransientConnectionException> arrayDeque4 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[4] = arrayDeque4;
      ResettableListIterator<ArrayDeque<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      IteratorUtils.get((Iterator<ArrayDeque<SQLTransientConnectionException>>) resettableListIterator0, 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 13, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      OrderedIterator<SQLClientInfoException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) orderedIterator1, class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Transformer<Object, SQLTransactionRollbackException> transformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedIterator1, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) transformer0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 4);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      iteratorArray0[0] = (Iterator<SQLException>) zippingIterator0;
      SQLDataException sQLDataException0 = new SQLDataException("PrototypeCloneFactory: The clone method must exist and be public ", sQLTransactionRollbackException0);
      ArrayListIterator<SQLException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLException>(sQLDataException0, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedIterator0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) orderedIterator0, class0);
      Class<Object> class1 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      EmptyMapIterator.emptyMapIterator();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, (-3642L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer integer0 = new Integer(100);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("HuQ]~18X|V02Tm6X[=", "", 0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(singletonIterator0);
      IteratorUtils.zippingIterator(iterator0, iterator0, iterator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("me{GlUCi", "me{GlUCi");
      arrayDeque1.add(sQLTransientConnectionException0);
      arrayDequeArray0[4] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque4 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[4] = arrayDeque4;
      arrayDequeArray0[5] = arrayDeque4;
      ResettableListIterator<ArrayDeque<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      IteratorUtils.get((Iterator<ArrayDeque<SQLTransientConnectionException>>) resettableListIterator0, 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "me{GlUCi", 0, sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "", sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ExceptionTransformer.exceptionTransformer();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be null");
      sQLTimeoutException0.getSuppressed();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      ConstantFactory<SQLFeatureNotSupportedException> constantFactory0 = new ConstantFactory<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IteratorUtils.zippingIterator(iterator0, iterator0, iterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<?>) null, (Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry", "JcT/((MgtU+#P p,", sQLSyntaxErrorException0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLWarning0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      SQLException sQLException0 = new SQLException();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("JcT/((MgtU+#P p,");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Predicate must not be null");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode(":~0q");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("List must not be null");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator1);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Enumeration must not be null", "Enumeration must not be null", sQLException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$Values", "", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Array class must not be null", "k:)", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("InstantiateFactory: Constructor threw an exception", "org.apache.commons.collections4.map.AbstractHashedMap$Values", 773, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("D<i,9u%n2$}c(G'", "", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("D<i,9u%n2$}c(G'");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ListIteratorWrapper<SQLTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientException>(objectArrayIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) listIteratorWrapper0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<String>) null, 33);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      SQLException sQLException0 = new SQLException();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      int[] intArray0 = new int[4];
      intArray0[0] = 61;
      intArray0[1] = (-2544);
      intArray0[2] = 4032;
      intArray0[3] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("uCW&", intArray0);
      Integer integer0 = new Integer((-3044));
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "uCW&", true);
      IteratorUtils.getIterator(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 4032, 229);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>(vector0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) vector0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "transformer may not be null", 1, sQLDataException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", 1);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r=)YDr]acJK");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 1);
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, 18L);
      IteratorUtils.zippingIterator((Iterator<?>) boundedIterator0, (Iterator<?>) resettableIterator0, (Iterator<?>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T`r9H?7aA*}'nphS(");
      propertiesArray0[0] = properties0;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.toString((Iterator<Properties>) objectArrayListIterator0, (Transformer<? super Properties, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      StringValueTransformer.stringValueTransformer();
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 1);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("qsjZi>}@VKFmt$");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("qsjZi>}@VKFmt$", ", ", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(", ", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, 0L, 0L);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) boundedIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      ArrayListIterator<ArrayDeque<SQLNonTransientException>> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<ArrayDeque<SQLNonTransientException>>(predicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      SQLException sQLException0 = new SQLException();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>(vector0);
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) vector0);
      IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedIterator0, (Iterator<?>) iterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("prefix may not be null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UamW<?!7pSLs_", sQLTimeoutException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, predicate0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>(0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      HashSet<Object> hashSet0 = new HashSet<Object>(0);
      LinkedList<SQLFeatureNotSupportedException> linkedList1 = new LinkedList<SQLFeatureNotSupportedException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      int int0 = 0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wgZ}h";
      stringArray0[1] = "Input Object must not be null";
      stringArray0[2] = "Input Object must not be null";
      stringArray0[3] = "wgZ}h";
      stringArray0[4] = "wgZ}h";
      String string0 = ",w&R51i}'2~FUVkMDP";
      stringArray0[5] = ",w&R51i}'2~FUVkMDP";
      stringArray0[6] = "Input Object must not be null";
      int int1 = 1;
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 1);
      IteratorUtils.zippingIterator((Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) transformer0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      ArrayList<Predicate<Object>>[] arrayListArray0 = (ArrayList<Predicate<Object>>[]) Array.newInstance(ArrayList.class, 8);
      arrayListArray0[0] = arrayList0;
      arrayListArray0[1] = arrayList0;
      arrayListArray0[2] = arrayList0;
      arrayListArray0[3] = arrayList0;
      arrayListArray0[4] = arrayList0;
      arrayListArray0[5] = arrayList0;
      arrayListArray0[6] = arrayList0;
      arrayListArray0[7] = arrayList0;
      ObjectArrayListIterator<ArrayList<Predicate<Object>>> objectArrayListIterator0 = new ObjectArrayListIterator<ArrayList<Predicate<Object>>>(arrayListArray0);
      ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ArrayList<Predicate<Object>>>) objectArrayListIterator0, (Transformer<? super ArrayList<Predicate<Object>>, String>) transformer1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("lx%W6%4De fZ c", "[[], [], [], [], [], [], [], []]");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) arrayList0, 1855, 1855);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      ArrayList<Predicate<Object>> arrayList1 = new ArrayList<Predicate<Object>>();
      ArrayList<Predicate<Object>> arrayList2 = new ArrayList<Predicate<Object>>();
      ArrayList<Predicate<Object>> arrayList3 = new ArrayList<Predicate<Object>>();
      ArrayList<Predicate<Object>> arrayList4 = new ArrayList<Predicate<Object>>();
      ArrayList<Predicate<Object>>[] arrayListArray0 = (ArrayList<Predicate<Object>>[]) Array.newInstance(ArrayList.class, 5);
      arrayListArray0[1] = arrayList0;
      ArrayList<Predicate<Object>> arrayList5 = new ArrayList<Predicate<Object>>();
      arrayListArray0[2] = arrayList5;
      arrayListArray0[3] = arrayList3;
      arrayListArray0[4] = arrayList1;
      ObjectArrayListIterator<ArrayList<Predicate<Object>>> objectArrayListIterator0 = new ObjectArrayListIterator<ArrayList<Predicate<Object>>>(arrayListArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ArrayList<Predicate<Object>>>) objectArrayListIterator0, (Transformer<? super ArrayList<Predicate<Object>>, String>) transformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("]", "[null, null, null, null, null]");
      Properties properties0 = new Properties();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]", "`-E14?Ezp", 0, intArray0, sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 14, 14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "";
      IteratorUtils.objectGraphIterator((Object) "", (Transformer<? super Object, ?>) null);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLNonTransientConnectionException, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<ArrayDeque<SQLTransientConnectionException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("H]&&Vq", (Transformer<? super String, ? extends String>) transformer0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super String>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<LinkedList<SQLInvalidAuthorizationSpecException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "L+Wb", "L+Wb", (-1573));
      StackTraceElement stackTraceElement1 = new StackTraceElement("L+Wb", "", "L+Wb", (-1573));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Hashtable<Stack, SQLTransactionRollbackException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      SQLException sQLException0 = new SQLException();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      IteratorUtils.toListIterator((Iterator<? extends String>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[2] = arrayDeque1;
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("me{GlUCi", "me{GlUCi");
      sQLTransientConnectionException0.getLocalizedMessage();
      arrayDeque0.add(sQLTransientConnectionException0);
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      StackTraceElement stackTraceElement0 = new StackTraceElement("me{GlUCi", "yGtXWIHC3|hrj5fi", "transformer may not be null", 1530);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      OrderedIterator<SQLClientInfoException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) orderedIterator1, class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EmptyMapIterator.emptyMapIterator();
      int int0 = (-80);
      StackTraceElement stackTraceElement0 = new StackTraceElement("transformer may not be null", "B_T}r$", "transformer may not be null", (-80));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2179;
      intArray0[2] = 1;
      intArray0[3] = 3846;
      intArray0[4] = 91;
      MockThrowable mockThrowable0 = new MockThrowable("NodeList must not be null");
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      DefaultEquator<SQLNonTransientException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLDataException0, (Equator<SQLNonTransientException>) defaultEquator0);
      NotPredicate<SQLInvalidAuthorizationSpecException> notPredicate0 = new NotPredicate<SQLInvalidAuthorizationSpecException>(predicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      StackTraceElement stackTraceElement0 = new StackTraceElement("L+Wb", "L+Wb", "L+Wb", (-4));
      String string0 = "@]";
      MapIterator<SQLClientInfoException, SQLTransientConnectionException> mapIterator1 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) mapIterator1, (-366L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 2158);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ListIterator must not be null");
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      ExceptionTransformer.exceptionTransformer();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      ArrayIterator<Properties> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Properties>(ifTransformer0, 0, 1815);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" ");
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) uniquePredicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(uniquePredicate0, transformer0, transformer0);
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) ifTransformer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".p/A/TIibxD:?T)");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLTimeoutException0);
      Throwable throwable0 = sQLTimeoutException0.initCause(sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(throwable0);
      ConstantFactory.constantFactory(sQLFeatureNotSupportedException0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2034);
      intArray0[1] = 3854;
      intArray0[2] = 91;
      intArray0[3] = 91;
      intArray0[4] = 91;
      intArray0[5] = 3854;
      intArray0[6] = 3854;
      intArray0[7] = 1;
      intArray0[8] = 3854;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".p/A/TIibxD:?T)", intArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator(equalPredicate0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(".p/A/TIibxD:?T)", throwable0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1, (-2034));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) instanceofPredicate0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) instanceofPredicate0);
      ExceptionTransformer.exceptionTransformer();
      StringValueTransformer.stringValueTransformer();
      Comparator<Properties> comparator1 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyMapIterator.emptyMapIterator();
      int int0 = 0;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate1;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      instanceofPredicateArray0[4] = instanceofPredicate0;
      instanceofPredicateArray0[5] = instanceofPredicate0;
      instanceofPredicateArray0[6] = instanceofPredicate0;
      instanceofPredicateArray0[7] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      IteratorUtils.loopingListIterator((List<InstanceofPredicate>) linkedList0);
      MapIterator<InstanceofPredicate, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<InstanceofPredicate, SQLNonTransientConnectionException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends InstanceofPredicate, ? extends SQLNonTransientConnectionException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) mapIterator1, (Predicate<? super InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[5];
      intArray0[1] = 91;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) listIterator0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 3);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1);
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf((Collection<Locale.Category>) enumSet1);
      enumSetArray0[1] = enumSet2;
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, (Predicate<? super EnumSet<Locale.Category>>) transformerPredicate0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer1 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) mapIterator0, (Transformer<? super SQLTransientException, ? extends SQLInvalidAuthorizationSpecException>) transformer1);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) instanceofPredicate1);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      nullIsTruePredicate0.evaluate((Object) null);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) linkedList0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) priorityQueue2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Iterator<Locale.Category> iterator0 = null;
      IteratorUtils.size((Iterator<?>) null);
      Iterator<Properties> iterator1 = null;
      SQLException sQLException0 = new SQLException();
      String string0 = "L+Wb";
      String string1 = null;
      StackTraceElement stackTraceElement0 = null;
//      try {
        stackTraceElement0 = new StackTraceElement((String) null, (String) null, "L+Wb", 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) instanceofPredicate0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      StringValueTransformer.stringValueTransformer();
      MapIterator<Properties, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) mapIterator0, 357L, 0L);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator1, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) boundedIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      SQLException sQLException0 = new SQLException();
      String string0 = "L+Wb";
      String string1 = "~";
      StackTraceElement stackTraceElement0 = new StackTraceElement("a)", "teRXY`4nxh]HZp", "~", (-860));
      StackTraceElement stackTraceElement1 = new StackTraceElement("`j[x~t,<>QF", "`j[x~t,<>QF", "", (-860));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("a)", sQLException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[9];
      instanceofPredicateArray0[0] = instanceofPredicate1;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate1;
      instanceofPredicateArray0[3] = instanceofPredicate1;
      instanceofPredicateArray0[4] = instanceofPredicate0;
      instanceofPredicateArray0[5] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[6] = instanceofPredicate2;
      Class<SQLException> class2 = SQLException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[7] = instanceofPredicate3;
      instanceofPredicateArray0[8] = instanceofPredicate1;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      int int0 = 14;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, String>) null, "wgZ}h", "Input Object must not be null", "%~J\"AUr!");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) instanceofPredicate0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) instanceofPredicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      StringValueTransformer.stringValueTransformer();
      Comparator<Properties> comparator1 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Properties, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) mapIterator0, 1L, 0L);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator1, (Iterator<? extends Properties>) boundedIterator0, (Iterator<? extends Properties>) boundedIterator0);
      IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      sQLClientInfoException0.printStackTrace();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue2 = new PriorityQueue<SQLTransactionRollbackException>();
      ResettableIterator<PriorityQueue<SQLTransactionRollbackException>> resettableIterator0 = IteratorUtils.singletonIterator(priorityQueue2);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category2, locale_Category0, locale_Category1);
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf((Collection<Locale.Category>) enumSet0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 4);
      enumSetArray0[0] = enumSet0;
      enumSetArray0[1] = enumSet1;
      enumSetArray0[2] = enumSet2;
      enumSetArray0[3] = enumSet1;
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, (Predicate<? super EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[5];
      intArray0[1] = 91;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) listIterator0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 3);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1);
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf((Collection<Locale.Category>) enumSet1);
      enumSetArray0[1] = enumSet2;
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, (Predicate<? super EnumSet<Locale.Category>>) transformerPredicate0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, 91);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("_5]an(xekm}8aV", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "_5]an(xekm}8aV", 0, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "cVhz", 0, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("cVhz", "");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("_5]an(xekm}8aV", "", 0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("N)j$g{I-C=Yc", "QdHYn)4mB>yo");
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) hashSet0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      MapIterator<SQLNonTransientConnectionException, Vector<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("N)j$g{I-C=Yc", "QdHYn)4mB>yo");
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLException sQLException0 = new SQLException();
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(linkedList0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("prefix may not be null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Uam<?!7pSLDs_", sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      Factory<SQLFeatureNotSupportedException> factory0 = new ConstantFactory<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      int[] intArray0 = new int[25];
      intArray0[0] = 91;
      intArray0[1] = 1;
      intArray0[2] = 91;
      intArray0[3] = 3854;
      intArray0[4] = 91;
      intArray0[5] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Uam<?!7pSLDs_", intArray0);
      IteratorUtils.getIterator(factory0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 132);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate1, transformer0, transformer0);
      StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) transformer0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]");
      int int0 = 14;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, 14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      OrderedIterator<SQLClientInfoException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) orderedIterator1, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("tbx3csGR}Vt9^<5");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("HuQ]~18X|V02Tm6X[=", "", 0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      sQLClientInfoException0.printStackTrace();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0, 14);
      IteratorUtils.loopingListIterator(list0);
      ArrayIterator<InstanceofPredicate> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<InstanceofPredicate>(instanceofPredicate1, 14, 14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[2] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("me{GlUCi", "me{GlUCi");
      arrayDeque1.add(sQLTransientConnectionException0);
      arrayDequeArray0[3] = arrayDeque2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[4] = arrayDeque3;
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) orderedIterator0, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("D8cV2eMZRF)aqpG )");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("me{GlUCi", "me{GlUCi");
      arrayDeque1.add(sQLTransientConnectionException0);
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLTransientConnectionException> arrayDeque4 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLTransientConnectionException> arrayDeque5 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[5] = arrayDeque0;
      ResettableListIterator<ArrayDeque<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      arrayDeque1.add(sQLTransientConnectionException0);
      int int0 = 19;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<ArrayDeque<SQLTransientConnectionException>>) resettableListIterator0, 19);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 13
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      List<DataTruncation> list0 = new LinkedList<DataTruncation>();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate.instanceOfPredicate(class1);
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("NodeList must not be null", "NodeList must not be null", false);
      ConstantTransformer<SQLTransactionRollbackException, StringTokenizer> constantTransformer0 = new ConstantTransformer<SQLTransactionRollbackException, StringTokenizer>(stringTokenizer0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends StringTokenizer>) constantTransformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<%yG>", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("delimiter may not be null", sQLSyntaxErrorException0);
      priorityQueue0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) priorityQueue0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Array class must not be null");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IdentityPredicate<SQLInvalidAuthorizationSpecException> identityPredicate0 = new IdentityPredicate<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) identityPredicate0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.find((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "^M", sQLInvalidAuthorizationSpecException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 24);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "You must invoke setComparator() to set a comparator first.";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<String>) zippingIterator0;
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, 0);
      iteratorArray0[1] = (Iterator<String>) objectArrayIterator0;
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[2] = (Iterator<String>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<String>) objectArrayListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) resettableListIterator1, (long) 0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) skippingIterator0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLClientInfoException>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Array class must not be null");
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EmptyMapIterator.emptyMapIterator();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) resettableListIterator0, 1L);
      IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) skippingIterator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) priorityQueue0);
      IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2628);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, (-17));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Array class must not be null");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IdentityPredicate<SQLInvalidAuthorizationSpecException> identityPredicate0 = new IdentityPredicate<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) identityPredicate0);
      Iterator<Stack<Iterator<String>>> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Stack<Iterator<String>>>) null, 3700);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<ArrayDeque<SQLTransientConnectionException>> linkedList0 = new LinkedList<ArrayDeque<SQLTransientConnectionException>>();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("");
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) orderedIterator0, (Transformer<? super SQLTransientException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("bKno2+nSro5tC9P  ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException1);
      IdentityPredicate<SQLInvalidAuthorizationSpecException> identityPredicate0 = new IdentityPredicate<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) identityPredicate0);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      nullIsTruePredicate0.evaluate(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) linkedList0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[23];
      intArray0[2] = 1;
      intArray0[3] = 3854;
      intArray0[4] = 91;
      IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0, 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "A-[bW`y:AJ)");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1736, (-2773));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("N)j$g{I-C=Yc", "QdHYn)4mB>yo");
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) hashSet0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("prefix may not be null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UamW<?!7pSLs_", sQLTimeoutException0);
      sQLRecoverableException0.spliterator();
      sQLTimeoutException0.initCause(sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      Factory<SQLFeatureNotSupportedException> factory0 = ConstantFactory.constantFactory(sQLFeatureNotSupportedException0);
      int[] intArray0 = new int[6];
      intArray0[0] = 91;
      intArray0[1] = 1;
      intArray0[2] = 91;
      intArray0[3] = 3854;
      intArray0[4] = 91;
      intArray0[5] = 1454;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(")5 ^4&9~1Hrl-BI0", intArray0);
      IteratorUtils.getIterator(factory0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1, 91);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      arrayList0.retainAll(stack0);
      IteratorUtils.singletonIterator((ArrayList<TreeSet>) arrayList0);
      IteratorUtils.getIterator(arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      ExceptionTransformer.exceptionTransformer();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLException sQLException0 = new SQLException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("teRXY`4nxh]HZp", "teRXY`4nxh]HZp", "teRXY`4nxh]HZp", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      int int0 = 0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("teRXY`4nxh]HZp", "`j[x~t,<>QF", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLException0.setStackTrace(stackTraceElementArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("teRXY`4nxh]HZp", sQLException0);
      IteratorUtils.contains((Iterator<Properties>) null, (Object) sQLFeatureNotSupportedException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLException sQLException0 = new SQLException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("teRXY`4nxh]HZp", "teRXY`4nxh]HZp", "teRXY`4nxh]HZp", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`j[x~t,<>QF";
      stringArray0[1] = "teRXY`4nxh]HZp";
      stringArray0[2] = "teRXY`4nxh]HZp";
      stringArray0[3] = "`j[x~t,<>QF";
      stringArray0[4] = "`j[x~t,<>QF";
      stringArray0[5] = "`j[x~t,<>QF";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("prefix may not be null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be null");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "prefix may not be null";
      stringArray0[1] = "prefix may not be null";
      stringArray0[2] = "prefix may not be null";
      stringArray0[3] = "prefix may not be null";
      stringArray0[4] = "prefix may not be null";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "prefix may not be null", 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-2564));
      sQLClientInfoException0.initCause(sQLSyntaxErrorException0);
      sQLClientInfoException0.forEach(consumer0);
      sQLClientInfoException0.printStackTrace();
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      iteratorArray0[0] = (Iterator<String>) objectArrayListIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) iteratorArray0[0], (Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0);
      iteratorArray0[1] = (Iterator<String>) zippingIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[0], 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLRecoverableException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLRecoverableException>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) linkedList0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Enumeration<IIOMetadataNode> enumeration0 = (Enumeration<IIOMetadataNode>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      Enumeration<IIOMetadataNode> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration1);
      IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      LinkedList<InstanceofPredicate> linkedList1 = new LinkedList<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) linkedList1);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2179;
      intArray0[1] = 91;
      intArray0[2] = 1;
      intArray0[3] = 3854;
      intArray0[4] = 1454;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("?5?8Kkr^eIpN.YO4x", intArray0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("&@-ZKIdr\u0000W", "?5?8Kkr^eIpN.YO4x", "EB.^Ki", (-2118));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("EB.^Ki", "List must not be null", "5)OUI')-$S(x#E&nnI", 1454);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.IteratorUtils", "?5?8Kkr^eIpN.YO4x", "", 91);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "org.apache.commons.collections4.iterators.SingletonListIterator", "", 1);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "OrderedMapIterator must not be null", "g", 3854);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "&OV", "", 1);
      stackTraceElementArray0[5] = stackTraceElement5;
      batchUpdateException0.setStackTrace(stackTraceElementArray0);
      IteratorUtils.getIterator(batchUpdateException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      sQLClientInfoException0.printStackTrace();
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLClientInfoException0);
      sQLClientInfoException0.printStackTrace();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, (-1499));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLSyntaxErrorException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLSyntaxErrorException0);
      sQLClientInfoException0.printStackTrace();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) uniquePredicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = "q%|v]6zjK";
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("q%|v]6zjK");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(andPredicate0, transformer0, transformer1);
      Transformer<Object, String> transformer2 = StringValueTransformer.stringValueTransformer();
      IfTransformer.ifTransformer((Predicate<? super Object>) andPredicate0, (Transformer<? super Object, ? extends String>) transformer2, (Transformer<? super Object, ? extends String>) transformer1);
      int int0 = 123;
      ArrayListIterator<Properties> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(uniquePredicate0, (-1251), 123);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(5, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("DKw~\f8{f8 lk>dI_>D", "DKw~\f8{f8 lk>dI_>D", (-3054));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, sQLRecoverableException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", 14, hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      int int0 = (-13);
      Hashtable<Object, String> hashtable0 = null;
//      try {
        hashtable0 = new Hashtable<Object, String>((-13));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -13
//         //
//         verifyException("java.util.Hashtable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) mapIterator0);
      ArrayDeque<SQLClientInfoException>[] arrayDequeArray0 = (ArrayDeque<SQLClientInfoException>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[0] = arrayDeque0;
      int int0 = 1;
      IteratorUtils.arrayListIterator(arrayDequeArray0, 1);
      IteratorUtils.asEnumeration((Iterator<?>) mapIterator0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, (-1912), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      sQLFeatureNotSupportedException0.printStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.asEnumeration((Iterator<?>) resettableIterator0);
      IteratorUtils.size(resettableIterator0);
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        properties0.put(sQLFeatureNotSupportedException0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Hashtable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Sf`L|/Y@'k<<");
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, class0);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = (-654);
      String string0 = "Closure must not be null";
      MockThrowable mockThrowable0 = new MockThrowable("Closure must not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(mockThrowable0);
      batchUpdateException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (-654), batchUpdateException0);
      sQLTransactionRollbackException0.getStackTrace();
      int int1 = (-2000);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, (-2000));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 6);
      OrderedMapIterator<SQLTimeoutException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Object>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) abstractOrderedMapIteratorDecorator0;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("me{GlUCi", "me{GlUCi");
      arrayDeque1.add(sQLTransientConnectionException0);
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLTransientConnectionException> arrayDeque4 = new ArrayDeque<SQLTransientConnectionException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("cVhz", "cVhz");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("7l", "");
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 5);
      priorityQueueArray0[0] = priorityQueue0;
      priorityQueueArray0[1] = priorityQueue0;
      priorityQueueArray0[2] = priorityQueue0;
      priorityQueueArray0[3] = priorityQueue0;
      priorityQueueArray0[4] = priorityQueue0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(priorityQueueArray0, 2385);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Enumeration<IIOMetadataNode> enumeration0 = (Enumeration<IIOMetadataNode>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      Enumeration<IIOMetadataNode> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration1);
      IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      priorityQueueArray0[3] = priorityQueue3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(priorityQueueArray0, (-2519));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      IteratorUtils.emptyIterator();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      int int0 = 512;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 512);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 512
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 2);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, StringTokenizer> invokerTransformer0 = new InvokerTransformer<Object, StringTokenizer>("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", classArray0, classArray0);
      Transformer<Object, StringTokenizer> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) andPredicate0, (Transformer<? super Object, ? extends StringTokenizer>) invokerTransformer0, (Transformer<? super Object, ? extends StringTokenizer>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) null, (Transformer<? super Locale.Category, ? extends StringTokenizer>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(997);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`V");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", "`V", sQLSyntaxErrorException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`V", "`V", 997, hashtable0, sQLNonTransientConnectionException1);
      IteratorUtils.singletonListIterator((SQLException) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("r", "prefix may not be null", sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2933, false, true, 54, 3, sQLTransientConnectionException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, true, 3, 2933, sQLTransientConnectionException0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, false, false, 1637, 792);
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 2566, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[23];
      intArray0[2] = 1;
      intArray0[3] = 3854;
      intArray0[4] = 91;
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null, (Collection<? super BatchUpdateException>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      String string0 = "wgZ}h";
      String string1 = "Input Object must not be null";
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super String>) closure0);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("_5]an(xekm}8aV", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "_5]an(xekm}8aV", 0, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "cVhz", 0, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("cVhz", "");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTimeoutException>(mapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLTimeoutException>) abstractMapIteratorDecorator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1);
      abstractMapIteratorDecorator0.hasNext();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.iterator();
      stack0.add((Object) mapIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTimeoutException>(mapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLTimeoutException>) abstractMapIteratorDecorator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1);
      abstractMapIteratorDecorator0.hasNext();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.iterator();
      stack0.add((Object) mapIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MapIterator<String, LinkedHashSet<SQLTransactionRollbackException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      String string0 = null;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      String string1 = "_iK +-\"";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) mapIterator0, (Transformer<? super String, String>) constantTransformer0, "_iK +-\"", (String) null, "_iK +-\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("me{GlUCi", "me{GlUCi");
      arrayDeque1.add(sQLTransientConnectionException0);
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLTransientConnectionException> arrayDeque4 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLTransientConnectionException> arrayDeque5 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[5] = arrayDeque5;
      ResettableListIterator<ArrayDeque<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      arrayDeque1.add(sQLTransientConnectionException0);
      IteratorUtils.get((Iterator<ArrayDeque<SQLTransientConnectionException>>) resettableListIterator0, 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 1, 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2179;
      intArray0[1] = 91;
      intArray0[2] = 1;
      intArray0[3] = 3854;
      intArray0[4] = 1454;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("?5?8Kkr^eIpN.YO4x", intArray0);
      IteratorUtils.getIterator(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, DataTruncation>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLIntegrityConstraintViolationException, ? extends DataTruncation>) mapIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 0, (-1429));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Locale.Category>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "P!<x?\"K-7D|VHup");
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      sQLDataException0.getLocalizedMessage();
      sQLDataException0.fillInStackTrace();
      IteratorUtils.getIterator(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Iterator must not be null";
      stringArray0[1] = "prefix may not be null";
      stringArray0[2] = "nj]iUR:8E8";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringArray0, 3583);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      assertNotNull(sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 1);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Transformer<SQLNonTransientException, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("/lth ", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
      assertEquals(1, classArray0.length);
      
      Transformer<SQLNonTransientException, SQLSyntaxErrorException>[] transformerArray0 = (Transformer<SQLNonTransientException, SQLSyntaxErrorException>[]) Array.newInstance(Transformer.class, 9);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[2] = transformer0;
      transformerArray0[3] = transformer0;
      transformerArray0[4] = transformer0;
      transformerArray0[5] = transformer0;
      transformerArray0[6] = transformer0;
      transformerArray0[7] = transformer0;
      transformerArray0[8] = transformer0;
      Transformer<SQLSyntaxErrorException, SQLSyntaxErrorException> transformer1 = ChainedTransformer.chainedTransformer((Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>[]) transformerArray0);
      assertNotNull(transformer1);
      assertEquals(9, transformerArray0.length);
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(iterator0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertEquals(1, classArray0.length);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "org.apache.commons.collections4.functors.NotNullPredicate", hashMap0, sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("org.apache.commons.collections4.functors.NotNullPredicate", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (-843L), (-843L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("'-T", "OWM[adv%9377^Y98hL", (-2316));
      assertEquals("OWM[adv%9377^Y98hL", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("'-T", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-2316), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: '-T", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("=aK7(~LL9MQmDX4", "'-T", sQLInvalidAuthorizationSpecException0);
      assertEquals("OWM[adv%9377^Y98hL", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("'-T", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-2316), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: '-T", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("'-T", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: =aK7(~LL9MQmDX4", sQLWarning0.toString());
      assertEquals("=aK7(~LL9MQmDX4", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("'-T", "", (-3390), sQLWarning0);
      assertEquals("OWM[adv%9377^Y98hL", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("'-T", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-2316), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: '-T", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("'-T", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: =aK7(~LL9MQmDX4", sQLWarning0.toString());
      assertEquals("=aK7(~LL9MQmDX4", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("'-T", sQLWarning1.getMessage());
      assertEquals((-3390), sQLWarning1.getErrorCode());
      assertEquals("", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: '-T", sQLWarning1.toString());
      assertNotNull(sQLWarning1);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      
      sQLWarningArray0[1] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning();
      assertEquals(0, sQLWarning2.getErrorCode());
      assertNull(sQLWarning2.getSQLState());
      assertNull(sQLWarning2.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning2.toString());
      assertNotNull(sQLWarning2);
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      assertFalse(sQLWarning2.equals((Object)sQLWarning1));
      
      sQLWarningArray0[2] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning("5sQE1pD~wh@!a3", "5sQE1pD~wh@!a3");
      assertEquals("5sQE1pD~wh@!a3", sQLWarning3.getSQLState());
      assertEquals("5sQE1pD~wh@!a3", sQLWarning3.getMessage());
      assertEquals("java.sql.SQLWarning: 5sQE1pD~wh@!a3", sQLWarning3.toString());
      assertEquals(0, sQLWarning3.getErrorCode());
      assertNotNull(sQLWarning3);
      assertFalse(sQLWarning3.equals((Object)sQLWarning1));
      assertFalse(sQLWarning3.equals((Object)sQLWarning2));
      assertFalse(sQLWarning3.equals((Object)sQLWarning0));
      
      sQLWarningArray0[3] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning();
      assertEquals("java.sql.SQLWarning", sQLWarning4.toString());
      assertEquals(0, sQLWarning4.getErrorCode());
      assertNull(sQLWarning4.getMessage());
      assertNull(sQLWarning4.getSQLState());
      assertNotNull(sQLWarning4);
      assertFalse(sQLWarning4.equals((Object)sQLWarning0));
      assertFalse(sQLWarning4.equals((Object)sQLWarning2));
      assertFalse(sQLWarning4.equals((Object)sQLWarning3));
      assertFalse(sQLWarning4.equals((Object)sQLWarning1));
      
      sQLWarningArray0[4] = sQLWarning4;
      SQLWarning sQLWarning5 = new SQLWarning("`h<P", sQLWarning2);
      assertEquals(0, sQLWarning2.getErrorCode());
      assertNull(sQLWarning2.getSQLState());
      assertNull(sQLWarning2.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning2.toString());
      assertNull(sQLWarning5.getSQLState());
      assertEquals("java.sql.SQLWarning: `h<P", sQLWarning5.toString());
      assertEquals("`h<P", sQLWarning5.getMessage());
      assertEquals(0, sQLWarning5.getErrorCode());
      assertNotNull(sQLWarning5);
      assertFalse(sQLWarning2.equals((Object)sQLWarning4));
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      assertFalse(sQLWarning2.equals((Object)sQLWarning3));
      assertFalse(sQLWarning2.equals((Object)sQLWarning1));
      assertFalse(sQLWarning5.equals((Object)sQLWarning1));
      assertFalse(sQLWarning5.equals((Object)sQLWarning2));
      assertFalse(sQLWarning5.equals((Object)sQLWarning3));
      assertFalse(sQLWarning5.equals((Object)sQLWarning4));
      assertFalse(sQLWarning5.equals((Object)sQLWarning0));
      
      sQLWarningArray0[5] = sQLWarning5;
      SQLWarning sQLWarning6 = new SQLWarning("=aK7(~LL9MQmDX4", "2n%=V5K'", (-2316));
      assertEquals("2n%=V5K'", sQLWarning6.getSQLState());
      assertEquals("=aK7(~LL9MQmDX4", sQLWarning6.getMessage());
      assertEquals("java.sql.SQLWarning: =aK7(~LL9MQmDX4", sQLWarning6.toString());
      assertEquals((-2316), sQLWarning6.getErrorCode());
      assertNotNull(sQLWarning6);
      assertFalse(sQLWarning6.equals((Object)sQLWarning0));
      assertFalse(sQLWarning6.equals((Object)sQLWarning3));
      assertFalse(sQLWarning6.equals((Object)sQLWarning4));
      assertFalse(sQLWarning6.equals((Object)sQLWarning2));
      assertFalse(sQLWarning6.equals((Object)sQLWarning1));
      assertFalse(sQLWarning6.equals((Object)sQLWarning5));
      
      sQLWarningArray0[6] = sQLWarning6;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(7, objectArrayIterator0.getEndIndex());
      assertNotNull(objectArrayIterator0);
      assertEquals(7, sQLWarningArray0.length);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(7, objectArrayIterator0.getEndIndex());
      assertNotNull(iterator0);
      assertEquals(7, sQLWarningArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) orderedIterator0);
      assertNotNull(iterator0);
      
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) listIterator0, (-798L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2179;
      intArray0[1] = 91;
      intArray0[2] = 1;
      intArray0[3] = 3854;
      intArray0[4] = 1454;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("?5?8Kkr^eIpN.YO4x", intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ?5?8Kkr^eIpN.YO4x", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("?5?8Kkr^eIpN.YO4x", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {2179, 91, 1, 3854, 1454}, intArray0);
      assertEquals(5, intArray0.length);
      
      batchUpdateException0.printStackTrace();
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ?5?8Kkr^eIpN.YO4x", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("?5?8Kkr^eIpN.YO4x", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {2179, 91, 1, 3854, 1454}, intArray0);
      assertEquals(5, intArray0.length);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ?5?8Kkr^eIpN.YO4x", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("?5?8Kkr^eIpN.YO4x", batchUpdateException0.getMessage());
      assertNotNull(iterator1);
      assertArrayEquals(new int[] {2179, 91, 1, 3854, 1454}, intArray0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<?>) iterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      int int0 = IteratorUtils.size(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, int0);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      String string0 = "L+Wb";
      StackTraceElement stackTraceElement0 = new StackTraceElement("L+Wb", "L+Wb", "L+Wb", 0);
      assertEquals("L+Wb", stackTraceElement0.getMethodName());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("L+Wb", stackTraceElement0.getClassName());
      assertEquals("L+Wb.L+Wb(L+Wb:0)", stackTraceElement0.toString());
      assertEquals("L+Wb", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = "`j[x~t,<>QF";
      String string2 = "";
      int int1 = 0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("L+Wb", "`j[x~t,<>QF", "", 0);
      assertEquals("`j[x~t,<>QF", stackTraceElement1.getMethodName());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("L+Wb.`j[x~t,<>QF(:0)", stackTraceElement1.toString());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("L+Wb", stackTraceElement1.getClassName());
      assertEquals("", stackTraceElement1.getFileName());
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLException0.setStackTrace(stackTraceElementArray0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(2, stackTraceElementArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("teRXY`4nxh]HZp", sQLException0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: teRXY`4nxh]HZp", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("teRXY`4nxh]HZp", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<Properties>) null, (Object) sQLFeatureNotSupportedException0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: teRXY`4nxh]HZp", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("teRXY`4nxh]HZp", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertFalse(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getParentNode();
      assertNull(node0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNode("");
      assertNull(attr0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3232);
      intArray0[1] = 0;
      intArray0[2] = (-938);
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 255;
      intArray0[6] = (-1410);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("n");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("n", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: n", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("k?Cr9", "n", intArray0, sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("n", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: n", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: k?Cr9", batchUpdateException0.toString());
      assertEquals("k?Cr9", batchUpdateException0.getMessage());
      assertEquals("n", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-3232), 0, (-938), 1, 0, 255, (-1410)}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 2573, (-3232));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MapIterator<SQLWarning, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SkippingIterator<SQLWarning> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLWarning>) mapIterator0, 997L);
      assertNotNull(skippingIterator0);
      
      Enumeration<SQLException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLException>) skippingIterator0);
      assertNotNull(enumeration0);
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      assertNotNull(resettableIterator0);
      
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Sf`L|/Y@'k<<");
      assertNotNull(constantFactory0);
      
      Transformer<SQLFeatureNotSupportedException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      assertNotNull(transformer0);
      
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransactionRollbackException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "MapIterator[", "#5+", "UamW<?!7pSLs_");
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(string0);
      assertEquals("#5+UamW<?!7pSLs_", string0);
      
      OrderedMapIterator<SQLTimeoutException, Object> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate0);
      
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      assertNotNull(nullIsTruePredicate0);
      
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      assertNotNull(nullIsExceptionPredicate0);
      
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, nullIsExceptionPredicate0);
      assertNotNull(andPredicate0);
      
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 2);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ResettableIterator<PriorityQueue<SQLTransactionRollbackException>> resettableIterator0 = IteratorUtils.singletonIterator(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(resettableIterator0);
      
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      assertNotNull(enumeration0);
      
      ResettableIterator<Properties> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      
      InvokerTransformer<Properties, String> invokerTransformer0 = new InvokerTransformer<Properties, String>("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", classArray0, classArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(2, classArray0.length);
      
      String string0 = IteratorUtils.toString((Iterator<Properties>) resettableIterator1, (Transformer<? super Properties, String>) invokerTransformer0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(2, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("prefix may not be null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UamW<?!7pSLs_", sQLTimeoutException0);
      sQLRecoverableException0.spliterator();
      sQLTimeoutException0.initCause(sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      ConstantFactory.constantFactory(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.spliterator();
      ConstantFactory.constantFactory(sQLFeatureNotSupportedException0);
      Transformer<SQLFeatureNotSupportedException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "#5+", "", "");
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) listIterator0);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer("");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) null, (Predicate<? super EnumSet<Locale.Category>>) transformerPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate1, transformer0, transformer0);
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) ifTransformer0, (Transformer<? super Object, ? extends String>) transformer1);
      String string0 = IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) transformer2);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }
}
