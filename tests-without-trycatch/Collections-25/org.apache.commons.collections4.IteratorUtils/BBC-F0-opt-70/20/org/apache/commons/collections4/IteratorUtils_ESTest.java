/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 06:28:57 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.size((Iterator<?>) null);
      Hashtable<SQLRecoverableException, SQLException> hashtable0 = new Hashtable<SQLRecoverableException, SQLException>();
      Hashtable<SQLRecoverableException, SQLException> hashtable1 = new Hashtable<SQLRecoverableException, SQLException>();
      Hashtable<SQLRecoverableException, SQLException> hashtable2 = new Hashtable<SQLRecoverableException, SQLException>();
      Hashtable<SQLRecoverableException, SQLException>[] hashtableArray0 = (Hashtable<SQLRecoverableException, SQLException>[]) Array.newInstance(Hashtable.class, 1);
      hashtableArray0[0] = hashtable1;
      ObjectArrayIterator<Hashtable<SQLRecoverableException, SQLException>> objectArrayIterator0 = new ObjectArrayIterator<Hashtable<SQLRecoverableException, SQLException>>(hashtableArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Hashtable<SQLRecoverableException, SQLException>>) objectArrayIterator0, 125);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 124
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>(comparator0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) priorityQueue0);
      Iterator<SQLDataException> iterator0 = null;
      SQLDataException sQLDataException0 = IteratorUtils.find(iterator0, (Predicate<? super SQLDataException>) predicate0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      String string0 = "v.`9\"~`Mw!%q4";
      int int0 = (-2785);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string0, string0, int0, sQLDataException0);
      stack0.add(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Vector<Integer>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, Vector<Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, Vector<Integer>>(orderedMapIterator1);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Vector<Integer>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Vector<Integer>>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      int int1 = (-2413);
      int int2 = 1626;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) abstractMapIteratorDecorator0, int1, int2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      Hashtable<SQLRecoverableException, SQLException> hashtable0 = new Hashtable<SQLRecoverableException, SQLException>();
      Hashtable<SQLRecoverableException, SQLException> hashtable1 = new Hashtable<SQLRecoverableException, SQLException>();
      Hashtable<SQLRecoverableException, SQLException> hashtable2 = new Hashtable<SQLRecoverableException, SQLException>();
      Hashtable<SQLRecoverableException, SQLException> hashtable3 = new Hashtable<SQLRecoverableException, SQLException>();
      Hashtable<SQLRecoverableException, SQLException>[] hashtableArray0 = (Hashtable<SQLRecoverableException, SQLException>[]) Array.newInstance(Hashtable.class, 3);
      hashtableArray0[1] = hashtable0;
      hashtableArray0[2] = hashtable0;
      ObjectArrayIterator<Hashtable<SQLRecoverableException, SQLException>> objectArrayIterator0 = new ObjectArrayIterator<Hashtable<SQLRecoverableException, SQLException>>(hashtableArray0);
      IteratorUtils.get((Iterator<Hashtable<SQLRecoverableException, SQLException>>) objectArrayIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("h^", "h^", sQLIntegrityConstraintViolationException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("h^", "h^");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("delimiter may not be null");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("delimiter may not be null", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("delimiter may not be null", "h^");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      NotNullPredicate.notNullPredicate();
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer1, "h^", "h^", "h^");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("Estimated size must be greater than 0", (Class<?>[]) null, (Object[]) null);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, String>) invokerTransformer0, "Estimated size must be greater than 0", "Estimated size must be greater than 0", "Estimated size must be greater than 0");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Integer, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Properties> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<Properties>) orderedIterator0, (Predicate<? super Properties>) predicate0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 91);
      stack0.add(sQLTimeoutException0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<String, ArrayDeque<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedMapIterator0, class0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(arrayDeque0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NodeList must not be null");
      IteratorUtils.getIterator(iIOMetadataNode0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Locale.FilteringMode>) resettableListIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "X%MzQ#q*Uks6iLc");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<String, ArrayDeque<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedMapIterator0, class0);
      TreeSet<SQLClientInfoException>[] treeSetArray0 = (TreeSet<SQLClientInfoException>[]) Array.newInstance(TreeSet.class, 3);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      treeSetArray0[0] = treeSet0;
      TreeSet<SQLClientInfoException> treeSet1 = new TreeSet<SQLClientInfoException>();
      treeSetArray0[1] = treeSet1;
      TreeSet<SQLClientInfoException> treeSet2 = new TreeSet<SQLClientInfoException>();
      treeSetArray0[2] = treeSet2;
      IteratorUtils.arrayIterator(treeSetArray0, 3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>((SQLException) null);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) listIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Properties>) nullIsTruePredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UniquePredicate<SQLNonTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      EmptyListIterator.emptyListIterator();
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      String string0 = "Closure must not be null";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Closure must not be null");
      properties1.replace((Object) properties0, (Object) iIOMetadataNode0, (Object) "Closure must not be null");
      propertiesArray0[1] = properties1;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>((SQLException) null);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(resettableListIterator0);
      IteratorUtils.apply((Iterator<Object>) singletonIterator0, (Closure<? super Object>) chainedClosure0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      String string0 = "org.apache.commons.collections4.functors.TransformerPredicate";
      int int0 = 16;
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.TransformerPredicate", "org.apache.commons.collections4.functors.TransformerPredicate", 16);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      UniquePredicate<SQLNonTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) priorityQueue0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      Hashtable<SQLRecoverableException, SQLException>[] hashtableArray0 = (Hashtable<SQLRecoverableException, SQLException>[]) Array.newInstance(Hashtable.class, 7);
      Hashtable<SQLRecoverableException, SQLException> hashtable0 = new Hashtable<SQLRecoverableException, SQLException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLRecoverableException, SQLException> hashtable1 = new Hashtable<SQLRecoverableException, SQLException>();
      hashtableArray0[1] = hashtable1;
      Hashtable<SQLRecoverableException, SQLException> hashtable2 = new Hashtable<SQLRecoverableException, SQLException>();
      hashtableArray0[2] = hashtable2;
      Hashtable<SQLRecoverableException, SQLException> hashtable3 = new Hashtable<SQLRecoverableException, SQLException>();
      hashtableArray0[3] = hashtable3;
      Hashtable<SQLRecoverableException, SQLException> hashtable4 = new Hashtable<SQLRecoverableException, SQLException>();
      hashtableArray0[4] = hashtable4;
      Hashtable<SQLRecoverableException, SQLException> hashtable5 = new Hashtable<SQLRecoverableException, SQLException>();
      hashtableArray0[5] = hashtable5;
      Hashtable<SQLRecoverableException, SQLException> hashtable6 = new Hashtable<SQLRecoverableException, SQLException>();
      hashtableArray0[6] = hashtable6;
      ObjectArrayIterator<Hashtable<SQLRecoverableException, SQLException>> objectArrayIterator0 = new ObjectArrayIterator<Hashtable<SQLRecoverableException, SQLException>>(hashtableArray0);
      IteratorUtils.get((Iterator<Hashtable<SQLRecoverableException, SQLException>>) objectArrayIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ExceptionPredicate.exceptionPredicate();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Q&");
      ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, (-1976));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      InstanceofPredicate.instanceOfPredicate(class0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Iterator must not be null", "M/H{Xy|i2~+6rOd1]SI", (-2770), sQLTransactionRollbackException0);
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) loopingIterator0, (Predicate<? super SQLNonTransientException>) instanceofPredicate0);
      // Undeclared exception!
      IteratorUtils.toString(iterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", 1);
      Factory<SQLTransactionRollbackException> factory0 = ConstantFactory.constantFactory(sQLTransactionRollbackException1);
      FactoryTransformer<SQLDataException, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<SQLDataException, SQLTransactionRollbackException>(factory0);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "n+T9]u(.4", true);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 1);
      Hashtable<Locale.FilteringMode, String> hashtable0 = new Hashtable<Locale.FilteringMode, String>();
      EntrySetMapIterator<Locale.FilteringMode, String> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, String>(hashtable0);
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) entrySetMapIterator0;
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) iterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) objectArrayListIterator0, class0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      IteratorUtils.getIterator(class0);
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Class<String> class0 = String.class;
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 2750L, 2750L);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      IteratorUtils.toArray((Iterator<? extends String>) zippingIterator0, class0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(arrayList0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      UniquePredicate<SQLNonTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      ExceptionPredicate.exceptionPredicate();
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) vector0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<Properties, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0, 1);
      OrderedMapIterator<SQLNonTransientException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator1);
      MapIterator<SQLNonTransientException, SQLException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLException>) orderedMapIterator2);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) mapIterator1);
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      UniquePredicate.uniquePredicate();
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("Iterator[", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) entrySetMapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) invokerTransformer0, "[]", "Iterator[", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("w=%+AXI[AUV]NWU", "w=%+AXI[AUV]NWU");
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(predicate0);
      IteratorUtils.size(singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 0;
      int int1 = 911;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 911);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      SingletonListIterator<Stack<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<Stack<Locale.FilteringMode>>(stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Stack<Locale.FilteringMode>>) singletonListIterator0, (Predicate<? super Stack<Locale.FilteringMode>>) transformerPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>(0);
      Hashtable<SQLRecoverableException, SQLException> hashtable0 = new Hashtable<SQLRecoverableException, SQLException>();
      Hashtable<SQLRecoverableException, SQLException>[] hashtableArray0 = (Hashtable<SQLRecoverableException, SQLException>[]) Array.newInstance(Hashtable.class, 1);
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLException, Properties>[] hashtableArray1 = (Hashtable<SQLException, Properties>[]) Array.newInstance(Hashtable.class, 6);
      Hashtable<SQLException, Properties> hashtable1 = new Hashtable<SQLException, Properties>();
      hashtableArray1[0] = hashtable1;
      Hashtable<SQLException, Properties> hashtable2 = new Hashtable<SQLException, Properties>();
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      IteratorUtils.getIterator(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 2185, 4032);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      MapIterator<SQLDataException, Object> mapIterator0 = null;
//      try {
        mapIterator0 = new AbstractMapIteratorDecorator<SQLDataException, Object>((MapIterator<SQLDataException, Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-630), (-1));
      IteratorUtils.getIterator(locale_FilteringMode0);
      MapIterator<SQLDataException, Object> mapIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) orderedMapIterator0);
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLDataException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ?>) mapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Factory<SQLTransactionRollbackException> factory0 = ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      FactoryTransformer<SQLDataException, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<SQLDataException, SQLTransactionRollbackException>(factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) mapIterator0, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, 1023);
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(list0);
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(list0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Properties>) loopingListIterator0, 1023);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<Properties, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0, 1);
      OrderedMapIterator<SQLNonTransientException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator1);
      MapIterator<SQLNonTransientException, SQLException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLException>) orderedMapIterator2);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) mapIterator1);
      SQLDataException sQLDataException0 = new SQLDataException(", ");
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLDataException0);
      IteratorUtils.skippingIterator((Iterator<Object>) singletonIterator0, 0L);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      EmptyListIterator.resettableEmptyListIterator();
      Hashtable<SQLRecoverableException, SQLException>[] hashtableArray0 = (Hashtable<SQLRecoverableException, SQLException>[]) Array.newInstance(Hashtable.class, 1);
      Hashtable<SQLRecoverableException, SQLException> hashtable0 = new Hashtable<SQLRecoverableException, SQLException>();
      hashtableArray0[0] = hashtable0;
      ObjectArrayIterator<Hashtable<SQLRecoverableException, SQLException>> objectArrayIterator0 = new ObjectArrayIterator<Hashtable<SQLRecoverableException, SQLException>>(hashtableArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Hashtable<SQLRecoverableException, SQLException>>) objectArrayIterator0, 1024);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1023
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[0] = predicate0;
      NotNullPredicate.notNullPredicate();
      TruePredicate.truePredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) chainedClosure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) priorityQueue0, 37);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) list0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0, false);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonIterator0, (Transformer<? super ClientInfoStatus, String>) factoryTransformer0, "", "n;[m 7Nh[C@c", "n;[m 7Nh[C@c");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k=:,.o>gAHW! D~", "k=:,.o>gAHW! D~", (-631));
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) loopingIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) loopingIterator0, (Iterator<?>) loopingIterator0);
      HashMap<Closure<Object>, SQLDataException> hashMap0 = new HashMap<Closure<Object>, SQLDataException>();
      EntrySetMapIterator<Closure<Object>, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Closure<Object>, SQLDataException>(hashMap0);
      AbstractMapIteratorDecorator<Closure<Object>, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Closure<Object>, SQLDataException>(entrySetMapIterator0);
      List<Closure<Object>> list0 = IteratorUtils.toList((Iterator<? extends Closure<Object>>) abstractMapIteratorDecorator0, 7);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) list0);
      IteratorUtils.apply((Iterator<Object>) zippingIterator0, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate1);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "&.:", "},BPf,R* ;{4B_", "]>G/ImJtMa%.,");
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.IteratorUtils", "w=%+AXI[AUV]NWU");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      IteratorUtils.toArray(iterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(linkedList0);
      ListIterator<Properties> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) reverseListIterator0, (Predicate<? super Properties>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, (-643));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<Properties, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      int int0 = 1;
      IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0, 1);
      OrderedMapIterator<SQLNonTransientException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator1);
      MapIterator<SQLNonTransientException, SQLException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLException>) orderedMapIterator2);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) mapIterator1);
      SQLDataException sQLDataException0 = new SQLDataException(", ");
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLDataException0);
      SkippingIterator<Object> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Object>) singletonIterator0, 0L);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      closureArray0[0] = null;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Object>) skippingIterator0, (Closure<? super Object>) chainedClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k=:,.o>gAHW! D~", "k=:,.o>gAHW! D~", (-631));
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ClosureTransformer<SQLNonTransientConnectionException> closureTransformer0 = new ClosureTransformer<SQLNonTransientConnectionException>((Closure<? super SQLNonTransientConnectionException>) null);
      TransformedPredicate<SQLNonTransientConnectionException> transformedPredicate0 = new TransformedPredicate<SQLNonTransientConnectionException>(closureTransformer0, predicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("k=:,.o>gAHW! D~", "k=:,.o>gAHW! D~", 37, sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Predicate<SQLNonTransientConnectionException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLNonTransientConnectionException>) transformedPredicate0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ClosureTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ListIterator<Stack<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k=:,.o>gAHW! D~", "k=:,.o>gAHW! D~", (-631));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("eam", "eam", (-631));
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      arrayDeque0.add(sQLTransientConnectionException1);
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "&I[<Q+Y!f:)>X^O)s";
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      String string1 = "Entry does not exist: ";
      SQLException sQLException0 = new SQLException("Entry does not exist: ");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("&I[<Q+Y!f:)>X^O)s", "", 0, intArray0, sQLException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Entry does not exist: ", "&I[<Q+Y!f:)>X^O)s", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttributeNodeNS((String) null, "");
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("Transformer must not be null", (Class<?>[]) null, (Object[]) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) transformer0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer<Object, Locale.FilteringMode> constantTransformer0 = new ConstantTransformer<Object, Locale.FilteringMode>(locale_FilteringMode0);
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      MapIterator<SQLDataException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ?>) mapIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ExceptionPredicate.exceptionPredicate();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[8];
      clientInfoStatusArray0[0] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[1] = clientInfoStatus4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Predicate must not be null");
      clientInfoStatusArray0[2] = clientInfoStatus2;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[5] = clientInfoStatus2;
      clientInfoStatusArray0[0] = clientInfoStatus1;
      clientInfoStatusArray0[2] = clientInfoStatus1;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      ResettableIterator<String> resettableIterator1 = IteratorUtils.emptyIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator1);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator1, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getUserObject();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<Properties, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0, 1);
      IteratorUtils.emptyOrderedMapIterator();
      EmptyIterator.resettableEmptyIterator();
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ClientInfoStatus[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer<Object, Locale.FilteringMode> constantTransformer0 = new ConstantTransformer<Object, Locale.FilteringMode>(locale_FilteringMode0);
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      MapIterator<SQLDataException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ?>) mapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Factory<SQLTransactionRollbackException> factory0 = ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      FactoryTransformer<SQLDataException, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<SQLDataException, SQLTransactionRollbackException>(factory0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) mapIterator0, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      clientInfoStatusArray0[3] = clientInfoStatus1;
      clientInfoStatusArray0[4] = clientInfoStatus0;
      clientInfoStatusArray0[5] = clientInfoStatus0;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      TruePredicate.truePredicate();
      Predicate<ClientInfoStatus> predicate1 = new UniquePredicate<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[21];
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[0] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[1] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[2] = clientInfoStatus3;
      clientInfoStatusArray0[3] = clientInfoStatus0;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      AndPredicate.andPredicate((Predicate<? super LinkedList<SQLNonTransientConnectionException>>) predicate0, (Predicate<? super LinkedList<SQLNonTransientConnectionException>>) instanceofPredicate0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(stack0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) loopingIterator0, (Predicate<? super SQLNonTransientException>) andPredicate0);
      IteratorUtils.toString(iterator0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Object>) singletonIterator0, (Closure<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ResettableIterator<ClientInfoStatus> resettableIterator1 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator1, (Predicate<? super ClientInfoStatus>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k=:,.o>gAHW! D~", "k=:,.o>gAHW! D~", (-631));
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      IteratorUtils.isEmpty(loopingIterator0);
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      int int0 = 526;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 526);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer.nullTransformer();
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ZippingIterator<Locale.FilteringMode> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) zippingIterator1);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      IteratorUtils.isEmpty(singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<?>) orderedIterator0);
      OrderedMapIterator<ClientInfoStatus, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<ArrayList<HashMap>>) orderedMapIterator0, (Predicate<? super ArrayList<HashMap>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 37);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      TruePredicate.truePredicate();
      ExceptionPredicate.exceptionPredicate();
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) predicate1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "2", 1511);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "2", 1511, sQLTransactionRollbackException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Transformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException> transformer0 = CloneTransformer.cloneTransformer();
      TransformedPredicate<SQLNonTransientConnectionException> transformedPredicate0 = new TransformedPredicate<SQLNonTransientConnectionException>(transformer0, instanceofPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) instanceofPredicate0);
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>(156);
      EmptyListIterator.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttributeNodeNS((String) null, "");
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      int int0 = 2259;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\"JIyD,%B", "", 2259);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "obP1x", 2259, sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Transformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException> transformer0 = CloneTransformer.cloneTransformer();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      TransformedPredicate<SQLNonTransientConnectionException> transformedPredicate0 = new TransformedPredicate<SQLNonTransientConnectionException>(transformer0, predicate0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) transformedPredicate0);
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Properties>((Properties[]) null, 1711);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<?>) orderedIterator0);
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 1006;
      intArray0[2] = 1;
      intArray0[3] = 5156;
      intArray0[4] = (-1165);
      intArray0[5] = (-2767);
      int int0 = 2540;
      intArray0[6] = 2540;
      intArray0[7] = 0;
      intArray0[8] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("?!kUBcU5uU", intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?!kUBcU5uU", "?!kUBcU5uU", batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer1);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Properties>((Properties[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<?>) orderedIterator0);
      OrderedMapIterator<ClientInfoStatus, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<ClientInfoStatus> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) orderedMapIterator0, (Iterator<? extends ClientInfoStatus>) orderedMapIterator0);
      Predicate<ClientInfoStatus> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) zippingIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer.nullTransformer();
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ZippingIterator<Locale.FilteringMode> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) zippingIterator1);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 8);
      IteratorUtils.getIterator(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 37);
      loopingListIterator0.add(sQLTransientConnectionException0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      stack0.spliterator();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("Fr+IkIB2PW]%xqTNH0", "");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", classArray0, classArray0);
      Transformer<SQLException, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) entrySetMapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "Fr+IkIB2PW]%xqTNH0", ";", "");
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", mockThrowable0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Cannot set to list until next() or previous() called", "", "", 9);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("B@Ea/Bkan:32=", "Closure must not be null", "Cannot set to list until next() or previous() called", 9);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Cs", "&(j-&HUGudns", "Cannot set to list until next() or previous() called", 9);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "org.apache.commons.collections4.functors.TransformerClosure", "Cannot set to list until next() or previous() called", 12);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "org.apache.commons.collections4.functors.TransformerClosure", "T", 281);
      stackTraceElementArray0[4] = stackTraceElement4;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      sQLTransientConnectionException0.getSuppressed();
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLTransientConnectionException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer.nullTransformer();
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", classArray0, classArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<SQLException, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) transformer0, (Transformer<? super SQLException, ? extends String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) entrySetMapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer1, "", (String) null, "QJu)>$2&z]XI");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<Properties, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0, 27);
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) listIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 37);
      loopingListIterator0.add(sQLTransientConnectionException0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      MapIterator<ArrayList<SQLTransactionRollbackException>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.find((Iterator<ArrayList<HashMap>>) mapIterator0, (Predicate<? super ArrayList<HashMap>>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", 37);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException1);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      ConstantFactory<SQLTransactionRollbackException> constantFactory0 = new ConstantFactory<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      FactoryTransformer<Object, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<Object, SQLTransactionRollbackException>(constantFactory0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode>(mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (long) 37, (-2061L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer.nullTransformer();
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      SingletonListIterator<Locale.FilteringMode> singletonListIterator1 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      IteratorUtils.emptyMapIterator();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "suffix may not be null";
      stringArray0[1] = "lnLym[LDC";
      ObjectArrayListIterator<String> objectArrayListIterator1 = new ObjectArrayListIterator<String>(stringArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3584);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "S&O$to$HC*y<", (-3584));
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) treeSet0;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) (-3584);
      objectArray0[3] = (Object) "org.apache.commons.collections4.IteratorUtils";
      objectArray0[4] = (Object) enumeration0;
      objectArray0[5] = (Object) "S&O$to$HC*y<";
      objectArray0[6] = (Object) sQLSyntaxErrorException0;
      objectArray0[7] = (Object) "S&O$to$HC*y<";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(objectArray0, 1, (-3584));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNodeNS("Cannot remove from list until next() or previous() called", "pZMy&?+>1iVqPNYe");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot remove from list until next() or previous() called");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = 975;
      intArray0[2] = 12;
      intArray0[3] = 570;
      intArray0[4] = 1726;
      intArray0[5] = 1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot remove from list until next() or previous() called", "pZMy&?+>1iVqPNYe", intArray0, sQLTimeoutException0);
      IteratorUtils.singletonIterator(batchUpdateException0);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      StringTokenizer stringTokenizer0 = null;
//      try {
        stringTokenizer0 = new StringTokenizer((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap0);
      sQLClientInfoException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WO[n`&N,", "]", 0, sQLClientInfoException0);
      MockFile mockFile0 = new MockFile("]", "WO[n`&N,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 7);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[3] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[4] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[6] = class4;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("]", classArray0, classArray0);
      Transformer<SQLException, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) entrySetMapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "]", "", "");
      IteratorUtils.emptyListIterator();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringArray0, 10, (-4402));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3584);
      intArray0[1] = 10;
      intArray0[2] = 9;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("", " 9)b)jROOdQh5t-(ER", sQLInvalidAuthorizationSpecException0);
      sQLException0.getSuppressed();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("S&O$to$HC*y<", ".UmD |L`,^~3", intArray0, sQLException0);
      IteratorUtils.singletonIterator(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(3306);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3306);
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer0;
      Integer integer3 = new Integer((int) integerArray0[4]);
      Integer integer4 = new Integer(1375);
      Integer integer5 = new Integer(3306);
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) objectArrayIterator0, (long) integerArray0[0]);
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) skippingIterator0, (Iterator<? extends String>) objectArrayIterator0);
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap1.put("]", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WO[n`&N,", "]", 0, sQLClientInfoException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      TruePredicate.truePredicate();
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("]");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayDeque0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) objectArrayListIterator0;
      iteratorArray0[1] = iterator1;
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) objectArrayListIterator0;
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      iteratorArray0[4] = iterator1;
      iteratorArray0[5] = iterator1;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) loopingListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getLocalName();
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-1915);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) resettableListIterator1);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) loopingIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) loopingIterator0, (Iterator<? extends BatchUpdateException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      SQLDataException sQLDataException0 = new SQLDataException("ListIterator must%not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer.nullTransformer();
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      SingletonListIterator<Locale.FilteringMode> singletonListIterator1 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode1);
      ZippingIterator<Locale.FilteringMode> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) zippingIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      int int0 = (-1978);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-1978));
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator1 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      loopingListIterator1.add(sQLTransientConnectionException0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, anyPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 37);
      loopingListIterator0.add(sQLTransientConnectionException0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate1);
      // Undeclared exception!
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) anyPredicate0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("P9_2wQR$RFc*@(o{:", (String) null, sQLRecoverableException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("i\"dpbz7@}0");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLIntegrityConstraintViolationException2.addSuppressed(sQLRecoverableException1);
      sQLIntegrityConstraintViolationException1.addSuppressed(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("[", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 37);
      loopingListIterator0.add(sQLTransientConnectionException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(anyPredicate0, predicateArray0[0]);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) andPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap1);
      sQLClientInfoException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WO[n`&N,", "]", 0, sQLClientInfoException0);
      MockFile mockFile0 = new MockFile("]", "WO[n`&N,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 7);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[3] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[4] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[6] = class4;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("]", classArray0, classArray0);
      IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransactionRollbackException, ? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0;
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      MapIterator<SQLDataException, BatchUpdateException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, BatchUpdateException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      MapIterator<SQLDataException, Object> mapIterator3 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ?>) mapIterator2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Factory<SQLTransactionRollbackException> factory0 = ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      FactoryTransformer<SQLDataException, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<SQLDataException, SQLTransactionRollbackException>(factory0);
      SQLDataException sQLDataException0 = new SQLDataException("", "FJr.B:E5+r#lGT", sQLTransactionRollbackException0);
      factoryTransformer0.transform(sQLDataException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) mapIterator3, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, (String) null, (String) null, "fhb'D5K.5");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      InvokerTransformer<SQLTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLTransientException, String>("g[@t'\"U_OH.:Sa55z", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, String>) invokerTransformer0, (String) null, (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      NotNullPredicate.notNullPredicate();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<?>) orderedMapIterator0, (-2661L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNodeNS("Cannot remove from list until next() or previous() called", "pZMy&?+>1iVqPNYe");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      TruePredicate.truePredicate();
      iIOMetadataNode0.getParentNode();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      nullIsTruePredicate0.evaluate((Object) null);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, nullIsTruePredicate0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.toString(iterator0);
      SingletonIterator<String> singletonIterator1 = new SingletonIterator<String>("suffix may not be null", false);
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-1915);
      intArray0[2] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WO[n`&N,", "]", 0, sQLClientInfoException0);
      MockFile mockFile0 = new MockFile("]", "WO[n`&N,");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) objectArrayListIterator0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("getValue() can only be called after next() and before remove()");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 372);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>(0);
      EmptyListIterator.emptyListIterator();
      Iterator<ClientInfoStatus> iterator0 = EmptyIterator.emptyIterator();
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ClientInfoStatus clientInfoStatus6 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[6] = clientInfoStatus6;
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0, 0);
      ZippingIterator<ClientInfoStatus> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) iterator0, (Iterator<? extends ClientInfoStatus>) resettableListIterator0, (Iterator<? extends ClientInfoStatus>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) zippingIterator0, (Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Pe");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.singletonIterator((SQLTransientConnectionException) null);
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode>(abstractOrderedMapIteratorDecorator0);
      DataTruncation dataTruncation0 = new DataTruncation(908, false, false, 908, 908, (Throwable) null);
      DataTruncation dataTruncation1 = new DataTruncation((-1677), false, false, 908, 0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation2 = new DataTruncation((-1211), false, false, (-515), 0);
      dataTruncationArray0[0] = dataTruncation2;
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[2] = dataTruncation0;
      dataTruncationArray0[6] = dataTruncation1;
      dataTruncationArray0[4] = dataTruncation0;
      dataTruncationArray0[5] = dataTruncation0;
      DataTruncation dataTruncation3 = new DataTruncation(908, true, false, 0, (-515), dataTruncation0);
      dataTruncationArray0[6] = dataTruncation3;
      dataTruncationArray0[7] = dataTruncation1;
      IteratorUtils.arrayIterator(dataTruncationArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-1915);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      sQLNonTransientException0.spliterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      sQLSyntaxErrorException0.addSuppressed(batchUpdateException0);
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The closure array must not contain a null closure, index ", sQLNonTransientException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0);
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<Properties>) resettableIterator1, (Predicate<? super Properties>) notPredicate0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 37);
      loopingListIterator0.add(sQLTransientConnectionException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[0] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(anyPredicate0, predicate0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) andPredicate0);
      MapIterator<ArrayList<SQLTransactionRollbackException>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.find((Iterator<ArrayList<HashMap>>) mapIterator0, (Predicate<? super ArrayList<HashMap>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) andPredicate0, (-1201));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(stack0);
      loopingIterator0.hasNext();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) loopingIterator0, (Predicate<? super SQLNonTransientException>) andPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[0] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(anyPredicate0, predicate0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) andPredicate0);
      MapIterator<ArrayList<SQLTransactionRollbackException>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.find((Iterator<ArrayList<HashMap>>) mapIterator0, (Predicate<? super ArrayList<HashMap>>) predicate0);
      int int0 = (-1201);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) andPredicate0, (-1201));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "Pe";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Pe");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<TreeSet<Properties>, ServiceLoader<ArrayDeque>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableIterator<Hashtable<SQLRecoverableException, SQLException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<TreeSet<Properties>>) orderedMapIterator0, (Object) resettableIterator0);
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable1 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable2 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable3 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable4 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable5 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable6 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      int int0 = (-3770);
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>[] hashtableArray0 = (Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>[]) Array.newInstance(Hashtable.class, 8);
      hashtableArray0[0] = hashtable4;
      hashtableArray0[1] = hashtable5;
      hashtableArray0[2] = hashtable4;
      hashtableArray0[3] = hashtable6;
      hashtableArray0[4] = hashtable2;
      Class<DataTruncation> class0 = DataTruncation.class;
      String string1 = "%7|DcRV'v/\\WyzBJxGJ";
      SQLWarning sQLWarning0 = new SQLWarning("%7|DcRV'v/WyzBJxGJ", "Dh}&ea:z[+(3C]8Aq0", (-3770));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("%7|DcRV'v/WyzBJxGJ", sQLWarning0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("Pe", "6J>E%>u\"kHkt]2", 512, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("org.apache.commons.collections4.functors.ForClosure", (Map<String, ClientInfoStatus>) null, sQLWarning0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) hashtable4, (-3770));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-1915);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      ResettableListIterator<Locale.FilteringMode> resettableListIterator1 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 1, 1);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) resettableListIterator1);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Transformer<Object, Locale.FilteringMode> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) iterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation(9, true, false, 9, 3437);
      dataTruncationArray0[0] = dataTruncation0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(zippingIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsExceptionPredicate0);
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) iterator1);
      ZippingIterator<Locale.FilteringMode> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) zippingIterator1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(dataTruncation0);
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      OrderedMapIterator<Object, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 1);
      int[] intArray0 = new int[6];
      intArray0[1] = (-1915);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("o");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      sQLSyntaxErrorException0.addSuppressed(batchUpdateException0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayListIterator(sQLWarningArray0);
      IteratorUtils.size(orderedMapIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<Predicate<Object>, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) mapIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      IteratorUtils.pushbackIterator((Iterator<?>) mapIterator0);
      Comparator<Object> comparator0 = null;
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 5);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      int int0 = (-398);
      HashMap<String, ClientInfoStatus> hashMap0 = null;
//      try {
        hashMap0 = new HashMap<String, ClientInfoStatus>((-398));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal initial capacity: -398
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation((-1801), false, true, (-1801), 2620);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1302, true, true, (-1801), 1302, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "%=v#a6)ogE,U[AK", 1302);
      DataTruncation dataTruncation2 = new DataTruncation(1302, false, true, 1302, 10, sQLInvalidAuthorizationSpecException0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2289, true, true, 1520, 1520, sQLInvalidAuthorizationSpecException0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-477), false, false, 1302, 0);
      dataTruncationArray0[4] = dataTruncation4;
      SQLTransientException sQLTransientException0 = new SQLTransientException("u3`", "");
      DataTruncation dataTruncation5 = new DataTruncation((-477), false, true, 10, (-1801), sQLTransientException0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(10, false, false, (-90), 2289, dataTruncation5);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(1302, true, true, 10, 37);
      dataTruncationArray0[7] = dataTruncation7;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.unmodifiableIterator((Iterator<ArrayList<ArrayDeque>>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransactionRollbackException, ? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0;
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLDataException, BatchUpdateException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, BatchUpdateException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ?>) mapIterator2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator1, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[3] = iterator0;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) objectArrayListIterator0);
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) objectArrayListIterator0);
      Iterator<Locale.FilteringMode> iterator2 = IteratorUtils.unmodifiableIterator((Iterator<Locale.FilteringMode>) listIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator1, (Iterator<? extends Locale.FilteringMode>) iterator2);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) iterator1);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-1310));
      Integer integer3 = new Integer((-2976));
      Integer integer4 = new Integer((-2976));
      Integer integer5 = new Integer(10);
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer((-2976));
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      stack0.add(sQLFeatureNotSupportedException0);
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) predicate0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      iIOMetadataNode0.getFirstChild();
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate3;
      Predicate<Object> predicate4 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[1] = predicate4;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate3;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WO[n`&N,", "]", 0, sQLClientInfoException0);
      MockFile mockFile0 = new MockFile("]", "WO[n`&N,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 7);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[5] = class5;
      Class<Properties> class6 = Properties.class;
      classArray0[6] = class6;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", classArray0, classArray0);
      Transformer<SQLException, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0, (Transformer<? super SQLException, ? extends String>) invokerTransformer0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) entrySetMapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "]", "", "");
      // Undeclared exception!
//      try { 
        mockPrintWriter1.append((CharSequence) "", 0, (-1485));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      IteratorUtils.loopingIterator((Collection<?>) hashSet0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) objectArrayListIterator0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) listIterator1, (Iterator<? extends Locale.FilteringMode>) listIterator1);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      StringTokenizer stringTokenizer0 = null;
//      try {
        stringTokenizer0 = new StringTokenizer((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Transformer<Object, Locale.FilteringMode> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      assertNotNull(iterator0);
      
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) iterator0);
      assertNotNull(zippingIterator0);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation(9, true, false, 9, 3437);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 0, (-989), (Throwable) null);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertNotNull(dataTruncation1);
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, false, true, 3437, 0, dataTruncation1);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertNotNull(dataTruncation2);
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, false, false, 0, 3437, dataTruncation2);
      assertFalse(dataTruncation1.equals((Object)dataTruncation2));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals(0, dataTruncation3.getErrorCode());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("22001", dataTruncation3.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertNotNull(dataTruncation3);
      
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-989), false, false, (-1677), 0);
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertEquals("22001", dataTruncation4.getSQLState());
      assertEquals(0, dataTruncation4.getErrorCode());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertNotNull(dataTruncation4);
      
      dataTruncationArray0[4] = dataTruncation4;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertEquals(5, dataTruncationArray0.length);
      assertNotNull(resettableIterator0);
      
      Iterable<DataTruncation> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) resettableIterator0);
      assertEquals(5, dataTruncationArray0.length);
      assertNotNull(iterable0);
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) notPredicate0);
      LinkedList<StringTokenizer>[] linkedListArray0 = (LinkedList<StringTokenizer>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      linkedListArray0[0] = linkedList0;
      LinkedList<StringTokenizer> linkedList1 = new LinkedList<StringTokenizer>();
      linkedListArray0[1] = linkedList1;
      LinkedList<StringTokenizer> linkedList2 = new LinkedList<StringTokenizer>();
      linkedListArray0[2] = linkedList2;
      LinkedList<StringTokenizer> linkedList3 = new LinkedList<StringTokenizer>();
      linkedListArray0[3] = linkedList3;
      IteratorUtils.arrayListIterator(linkedListArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MapIterator<String, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<String, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLNonTransientException>(mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "Pe";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Pe");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      String string0 = "";
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.loopingIterator((Collection<?>) hashSet0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      int[] intArray0 = new int[2];
      intArray0[0] = 989;
      intArray0[1] = 989;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("J*r", "J*r", 989, intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("mlP =gEZ", (String) null, 989, batchUpdateException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode>(orderedMapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends IIOMetadataNode>) orderedMapIterator1);
      MapIterator<SQLNonTransientConnectionException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, IIOMetadataNode>) orderedMapIterator1);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator2);
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>(989);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(hashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) loopingIterator0, (Iterator<? extends BatchUpdateException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator1, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[C6?r3k$");
      iIOMetadataNode0.getAttributeNodeNS("bj/mYn;R'kx^F", "[C6?r3k$");
      iIOMetadataNode0.getLocalName();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap1.put("]", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WO[n`&N,", "]", 0, sQLClientInfoException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator1 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator1);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      TruePredicate.truePredicate();
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("]");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayDeque0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 25);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) objectArrayListIterator0;
      iteratorArray0[1] = iterator1;
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) objectArrayListIterator0;
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      iteratorArray0[4] = iterator1;
      iteratorArray0[5] = iterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransactionRollbackException, ? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0;
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLDataException, BatchUpdateException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, BatchUpdateException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ?>) mapIterator2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator1, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[3] = iterator0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayDeque0);
      iteratorArray0[6] = iterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", "");
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      EntrySetToMapIteratorAdapter<ArrayDeque<SQLFeatureNotSupportedException>, LinkedHashSet<SQLException>> entrySetToMapIteratorAdapter0 = null;
//      try {
        entrySetToMapIteratorAdapter0 = new EntrySetToMapIteratorAdapter<ArrayDeque<SQLFeatureNotSupportedException>, LinkedHashSet<SQLException>>((Set<Map.Entry<ArrayDeque<SQLFeatureNotSupportedException>, LinkedHashSet<SQLException>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableListIterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null, "[]", "[]", "[]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[C6?r3k$");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-135), sQLClientInfoException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      Predicate<Object> predicate3 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate3;
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate1;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, nullIsTruePredicate0);
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Predicate<? super SQLNonTransientException>) predicate1);
      IteratorUtils.toString(iterator1);
      ResettableListIterator<Hashtable<SQLRecoverableException, SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Hashtable<SQLRecoverableException, SQLException>>) resettableListIterator0, (-135));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -135
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<Predicate<Object>>) null, (Transformer<? super Predicate<Object>, String>) constantTransformer0);
      IteratorUtils.toString((Iterator<Predicate<Object>>) null, (Transformer<? super Predicate<Object>, String>) constantTransformer0, "[]", "[]", "");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<SQLWarning, Vector<SQLException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<SQLWarning>) orderedMapIterator0, (Transformer<? super SQLWarning, String>) ifTransformer0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      int int0 = 397;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 397, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<Integer, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Integer, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLClientInfoException>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) abstractMapIteratorDecorator0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning("delimiter may not be null", "delimiter may not be null", sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransientConnectionException>(orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Pe");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<TreeSet<Properties>, ServiceLoader<ArrayDeque>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableIterator<Hashtable<SQLRecoverableException, SQLException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<TreeSet<Properties>>) orderedMapIterator0, (Object) resettableIterator0);
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable1 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable2 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable3 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable4 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable5 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable6 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>[] hashtableArray0 = (Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>[]) Array.newInstance(Hashtable.class, 8);
      hashtableArray0[0] = hashtable4;
      hashtableArray0[1] = hashtable5;
      hashtableArray0[2] = hashtable4;
      hashtableArray0[3] = hashtable6;
      hashtableArray0[4] = hashtable2;
      hashtableArray0[5] = hashtable5;
      hashtableArray0[6] = hashtable2;
      hashtableArray0[7] = hashtable6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(hashtableArray0, (-3770), 3794);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Transformer<Object, Locale.FilteringMode> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) iterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation(9, true, false, 9, 3437);
      dataTruncationArray0[0] = dataTruncation0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(zippingIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsExceptionPredicate0);
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) iterator1);
      ZippingIterator<Locale.FilteringMode> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) zippingIterator1);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) list0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(dataTruncation0);
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Pe");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.singletonIterator((SQLTransientConnectionException) null);
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode>(orderedMapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLNonTransientConnectionException, IIOMetadataNode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends IIOMetadataNode>) orderedMapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>(0);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(hashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) loopingIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLException>) null);
      int int0 = 0;
      int int1 = 5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "[]", 0, 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("EQUAL", (String) null, (-1));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getUserObject();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "Pe", mockThrowable0);
      Factory<SQLTransactionRollbackException> factory0 = ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      FactoryTransformer<SQLDataException, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<SQLDataException, SQLTransactionRollbackException>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransactionRollbackException, ? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0;
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      MapIterator<SQLDataException, BatchUpdateException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, BatchUpdateException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      MapIterator<SQLDataException, Object> mapIterator3 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ?>) mapIterator2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Factory<SQLTransactionRollbackException> factory0 = ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      FactoryTransformer<SQLDataException, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<SQLDataException, SQLTransactionRollbackException>(factory0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) mapIterator3, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
      MapIterator<SQLTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator4 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator5 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLIntegrityConstraintViolationException>) mapIterator4);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) mapIterator5);
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) linkedHashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0, defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IteratorUtils.find(iterator1, (Predicate<? super SQLTransientConnectionException>) nullIsExceptionPredicate0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.find((Iterator<ArrayList<HashMap>>) iterator0, (Predicate<? super ArrayList<HashMap>>) nullIsExceptionPredicate0);
      // Undeclared exception!
//      try { 
        Locale.FilteringMode.valueOf((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Name is null
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransactionRollbackException, ? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, BatchUpdateException>(mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0;
      Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLTransientException>>(hashtable0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLDataException, BatchUpdateException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, BatchUpdateException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      MapIterator<SQLDataException, Object> mapIterator3 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ?>) mapIterator2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Factory<SQLTransactionRollbackException> factory0 = ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      FactoryTransformer<SQLDataException, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<SQLDataException, SQLTransactionRollbackException>(factory0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) mapIterator3, (Transformer<? super SQLDataException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      iteratorArray0[2] = iterator1;
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator1, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[3] = iterator2;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      ArrayListIterator<SQLTransactionRollbackException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransactionRollbackException>(iterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(3316);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3316);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[4] = integer0;
      int int0 = 10;
      Integer integer3 = new Integer(10);
      integerArray0[5] = integer3;
      Integer integer4 = new Integer(10);
      integerArray0[6] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[6] = integer5;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLWarning[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MapIterator<String, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<String, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLNonTransientException>(mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      String string0 = "";
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      int int1 = 100;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null, 0, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WO[n`&N,", "]", 0, sQLClientInfoException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      IteratorUtils.toArray(iterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      TruePredicate.truePredicate();
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Predicate<? super SQLNonTransientException>) predicate2);
      IteratorUtils.toString(iterator1);
      ResettableListIterator<Hashtable<SQLRecoverableException, SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Hashtable<SQLRecoverableException, SQLException>>) resettableListIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Iterator<Object> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) null, 123);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<SQLSyntaxErrorException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) mapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(728);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, 728);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", "org.apache.commons.collections4.bidimap.DualTreeBidiMap", 0, sQLClientInfoException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = FalsePredicate.falsePredicate();
      predicateArray0[2] = predicate3;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate3);
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate4 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate4, predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) andPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nAGCyQ?Fo";
      stringArray0[1] = "bak:rc";
      stringArray0[2] = "-?ixp.Ac~6))4H+G";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "ODrRl)Sn*'[[@%3K?Z";
      stringArray0[6] = "B/H'>0%";
      stringArray0[7] = "prefix may not be null";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringArray0, 1057);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      SQLWarning sQLWarning0 = new SQLWarning("Om@I(", "Om@I(", 512, (Throwable) null);
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      sQLExceptionArray0[1] = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Om@I(", sQLException0);
      sQLExceptionArray0[2] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Om@I(", "Om@I(", 0, sQLInvalidAuthorizationSpecException0);
      sQLExceptionArray0[3] = (SQLException) sQLTransactionRollbackException0;
      SQLException sQLException1 = new SQLException("Om@I(");
      sQLExceptionArray0[4] = sQLException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Entry does not exist: ", "Entry does not exist: ", 10, sQLInvalidAuthorizationSpecException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      sQLExceptionArray0[5] = (SQLException) sQLTransientException0;
      SQLException sQLException2 = new SQLException();
      sQLExceptionArray0[6] = sQLException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", (String) null);
      SQLException sQLException3 = new SQLException("Om@I(", "Om@I(", sQLInvalidAuthorizationSpecException1);
      sQLExceptionArray0[7] = sQLException3;
      SQLDataException sQLDataException0 = new SQLDataException("", sQLException3);
      sQLExceptionArray0[8] = (SQLException) sQLDataException0;
      IteratorUtils.arrayListIterator(sQLExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4472;
      intArray0[1] = (-1678);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1265;
      SQLException sQLException0 = new SQLException("suffix may not be null", "^Yu:1geyks\"", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("suffix may not be null", intArray0, sQLException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 1265);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ResettableIterator<TreeSet<Properties>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      int[] intArray0 = new int[2];
      intArray0[0] = 989;
      intArray0[1] = 989;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("J*r", "J*r", 989, intArray0);
      IteratorUtils.contains((Iterator<TreeSet<Properties>>) resettableIterator0, (Object) batchUpdateException0);
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>[] hashtableArray0 = (Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>[]) Array.newInstance(Hashtable.class, 7);
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable1 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      hashtableArray0[1] = hashtable1;
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable2 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      hashtableArray0[2] = hashtable2;
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable3 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      hashtableArray0[3] = hashtable3;
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable4 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      hashtableArray0[4] = hashtable4;
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable5 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      hashtableArray0[5] = hashtable5;
      Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException> hashtable6 = new Hashtable<Class<DataTruncation>, SQLNonTransientConnectionException>();
      hashtableArray0[6] = hashtable6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(hashtableArray0, (-3770), 442);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[C6?r3k$");
      iIOMetadataNode0.getAttributeNodeNS("bj/mYn;R'kx^F", "[C6?r3k$");
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.replaceChild((Node) null, (Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // newChild == null!
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(3316);
      assertEquals(3316, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3316);
      assertEquals(3316, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(91);
      assertEquals(91, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertEquals(3316, (int)integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(8, integerArray0.length);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      int int0 = 10;
      Integer integer5 = new Integer(10);
      assertEquals(10, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(10);
      assertEquals(10, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)int0));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertEquals(10, (int)integer7);
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      assertEquals(8, integerArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(objectArrayListIterator0);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>(treeSet0);
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate2);
      predicateArray0[4] = predicate4;
      // Undeclared exception!
//      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 5 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, LinkedList<SQLDataException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertEquals(5, locale_FilteringModeArray0.length);
      assertNotNull(locale_FilteringModeArray0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0, 123, 123);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1727);
      intArray0[1] = (-1727);
      intArray0[2] = (-1727);
      intArray0[3] = (-1727);
      intArray0[4] = 0;
      intArray0[5] = (-1727);
      intArray0[6] = (-1727);
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fB*(V|]\"veb9", "fB*(V|]\"veb9", (-1727), intArray0, sQLRecoverableException0);
      assertArrayEquals(new int[] {(-1727), (-1727), (-1727), (-1727), 0, (-1727), (-1727)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: fB*(V|]\"veb9", batchUpdateException0.toString());
      assertEquals("fB*(V|]\"veb9", batchUpdateException0.getMessage());
      assertEquals("fB*(V|]\"veb9", batchUpdateException0.getSQLState());
      assertEquals((-1727), batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1727);
      intArray1[1] = 0;
      intArray1[2] = (-1727);
      intArray1[3] = (-805);
      intArray1[4] = 5230;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("bb 3*CnwxI)('", intArray1, sQLRecoverableException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1727), 0, (-1727), (-805), 5230, 0, 0, 0}, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("bb 3*CnwxI)('", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: bb 3*CnwxI)('", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLRecoverableException0.getMessage());
      assertNotNull(batchUpdateException1);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0, 0);
      assertEquals(2, batchUpdateExceptionArray0.length);
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertNotNull(objectArrayListIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      assertEquals(2, batchUpdateExceptionArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      MapIterator<Properties, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLException>) orderedMapIterator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(mapIterator0);
      
      int int0 = 281;
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0, 281);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      int int1 = (-2948);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 281, (-2948));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException1);
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("|sczUC)lU5N5Yf/", "|sczUC)lU5N5Yf/");
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertEquals("java.sql.SQLNonTransientConnectionException: |sczUC)lU5N5Yf/", sQLNonTransientConnectionException2.toString());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("|sczUC)lU5N5Yf/", sQLNonTransientConnectionException2.getMessage());
      assertEquals("|sczUC)lU5N5Yf/", sQLNonTransientConnectionException2.getSQLState());
      assertNotNull(sQLNonTransientConnectionException2);
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("delimiter may not be null", "", (-1994), sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-1994), sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("delimiter may not be null", sQLNonTransientConnectionException3.getMessage());
      assertEquals("", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: delimiter may not be null", sQLNonTransientConnectionException3.toString());
      assertNotNull(sQLNonTransientConnectionException3);
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("Closure must not be null", sQLNonTransientConnectionException3);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-1994), sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("delimiter may not be null", sQLNonTransientConnectionException3.getMessage());
      assertEquals("", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: delimiter may not be null", sQLNonTransientConnectionException3.toString());
      assertEquals("Closure must not be null", sQLNonTransientConnectionException4.getMessage());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Closure must not be null", sQLNonTransientConnectionException4.toString());
      assertNull(sQLNonTransientConnectionException4.getSQLState());
      assertNotNull(sQLNonTransientConnectionException4);
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException5.toString());
      assertNull(sQLNonTransientConnectionException5.getSQLState());
      assertNull(sQLNonTransientConnectionException5.getMessage());
      assertEquals(0, sQLNonTransientConnectionException5.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException5);
      
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("5IL}'D,2)6Er.{%)3T", sQLNonTransientConnectionException3);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException4));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-1994), sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("delimiter may not be null", sQLNonTransientConnectionException3.getMessage());
      assertEquals("", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: delimiter may not be null", sQLNonTransientConnectionException3.toString());
      assertNull(sQLNonTransientConnectionException6.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: 5IL}'D,2)6Er.{%)3T", sQLNonTransientConnectionException6.toString());
      assertEquals("5IL}'D,2)6Er.{%)3T", sQLNonTransientConnectionException6.getMessage());
      assertEquals(0, sQLNonTransientConnectionException6.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException6);
      
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("", "|sczUC)lU5N5Yf/", sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException4));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException7.toString());
      assertEquals("", sQLNonTransientConnectionException7.getMessage());
      assertEquals("|sczUC)lU5N5Yf/", sQLNonTransientConnectionException7.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException7.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException7);
      
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("->Q", " is invalid for size ", sQLNonTransientConnectionException5);
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException7));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException7));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertEquals(" is invalid for size ", sQLNonTransientConnectionException8.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ->Q", sQLNonTransientConnectionException8.toString());
      assertEquals("->Q", sQLNonTransientConnectionException8.getMessage());
      assertEquals(0, sQLNonTransientConnectionException8.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException5.toString());
      assertNull(sQLNonTransientConnectionException5.getSQLState());
      assertNull(sQLNonTransientConnectionException5.getMessage());
      assertEquals(0, sQLNonTransientConnectionException5.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException8);
      
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      assertEquals(9, sQLNonTransientConnectionExceptionArray0.length);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableIterator<LinkedList<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 360);
      assertEquals(360, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      assertEquals(360, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) singletonIterator0);
      assertEquals(360, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      SkippingIterator<SQLTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) listIterator0, (long) 360);
      assertEquals(360, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertFalse(singletonIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
      
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 2667);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Q*+^|b2Wo!G", "Q*+^|b2Wo!G");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getMessage());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Spliterator<Throwable> spliterator0 = sQLIntegrityConstraintViolationException0.spliterator();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(spliterator0);
      
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getMessage());
      
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Q*+^|b2Wo!G", sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(iterator0);
      
      EntrySetToMapIteratorAdapter<ArrayDeque<SQLFeatureNotSupportedException>, LinkedHashSet<SQLException>> entrySetToMapIteratorAdapter0 = null;
//      try {
        entrySetToMapIteratorAdapter0 = new EntrySetToMapIteratorAdapter<ArrayDeque<SQLFeatureNotSupportedException>, LinkedHashSet<SQLException>>((Set<Map.Entry<ArrayDeque<SQLFeatureNotSupportedException>, LinkedHashSet<SQLException>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, 1L);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) boundedIterator0, 1L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("e3R", "e3R");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Comparator<Object> comparator0 = null;
      Iterator<EnumSet<Locale.FilteringMode>>[] iteratorArray0 = (Iterator<EnumSet<Locale.FilteringMode>>[]) Array.newInstance(Iterator.class, 5);
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator1 = arrayList0.listIterator();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator2 = IteratorUtils.unmodifiableListIterator(listIterator1);
      iteratorArray0[0] = (Iterator<EnumSet<Locale.FilteringMode>>) listIterator2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
