/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 05:06:00 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      stack0.add(locale_Category0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) stack0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Locale.Category>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.addLast(locale_Category0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "Gc";
      IteratorUtils.getIterator("Gc");
      Hashtable<Locale.Category, SQLFeatureNotSupportedException>[] hashtableArray0 = (Hashtable<Locale.Category, SQLFeatureNotSupportedException>[]) Array.newInstance(Hashtable.class, 2);
      Hashtable<Locale.Category, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Locale.Category, SQLFeatureNotSupportedException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<Locale.Category, SQLFeatureNotSupportedException> hashtable1 = new Hashtable<Locale.Category, SQLFeatureNotSupportedException>();
      hashtableArray0[1] = hashtable1;
      ResettableIterator<Hashtable<Locale.Category, SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(hashtableArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Hashtable<Locale.Category, SQLFeatureNotSupportedException>>) resettableIterator0, (Transformer<? super Hashtable<Locale.Category, SQLFeatureNotSupportedException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("m");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends String>) iterator0, (Class<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.toString((Iterator<Locale.Category>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLNonTransientException>>) null, (Transformer<? super LinkedHashSet<SQLNonTransientException>, String>) null, "[]", "[]", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.toString((Iterator<Locale.Category>) null);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      IteratorUtils.arrayIterator(propertiesArray0, 4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = priorityQueue0.iterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 4, (Map<String, ClientInfoStatus>) null);
      priorityQueue0.add(sQLClientInfoException0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) iterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Iterable<SQLFeatureNotSupportedException> iterable0 = new Vector<SQLFeatureNotSupportedException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.getIterator(nodeListIterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("9");
      Integer integer0 = new Integer((-2350));
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "prefix may not be null", 311);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class1 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class1);
      IteratorUtils.isEmpty(orderedIterator0);
      Integer integer1 = new Integer(126);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("k", "k}", hashMap0, sQLSyntaxErrorException0);
      DefaultEquator.defaultEquator();
      EqualPredicate<SQLClientInfoException> equalPredicate0 = new EqualPredicate<SQLClientInfoException>(sQLClientInfoException1);
      IteratorUtils.find((Iterator<SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) equalPredicate0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      ForClosure<Properties> forClosure0 = new ForClosure<Properties>(9, chainedClosure0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      ForClosure<Properties> forClosure1 = new ForClosure<Properties>(126, chainedClosure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Properties>) singletonIterator0, (Closure<? super Properties>) forClosure1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.addLast(locale_Category0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iIOMetadataNode0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) reverseListIterator0, (Transformer<? super Locale.Category, String>) ifTransformer0, (String) null, (String) null, "P]TlXQ!pYIYsL");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer(":#AScA8?4rFI=V");
      TransformerClosure<Properties> transformerClosure0 = new TransformerClosure<Properties>(transformer0);
      IfClosure<Properties> ifClosure0 = new IfClosure<Properties>(predicate0, transformerClosure0, transformerClosure0);
      ForClosure<Properties> forClosure0 = new ForClosure<Properties>(100, ifClosure0);
      ForClosure<Properties> forClosure1 = new ForClosure<Properties>(904, forClosure0);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) forClosure0);
      ResettableIterator<ClientInfoStatus> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<ClientInfoStatus>) resettableIterator0, (Closure<? super ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer(":#AScA8?4rFI=V");
      TransformerClosure<Properties> transformerClosure0 = new TransformerClosure<Properties>(transformer0);
      IfClosure<Properties> ifClosure0 = new IfClosure<Properties>(predicate0, transformerClosure0, transformerClosure0);
      ForClosure<Properties> forClosure0 = new ForClosure<Properties>(904, transformerClosure0);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) ifClosure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      DefaultEquator.defaultEquator();
      Integer integer0 = new Integer((-1670));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ConstantTransformer.constantTransformer(batchUpdateException0);
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Locale.Category>[]) predicateArray0);
      IteratorUtils.find((Iterator<Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) predicate0);
      IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "9";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("9");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(":6LWJ? 7PP<oVy6Bx", sQLTransientConnectionException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      String string1 = "";
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", 123, sQLTransientConnectionException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("9", "9");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("I;!.x8OaC34utN-cQ");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 0, (-2645));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("9");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(":6LWJ? 7PP<oVy6Bx", sQLTransientConnectionException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, 1);
      IteratorUtils.emptyIterator();
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator1 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLException sQLException0 = new SQLException("9", "", 10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("9");
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(":6LWJ? 7PP<oVy6Bx", sQLTransientConnectionException2);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException3;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException2;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, 1);
      IteratorUtils.emptyIterator();
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator1 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$+{UA;m", sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(9, false, false, 9, (-1), batchUpdateException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.DataTruncation.class) , any(java.sql.DataTruncation.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<DataTruncation> predicate0 = ComparatorPredicate.comparatorPredicate(dataTruncation0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) singletonIterator0, (Predicate<? super DataTruncation>) predicate0);
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTimeoutException, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Predicate<SQLException> predicate1 = NotNullPredicate.notNullPredicate();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) mapIterator1, (Predicate<? super SQLTimeoutException>) predicate1);
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) listIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0, 192);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1749);
      intArray0[1] = (-1749);
      intArray0[2] = (-1749);
      intArray0[3] = (-1749);
      intArray0[4] = (-1388);
      intArray0[5] = (-1749);
      intArray0[6] = (-1749);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("xGmzgl^@{:27", intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a<Ur1zR%m\"R[", "a<Ur1zR%m\"R[", hashMap0, batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("a<Ur1zR%m\"R[", "E,+_}Ck", (-1749), sQLClientInfoException0);
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("+w3a[I%?q\"");
      iIOMetadataNode0.getElementsByTagNameNS("+w3a[I%?q\"", "+w3a[I%?q\"");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("Enumeration must not be null", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.nodeListIterator(nodeList0);
      int int0 = 186;
      float float0 = 0.0F;
      IteratorUtils.getIterator("Enumeration must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 186);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      DataTruncation dataTruncation0 = new DataTruncation(913, false, false, 913, 913);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<DataTruncation>) singletonIterator0, (Predicate<? super DataTruncation>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      MapIterator<DataTruncation, Closure<Boolean>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, Closure<Boolean>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) mapIterator1, (Predicate<? super DataTruncation>) predicate0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) resettableListIterator0);
      IteratorUtils.toString((Iterator<Locale.Category>) listIterator0);
      OrderedMapIterator<Properties, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLSyntaxErrorException>(orderedMapIterator0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0, (Iterator<? extends Properties>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends Properties>) zippingIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0, (Iterator<? extends Properties>) zippingIterator0, (Iterator<? extends Properties>) orderedMapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(109, false, false, 100, 9);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>(2125, 2744.186F);
      Transformer<Object, DataTruncation> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashtable0);
      IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      OrderedMapIterator<Iterator<SQLInvalidAuthorizationSpecException>, SQLTransientException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLInvalidAuthorizationSpecException>, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLInvalidAuthorizationSpecException>, SQLTransientException>(orderedMapIterator1);
      IteratorUtils.toString((Iterator<Iterator<SQLInvalidAuthorizationSpecException>>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(37, true, true, 37, 1);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) treeSet0);
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.contains(iterator0, (Object) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 44, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Equator must not be null.", "remove() cannot be called", 2228);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Equator must not be null.", "Equator must not be null.", sQLTransactionRollbackException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Transformer must return an instanceof Boolean, it was a null object", "Equator must not be null.", sQLNonTransientException0);
      IteratorUtils.singletonListIterator(sQLRecoverableException0);
      OrderedMapIterator<StringTokenizer, Stack<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<StringTokenizer, Stack<SQLSyntaxErrorException>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends Stack<SQLSyntaxErrorException>>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<StringTokenizer, Stack<SQLSyntaxErrorException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, Stack<SQLSyntaxErrorException>>(orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) abstractOrderedMapIteratorDecorator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Stack<InstanceofPredicate> stack1 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack1);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null, false);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) singletonIterator0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.toString((Iterator<Locale.Category>) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "[]", (-3260));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, (-3260), 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      String[] stringArray0 = IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<ClientInfoStatus>[] classArray0 = (Class<ClientInfoStatus>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) stringArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, ? extends SQLFeatureNotSupportedException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("org.apwche.commons.collections4.iterators.AbstractIeratorDecorator");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apwche.commons.collections4.iterators.AbstractIeratorDecorator");
      IteratorUtils.toArray(iterator0);
      List<DataTruncation> list0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (Transformer<? super SQLWarning, ? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NOPTransformer.nopTransformer();
      Iterator<IIOMetadataNode> iterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.emptyIterator();
      EmptyListIterator.emptyListIterator();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) null, (Transformer<? super SQLWarning, ? extends SQLFeatureNotSupportedException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
      IteratorUtils.emptyIterator();
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 6);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) null, (Transformer<? super SQLWarning, ? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("Enumeration must not be null", "");
      IteratorUtils.nodeListIterator(nodeList0);
      HashMap<StringTokenizer, String> hashMap0 = null;
//      try {
        hashMap0 = new HashMap<StringTokenizer, String>(186, 0.0F);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal load factor: 0.0
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyListIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("' does not exist");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, "' does not exist", (-2176), sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, 2132);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2129
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J0({qe6{");
      IteratorUtils.getIterator(iIOMetadataNode0);
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      OrderedMapIterator<Properties, ArrayDeque<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, ArrayDeque<String>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, ArrayDeque<String>>(orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) orderedMapIterator0, (Iterator<? extends Properties>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionPredicate.exceptionPredicate();
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerClosure<Properties> transformerClosure0 = new TransformerClosure<Properties>(transformer0);
      IfClosure<Properties> ifClosure0 = new IfClosure<Properties>((Predicate<? super Properties>) null, transformerClosure0, transformerClosure0);
      ForClosure<Properties> forClosure0 = new ForClosure<Properties>(100, ifClosure0);
      Vector<Properties> vector0 = new Vector<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) vector0);
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(resettableIterator0);
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) listIteratorWrapper0);
      IteratorUtils.apply((Iterator<Properties>) listIterator0, (Closure<? super Properties>) ifClosure0);
      ResettableListIterator<Boolean> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) resettableListIterator0, (Predicate<? super Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      InvokerTransformer.invokerTransformer("Max parameter must not be negative.");
      Object object0 = new Object();
      OrderedMapIterator<SQLRecoverableException, HashMap<LinkedList, SQLTimeoutException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>(913);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IfTransformer<SQLRecoverableException, String> ifTransformer0 = new IfTransformer<SQLRecoverableException, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLRecoverableException, String>) ifTransformer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Estimated size must be greater than 0", false);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.getIterator("org.apache.commons.collections4.iterators.AbstractIteratorDecorator");
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.toString((Iterator<Locale.Category>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("Max parameter must not be negative.");
      TransformerClosure<Properties> transformerClosure0 = new TransformerClosure<Properties>(transformer0);
      IfClosure<Properties> ifClosure0 = new IfClosure<Properties>(predicate0, transformerClosure0, transformerClosure0);
      ForClosure<Properties> forClosure0 = new ForClosure<Properties>(913, ifClosure0);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) forClosure0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      ListIterator<LinkedHashSet<PriorityQueue>> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) listIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyListIterator();
      MapIterator<Object, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Object, Locale.Category> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.contains((Iterator<Object>) mapIterator1, (Object) listIterator1);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 6);
      MapIterator<LinkedHashSet<ClientInfoStatus>, SQLSyntaxErrorException> mapIterator2 = IteratorUtils.emptyMapIterator();
      int int0 = 10;
      ArrayIterator<String> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<String>(mapIterator2, (-828), 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Object) resettableIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLTransactionRollbackException, HashSet<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      int int0 = 128;
      Integer integer0 = new Integer(128);
      IteratorUtils.singletonIterator(integer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) iterator0);
      String[] stringArray0 = new String[1];
      String string0 = "8";
      stringArray0[0] = "8";
      IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.emptyListIterator();
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Estimated size must be greater than 0", false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLargeUpdateCounts();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Locale.Category>[]) predicateArray0);
      IteratorUtils.find((Iterator<Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) predicateArray0[0]);
      NotNullPredicate.notNullPredicate();
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableIterator0, (long) (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Estimated size must be greater than 0", false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLargeUpdateCounts();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Locale.Category>[]) predicateArray0);
      IteratorUtils.find((Iterator<Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) predicateArray0[0]);
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FilterListIterator.remove() is not supported.");
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator1, (Iterator<? extends SQLTimeoutException>) resettableIterator1);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) zippingIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Hashtable<InstanceofPredicate, Stack<SQLException>> hashtable0 = new Hashtable<InstanceofPredicate, Stack<SQLException>>();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      hashtable0.putIfAbsent(instanceofPredicate0, stack0);
      EntrySetMapIterator<InstanceofPredicate, Stack<SQLException>> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, Stack<SQLException>>(hashtable0);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) entrySetMapIterator0, 141);
      IteratorUtils.pushbackIterator((Iterator<?>) entrySetMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<Properties, ArrayDeque<String>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, ArrayDeque<String>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, ArrayDeque<String>>(orderedMapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Properties>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator((StringTokenizer) null);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) listIterator0, (Iterator<? extends StringTokenizer>) listIterator0);
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<Properties, ArrayDeque<String>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, ArrayDeque<String>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, ArrayDeque<String>>(orderedMapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) orderedMapIterator0, (Iterator<? extends Properties>) orderedMapIterator0);
      Integer integer0 = new Integer(5);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 125);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      SkippingIterator<SQLNonTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 5887L);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*;/(FP2jzfdy^vnD>7G");
      IteratorUtils.emptyOrderedMapIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(nullIsTruePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Iterator<BatchUpdateException>[]) null, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Vector<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      EmptyIterator.resettableEmptyIterator();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Integer integer0 = new Integer(126);
      IteratorUtils.getIterator(integer0);
      SQLDataException sQLDataException0 = new SQLDataException("k", "9t!odswQgluIcq2:H,", 109);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      IteratorUtils.isEmpty(nodeListIterator0);
      int int0 = new Integer(109);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLClientInfoException>) listIterator1, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<Vector<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator((Vector<IIOMetadataNode>) null);
      IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) resettableIterator0);
      HashMap<Locale.Category, DataTruncation> hashMap0 = new HashMap<Locale.Category, DataTruncation>();
      EntrySetMapIterator<Locale.Category, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, DataTruncation>(hashMap0);
      MapIterator<Locale.Category, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends DataTruncation>) entrySetMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList0);
      IteratorUtils.size(resettableListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1075), true, true, 0, (-1075));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 326);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[1], predicate0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super DataTruncation>>) linkedList0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicateArray0[0]);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) resettableListIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stack0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate2;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate2;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate2;
      Predicate<Object> predicate3 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[8] = predicate3;
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Locale.Category>[]) predicateArray0);
      IteratorUtils.find((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) predicate1);
      NotNullPredicate.notNullPredicate();
      ResettableListIterator<Properties> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator1, (Predicate<? super Properties>) predicate3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) stack0);
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(instanceofPredicate0, closure0);
      Integer integer0 = new Integer(4);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Integer>) resettableIterator0, (Closure<? super Integer>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "O#/gJ<xuQ", false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      predicateArray0[5] = (Predicate<Object>) equalPredicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[5], predicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLargeUpdateCounts();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("O#/gJ<xuQ", "N[ $", 111, (long[]) null, batchUpdateException0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException1);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicateArray0[5]);
      OrPredicate.orPredicate((Predicate<? super Object>) predicateArray0[5], (Predicate<? super Object>) anyPredicate0);
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Locale.Category>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) predicate1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("E/&p", "E/&p");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLInvalidAuthorizationSpecException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLInvalidAuthorizationSpecException0.initCause(sQLWarning0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode1);
      Node node1 = iIOMetadataNode0.replaceChild(node0, iIOMetadataNode1);
      IteratorUtils.nodeListIterator(node1);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator("org.apache.commons.collections4.iterators.AbstractIteratorDecorator");
      EmptyListIterator.resettableEmptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("4n", "", 5);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) notPredicate0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator("org.apache.commons.collections4.iterators.AbstractIteratorDecorator");
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<Boolean>[]) null, 5, 93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = (Enumeration<SQLNonTransientConnectionException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) resettableListIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      long long0 = (-3465L);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedMapIterator1, (-3465L), 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      Closure<Object> closure1 = ForClosure.forClosure(2620, (Closure<? super Object>) closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure1);
      Integer integer0 = new Integer(100);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      IteratorUtils.apply(iterator0, (Closure<? super Integer>) closure1);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      ResettableListIterator<Locale.Category> resettableListIterator1 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) resettableListIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 1208);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "org.apache.commons.collections4.iterators.AbstractIteratorDecorator", 1208, hashMap0);
      IteratorUtils.getIterator((Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(680, true, true, 680, 680);
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator((SQLWarning) dataTruncation0, (Transformer<? super SQLWarning, ? extends SQLWarning>) null);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      IteratorUtils.isEmpty(iterator0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("M9-iId% UwR/;[t{_=", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("M9-iId% UwR/;[t{_=", "M9-iId% UwR/;[t{_=", sQLTransactionRollbackException0);
      Object object0 = new Object();
      Vector<String> vector0 = new Vector<String>();
      IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      String[] stringArray0 = new String[0];
      IteratorUtils.arrayIterator(stringArray0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("${orL");
      Attr attr0 = null;
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.setAttributeNodeNS((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<Vector<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) resettableIterator0);
      HashMap<Locale.Category, DataTruncation> hashMap0 = new HashMap<Locale.Category, DataTruncation>();
      EntrySetMapIterator<Locale.Category, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, DataTruncation>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, DataTruncation>) entrySetMapIterator0);
      IteratorUtils.getIterator(listIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      Object object0 = new Object();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iIOMetadataNode0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      AnyPredicate<String> anyPredicate0 = new AnyPredicate<String>(predicateArray0);
      NullIsExceptionPredicate<String> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<String>(anyPredicate0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      Vector<String> vector1 = new Vector<String>();
      ResettableIterator<String> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends String>) vector1);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator1, (Iterator<? extends String>) resettableIterator1, (Iterator<? extends String>) resettableIterator1);
      iteratorArray0[0] = (Iterator<String>) zippingIterator0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[[]]";
      ResettableIterator<String> resettableIterator2 = IteratorUtils.arrayIterator(stringArray0);
      iteratorArray0[1] = (Iterator<String>) resettableIterator2;
      ZippingIterator<String> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator2, (Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) resettableIterator1);
      iteratorArray0[2] = (Iterator<String>) zippingIterator1;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Iterator<String> iterator0 = arrayDeque0.iterator();
      iteratorArray0[3] = iterator0;
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.find(iterator1, (Predicate<? super String>) anyPredicate0);
      Comparator<SQLNonTransientException> comparator1 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator1, (Iterator<? extends SQLSyntaxErrorException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Object object0 = new Object();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ServiceLoader<SQLIntegrityConstraintViolationException>[] serviceLoaderArray0 = (ServiceLoader<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ServiceLoader.class, 5);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader1 = ServiceLoader.load(class0);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader2 = ServiceLoader.load(class1, classLoader0);
      serviceLoaderArray0[2] = serviceLoader2;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader3 = ServiceLoader.load(class2);
      serviceLoaderArray0[3] = serviceLoader3;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader4 = ServiceLoader.load(class3);
      serviceLoaderArray0[4] = serviceLoader4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(serviceLoaderArray0, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((String[]) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      EmptyListIterator.resettableEmptyListIterator();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      Closure<Object> closure1 = ForClosure.forClosure(2620, (Closure<? super Object>) closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure1);
      Integer integer0 = new Integer(100);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      IteratorUtils.apply(iterator0, (Closure<? super Integer>) closure1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q?l-^A");
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) iterator0, (Iterator<? extends Predicate<Object>>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 123);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<InstanceofPredicate, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Entry does not exist: ", "az<8z]M%:I[ ?>*_Nq", (-93));
      SQLWarning sQLWarning0 = new SQLWarning("`Ht(", sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("73$ZNXOLn0/", "Collection must not be null", 955, sQLWarning0);
      DataTruncation dataTruncation0 = new DataTruncation((-2984), false, true, 955, (-2984), sQLNonTransientException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.objectGraphIterator((SQLWarning) dataTruncation0, (Transformer<? super SQLWarning, ? extends SQLWarning>) transformer0);
      IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.toArray((Iterator<? extends String>) iterator0, class0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Collection must not be null", "sd", (-954), sQLNonTransientException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, 176L, 0L);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("M9-iId% UwR/;[t{_=", mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("M9-iId% UwR/;[t{_=", "]", mockThrowable0);
      Object object0 = new Object();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "]", (Throwable) null);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null, (Collection<? super SQLException>) hashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<InstanceofPredicate, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.isEmpty(orderedMapIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      ListIterator<Integer> listIterator0 = null;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Vector<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      OrderedMapIterator<String, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException(")MOZT", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "remove() can not be called before calling next()");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")MOZT", ")MOZT", 2043, sQLTimeoutException0);
      IteratorUtils.size(iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<String>) orderedMapIterator1;
      iteratorArray0[1] = (Iterator<String>) orderedMapIterator1;
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties[] propertiesArray0 = new Properties[7];
      propertiesArray0[0] = properties3;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties1;
      Properties properties4 = new Properties();
      propertiesArray0[3] = properties4;
      propertiesArray0[4] = properties0;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      propertiesArray0[6] = properties3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 3, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 4);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Estimated size must be greater than 0", false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[1], predicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLargeUpdateCounts();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Locale.Category>[]) predicateArray0);
      IteratorUtils.find((Iterator<Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) predicateArray0[0]);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      Closure<Object> closure1 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate1, closure1);
      IteratorUtils.apply(iterator0, (Closure<? super Integer>) closure0);
      IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 4);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      classArray0[2] = class0;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[1] = class2;
      Transformer<Locale.Category, String> transformer0 = new ConstantTransformer<Locale.Category, String>("Estimated size must be greater than 0");
      IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0, (Transformer<? super Locale.Category, String>) transformer0, "Estimated size must be greater than 0", "Estimated size must be greater than 0", "Estimated size must be greater than 0");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Estimated size must be greater than 0Estimated size must be greater than 0Estimated size must be greater than 0");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Estimated size must be greater than 0Estimated size must be greater than 0Estimated size must be greater than 0", "", 0, sQLTransientConnectionException1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "'1;XC@", false);
      ArrayIterator<StringTokenizer> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<StringTokenizer>(stringTokenizer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException>(orderedMapIterator0);
      OrderedMapIterator<Locale.Category, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.Category, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends DataTruncation>) orderedMapIterator1);
      MapIterator<Locale.Category, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.getIterator(mapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("-.?^BZM$", "-.?^BZM$", 1353);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(abstractOrderedMapIteratorDecorator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("(f$[$;MEa~", "", false);
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(stringTokenizer0, (Equator<Object>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = (Predicate<Object>) equalPredicate1;
      predicateArray0[1] = (Predicate<Object>) equalPredicate1;
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate1;
      predicateArray0[5] = (Predicate<Object>) equalPredicate1;
      predicateArray0[6] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[7] = (Predicate<Object>) equalPredicate1;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[1], predicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicateArray0[1]);
      OrPredicate.orPredicate((Predicate<? super Object>) equalPredicate1, (Predicate<? super Object>) andPredicate0);
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Locale.Category> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Locale.Category>[]) predicateArray0);
      IteratorUtils.find((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate2);
      IteratorUtils.toArray((Iterator<?>) mapIterator1);
      IteratorUtils.isEmpty(mapIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate1, closure0);
      IteratorUtils.apply(iterator0, (Closure<? super Integer>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      EmptyListIterator.resettableEmptyListIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(!y");
      SQLDataException sQLDataException0 = new SQLDataException("", "&ls@iFH", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) listIterator0);
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      arrayList0.clone();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("^~j]e0$!", "^~j]e0$!", (-4346), sQLTransactionRollbackException0);
      arrayList0.add(sQLTransactionRollbackException1);
      IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) arrayList0);
      OrderedMapIterator<InstanceofPredicate, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, 44);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLDataException sQLDataException0 = new SQLDataException("i/L`", "", (Throwable) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<Vector<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) resettableIterator0);
      HashMap<Locale.Category, DataTruncation> hashMap0 = new HashMap<Locale.Category, DataTruncation>();
      EntrySetMapIterator<Locale.Category, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, DataTruncation>(hashMap0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends DataTruncation>) entrySetMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, DataTruncation>) entrySetMapIterator0);
      IteratorUtils.getIterator(listIterator0);
      SQLDataException sQLDataException0 = new SQLDataException(",%,yIDT", "", 10);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("[[]]");
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[[]]");
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(iIOMetadataNode0, (Equator<Object>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate1;
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, nullIsExceptionPredicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      StringTokenizer stringTokenizer0 = new StringTokenizer(",%,yIDT", "", false);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) resettableListIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableListIterator1, (Predicate<? super DataTruncation>) predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Array class must not be null", " R}6QY/gk~oRa", true);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableListIterator0, 849L);
      Stack<Integer> stack1 = new Stack<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(stack1);
      IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      SQLDataException sQLDataException0 = new SQLDataException("", "nxf]M3s>f!6w*@]");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("N\"Ksg|?YOml", "-n=v24'", (-1), sQLTimeoutException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("N\"Ksg|?YOml");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((String) null, "-n=v24'", 2279, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("eJO_(\"Sq\"", "j7guF", 1, sQLTimeoutException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("Node must not be null", "-n=v24'");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("j7guF", "eJO_(\"Sq\"");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.size(objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "Sq94}a7$Cf!U";
      SQLException sQLException0 = new SQLException("Sq94}a7$Cf!U", "Sq94}a7$Cf!U");
      IteratorUtils.singletonIterator((Object) sQLException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<EnumSet<Locale.Category>>) null, 7);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLNonTransientException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException>(orderedMapIterator1);
      abstractOrderedMapIteratorDecorator0.hasNext();
      abstractOrderedMapIteratorDecorator0.hasNext();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLException>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iAO%33)");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(".ett#", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      EmptyIterator.emptyIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.size(listIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("cK}bc\"cm~K", " R}6QY/gk~oRa", true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException>(orderedMapIterator1);
      abstractOrderedMapIteratorDecorator0.hasNext();
      abstractOrderedMapIteratorDecorator0.hasNext();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLException>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iAO%33)");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(".ett#", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(";@A+Oz>7(W2_,>");
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0, "Entry does not exist: ", ".ett#", "Entry does not exist: ");
      SQLDataException sQLDataException0 = new SQLDataException("cqYIJ,Yct^kqA}QM", "iAO%33)", sQLNonTransientConnectionException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iAO%33)", "tU*0M,G*", sQLNonTransientConnectionException1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 9);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[1] = linkedList1;
      DataTruncation dataTruncation0 = new DataTruncation(73, false, false, 73, 1509);
      IteratorUtils.objectGraphIterator((SQLWarning) dataTruncation0, (Transformer<? super SQLWarning, ? extends SQLWarning>) null);
      IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      Iterator<String> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(680, false, false, 680, 680);
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator((SQLWarning) dataTruncation0, (Transformer<? super SQLWarning, ? extends SQLWarning>) null);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      Class<String> class1 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class1);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.size(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.singletonIterator((Vector<IIOMetadataNode>) null);
      IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) null);
      HashMap<Locale.Category, DataTruncation> hashMap0 = new HashMap<Locale.Category, DataTruncation>();
      EntrySetMapIterator<Locale.Category, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, DataTruncation>(hashMap0);
      MapIterator<Locale.Category, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends DataTruncation>) entrySetMapIterator0);
      MapIterator<Locale.Category, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.getIterator(mapIterator1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      int int0 = 1353;
      SQLDataException sQLDataException0 = new SQLDataException("[]", "[]", 1353);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicateArray0[0]);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(sQLDataException0, (Equator<Object>) null);
      predicateArray0[2] = (Predicate<Object>) equalPredicate1;
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 3 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException>(orderedMapIterator0);
      MapIterator<SQLTransientException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException(" M_g=?@u", (String) null, 100);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1406);
      intArray0[1] = 100;
      intArray0[2] = 31;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, 100, hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      IteratorUtils.getIterator(" M_g=?@u");
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 570, (-1406));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.iterators.AbstractIteratorDecorator", "4n", 10);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("h", (String) null, 5, hashMap0);
      IteratorUtils.getIterator("org.apache.commons.collections4.iterators.AbstractIteratorDecorator");
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.AbstractIteratorDecorator");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("suffix may not be null", "_l", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 100, 37);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0, 0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<Properties> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate0);
      iteratorArray0[0] = (Iterator<Properties>) listIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException>(orderedMapIterator0);
      MapIterator<SQLTransientException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      OrderedMapIterator<Locale.Category, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.Category, DataTruncation> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends DataTruncation>) orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      IteratorUtils.getIterator(mapIterator1);
      SQLDataException sQLDataException0 = new SQLDataException("-.?^BZM$", "-.?^BZM$", 1353);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("(f$[$;MEa~", "", false);
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(stringTokenizer0, (Equator<Object>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = (Predicate<Object>) equalPredicate1;
      predicateArray0[1] = (Predicate<Object>) equalPredicate1;
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate1;
      predicateArray0[5] = (Predicate<Object>) equalPredicate1;
      predicateArray0[6] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[7] = (Predicate<Object>) equalPredicate1;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[1], predicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicateArray0[1]);
      OrPredicate.orPredicate((Predicate<? super Object>) equalPredicate1, (Predicate<? super Object>) andPredicate0);
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Locale.Category> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Locale.Category>[]) predicateArray0);
      IteratorUtils.find((Iterator<Locale.Category>) mapIterator1, (Predicate<? super Locale.Category>) predicate1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(664, false, false, 664, 664);
      IteratorUtils.objectGraphIterator((SQLWarning) dataTruncation0, (Transformer<? super SQLWarning, ? extends SQLWarning>) null);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 664, 109);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = " M_g=?@u";
      SQLTransientException sQLTransientException0 = new SQLTransientException(" M_g=?@u", (String) null, 100);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1406);
      intArray0[1] = 100;
      intArray0[2] = 31;
      intArray0[3] = 100;
      intArray0[4] = 125;
      intArray0[5] = 723;
      intArray0[6] = 31;
      intArray0[7] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", intArray0, sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.toList((Iterator<? extends SQLException>) iterator1, 10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>(sQLNonTransientConnectionException0, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList2 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList3 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      linkedList0.add(sQLNonTransientException0);
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 9);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList2;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList3;
      linkedListArray0[4] = linkedList1;
      linkedListArray0[5] = linkedList1;
      linkedListArray0[6] = linkedList2;
      linkedListArray0[7] = linkedList0;
      linkedListArray0[8] = linkedList2;
      IteratorUtils.arrayIterator(linkedListArray0);
      IteratorUtils.toArray(iterator0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<StringTokenizer> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) resettableIterator0);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) iterator1, 10);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLNonTransientException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException>(orderedMapIterator1);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList2 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList3 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList4 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList5 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList6 = new LinkedList<SQLNonTransientException>();
      LinkedList<SQLNonTransientException> linkedList7 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      LinkedList<SQLNonTransientException> linkedList8 = new LinkedList<SQLNonTransientException>();
      linkedList8.add(sQLNonTransientException0);
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 8);
      linkedListArray0[0] = linkedList2;
      linkedListArray0[1] = linkedList1;
      linkedListArray0[2] = linkedList7;
      linkedListArray0[3] = linkedList8;
      linkedListArray0[4] = linkedList5;
      linkedListArray0[5] = linkedList2;
      linkedListArray0[6] = linkedList5;
      linkedListArray0[7] = linkedList0;
      IteratorUtils.arrayIterator(linkedListArray0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0, (-1749));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 9);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[0] = linkedList0;
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException>(orderedMapIterator0);
      abstractOrderedMapIteratorDecorator0.hasNext();
      abstractOrderedMapIteratorDecorator0.hasNext();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLException>) orderedMapIterator0);
      String string0 = "iAO%33)";
      String string1 = "setValue() is not supported";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("setValue() is not supported");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("iAO%33)", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "Estimated size must be greater than 0";
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 4);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      classArray0[2] = classArray0[1];
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      InvokerTransformer.invokerTransformer("Estimated size must be greater than 0", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator1, (-3274L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLNonTransientException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException>(orderedMapIterator1);
      abstractOrderedMapIteratorDecorator0.hasNext();
      abstractOrderedMapIteratorDecorator0.hasNext();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLException>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iAO%33)");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      String string0 = ".ett#";
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(".ett#", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "", 0, (-587));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<PriorityQueue>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(680, false, false, 680, 680);
      IteratorUtils.objectGraphIterator((SQLWarning) dataTruncation0, (Transformer<? super SQLWarning, ? extends SQLWarning>) null);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      IteratorUtils.isEmpty(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableIterator<Vector<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator((Vector<IIOMetadataNode>) null);
      IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) resettableIterator0);
      HashMap<Locale.Category, DataTruncation> hashMap0 = new HashMap<Locale.Category, DataTruncation>();
      EntrySetMapIterator<Locale.Category, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, DataTruncation>(hashMap0);
      MapIterator<Locale.Category, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends DataTruncation>) entrySetMapIterator0);
      MapIterator<Locale.Category, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.getIterator(mapIterator1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      SQLDataException sQLDataException0 = new SQLDataException("[null]", "[null]", 1353);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicateArray0[0]);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(sQLDataException0, (Equator<Object>) null);
      predicateArray0[2] = (Predicate<Object>) equalPredicate1;
      // Undeclared exception!
//      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 3 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, 1453);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) list0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(":E+&=", (String) null, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 8);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ListIterator<StringTokenizer> listIterator1 = IteratorUtils.singletonListIterator(stringTokenizer0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) listIterator1;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      stringTokenizerArray0[0] = stringTokenizer0;
      stringTokenizerArray0[1] = stringTokenizer0;
      stringTokenizerArray0[2] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.IteratorUtils", "");
      stringTokenizerArray0[3] = stringTokenizer1;
      String string0 = ":e>z n9ue";
      StringTokenizer stringTokenizer2 = new StringTokenizer(":e>z n9ue", "-s", true);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Class to instantiate must not be null", "", hashtable0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put("", clientInfoStatus0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException1);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-1525);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0, 0, (-1525));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "org.apache.commons.collections4.map.SingletonMap");
      sQLTimeoutException0.getLocalizedMessage();
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 2162, (-1862));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 8);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ListIterator<StringTokenizer> listIterator1 = IteratorUtils.singletonListIterator(stringTokenizer0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) listIterator1;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      stringTokenizerArray0[0] = stringTokenizer0;
      stringTokenizerArray0[1] = stringTokenizer0;
      stringTokenizerArray0[2] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.IteratorUtils", "");
      stringTokenizerArray0[3] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer(":e>z n9ue", "-s", true);
      stringTokenizerArray0[4] = stringTokenizer2;
      stringTokenizerArray0[5] = stringTokenizer0;
      StringTokenizer stringTokenizer3 = new StringTokenizer("-s", "myk", true);
      stringTokenizerArray0[6] = stringTokenizer3;
      stringTokenizerArray0[7] = stringTokenizer0;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      ListIterator<StringTokenizer> listIterator2 = IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) objectArrayListIterator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) iteratorArray0[0], (Iterator<? extends StringTokenizer>) listIterator2);
      iteratorArray0[1] = iterator0;
      ArrayIterator<StringTokenizer> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<StringTokenizer>(stringTokenizer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedHashSet<SQLNonTransientException>[] linkedHashSetArray0 = (LinkedHashSet<SQLNonTransientException>[]) Array.newInstance(LinkedHashSet.class, 1);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      IteratorUtils.arrayListIterator(linkedHashSetArray0);
      int int0 = (-1);
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException[]) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-388);
      intArray0[2] = (-953);
      intArray0[3] = 2752;
      intArray0[4] = 0;
      intArray0[5] = 61;
      intArray0[6] = 0;
      intArray0[7] = 16;
      intArray0[8] = (-117);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.isEmpty(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = ").";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ").");
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      assertNotNull(resettableIterator0);
      
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 4);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Transformer<Locale.Category, String> transformer0 = InvokerTransformer.invokerTransformer("Estimated size must be greater than 0", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
      assertEquals(4, classArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0, (Transformer<? super Locale.Category, String>) transformer0, "Estimated size must be greater than 0", "Estimated size must be greater than 0", "Estimated size must be greater than 0");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Estimated size must be greater than 0' on 'class java.util.Locale$Category' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Vector<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, linkedList0.size());
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<String, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      String string0 = ")MOZT";
      int int0 = 2043;
      SQLDataException sQLDataException0 = new SQLDataException(")MOZT", "");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: )MOZT", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(")MOZT", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.SQLDataException: )MOZT", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(")MOZT", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: )MOZT", batchUpdateException0.toString());
      assertEquals("java.sql.SQLDataException: )MOZT", batchUpdateException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLDataException: )MOZT", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(")MOZT", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: )MOZT", batchUpdateException0.toString());
      assertEquals("java.sql.SQLDataException: )MOZT", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: )MOZT", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.BatchUpdateException: java.sql.SQLDataException: )MOZT", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")MOZT", ")MOZT", 2043, sQLTimeoutException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLDataException: )MOZT", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(")MOZT", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: )MOZT", batchUpdateException0.toString());
      assertEquals("java.sql.SQLDataException: )MOZT", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: )MOZT", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.BatchUpdateException: java.sql.SQLDataException: )MOZT", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(2043, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: )MOZT", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(")MOZT", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(")MOZT", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      URI uRI0 = MockURI.URI(")MOZT");
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals(")MOZT", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getScheme());
      assertEquals(")MOZT", uRI0.getRawPath());
      
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-189);
      intArray0[3] = 508;
      intArray0[4] = 0;
      intArray0[5] = 929;
      intArray0[6] = 2090;
      intArray0[7] = (-1406);
      intArray0[8] = (-1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ki-KmV&\"}$].pVTv", (String) null, 31);
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Ki-KmV&\"}$].pVTv", sQLTransientException0.toString());
      assertEquals("Ki-KmV&\"}$].pVTv", sQLTransientException0.getMessage());
      assertEquals(31, sQLTransientException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "Ki-KmV&\"}$].pVTv", intArray0, sQLTransientException0);
      assertNotNull(batchUpdateException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Ki-KmV&\"}$].pVTv", sQLTransientException0.toString());
      assertEquals("Ki-KmV&\"}$].pVTv", sQLTransientException0.getMessage());
      assertEquals(31, sQLTransientException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Ki-KmV&\"}$].pVTv", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, (-189), 508, 0, 929, 2090, (-1406), (-1)}, intArray0);
      assertEquals(9, intArray0.length);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Ki-KmV&\"}$].pVTv", sQLTransientException0.toString());
      assertEquals("Ki-KmV&\"}$].pVTv", sQLTransientException0.getMessage());
      assertEquals(31, sQLTransientException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Ki-KmV&\"}$].pVTv", batchUpdateException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.BatchUpdateException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, (-189), 508, 0, 929, 2090, (-1406), (-1)}, intArray0);
      assertEquals(9, intArray0.length);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(iterator0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Ki-KmV&\"}$].pVTv", sQLTransientException0.toString());
      assertEquals("Ki-KmV&\"}$].pVTv", sQLTransientException0.getMessage());
      assertEquals(31, sQLTransientException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Ki-KmV&\"}$].pVTv", batchUpdateException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.BatchUpdateException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, (-189), 508, 0, 929, 2090, (-1406), (-1)}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MapIterator<Boolean, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Predicate<StringTokenizer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super StringTokenizer>>) hashSet0);
      assertNotNull(predicate0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 327);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      assertNotNull(iterator0);
      
      LoopingListIterator<DataTruncation> loopingListIterator0 = null;
//      try {
        loopingListIterator0 = new LoopingListIterator<DataTruncation>((List<DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // The list must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("lXU$jao:");
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int int0 = 10;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedMapIterator<SQLNonTransientException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      boolean boolean0 = abstractOrderedMapIteratorDecorator0.hasNext();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(boolean0);
      
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterable<SQLException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      OrderedMapIterator<InstanceofPredicate, String> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator2.hasPrevious());
      
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) orderedMapIterator2, 141);
      assertNotNull(list0);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("GrL>");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: GrL>", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("GrL>", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLTimeoutException0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLTimeoutException: GrL>", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("GrL>", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("QMa%_o_", "8");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("QMa%_o_", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: QMa%_o_", sQLTransientConnectionException0.toString());
      assertEquals("8", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[", sQLTransientConnectionException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("QMa%_o_", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: QMa%_o_", sQLTransientConnectionException0.toString());
      assertEquals("8", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      assertNotNull(resettableIterator0);
      assertEquals("QMa%_o_", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: QMa%_o_", sQLTransientConnectionException0.toString());
      assertEquals("8", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      assertNotNull(iterator0);
      assertEquals("QMa%_o_", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: QMa%_o_", sQLTransientConnectionException0.toString());
      assertEquals("8", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      int int0 = (-1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, (-1));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((String) null, ".", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(".", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("start");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("start", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: start", sQLFeatureNotSupportedException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("0dd)f[", "0dd)f[", sQLFeatureNotSupportedException0);
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("start", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: start", sQLFeatureNotSupportedException0.toString());
      assertEquals("0dd)f[", sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("0dd)f[", sQLIntegrityConstraintViolationException2.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 0dd)f[", sQLIntegrityConstraintViolationException2.toString());
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("start", "hp#f%dz|1-(", (-1));
      assertNotNull(sQLIntegrityConstraintViolationException3);
      assertEquals("start", sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: start", sQLIntegrityConstraintViolationException3.toString());
      assertEquals("hp#f%dz|1-(", sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals((-1), sQLIntegrityConstraintViolationException3.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException4);
      assertNull(sQLIntegrityConstraintViolationException4.getMessage());
      assertNull(sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException4.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException((String) null, "[>r'z[c{}&LUKY08dz", (-1));
      assertNotNull(sQLIntegrityConstraintViolationException5);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException5.toString());
      assertNull(sQLIntegrityConstraintViolationException5.getMessage());
      assertEquals("[>r'z[c{}&LUKY08dz", sQLIntegrityConstraintViolationException5.getSQLState());
      assertEquals((-1), sQLIntegrityConstraintViolationException5.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException4));
      
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException((String) null, "~N{YB`g", (-1), sQLIntegrityConstraintViolationException2);
      assertNotNull(sQLIntegrityConstraintViolationException6);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("start", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: start", sQLFeatureNotSupportedException0.toString());
      assertEquals("0dd)f[", sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("0dd)f[", sQLIntegrityConstraintViolationException2.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 0dd)f[", sQLIntegrityConstraintViolationException2.toString());
      assertEquals("~N{YB`g", sQLIntegrityConstraintViolationException6.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException6.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException6.toString());
      assertEquals((-1), sQLIntegrityConstraintViolationException6.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException2));
      
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("delimiter may not be null", "l:&-!d;q1_o", (-203), batchUpdateException0);
      assertNotNull(sQLIntegrityConstraintViolationException7);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("delimiter may not be null", sQLIntegrityConstraintViolationException7.getMessage());
      assertEquals((-203), sQLIntegrityConstraintViolationException7.getErrorCode());
      assertEquals("l:&-!d;q1_o", sQLIntegrityConstraintViolationException7.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: delimiter may not be null", sQLIntegrityConstraintViolationException7.toString());
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException1));
      
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("l:&-!d;q1_o", sQLIntegrityConstraintViolationException4);
      assertNotNull(sQLIntegrityConstraintViolationException8);
      assertEquals(0, sQLIntegrityConstraintViolationException8.getErrorCode());
      assertEquals("l:&-!d;q1_o", sQLIntegrityConstraintViolationException8.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: l:&-!d;q1_o", sQLIntegrityConstraintViolationException8.toString());
      assertNull(sQLIntegrityConstraintViolationException8.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException4.getMessage());
      assertNull(sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException4.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException7));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException7));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, (-203), (-203));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(87);
      assertNotNull(integer5);
      assertEquals(87, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      integerArray0[5] = integer5;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 0);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Dag]K");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Dag]K", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLIntegrityConstraintViolationException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Dag]K", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLTransactionRollbackException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Dag]K", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLTransactionRollbackException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GREATER_OR_EQUAL", "Dag]K", sQLDataException0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Dag]K", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLTransactionRollbackException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: GREATER_OR_EQUAL", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Dag]K", sQLRecoverableException0.getSQLState());
      assertEquals("GREATER_OR_EQUAL", sQLRecoverableException0.getMessage());
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Dag]K", ", ", sQLDataException0);
      assertNotNull(sQLRecoverableException1);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Dag]K", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLTransactionRollbackException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransactionRollbackException: java.sql.SQLIntegrityConstraintViolationException: Dag]K", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Dag]K", sQLRecoverableException1.getMessage());
      assertEquals(", ", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Dag]K", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, (-40), (-2889));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, BatchUpdateException>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<SQLTransientException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      assertNotNull(enumeration0);
      
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-3016));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 9);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLNonTransientException> linkedList2 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLNonTransientException> linkedList3 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList0));
      
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLNonTransientException> linkedList4 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList4);
      assertEquals(0, linkedList4.size());
      assertTrue(linkedList4.equals((Object)linkedList2));
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertTrue(linkedList4.equals((Object)linkedList1));
      assertTrue(linkedList4.equals((Object)linkedList0));
      
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLNonTransientException> linkedList5 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList5);
      assertEquals(0, linkedList5.size());
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList1));
      assertTrue(linkedList5.equals((Object)linkedList3));
      
      linkedListArray0[5] = linkedList5;
      LinkedList<SQLNonTransientException> linkedList6 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList6);
      assertEquals(0, linkedList6.size());
      assertTrue(linkedList6.equals((Object)linkedList2));
      assertTrue(linkedList6.equals((Object)linkedList3));
      assertTrue(linkedList6.equals((Object)linkedList1));
      assertTrue(linkedList6.equals((Object)linkedList0));
      assertTrue(linkedList6.equals((Object)linkedList4));
      assertTrue(linkedList6.equals((Object)linkedList5));
      
      linkedListArray0[6] = linkedList6;
      LinkedList<SQLNonTransientException> linkedList7 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList7);
      assertEquals(0, linkedList7.size());
      assertTrue(linkedList7.equals((Object)linkedList6));
      assertTrue(linkedList7.equals((Object)linkedList5));
      assertTrue(linkedList7.equals((Object)linkedList4));
      assertTrue(linkedList7.equals((Object)linkedList0));
      assertTrue(linkedList7.equals((Object)linkedList1));
      assertTrue(linkedList7.equals((Object)linkedList3));
      assertTrue(linkedList7.equals((Object)linkedList2));
      
      linkedListArray0[7] = linkedList7;
      LinkedList<SQLNonTransientException> linkedList8 = new LinkedList<SQLNonTransientException>();
      assertNotNull(linkedList8);
      assertEquals(0, linkedList8.size());
      assertTrue(linkedList8.equals((Object)linkedList3));
      assertTrue(linkedList8.equals((Object)linkedList4));
      assertTrue(linkedList8.equals((Object)linkedList1));
      assertTrue(linkedList8.equals((Object)linkedList0));
      assertTrue(linkedList8.equals((Object)linkedList7));
      assertTrue(linkedList8.equals((Object)linkedList6));
      assertTrue(linkedList8.equals((Object)linkedList5));
      assertTrue(linkedList8.equals((Object)linkedList2));
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      
      boolean boolean0 = linkedList2.add(sQLNonTransientException0);
      assertTrue(linkedList2.contains(sQLNonTransientException0));
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(1, linkedList2.size());
      assertTrue(boolean0);
      assertNotSame(linkedList2, linkedList4);
      assertNotSame(linkedList2, linkedList3);
      assertNotSame(linkedList2, linkedList5);
      assertNotSame(linkedList2, linkedList6);
      assertNotSame(linkedList2, linkedList8);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList7);
      assertFalse(linkedList2.equals((Object)linkedList4));
      assertFalse(linkedList2.equals((Object)linkedList3));
      assertFalse(linkedList2.equals((Object)linkedList5));
      assertFalse(linkedList2.equals((Object)linkedList6));
      assertFalse(linkedList2.equals((Object)linkedList8));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList7));
      
      linkedListArray0[8] = linkedList8;
      ResettableIterator<LinkedList<SQLNonTransientException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0);
      assertNotNull(resettableIterator0);
      assertEquals(9, linkedListArray0.length);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertNotNull(objectArray0);
      assertEquals(9, linkedListArray0.length);
      assertEquals(9, objectArray0.length);
      
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) resettableIterator1);
      assertNotNull(iterator0);
      
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) iterator0, 1);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(iterator0);
      
      String string0 = null;
      StringTokenizer stringTokenizer0 = null;
//      try {
        stringTokenizer0 = new StringTokenizer((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("x", "");
      assertNotNull(sQLTimeoutException0);
      assertEquals("x", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: x", sQLTimeoutException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning("x", (String) null, sQLTimeoutException0);
      assertNotNull(sQLWarning0);
      assertEquals("x", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: x", sQLTimeoutException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("x", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: x", sQLWarning0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "]!i!hSmfR1#Zoe}", sQLWarning0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("x", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: x", sQLTimeoutException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("x", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: x", sQLWarning0.toString());
      assertEquals("]!i!hSmfR1#Zoe}", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]!i!hSmfR1#Zoe}", (String) null, sQLTransactionRollbackException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("x", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: x", sQLTimeoutException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("x", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: x", sQLWarning0.toString());
      assertEquals("]!i!hSmfR1#Zoe}", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("]!i!hSmfR1#Zoe}", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ]!i!hSmfR1#Zoe}", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLNonTransientException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLException>(orderedMapIterator1);
      abstractOrderedMapIteratorDecorator0.hasNext();
      abstractOrderedMapIteratorDecorator0.hasNext();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLException>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iAO%33)");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      String string0 = ".ett#";
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(".ett#", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator1, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) boundedIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }
}
