/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 09:00:17 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeType();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator0, (int) 1);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, (short)1);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) arrayDeque0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableListIterator1, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLNonTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iMV/nEWAv\b:sc", "'>=^%R/?]vt-");
      sQLExceptionArray0[0] = (SQLException) sQLIntegrityConstraintViolationException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLIntegrityConstraintViolationException0);
      sQLExceptionArray0[1] = (SQLException) sQLClientInfoException0;
      String string0 = "%YyJoS$;}\\u-FVqQO]~";
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("iMV/nEWAv\b:sc", string0, hashtable0, sQLIntegrityConstraintViolationException0);
      sQLExceptionArray0[2] = (SQLException) sQLClientInfoException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("iMV/nEWAv\b:sc", "iMV/nEWAv\b:sc");
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientException0;
      IteratorUtils.arrayIterator(sQLExceptionArray0, 3, 3);
      Vector<Properties>[] vectorArray0 = (Vector<Properties>[]) Array.newInstance(Vector.class, 8);
      Vector<Properties> vector0 = new Vector<Properties>();
      vectorArray0[0] = vector0;
      Vector<Properties> vector1 = new Vector<Properties>();
      vectorArray0[1] = vector1;
      Stack<Properties> stack0 = new Stack<Properties>();
      vectorArray0[2] = (Vector<Properties>) stack0;
      Vector<Properties> vector2 = new Vector<Properties>();
      vectorArray0[3] = vector2;
      Stack<Properties> stack1 = new Stack<Properties>();
      vectorArray0[4] = (Vector<Properties>) stack1;
      Stack<Properties> stack2 = new Stack<Properties>();
      vectorArray0[5] = (Vector<Properties>) stack2;
      Vector<Properties> vector3 = new Vector<Properties>();
      vectorArray0[6] = vector3;
      Vector<Properties> vector4 = new Vector<Properties>();
      vectorArray0[7] = vector4;
      ObjectArrayListIterator<Vector<Properties>> objectArrayListIterator0 = new ObjectArrayListIterator<Vector<Properties>>(vectorArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Vector<Properties>>) objectArrayListIterator0, (Predicate<? super Vector<Properties>>) andPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("](s");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("[");
      iIOMetadataNode2.getNodeType();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator0, (int) 1);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "org.apache.commons.collections4.bidimap.DualTreeBidiMap", 0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("](s");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("}.y");
      IIOMetadataNode[] iIOMetadataNodeArray1 = new IIOMetadataNode[5];
      iIOMetadataNodeArray1[0] = iIOMetadataNode4;
      iIOMetadataNodeArray1[1] = iIOMetadataNode2;
      iIOMetadataNodeArray1[2] = iIOMetadataNode4;
      iIOMetadataNodeArray1[3] = iIOMetadataNode0;
      iIOMetadataNodeArray1[4] = iIOMetadataNode2;
      iIOMetadataNode4.getNodeType();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray1);
      IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator0, (int) 1);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("-", (Class<?>[]) null, iIOMetadataNodeArray0);
      OrderedMapIterator<Properties, Stack<BatchUpdateException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, Stack<BatchUpdateException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, Stack<BatchUpdateException>>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) abstractOrderedMapIteratorDecorator0, (Transformer<? super Properties, String>) invokerTransformer0, "==r0s4k^Z=y8g8f", (String) null, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("](s");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("}.y");
      IIOMetadataNode[] iIOMetadataNodeArray1 = new IIOMetadataNode[5];
      iIOMetadataNodeArray1[0] = iIOMetadataNode4;
      iIOMetadataNodeArray1[1] = iIOMetadataNode2;
      iIOMetadataNodeArray1[2] = iIOMetadataNode4;
      iIOMetadataNodeArray1[3] = iIOMetadataNode0;
      iIOMetadataNodeArray1[4] = iIOMetadataNode2;
      iIOMetadataNode4.getNodeType();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray1);
      IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator0, (int) 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 1, (-699));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("j`10]'7wz'~Z");
      Transformer<Object, StringTokenizer> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends StringTokenizer>) transformer0, (Transformer<? super Object, ? extends StringTokenizer>) transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer1);
      closureArray0[0] = (Closure<Object>) transformerClosure0;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Transformer<Object, SQLTransientException> transformer2 = InvokerTransformer.invokerTransformer("j`10]'7wz'~Z", (Class<?>[]) classArray0, (Object[]) classArray0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer2);
      closureArray0[1] = closure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      closureArray0[2] = closure1;
      Closure<Object> closure2 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[3] = closure2;
      Closure<Object> closure3 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer2);
      closureArray0[4] = closure3;
      Closure<Object> closure4 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) null, (Closure<? super EnumSet<Locale.FilteringMode>>) closure4);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeType();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.get((Iterator<IIOMetadataNode>) objectArrayIterator0, (int) 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iIOMetadataNode0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) equalPredicate0, (Closure<? super Object>) transformerClosure0, (Closure<? super Object>) transformerClosure0);
      Closure<SQLRecoverableException> closure1 = WhileClosure.whileClosure((Predicate<? super SQLRecoverableException>) equalPredicate0, (Closure<? super SQLRecoverableException>) closure0, true);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) closure1);
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(arrayDequeArray0, (int) 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 108);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) mapIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("=X~Smv=57", "org.apache.commons.collections4.list.TreeList", sQLDataException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=X~Smv=57", "org.apache.commons.collections4.list.TreeList", sQLDataException1);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLDataException sQLDataException2 = new SQLDataException("C/DG;>j", "org.apache.commons.collections4.list.TreeList");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLDataException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=X~Smv=57", (String) null, (-1));
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.list.TreeList", (String) null);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientExceptionArray0[6] = sQLNonTransientException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 1, (-96));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) arrayList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      Iterator<Properties> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) comparatorPredicate0);
      Properties properties0 = new Properties();
      Iterator<Properties> iterator2 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) null);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) iterator1, (Iterator<? extends Properties>) iterator1, (Iterator<? extends Properties>) iterator2);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 7);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classArray0[2] = class2;
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      classArray0[3] = class3;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      classArray0[4] = class4;
      Class<SQLRecoverableException> class5 = SQLRecoverableException.class;
      classArray0[5] = class5;
      Class<SQLRecoverableException> class6 = SQLRecoverableException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("org.apache.commons.collections4.map.AbstractLinkedMap", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) zippingIterator0, (Transformer<? super Properties, String>) invokerTransformer0, "org.apache.commons.collections4.map.AbstractLinkedMap", "org.apache.commons.collections4.map.AbstractLinkedMap", "org.apache.commons.collections4.map.AbstractLinkedMap");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'org.apache.commons.collections4.map.AbstractLinkedMap' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      int int0 = 2858;
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", "Predicate must not be null", 2858, sQLWarning0);
      MockFile mockFile0 = new MockFile("tJ+AG})ekB", "tJ+AG})ekB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Integer>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) listIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) resettableListIterator0, (Predicate<? super Locale.FilteringMode>) instanceofPredicate0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "Enumeration must not be null";
      iIOMetadataNode0.hasAttributeNS("Enumeration must not be null", "Enumeration must not be null");
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.getElementsByTagNameNS("b1|f'1Ex/8_?6", "b1|f'1Ex/8_?6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      UniquePredicate<String> uniquePredicate0 = new UniquePredicate<String>();
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) iterator0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator1, (Iterator<? extends Locale.FilteringMode>) iterator1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, (Iterator<? extends Locale.FilteringMode>) iterator1, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("9N ");
      sQLNonTransientException0.printStackTrace();
      Predicate<SQLNonTransientException> predicate0 = IdentityPredicate.identityPredicate(sQLNonTransientException0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<HashMap<SQLTransactionRollbackException, Locale.FilteringMode>>) null, (Transformer<? super HashMap<SQLTransactionRollbackException, Locale.FilteringMode>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      OrderedMapIterator<DataTruncation, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<DataTruncation, Locale.FilteringMode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Locale.FilteringMode>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 27);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<SQLRecoverableException>) singletonIterator0, (Transformer<? super SQLRecoverableException, String>) constantTransformer0, "Predicate must not be null", "_&2p/jKte", "");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null, (-1099));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLRecoverableException0);
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLSyntaxErrorException0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) singletonListIterator0);
      UniquePredicate.uniquePredicate();
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("07>WQnfkDj");
      TransformerPredicate<SQLNonTransientException> transformerPredicate0 = new TransformerPredicate<SQLNonTransientException>(transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) singletonListIterator0, (Predicate<? super SQLNonTransientException>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '07>WQnfkDj' on 'class java.sql.SQLSyntaxErrorException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      IteratorUtils.toString((Iterator<Integer>) loopingIterator0);
      Stack<Properties> stack1 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack1.add(properties0);
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack1);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Properties>) loopingListIterator0, (Transformer<? super Properties, String>) transformer0, "OQ*${N+QMpfFZ", "GH7LswT(kYhG~e", "GH7LswT(kYhG~e");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 3854;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((EnumSet<Locale.FilteringMode>[]) null, 3854);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>>();
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends DataTruncation>>) hashMap0);
      IteratorUtils.getIterator(hashMap0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<ArrayList<LinkedHashSet>>) loopingIterator0, (Closure<? super ArrayList<LinkedHashSet>>) closure0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, ServiceLoader<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      NOPClosure.nopClosure();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLTransientException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      HashMap<Object, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Object, SQLIntegrityConstraintViolationException>();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLIntegrityConstraintViolationException>) hashMap0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) singletonIterator0, (Transformer<? super SQLTransientException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      LinkedList<Iterator<Transformer<Object, DataTruncation>>> linkedList0 = new LinkedList<Iterator<Transformer<Object, DataTruncation>>>();
      IteratorUtils.loopingListIterator((List<Iterator<Transformer<Object, DataTruncation>>>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = 100;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      DataTruncation dataTruncation0 = new DataTruncation(2410, true, true, 26, 100, sQLSyntaxErrorException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate.comparatorPredicate((SQLException) dataTruncation0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(vector0);
      IteratorUtils.toString((Iterator<Integer>) loopingListIterator0);
      OrderedMapIterator<DataTruncation, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<DataTruncation>) orderedMapIterator0, (Predicate<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<String> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends String>) mapIterator0, (Predicate<? super String>) predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (-1344));
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLException> predicate1 = ComparatorPredicate.comparatorPredicate((SQLException) sQLFeatureNotSupportedException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLFeatureNotSupportedException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, "");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "No Collection associated with this Iterator");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.LazyIteratorChain", (String) null, 3317, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
      ArrayIterator<ServiceLoader<SQLException>> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<ServiceLoader<SQLException>>("No Collection associated with this Iterator", (-1344));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, (-2013), sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      HashMap<Object, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Object, SQLIntegrityConstraintViolationException>();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLIntegrityConstraintViolationException>) hashMap0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) singletonIterator0, (Transformer<? super SQLTransientException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      LinkedList<Iterator<Transformer<Object, DataTruncation>>> linkedList0 = new LinkedList<Iterator<Transformer<Object, DataTruncation>>>();
      IteratorUtils.loopingListIterator((List<Iterator<Transformer<Object, DataTruncation>>>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toString((Iterator<Integer>) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, (-2013), sQLInvalidAuthorizationSpecException0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("3~[uHf+)D/C,", sQLTransientConnectionException0);
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLDataException sQLDataException0 = new SQLDataException("3~[uHf+)D/C,", sQLTransientConnectionException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "0/'mXS/@6i:~,ye", (-2013), sQLTransientConnectionException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) objectArrayListIterator0);
      UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2013);
      intArray0[1] = (-2013);
      intArray0[2] = (-2013);
      intArray0[3] = (-2013);
      intArray0[4] = (-2013);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("FE#?lgjjf+ekl", intArray0, sQLNonTransientConnectionException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      String string0 = "LESS_OR_EQUAL";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("LESS_OR_EQUAL", "vt={4;MlN", (-2302));
      DataTruncation dataTruncation0 = new DataTruncation((-2302), false, false, (-2302), (-64), sQLSyntaxErrorException0);
      String string1 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, hashMap0, sQLSyntaxErrorException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientConnectionException) null);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      ArrayIterator<ServiceLoader<SQLException>> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<ServiceLoader<SQLException>>("", (-64));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      String string0 = "LESS_OR_EQUAL";
      String string1 = "vt={4;MlN";
      int int0 = (-2302);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("LESS_OR_EQUAL", "vt={4;MlN", (-2302));
      int int1 = (-64);
      DataTruncation dataTruncation0 = new DataTruncation((-2302), false, false, (-2302), (-64), sQLSyntaxErrorException0);
      String string2 = "";
      String string3 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, hashMap0, sQLSyntaxErrorException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLClientInfoException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientConnectionException) null);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      ArrayIterator<ServiceLoader<SQLException>> arrayIterator0 = new ArrayIterator<ServiceLoader<SQLException>>(string2, int1);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<ServiceLoader<SQLException>>) arrayIterator0, (Transformer<? super ServiceLoader<SQLException>, String>) transformer0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = string3;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      String string4 = "";
      stringArray0[3] = string4;
      stringArray0[4] = string2;
      stringArray0[5] = string2;
      stringArray0[6] = string1;
      IteratorUtils.arrayListIterator(stringArray0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`.-BG", "", 123);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLNonTransientConnectionException0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLNonTransientConnectionException0, defaultEquator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DefaultEquator<IIOMetadataNode> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(iIOMetadataNode0, (Equator<IIOMetadataNode>) defaultEquator1);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.find((Iterator<SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      int int0 = 128;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientException0, 128);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeType();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator0, (int) 1);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) listIterator0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) iterator0);
      Vector<Object> vector0 = new Vector<Object>((short)1, (short)1);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) vector0);
      IteratorUtils.find(iterator1, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.singletonListIterator((SQLClientInfoException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Closure<Predicate<Object>>, DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) loopingListIterator0, (Transformer<? super Properties, String>) transformer0, "GH7LswT(kYhG~e", "1~.n", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) closure0, comparator0);
      hashMap0.put(predicate0, closure0);
      ConstantTransformer.nullTransformer();
      OrderedMapIterator<Properties, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) orderedMapIterator0, (Transformer<? super Properties, String>) null, "", "", "31WMT");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<String> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends String>) mapIterator0, (Predicate<? super String>) predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ExceptionPredicate.exceptionPredicate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Integer>) resettableListIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) loopingListIterator0, (Transformer<? super Properties, String>) transformer0, "", "[]", ">R5$V*-O");
      IteratorUtils.size(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (String) null);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) objectArrayListIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.toString((Iterator<Integer>) null);
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) loopingListIterator0, (Transformer<? super Properties, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("b@u]=.1");
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b@u]=.1");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0, (Transformer<? super SQLTransientException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("b");
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(treeSet0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends String>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MapIterator<String, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLTransientException>) mapIterator0);
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLDataException>) singletonListIterator0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends String>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Attempt to make an ArrayIterator that ", (String) null, 896);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(") greater than the size of the ", "ExceptionTransformer invoked", 9, sQLIntegrityConstraintViolationException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) objectArrayListIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, ServiceLoader<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mapIterator0;
      int int0 = 125;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) null, 125);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>>();
      Transformer<Object, DataTruncation> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends DataTruncation>>) hashMap0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends String>) mapIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) null, (Object) locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) abstractMapIteratorDecorator0, comparator0);
      hashMap0.put(predicate0, closure0);
      Closure<Object> closure1 = hashMap0.put(predicate0, (Closure<Object>) null);
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<ArrayList<LinkedHashSet>>) orderedMapIterator0, (Closure<? super ArrayList<LinkedHashSet>>) closure1);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "end", 757);
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("e?QJ:&!J(L#");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("FilterListIterator.add(Object) is not supported.");
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'FilterListIterator.add(Object) is not supported.' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = "<K0g|&];A>hm|DY(W";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<K0g|&];A>hm|DY(W", "<K0g|&];A>hm|DY(W", 100);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("<K0g|&];A>hm|DY(W");
      IteratorUtils.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 6);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      classArray0[2] = class1;
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>((Predicate<? super SQLException>) null, predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends String>) mapIterator0);
      IteratorUtils.toString((Iterator<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<K0g|&];A>hm|DY(W", "<K0g|&];A>hm|DY(W", 100);
      DataTruncation dataTruncation0 = new DataTruncation(2410, true, true, 26, 100, sQLSyntaxErrorException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate.comparatorPredicate((SQLException) dataTruncation0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      OrderedMapIterator<SQLNonTransientException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientException, ? extends BatchUpdateException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, BatchUpdateException>(orderedMapIterator1);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      SQLException sQLException0 = new SQLException(")*[$", ")*[$");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(allPredicate0, allPredicate0);
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      ResettableListIterator<ArrayDeque<SQLDataException>> resettableListIterator0 = null;
//      try {
        resettableListIterator0 = new ArrayListIterator<ArrayDeque<SQLDataException>>(iterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) abstractMapIteratorDecorator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) abstractMapIteratorDecorator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedHashSet0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      IteratorUtils.loopingListIterator((List<StringTokenizer>) vector0);
      IteratorUtils.getIterator(enumeration0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (Throwable) null);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      UniquePredicate.uniquePredicate();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLDataException, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<SQLDataException, IIOMetadataNode>("G`Vo", classArray0, classArray0);
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<K0g|&];A>hm|DY(W", "<K0g|&];A>hm|DY(W", 100);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringValueTransformer.stringValueTransformer();
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 6);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLDataException, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<SQLDataException, IIOMetadataNode>("M?r*_", classArray0, classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, ServiceLoader<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 542, 757);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("*Z `ICx[Bi1J");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException("*Z `ICx[Bi1J", sQLIntegrityConstraintViolationException1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("*Z `ICx[Bi1J", "*Z `ICx[Bi1J");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("Em)v!d|{,80Dpzc", "");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("*Z `ICx[Bi1J", "");
      sQLDataExceptionArray0[5] = sQLDataException5;
      ObjectArrayIterator<SQLDataException> objectArrayIterator1 = null;
//      try {
        objectArrayIterator1 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0, 0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 9);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      predicateArray0[0] = predicate0;
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(transformedPredicate0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate1 = new NullIsTruePredicate<SQLException>(predicateArray0[1]);
      predicateArray0[3] = (Predicate<SQLException>) nullIsTruePredicate0;
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      predicateArray0[4] = (Predicate<SQLException>) allPredicate0;
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      predicateArray0[5] = predicate1;
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      predicateArray0[7] = (Predicate<SQLException>) uniquePredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.isEmpty(iterator0);
      SQLException sQLException0 = new SQLException("List must not be null", ")*[$");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>>();
      Transformer<Object, DataTruncation> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends DataTruncation>>) hashMap0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.getIterator(predicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "iterator", (-25));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      uniquePredicate0.evaluate(sQLIntegrityConstraintViolationException0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(uniquePredicate0, uniquePredicate0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) singletonListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "iterator", sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<SQLException> closure1 = ForClosure.forClosure(587, (Closure<? super SQLException>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonIterator0, (Closure<? super SQLTransientConnectionException>) closure1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.singletonListIterator((Object) orderedIterator0);
      String string0 = "74PI3%nZR~:T|L";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("74PI3%nZR~:T|L");
      iIOMetadataNode0.isSupported("74PI3%nZR~:T|L", "74PI3%nZR~:T|L");
      iIOMetadataNode0.getNextSibling();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<SQLRecoverableException, BatchUpdateException> hashtable0 = new Hashtable<SQLRecoverableException, BatchUpdateException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      hashtable0.put(sQLRecoverableException0, batchUpdateException0);
      BiFunction<Object, Object, BatchUpdateException> biFunction0 = (BiFunction<Object, Object, BatchUpdateException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      // Undeclared exception!
//      try { 
        hashtable0.replaceAll(biFunction0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      Node node0 = iIOMetadataNode0.insertBefore(iIOMetadataNode1, iIOMetadataNode1);
      IteratorUtils.nodeListIterator(node0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) iterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      MapIterator<String, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0);
      int int0 = 3164;
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>(3164);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Iterator<String> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends String>) zippingIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) zippingIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) iterator1);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) vector0);
      IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (long) 3164, (long) 3164);
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.IteratorUtils");
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.IteratorUtils", sQLTransactionRollbackException0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 5, 3164);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      IteratorUtils.loopingListIterator((List<StringTokenizer>) vector0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.singletonListIterator(object0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("74PI3%nZR~:T|L");
      iIOMetadataNode0.isSupported("74PI3%nZR~:T|L", "74PI3%nZR~:T|L");
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, ServiceLoader<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      NOPClosure.nopClosure();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H5d,2lf$Xt^(3N");
      iIOMetadataNode0.item((-1362));
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) abstractMapIteratorDecorator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) abstractMapIteratorDecorator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<K0g|&];A>hm|DY(W", "<K0g|&];A>hm|DY(W", 100);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringValueTransformer.stringValueTransformer();
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null, (Collection<? super SQLInvalidAuthorizationSpecException>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = "Transformer must not be null";
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) stack0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, ServiceLoader<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-1301), (-1301));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "e9A";
      int int0 = 3164;
      Throwable throwable0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("e9A", "!Ou0y~P`2]{", 3164, (Throwable) null);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, (Throwable) null);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.isEmpty(singletonListIterator0);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.functors.ClosureTransformer", ",IPGV?lM>I4}*Z=J");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("X23#Az&", "esc", 0, sQLException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("e9A", "", 3164, (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(3164, false, false, 3164, 3164, (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>>();
      Transformer<Object, DataTruncation> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends DataTruncation>>) hashMap0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) uniquePredicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AllPredicate.allPredicate((Predicate<? super SQLWarning>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
      Comparator<Properties> comparator1 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator1, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate1, closure0, false);
      IteratorUtils.apply(iterator0, (Closure<? super Properties>) whileClosure0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, (String) null, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("6T47+?U", "6T47+?U", 0, sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      IteratorUtils.emptyOrderedIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) orderedIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("5lugX@L%}S:CL`c", "]27thN.m;rOt>g*", (Throwable) null);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(uniquePredicate0, uniquePredicate0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) andPredicate0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.put("oIp?u]p,<`t&afA~d", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      linkedHashSet0.add(sQLClientInfoException0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(linkedHashSet0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`fvg4!=Wr%(C5$-");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`fvg4!=Wr%(C5$-", "`fvg4!=Wr%(C5$-", sQLNonTransientException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      MapIterator<SQLSyntaxErrorException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.emptyListIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = (Enumeration<SQLFeatureNotSupportedException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) hashSet0);
      Enumeration<SQLFeatureNotSupportedException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration1);
      IteratorUtils.skippingIterator(iterator1, 0L);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (Throwable) null);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      UniquePredicate.uniquePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(uniquePredicate0, uniquePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) andPredicate0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) singletonListIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Closure must not be null");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      IteratorUtils.toString((Iterator<Integer>) loopingIterator0);
      Stack<Properties> stack1 = new Stack<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack1);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) loopingListIterator0, (Transformer<? super Properties, String>) transformer0, (String) null, (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, (Throwable) null);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) allPredicate0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SingletonListIterator<String> singletonListIterator1 = new SingletonListIterator<String>("");
      IteratorUtils.isEmpty(singletonListIterator1);
      OrderedMapIterator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException>(orderedMapIterator0);
      IteratorUtils.toString((Iterator<Iterator<Transformer<Object, DataTruncation>>>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "[]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 9);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      predicateArray0[0] = predicate0;
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(transformedPredicate0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate1 = new NullIsTruePredicate<SQLException>(predicateArray0[1]);
      predicateArray0[3] = (Predicate<SQLException>) nullIsTruePredicate0;
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      predicateArray0[4] = (Predicate<SQLException>) allPredicate0;
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      predicateArray0[5] = predicate1;
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      predicateArray0[7] = (Predicate<SQLException>) uniquePredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.isEmpty(iterator0);
      OrderedMapIterator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException>(orderedMapIterator1);
      IteratorUtils.toString((Iterator<Iterator<Transformer<Object, DataTruncation>>>) abstractOrderedMapIteratorDecorator1);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 10, 876);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.put("oIp?u]p,<`t&afA~d", clientInfoStatus0);
      Class<Object> class0 = Object.class;
      MapIterator<SQLFeatureNotSupportedException, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<Locale.LanguageRange> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Locale.LanguageRange>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("e9A", "", 3164, (Throwable) null);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.size((Iterator<?>) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator");
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.isEmpty(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyMapIterator.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      IteratorUtils.getIterator(sQLClientInfoException0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<K0g|&];A>hm|DY(W", "<K0g|&];A>hm|DY(W", 79);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Gi5v5r%[", hashMap0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      linkedHashSet0.add(sQLClientInfoException0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(linkedHashSet0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";l1v;*T>faX<", "prefix may not be null", sQLClientInfoException0);
      EmptyListIterator.emptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.getIterator(orderedIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.isEmpty((Iterator<?>) null);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      vector0.clear();
      IteratorUtils.loopingListIterator((List<StringTokenizer>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<SQLClientInfoException, Stack<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The map size must be 0 or 1");
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) mapIterator0);
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      Iterator<String> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      IteratorUtils.isEmpty(abstractMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class1);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.size(resettableListIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 9);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      predicateArray0[0] = predicate0;
      SQLDataException sQLDataException0 = new SQLDataException();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CvLbI<xp!";
      stringArray0[1] = "70YR.py)cd|W;";
      stringArray0[2] = "Node must not be null";
      stringArray0[3] = "";
      stringArray0[4] = "Q\"_P:d-g$sE}83";
      stringArray0[5] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 1);
      IteratorUtils.asEnumeration((Iterator<? extends String>) resettableListIterator0);
      Iterator<String> iterator0 = new SingletonListIterator<String>("Q\"_P:d-g$sE}83");
      IteratorUtils.chainedIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) iterator0);
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Vector<String>[]) null, 91, 91);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      hashtable0.put("oIp?u]p,<`t&afA~d", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashtable0.put("", clientInfoStatus1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      linkedHashSet0.add(sQLClientInfoException0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(linkedHashSet0);
      Iterable<SQLException> iterable0 = new LinkedList<SQLException>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 100, (-561));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<K0g|&];A>hm|DY(W", "<K0g|&];A>hm|DY(W", 100);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Throwable throwable0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7AG>KDb:AC", "", 3164, (Throwable) null);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("e9A", "", 3164, (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(3164, false, false, 3164, 3164, (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>>();
      Transformer<Object, DataTruncation> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends DataTruncation>>) hashMap0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) predicate2, comparator0);
      AllPredicate.allPredicate((Predicate<? super SQLWarning>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) predicate0);
      Comparator<Properties> comparator1 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator1, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate2, closure0, false);
      IteratorUtils.apply(iterator0, (Closure<? super Properties>) whileClosure0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Vector<Properties> vector0 = new Vector<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(vector0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) loopingListIterator0, (Transformer<? super Properties, String>) transformer0, "Transformer must not be null", "Transformer must not be null", "Transformer must not be null");
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) resettableIterator0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      iteratorArray0[1] = iterator0;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Transformer must not be null", "`", 5253, hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("TZ_-mTklR,a=xz", "Transformer must not be null", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 5253, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 3164);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((String) null, "", hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", (String) null, 413, hashtable0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("NIgq", hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", "M\"y", 413, hashtable0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException(hashtable0, sQLClientInfoException5);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) mapIterator0);
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      Iterator<String> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedHashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) orderedMapIterator0, (Iterator<? extends String>) iterator1);
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 1021);
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = null;
//      try {
        loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>((Collection<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // The collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.size(resettableIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("^`-5rz0%\"5<W]IR+T");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLNonTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "qV3~", (-233));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("e9A", "", 3164, (Throwable) null);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, 3164);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) orderedMapIterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedHashSet0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) iterator1, (Iterator<? extends String>) iterator1, (Iterator<? extends String>) iterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) zippingIterator0);
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      Vector<String>[] vectorArray0 = (Vector<String>[]) Array.newInstance(Vector.class, 9);
      vectorArray0[0] = vector0;
      vectorArray0[1] = vector1;
      vectorArray0[2] = vector1;
      vectorArray0[3] = vector1;
      vectorArray0[4] = vector1;
      vectorArray0[5] = vector1;
      vectorArray0[3] = vector1;
      vectorArray0[8] = vector1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(vectorArray0, 10, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"&,{K|Loy*~yw<n]<Y", "", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 0, 100, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>>();
      Transformer<Object, DataTruncation> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends DataTruncation>>) hashMap0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate2;
      predicateArray0[3] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.size(resettableListIterator0);
      Vector<String> vector0 = new Vector<String>();
      Vector<String>[] vectorArray0 = (Vector<String>[]) Array.newInstance(Vector.class, 2);
      vectorArray0[0] = vector0;
      vectorArray0[1] = vector0;
      IteratorUtils.arrayListIterator(vectorArray0, 0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<SQLClientInfoException, Stack<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      MockThrowable mockThrowable0 = new MockThrowable((String) null, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, mockThrowable0);
      sQLExceptionArray0[0] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Estimated size must be greater than 0", sQLExceptionArray0[0]);
      sQLExceptionArray0[2] = (SQLException) sQLTimeoutException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "Estimated size must be greater than 0", 3164);
      sQLExceptionArray0[3] = (SQLException) sQLRecoverableException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "");
      sQLExceptionArray0[4] = (SQLException) sQLTimeoutException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 3, 3164);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"&,{K|Loy*~yw<n]<Y", "", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 0, 100, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = ForClosure.forClosure(2310, (Closure<? super Object>) closure0);
      hashMap0.put(predicate0, closure1);
      Closure<Object> closure2 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<ArrayList<LinkedHashSet>>) singletonIterator0, (Closure<? super ArrayList<LinkedHashSet>>) closure2);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      singletonIterator0.next();
      singletonIterator0.reset();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) singletonIterator0, class0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2283);
      longArray0[1] = (long) (-2283);
      longArray0[2] = (long) (-2283);
      longArray0[3] = (long) (-2283);
      longArray0[4] = (long) (-2283);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-2283), longArray0, sQLTimeoutException0);
      SingletonIterator<BatchUpdateException> singletonIterator1 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(singletonIterator1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) listIteratorWrapper0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("W8 rUQ,,,KU8", "W8 rUQ,,,KU8", (-2283), batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("Transformer must not be null");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<String>) orderedMapIterator0, (-1099L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MapIterator<SQLClientInfoException, Stack<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.size(resettableListIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("^`-5rz0%\"5<W]IR+T");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "^`-5rz0%\"5<W]IR+T", sQLNonTransientException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) listIterator0, 4104L, 1910L);
      BoundedIterator<Properties> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) boundedIterator0, (long) 0);
      iteratorArray0[0] = (Iterator<Properties>) boundedIterator1;
      ArrayListIterator<Properties> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(boundedIterator1, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<String> class1 = String.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.size(resettableListIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("^`-5rz0%\"5<W]IR+T");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "^`-5rz0%\"5<W]IR+T", sQLNonTransientException0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) arrayList0, comparator0);
      Predicate<SQLWarning>[] predicateArray0 = (Predicate<SQLWarning>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate.allPredicate((Predicate<? super SQLWarning>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) loopingIterator0, 4);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) loopingListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      singletonIterator0.next();
      singletonIterator0.reset();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) singletonIterator0, class0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2283);
      longArray0[1] = (long) (-2283);
      longArray0[2] = (long) (-2283);
      longArray0[3] = (long) (-2283);
      longArray0[4] = (long) (-2283);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-2283), longArray0, sQLTimeoutException0);
      SingletonIterator<BatchUpdateException> singletonIterator1 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(singletonIterator1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) listIteratorWrapper0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("W8 rUQ,,,KU8", "W8 rUQ,,,KU8", (-2283), batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("Transformer must not be null");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-2283));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) abstractMapIteratorDecorator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedHashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) iterator1);
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      Vector<String>[] vectorArray0 = (Vector<String>[]) Array.newInstance(Vector.class, 2);
      vectorArray0[0] = vector1;
      vectorArray0[1] = vector0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(vectorArray0, 0, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(") > toIndex(", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException0, comparator0);
      hashMap0.put(predicate0, (Closure<Object>) null);
      hashMap0.put(predicate0, (Closure<Object>) null);
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      hashMap0.put(predicate0, closure0);
      MapIterator<SQLNonTransientException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<ArrayList<LinkedHashSet>>) mapIterator0, (Closure<? super ArrayList<LinkedHashSet>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      hashMap0.put(predicate0, closure0);
      hashMap0.put(predicate0, (Closure<Object>) null);
      hashMap0.put(predicate0, (Closure<Object>) null);
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<ArrayList<LinkedHashSet>>) orderedIterator0, (Closure<? super ArrayList<LinkedHashSet>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      String string0 = "Iterator setValue() can only be called after next() and before remove()";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLException> class0 = SQLException.class;
      Class<Properties> class1 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.size(orderedMapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.SingletonIterator");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "v1^ad", sQLNonTransientException0);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[3] = (Iterator<SQLRecoverableException>) orderedIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EmptyIterator.emptyIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NOPClosure.nopClosure();
      hashMap0.put(predicate0, (Closure<Object>) null);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("List must not be null", clientInfoStatus0);
      hashtable0.put(">G9juR^@o[iw!6g!0L(", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      linkedHashSet0.add(sQLClientInfoException0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(linkedHashSet0);
      sQLClientInfoException0.getSuppressed();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) loopingIterator0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(".?IWZx~R)Y", hashtable0, sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      hashtable0.put("oIp?u]p,<`t&afA~d", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put("oIp?u]p,<`t&afA~d", clientInfoStatus1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      linkedHashSet0.add(sQLClientInfoException0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(linkedHashSet0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) loopingIterator0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, hashtable0, sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException1, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int int0 = (-732);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.AllPredicate", (String) null, (-732));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLTransientException>(orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) abstractMapIteratorDecorator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Iterator setValue() can only be called after next() and before remove()", (String) null, 1291);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("K$apYR =/#F[", "^`DcI,6#e9[/8;Y", (-684), sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLClientInfoException0);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("/E3;-&bcnXm", (String) null, (-309), sQLTransactionRollbackException1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, (-836));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", (-1782));
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "NodeList must not be null", (-411), sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 100);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>(list0);
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(linkedList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Vector<String>[] vectorArray0 = (Vector<String>[]) Array.newInstance(Vector.class, 5);
      Stack<String> stack0 = new Stack<String>();
      vectorArray0[0] = (Vector<String>) stack0;
      Stack<String> stack1 = new Stack<String>();
      vectorArray0[1] = (Vector<String>) stack1;
      Vector<String> vector0 = new Vector<String>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("FY", "yO##o6I_nzt@yz|f", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", (-2271), sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null, 1291, 2505);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-1), 2133, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Iterator setValue() can only be called after next() and before remove()", ";q]q'FJfGxK=fWq 1", (-3992));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";q]q'FJfGxK=fWq 1", ";q]q'FJfGxK=fWq 1", 541, sQLRecoverableException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("]'|", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      sQLTransactionRollbackException0.getStackTrace();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 10, (-2164));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      hashMap0.put(predicate0, (Closure<Object>) null);
      hashMap0.put(predicate0, closure0);
      hashMap0.put(predicate0, closure0);
      Closure<Object> closure1 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<ArrayList<LinkedHashSet>>) iterator0, (Closure<? super ArrayList<LinkedHashSet>>) closure1);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.getSuppressed();
      sQLDataException0.forEach(consumer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) resettableListIterator0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.size(resettableListIterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 3);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("^`-5rz0%\"5<W]IR+T");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "^`-5rz0%\"5<W]IR+T", sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (-1460L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "org.apache.commons.collections4.list.CursorableLinkedList$Cursor";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      String string0 = "Sj~],1pH[iI0.";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Sj~],1pH[iI0.", "Sj~],1pH[iI0.");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      int int0 = 4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iterator", "WC8");
      int int0 = (-993);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, (-993));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) orderedIterator0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
//      try { 
        iIOMetadataNode0.lookupPrefix("");
//        fail("Expecting exception: DOMException");
      
//      } catch(DOMException e) {
//         //
//         // Method not supported
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 9);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("f", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.put("f", clientInfoStatus1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", hashtable0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      linkedHashSet0.add(sQLClientInfoException0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(linkedHashSet0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("]", hashtable0, sQLDataException0);
      // Undeclared exception!
//      try { 
        Locale.FilteringMode.valueOf("f");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant java.util.Locale.FilteringMode.f
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 9);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      predicateArray0[0] = predicate0;
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      predicateArray0[1] = (Predicate<SQLException>) transformedPredicate0;
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(transformedPredicate0);
      predicateArray0[2] = (Predicate<SQLException>) nullIsTruePredicate0;
      NullIsTruePredicate<SQLException> nullIsTruePredicate1 = new NullIsTruePredicate<SQLException>(predicateArray0[1]);
      predicateArray0[3] = (Predicate<SQLException>) nullIsTruePredicate1;
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      predicateArray0[4] = (Predicate<SQLException>) allPredicate0;
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      predicateArray0[5] = predicate1;
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      predicateArray0[6] = (Predicate<SQLException>) nonePredicate0;
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      predicateArray0[7] = (Predicate<SQLException>) uniquePredicate0;
      Predicate<PriorityQueue<HashSet>> predicate2 = UniquePredicate.uniquePredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate2, comparator0, comparatorPredicate_Criterion0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(comparatorPredicate0);
      Predicate<SQLException> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) nullIsExceptionPredicate0);
      predicateArray0[8] = predicate3;
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 3);
      // Undeclared exception!
//      try { 
        ChainedClosure.chainedClosure((Closure<? super SQLException>[]) closureArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The closure array must not contain a null closure, index 0 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      OrderedMapIterator<SQLNonTransientException, PriorityQueue<DataTruncation>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(enumeration0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 9);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      assertNotNull(predicate0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      assertEquals(9, predicateArray0.length);
      assertNotNull(allPredicate0);
      
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) allPredicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(9, predicateArray0.length);
      assertNotNull(predicate1);
      
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      assertNotNull(uniquePredicate0);
      
      boolean boolean1 = IteratorUtils.isEmpty(orderedMapIterator1);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator2.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<Iterator<Transformer<Object, DataTruncation>>, BatchUpdateException>(orderedMapIterator2);
      assertNotNull(abstractOrderedMapIteratorDecorator1);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator1.hasPrevious());
      
      String string0 = IteratorUtils.toString((Iterator<Iterator<Transformer<Object, DataTruncation>>>) orderedMapIterator2);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertFalse(orderedMapIterator2.hasPrevious());
      
      SQLWarning sQLWarning0 = IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertNull(sQLWarning0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MapIterator<SQLClientInfoException, Stack<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Jb", 0, (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("Jb", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      assertNotNull(singletonIterator0);
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("Jb", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      assertTrue(list0.contains(sQLTransactionRollbackException0));
      assertNotNull(list0);
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("Jb", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertFalse(singletonIterator0.hasNext());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      List<SQLTransactionRollbackException> list1 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.contains(sQLTransactionRollbackException0));
      assertNotNull(list1);
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("Jb", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertFalse(singletonIterator0.hasNext());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      OrderedIterator<Closure<Object>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      MapIterator<SQLTimeoutException, InstanceofPredicate> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      MapIterator<SQLTimeoutException, InstanceofPredicate> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertFalse(mapIterator2.equals((Object)mapIterator1));
      assertNotNull(mapIterator2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "l\\@Q!]`3";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PdsqeWgySB0.qfVyj", "l@Q!]`3");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.toString());
      assertEquals("l@Q!]`3", sQLNonTransientConnectionException0.getSQLState());
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.toString());
      assertEquals("l@Q!]`3", sQLNonTransientConnectionException0.getSQLState());
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      assertNotNull(listIterator0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.toString());
      assertEquals("l@Q!]`3", sQLNonTransientConnectionException0.getSQLState());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.fillInStackTrace();
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.toString());
      assertEquals("l@Q!]`3", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("l@Q!]`3", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException1.toString());
      assertEquals("PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException1.getMessage());
      
      int int0 = 3164;
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 3164);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertTrue(list0.contains(sQLNonTransientConnectionException0));
      assertNotNull(list0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: PdsqeWgySB0.qfVyj", sQLNonTransientConnectionException0.toString());
      assertEquals("l@Q!]`3", sQLNonTransientConnectionException0.getSQLState());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLTimeoutException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      MapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLTimeoutException>) orderedMapIterator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      MapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(mapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ListIterator<Class<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2805);
      longArray0[1] = (long) (-2805);
      longArray0[2] = (long) (-2915);
      longArray0[3] = (long) (-2915);
      longArray0[4] = (long) (-2805);
      longArray0[5] = (long) (-2915);
      longArray0[6] = (long) (-2915);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Enumeration must not be null", "Enumeration must not be null", (-2915), (Throwable) null);
      assertNotNull(sQLTransientException0);
      assertEquals((-2915), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLTransientException0.toString());
      assertEquals("Enumeration must not be null", sQLTransientException0.getMessage());
      assertEquals("Enumeration must not be null", sQLTransientException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals((-2915), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLTransientException0.toString());
      assertEquals("Enumeration must not be null", sQLTransientException0.getMessage());
      assertEquals("Enumeration must not be null", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientException: Enumeration must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Enumeration must not be null", "Enumeration must not be null", (-2805), longArray0, sQLNonTransientConnectionException0);
      assertArrayEquals(new long[] {(-2805L), (-2805L), (-2915L), (-2915L), (-2805L), (-2915L), (-2915L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(batchUpdateException0);
      assertEquals((-2915), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLTransientException0.toString());
      assertEquals("Enumeration must not be null", sQLTransientException0.getMessage());
      assertEquals("Enumeration must not be null", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientException: Enumeration must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals((-2805), batchUpdateException0.getErrorCode());
      assertEquals("Enumeration must not be null", batchUpdateException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning("pFW)+a[$Jtoh#qqQE", batchUpdateException0);
      assertArrayEquals(new long[] {(-2805L), (-2805L), (-2915L), (-2915L), (-2805L), (-2915L), (-2915L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(sQLWarning0);
      assertEquals((-2915), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLTransientException0.toString());
      assertEquals("Enumeration must not be null", sQLTransientException0.getMessage());
      assertEquals("Enumeration must not be null", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientException: Enumeration must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals((-2805), batchUpdateException0.getErrorCode());
      assertEquals("Enumeration must not be null", batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: pFW)+a[$Jtoh#qqQE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("pFW)+a[$Jtoh#qqQE", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("pFW)+a[$Jtoh#qqQE", "pFW)+a[$Jtoh#qqQE", (-2915), sQLWarning0);
      assertArrayEquals(new long[] {(-2805L), (-2805L), (-2915L), (-2915L), (-2805L), (-2915L), (-2915L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(sQLTimeoutException0);
      assertEquals((-2915), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLTransientException0.toString());
      assertEquals("Enumeration must not be null", sQLTransientException0.getMessage());
      assertEquals("Enumeration must not be null", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Enumeration must not be null", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientException: Enumeration must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals((-2805), batchUpdateException0.getErrorCode());
      assertEquals("Enumeration must not be null", batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: pFW)+a[$Jtoh#qqQE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("pFW)+a[$Jtoh#qqQE", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals((-2915), sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: pFW)+a[$Jtoh#qqQE", sQLTimeoutException0.toString());
      assertEquals("pFW)+a[$Jtoh#qqQE", sQLTimeoutException0.getSQLState());
      assertEquals("pFW)+a[$Jtoh#qqQE", sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, (-2805));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ServiceLoader<BatchUpdateException>[] serviceLoaderArray0 = (ServiceLoader<BatchUpdateException>[]) Array.newInstance(ServiceLoader.class, 4);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ServiceLoader<BatchUpdateException> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.sql.BatchUpdateException]", serviceLoader0.toString());
      
      serviceLoaderArray0[0] = serviceLoader0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      ServiceLoader<BatchUpdateException> serviceLoader1 = ServiceLoader.load(class1);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.sql.BatchUpdateException]", serviceLoader1.toString());
      
      serviceLoaderArray0[1] = serviceLoader1;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<BatchUpdateException> serviceLoader2 = ServiceLoader.load(class1, classLoader0);
      assertSame(class1, class0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertNotNull(serviceLoader2);
      assertEquals("java.util.ServiceLoader[java.sql.BatchUpdateException]", serviceLoader2.toString());
      
      serviceLoaderArray0[2] = serviceLoader2;
      ServiceLoader<BatchUpdateException> serviceLoader3 = ServiceLoader.loadInstalled(class0);
      assertSame(class0, class1);
      assertNotSame(serviceLoader3, serviceLoader1);
      assertNotSame(serviceLoader3, serviceLoader2);
      assertNotSame(serviceLoader3, serviceLoader0);
      assertFalse(serviceLoader3.equals((Object)serviceLoader1));
      assertFalse(serviceLoader3.equals((Object)serviceLoader2));
      assertFalse(serviceLoader3.equals((Object)serviceLoader0));
      assertNotNull(serviceLoader3);
      assertEquals("java.util.ServiceLoader[java.sql.BatchUpdateException]", serviceLoader3.toString());
      
      serviceLoaderArray0[3] = serviceLoader3;
      ResettableIterator<ServiceLoader<BatchUpdateException>> resettableIterator0 = IteratorUtils.arrayIterator(serviceLoaderArray0);
      assertEquals(4, serviceLoaderArray0.length);
      assertNotNull(resettableIterator0);
      
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 5);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("jcVZ,=g2G|K|G.3ML");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: jcVZ,=g2G|K|G.3ML", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("jcVZ,=g2G|K|G.3ML", sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, (-1442));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      assertNotNull(sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLRecoverableException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLRecoverableException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNotNull(hashtable1);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable1);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("K cYM)6<&5W0T0S", "", 0, hashtable0, sQLClientInfoException0);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException2);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLRecoverableException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("", sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: K cYM)6<&5W0T0S", sQLClientInfoException2.toString());
      assertEquals("K cYM)6<&5W0T0S", sQLClientInfoException2.getMessage());
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable1, sQLClientInfoException2);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException3);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLRecoverableException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("", sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: K cYM)6<&5W0T0S", sQLClientInfoException2.toString());
      assertEquals("K cYM)6<&5W0T0S", sQLClientInfoException2.getMessage());
      assertEquals("", sQLClientInfoException3.getMessage());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException3.toString());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException4);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException4.toString());
      assertNull(sQLClientInfoException4.getMessage());
      assertNull(sQLClientInfoException4.getSQLState());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertNotNull(sQLClientInfoException5);
      assertNull(sQLClientInfoException5.getSQLState());
      assertNull(sQLClientInfoException5.getMessage());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException5.toString());
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", "{*l#<rTdP!Hz z?amfA", 0, hashtable0);
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertNotNull(sQLClientInfoException6);
      assertEquals("{*l#<rTdP!Hz z?amfA", sQLClientInfoException6.getSQLState());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException6.toString());
      assertEquals("", sQLClientInfoException6.getMessage());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException(" 6Czq-r!,ZBrz", "Enumeration must not be null", 0, hashtable1, sQLClientInfoException3);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException7);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("Enumeration must not be null", sQLClientInfoException7.getSQLState());
      assertEquals("java.sql.SQLClientInfoException:  6Czq-r!,ZBrz", sQLClientInfoException7.toString());
      assertEquals(0, sQLClientInfoException7.getErrorCode());
      assertEquals(" 6Czq-r!,ZBrz", sQLClientInfoException7.getMessage());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLRecoverableException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("", sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: K cYM)6<&5W0T0S", sQLClientInfoException2.toString());
      assertEquals("K cYM)6<&5W0T0S", sQLClientInfoException2.getMessage());
      assertEquals("", sQLClientInfoException3.getMessage());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException3.toString());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException((String) null, "", hashtable1);
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException0));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNotNull(sQLClientInfoException8);
      assertNull(sQLClientInfoException8.getMessage());
      assertEquals("", sQLClientInfoException8.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException8.toString());
      assertEquals(0, sQLClientInfoException8.getErrorCode());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      assertEquals(9, sQLClientInfoExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      assertEquals(9, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) objectArrayIterator0, class0);
      assertNotSame(sQLClientInfoExceptionArray0, sQLClientInfoExceptionArray1);
      assertNotSame(sQLClientInfoExceptionArray1, sQLClientInfoExceptionArray0);
      assertFalse(sQLClientInfoExceptionArray1.equals((Object)sQLClientInfoExceptionArray0));
      assertEquals(9, sQLClientInfoExceptionArray0.length);
      assertEquals(9, sQLClientInfoExceptionArray1.length);
      assertNotNull(sQLClientInfoExceptionArray1);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(9, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate0);
      
      DataTruncation dataTruncation0 = IteratorUtils.find((Iterator<DataTruncation>) orderedMapIterator0, (Predicate<? super DataTruncation>) instanceofPredicate0);
      assertNull(dataTruncation0);
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^oC'oh{Q>";
      stringArray0[1] = "<hte<X6B7 HUe%)rKu:";
      stringArray0[2] = "Estimated size must be greater than 0";
      stringArray0[3] = "";
      stringArray0[4] = "9J5d,z6@{*p";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Iterator must not be null";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      assertEquals(8, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedMapIterator<BatchUpdateException, ArrayDeque<SQLSyntaxErrorException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("-lMOzx==H}/zBB>s8");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("-lMOzx==H}/zBB>s8", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: -lMOzx==H}/zBB>s8", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLSyntaxErrorException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("-lMOzx==H}/zBB>s8", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: -lMOzx==H}/zBB>s8", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLSyntaxErrorException: -lMOzx==H}/zBB>s8", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: -lMOzx==H}/zBB>s8", sQLClientInfoException0.getMessage());
      
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) null);
      assertNotNull(iterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("-lMOzx==H}/zBB>s8", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: -lMOzx==H}/zBB>s8", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLSyntaxErrorException: -lMOzx==H}/zBB>s8", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: -lMOzx==H}/zBB>s8", sQLClientInfoException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableListIterator<ArrayDeque<SQLDataException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("D1a+-e&2O");
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode3);
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("}.y");
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode4);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertEquals(5, iIOMetadataNodeArray0.length);
      assertNotNull(resettableListIterator1);
      assertTrue(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator1, 76);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 71
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("Ms,qOqmLy,B@4EB", true);
      assertNotNull(singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) singletonIterator0);
      assertNotNull(enumeration0);
      assertTrue(singletonIterator0.hasNext());
      
      Vector<Object> vector0 = new Vector<Object>(100);
      assertFalse(vector0.contains(100));
      assertNotNull(vector0);
      assertEquals(100, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) vector0);
      assertFalse(vector0.contains(100));
      assertNotNull(iterator0);
      assertTrue(singletonIterator0.hasNext());
      assertEquals(100, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = 12;
      SQLWarning sQLWarning0 = new SQLWarning("op|", "Ms,qOqmLy,B@4EB", 0, (Throwable) null);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: op|", sQLWarning0.toString());
      assertEquals("op|", sQLWarning0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLWarning0);
      assertArrayEquals(new int[] {100, 100, 12}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: op|", sQLWarning0.toString());
      assertEquals("op|", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: op|", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: op|", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      ArrayIterator<SQLTransactionRollbackException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTransactionRollbackException>(batchUpdateException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector<String>[] vectorArray0 = (Vector<String>[]) Array.newInstance(Vector.class, 5);
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      vectorArray0[0] = (Vector<String>) stack0;
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      
      vectorArray0[1] = (Vector<String>) stack1;
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      vectorArray0[2] = vector0;
      Vector<String> vector1 = new Vector<String>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      
      vectorArray0[3] = vector1;
      Vector<String> vector2 = new Vector<String>();
      assertTrue(vector2.equals((Object)vector0));
      assertTrue(vector2.equals((Object)vector1));
      assertNotNull(vector2);
      assertTrue(vector2.isEmpty());
      assertEquals(0, vector2.size());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      
      vectorArray0[4] = vector2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(vectorArray0, (-3200), (-3200));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) mapIterator0);
      assertNotNull(iterator0);
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ServiceLoader<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<SQLTransientConnectionException, BatchUpdateException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedMapIterator1;
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) iteratorArray0[0], (Iterator<? extends SQLTransientConnectionException>) iteratorArray0[0], (Iterator<? extends SQLTransientConnectionException>) iteratorArray0[0]);
      assertEquals(3, iteratorArray0.length);
      assertNotNull(zippingIterator0);
      
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) zippingIterator0;
      MapIterator<SQLTransientConnectionException, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) mapIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertEquals(3, iteratorArray0.length);
      assertNotNull(iterator0);
      
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "{ D1wqpvn;%?eo", sQLSyntaxErrorException0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertNotNull(sQLRecoverableException1);
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertNull(sQLRecoverableException1.getMessage());
      assertEquals("{ D1wqpvn;%?eo", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      Spliterator<Throwable> spliterator1 = sQLNonTransientConnectionException0.spliterator();
      assertNotSame(spliterator1, spliterator0);
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotNull(spliterator1);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("*Y6>fQD=(-3Q", sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertNotNull(sQLRecoverableException2);
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertNull(sQLRecoverableException1.getMessage());
      assertEquals("{ D1wqpvn;%?eo", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertEquals("*Y6>fQD=(-3Q", sQLRecoverableException2.getMessage());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: *Y6>fQD=(-3Q", sQLRecoverableException2.toString());
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("");
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertNotNull(sQLRecoverableException3);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException3.toString());
      assertEquals("", sQLRecoverableException3.getMessage());
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      Throwable[] throwableArray0 = sQLRecoverableException3.getSuppressed();
      assertNotSame(sQLRecoverableException3, sQLRecoverableException2);
      assertNotSame(sQLRecoverableException3, sQLRecoverableException0);
      assertNotSame(sQLRecoverableException3, sQLRecoverableException1);
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException3.toString());
      assertEquals("", sQLRecoverableException3.getMessage());
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, 0);
      assertEquals(4, sQLRecoverableExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, DataTruncation> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator2.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) orderedMapIterator2, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ResettableListIterator<ArrayDeque<SQLDataException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) resettableIterator0, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      assertNotNull(resettableIterator0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      MapIterator<String, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ZippingIterator<String> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0);
      assertNotNull(zippingIterator1);
      
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>(3164);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      assertNotNull(predicate0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      assertNotNull(orPredicate0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) zippingIterator1, (Predicate<? super String>) orPredicate0);
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<String> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator1);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(enumeration0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertFalse(linkedHashSet0.contains(3164));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Enumeration<String> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      assertNotSame(enumeration1, enumeration0);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertNotNull(enumeration1);
      
      Iterator<String> iterator2 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration1, (Collection<? super String>) linkedHashSet0);
      assertNotSame(enumeration1, enumeration0);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(linkedHashSet0.contains(3164));
      assertNotNull(iterator2);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Iterator<String> iterator3 = IteratorUtils.chainedIterator((Iterator<? extends String>) iterator2, (Iterator<? extends String>) iterator1);
      assertNotSame(enumeration1, enumeration0);
      assertFalse(iterator0.equals((Object)iterator2));
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(iterator1.equals((Object)iterator2));
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(iterator3.equals((Object)iterator0));
      assertFalse(iterator3.equals((Object)iterator1));
      assertFalse(iterator3.equals((Object)iterator2));
      assertFalse(linkedHashSet0.contains(3164));
      assertNotNull(iterator3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("F|", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("F|", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: F|", sQLClientInfoException0.toString());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-1), 2133, sQLInvalidAuthorizationSpecException0);
      assertNotNull(dataTruncation0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      assertNotNull(singletonIterator0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      assertFalse(predicateArray1.equals((Object)predicateArray0));
      
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      assertNotNull(predicate0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      predicateArray1[0] = predicate0;
      HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, DataTruncation>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Transformer<Object, DataTruncation> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends DataTruncation>>) hashMap0);
      assertNotNull(transformer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      predicateArray1[1] = predicate1;
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      predicateArray1[2] = predicate2;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray1);
      assertFalse(predicateArray1.equals((Object)predicateArray0));
      assertEquals(3, predicateArray1.length);
      assertNotNull(nonePredicate0);
      
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      predicateArray0[1] = predicate3;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate4 = ComparatorPredicate.comparatorPredicate((Object) predicate2, comparator0);
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate4);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      predicateArray0[2] = predicate4;
      Predicate<SQLWarning> predicate5 = AllPredicate.allPredicate((Predicate<? super SQLWarning>[]) predicateArray0);
      assertNotSame(predicateArray0, predicateArray1);
      assertFalse(predicateArray0.equals((Object)predicateArray1));
      assertEquals(3, predicateArray0.length);
      assertNotNull(predicate5);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) predicate5);
      assertNotSame(predicateArray0, predicateArray1);
      assertFalse(predicateArray0.equals((Object)predicateArray1));
      assertEquals(3, predicateArray0.length);
      assertNotNull(iterator0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "Predicate must not be null";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("X6QZ@", "Predicate must not be null");
      assertNotNull(sQLTimeoutException0);
      assertEquals("Predicate must not be null", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: X6QZ@", sQLTimeoutException0.toString());
      assertEquals("X6QZ@", sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
//      try { 
        EnumSet.of(locale_FilteringMode0, (Locale.FilteringMode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.EnumSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = (-3111);
      int int1 = 6013;
      DataTruncation dataTruncation0 = new DataTruncation(1836, true, true, (-3111), 6013);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      Spliterator<Throwable> spliterator0 = dataTruncation0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, (-3111), 6013);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLDataException0.fillInStackTrace();
      hashSet0.add(sQLDataException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int int0 = 2407;
      ArrayIterator<String> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<String>(sQLIntegrityConstraintViolationException0, 2407);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNS("", "");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      int int0 = 0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>((SQLException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) null, 3711L, 806L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.getIterator(closure0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.toString(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) closure0, 10, 1542);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MapIterator<SQLClientInfoException, Stack<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (-993));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) iterator0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "transformer may not be null";
      stringArray0[3] = "]'wJ]XabLQD+0_<c<k~";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "InstantiateTransformer: Input object was not an instanceof Class, it was a null object";
      stringArray0[7] = "7X=c:w7#3";
      stringArray0[8] = "lx\"";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) resettableListIterator0, 1146L, (-1778L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("e9A", "", 3164, (Throwable) null);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.isEmpty((Iterator<?>) null);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (long) 3164, (-1554L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[8];
      intArray0[0] = 1229;
      intArray0[1] = (-2622);
      intArray0[2] = (-2454);
      intArray0[3] = 984;
      intArray0[4] = (-1622);
      intArray0[5] = 100;
      intArray0[6] = 558;
      intArray0[7] = (-334);
      SQLDataException sQLDataException0 = new SQLDataException("EK0LaYu)p-+");
      SQLException sQLException0 = new SQLException("k:LySZm9#_)", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", sQLDataException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("k:LySZm9#_)", intArray0, sQLException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", 984, intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "yEr|;mv", 100, longArray0, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 158;
      int int1 = 1989;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0, 158, 1989);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
