/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 12:07:50 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      ExceptionFactory.exceptionFactory();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[9];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      propertiesArray0[6] = properties0;
      propertiesArray0[7] = properties0;
      propertiesArray0[8] = properties0;
      ResettableIterator<Properties> resettableIterator0 = new SingletonListIterator<Properties>(properties0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) closure0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) singletonListIterator0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      IteratorUtils.matchesAll((Iterator<Object>) objectArrayIterator0, (Predicate<? super Object>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = (-2664);
      Integer integer0 = new Integer((-2664));
      IteratorUtils.getIterator(integer0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Transformer<SQLException, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends IIOMetadataNode>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray1 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray1[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray1[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "/m/rFx!");
      sQLSyntaxErrorExceptionArray1[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("/m/rFx!", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray1[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("}*q8aFfvd>", "NodeList must not be null", 61);
      sQLSyntaxErrorExceptionArray1[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("ListIterator must not be null", "/m/rFx!", 61, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray1[5] = sQLSyntaxErrorException5;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray1);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableListIterator1;
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException2, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) null);
      iteratorArray0[2] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      ExceptionFactory.exceptionFactory();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<SQLNonTransientConnectionException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientConnectionException, String>(instantiateFactory0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, "I", "I", "I");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("II", "I");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, (-1290));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) loopingIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) resettableIterator0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Class<String> class1 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class1);
      FactoryTransformer<SQLNonTransientConnectionException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientConnectionException, String>(factory0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("071BJ%8F", "");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("071BJ%8F");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator1 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator1, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Transformer<SQLNonTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) listIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "", "I", "071BJ%8F");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I", "bNE lU");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      ExceptionFactory.exceptionFactory();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<SQLNonTransientConnectionException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientConnectionException, String>(instantiateFactory0);
      String string0 = "I";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null, "I", "I", "I");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) resettableIterator0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(andPredicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsTruePredicate0;
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicateArray0[1]);
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicateArray0[3] = predicate2;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[4] = (Predicate<Object>) nullIsExceptionPredicate0;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[5] = predicate3;
      String string0 = "`'^d 1\\'An4&'(vFT";
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) orderedIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) iterator1, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      Iterator<BatchUpdateException> iterator2 = null;
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray1 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray1[0] = null;
      iteratorArray1[1] = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator1, (Iterator<? extends Properties>) resettableIterator1);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<SQLNonTransientConnectionException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientConnectionException, String>(instantiateFactory0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, "753b", "8DEY~", "753b");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "!7oK0@m${S)hDm+E*`");
      OrderedIterator<Predicate<Object>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) orderedIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Predicate<Object>>) iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) vector0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLException> predicate2 = OrPredicate.orPredicate((Predicate<? super SQLException>) predicate1, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate2);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iIOMetadataNode0, defaultEquator0);
      PredicateTransformer<HashMap<Locale.Category, SQLException>> predicateTransformer0 = new PredicateTransformer<HashMap<Locale.Category, SQLException>>(equalPredicate0);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator1, (Iterator<? extends Properties>) resettableIterator1);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Properties>) resettableIterator1, (Closure<? super Properties>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 490);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("*Wu~GSqW");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties[] propertiesArray0 = new Properties[4];
      propertiesArray0[0] = properties0;
      Properties properties5 = new Properties();
      propertiesArray0[1] = properties5;
      propertiesArray0[2] = properties4;
      propertiesArray0[3] = properties0;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      properties4.remove((Object) uniquePredicate0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, (Closure<? super Object>) null, false);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) objectArrayIterator0, (Iterator<? extends Properties>) objectArrayIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super Properties>) whileClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toArray((Iterator<?>) mapIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Enumeration must not be null", false);
      IteratorUtils.getIterator(stringTokenizer0);
      ArrayListIterator<SQLClientInfoException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLClientInfoException>(stringTokenizer0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) resettableIterator0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(andPredicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsTruePredicate0;
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicateArray0[1]);
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicateArray0[3] = predicate2;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[4] = (Predicate<Object>) nullIsExceptionPredicate0;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[5] = predicate3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`'^d 1'An4&'(vFT");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0);
      predicateArray0[6] = (Predicate<Object>) equalPredicate0;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[7] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate4 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<Object>) objectArrayListIterator0, (Predicate<? super Object>) predicate4);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties[] propertiesArray0 = new Properties[0];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, (Closure<? super Object>) null, false);
      IteratorUtils.apply((Iterator<Properties>) objectArrayIterator0, (Closure<? super Properties>) whileClosure0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      OrderedMapIterator<SQLRecoverableException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, DataTruncation>(orderedMapIterator0);
      MapIterator<SQLRecoverableException, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, DataTruncation>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ?>) mapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class1);
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      SingletonListIterator<LinkedHashSet<BatchUpdateException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSet0);
      SQLWarning sQLWarning0 = new SQLWarning("", "T_M!u[EGl~C", (-1615));
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (-1615), sQLWarning0);
      EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<LinkedHashSet<BatchUpdateException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<BatchUpdateException>>) predicate0);
      // Undeclared exception!
//      try { 
        Locale.Category.valueOf((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Name is null
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonListIterator(locale_Category0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", 1445);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "", 31, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", (String) null, sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("", "Predicate must not be null", 100);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("',nTHevk{}{w9!,y,J", sQLNonTransientConnectionException5);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.iterators.NodeListIterator");
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "", "Predicate must not be null", "");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = null;
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.isEmpty((Iterator<?>) null);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 957);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator1);
      IteratorUtils.size(mapIterator0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLNonTransientConnectionException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientConnectionException, String>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, "ListIterator must not be null", "ListIterator must not be null", "ListIterator must not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("5a3", "5a3", (-565));
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("{ye2(n^ojjTWBqO", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException3);
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLRecoverableException0);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) objectArrayListIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, (Iterator<? extends SQLTransactionRollbackException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      IteratorUtils.unmodifiableIterator(iterator1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1873), 102);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "Node must not be null", 0, hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Node must not be null", "Node must not be null", (-516), hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "", hashtable0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, (-516));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("eWeb}");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode1);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) constantTransformer0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("eWeb}");
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      PredicateTransformer<HashMap<Locale.Category, SQLException>> predicateTransformer0 = new PredicateTransformer<HashMap<Locale.Category, SQLException>>(predicate0);
      HashMap<Locale.Category, SQLException> hashMap0 = new HashMap<Locale.Category, SQLException>();
      Boolean boolean0 = predicateTransformer0.transform(hashMap0);
      ResettableIterator<Boolean> resettableIterator1 = IteratorUtils.singletonIterator(boolean0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Boolean>) resettableIterator1, 61);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 60
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "NodeList must not be null");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.IteratorEnumeration", (String) null, sQLInvalidAuthorizationSpecException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException((String) null, "org.apache.commons.collections4.iterators.IteratorEnumeration", 356);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", "", 356);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("", (String) null, sQLTransactionRollbackException5);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.IteratorEnumeration", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) objectArrayIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-5144));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) resettableListIterator0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      OrderedMapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      OrderedMapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException>(orderedMapIterator1);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) abstractMapIteratorDecorator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 5);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      LinkedList<Properties> linkedList1 = new LinkedList<Properties>(linkedList0);
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(linkedList1);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ListIterator<Properties> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) loopingListIterator0, (Predicate<? super Properties>) predicate0);
      iteratorArray0[0] = (Iterator<Properties>) listIterator0;
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) loopingListIterator0, (Iterator<? extends Properties>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      iteratorArray0[2] = (Iterator<Properties>) singletonIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) singletonIterator0, (-1878));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) reverseListIterator0, (Predicate<? super SQLDataException>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("o~x7KN;1<", "!F\"+h$", sQLIntegrityConstraintViolationException0);
      IteratorUtils.contains((Iterator<SQLDataException>) reverseListIterator0, (Object) sQLNonTransientConnectionException0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, 1739);
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(list0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) list0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object>(hashMap0);
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 1290, 1625);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Predicate must not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode1);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.contains((Iterator<ArrayDeque<Vector>>) resettableIterator0, (Object) iIOMetadataNode1);
      int int0 = 388;
      // Undeclared exception!
//      try { 
        iIOMetadataNode1.getElementsByTagName("Predicate must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonListIterator(locale_Category0);
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      ArrayDeque<Properties> arrayDeque1 = arrayDeque0.clone();
      ResettableIterator<ArrayDeque<Properties>> resettableIterator0 = IteratorUtils.singletonIterator(arrayDeque1);
      IteratorUtils.toString((Iterator<ArrayDeque<Properties>>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("c^\")(!l6e2r]H");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("ListIterator must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("ListIterator must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("H`^c", "ListIterator must not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException5);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 9);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      sQLInvalidAuthorizationSpecException3.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException8 = new SQLInvalidAuthorizationSpecException("H`^c", sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException8;
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 9, 9);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) null, 1398L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) resettableListIterator0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) reverseListIterator0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) reverseListIterator0, (-1113L), 2009L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator2);
      IteratorUtils.size(mapIterator1);
      HashSet<SQLTimeoutException>[] hashSetArray0 = (HashSet<SQLTimeoutException>[]) Array.newInstance(HashSet.class, 1);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      hashSetArray0[0] = (HashSet<SQLTimeoutException>) linkedHashSet0;
      IteratorUtils.arrayIterator(hashSetArray0);
      OrderedMapIterator<Iterator<SQLTimeoutException>, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) orderedMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "", 16, hashMap0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) singletonListIterator0, (Iterator<? extends SQLClientInfoException>) singletonListIterator0);
      Boolean[] booleanArray0 = new Boolean[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("List must not be null", "\rIf>80fm;!#[\"!C");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLSyntaxErrorException0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(identityPredicate0);
      PredicateTransformer<HashMap<Locale.Category, SQLException>> predicateTransformer0 = new PredicateTransformer<HashMap<Locale.Category, SQLException>>(nullIsFalsePredicate0);
      HashMap<Locale.Category, SQLException> hashMap1 = new HashMap<Locale.Category, SQLException>();
      Boolean boolean0 = predicateTransformer0.transform(hashMap1);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(hashMap1);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(hashMap1);
      booleanArray0[2] = boolean2;
      HashMap<Locale.Category, SQLException> hashMap2 = new HashMap<Locale.Category, SQLException>();
      Boolean boolean3 = predicateTransformer0.transform(hashMap2);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(hashMap1);
      booleanArray0[4] = boolean4;
      PredicateTransformer<HashMap<Locale.Category, SQLException>> predicateTransformer1 = new PredicateTransformer<HashMap<Locale.Category, SQLException>>(nullIsFalsePredicate0);
      Boolean boolean5 = predicateTransformer1.transform(hashMap1);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = predicateTransformer1.transform(hashMap1);
      booleanArray0[6] = boolean6;
      Boolean boolean7 = predicateTransformer0.transform(hashMap1);
      booleanArray0[7] = boolean7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(booleanArray0, 16);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) singletonIterator0, (long) 388);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) resettableListIterator0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(vector0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) treeSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      MapIterator<String, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<String>) mapIterator0, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) treeSet0);
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", comparator0, comparatorPredicate_Criterion0);
      Predicate<SQLDataException> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0, (Predicate<? super SQLDataException>) comparatorPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonListIterator(locale_Category0);
      MapIterator<SQLRecoverableException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) mapIterator0, class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      predicateArray0[2] = predicate2;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      Predicate<SQLNonTransientException> predicate3 = AllPredicate.allPredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category2;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      locale_CategoryArray0[7] = locale_Category0;
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLException sQLException0 = new SQLException("(t\"_X_Kk", "", 3196);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(locale_Category1);
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("0}]5':Ii", (Transformer<? super String, ? extends String>) ifTransformer0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicateArray0[1]);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("I.X?(sr+OkwjPkgry#iK", "(t\"_X_Kk", 3196, sQLException0);
      nonePredicate0.evaluate(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (long)  (-4));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8Tp($N<c/y,3]gB", sQLIntegrityConstraintViolationException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.DefaultEquator", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "8Tp($N<c/y,3]gB", 1, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("v*r 'O{V!o^QN!o", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.functors.DefaultEquator", 1);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException(";h1:uM[enNxc{C", "]", 1);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException(sQLTransactionRollbackException6);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 1);
      Predicate<Object> predicate0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "v*r 'O{V!o^QN!o", 1);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) null, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Object, ?>) transformer1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) resettableListIterator0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(vector0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator1 = new ReverseListIterator<SQLDataException>(stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) reverseListIterator1, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.size(reverseListIterator0);
      IteratorUtils.contains((Iterator<SQLDataException>) reverseListIterator1, (Object) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("um\">-");
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLException sQLException0 = new SQLException("41pP,vg<?S>I_JhTs", "qNAP_H#", 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      // Undeclared exception!
//      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 0 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Properties>) objectArrayIterator0, (Closure<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("The predicate and transformer arrays must be the same size");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) nodeList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 786, 786);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("um\">-");
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockThrowable.getDefaultStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("um\">-", "&v[gc00$");
      Spliterator<Throwable> spliterator0 = sQLIntegrityConstraintViolationException1.spliterator();
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationException1.printStackTrace();
      IteratorUtils.getIterator(spliterator0);
      EmptyMapIterator.emptyMapIterator();
      EmptyMapIterator.emptyMapIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      OrderedMapIterator<Locale.Category, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) orderedMapIterator0, (Transformer<? super Locale.Category, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("um\">-");
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockThrowable.getDefaultStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("um\">-", "&v[gc00$");
      Spliterator<Throwable> spliterator0 = sQLIntegrityConstraintViolationException1.spliterator();
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationException1.printStackTrace();
      IteratorUtils.getIterator(spliterator0);
      EmptyMapIterator.emptyMapIterator();
      EmptyMapIterator.emptyMapIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&v[gc00$");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MapIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>, Predicate<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "Closure must not be null", (-7271), (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "Closure must not be null");
      sQLSyntaxErrorException0.printStackTrace();
      hashMap0.remove((Object) sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Closure must not be null", sQLRecoverableException0);
      hashMap0.put(sQLInvalidAuthorizationSpecException0, "Closure must not be null");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>) mapIterator0, (Transformer<? super PriorityQueue<SQLInvalidAuthorizationSpecException>, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-7271), 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<Locale.Category>) resettableListIterator0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(vector0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) reverseListIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) constantTransformer0);
      IteratorUtils.skippingIterator(iterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[29];
      locale_CategoryArray0[1] = locale_CategoryArray0[0];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) treeSet0);
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator1);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableListIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      OrderedMapIterator<Closure<Object>, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Closure<Object>, SQLIntegrityConstraintViolationException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Closure<Object>, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Closure<Object>>) orderedMapIterator1);
      ResettableListIterator<SQLTimeoutException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("um\">-");
      sQLFeatureNotSupportedException0.printStackTrace();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(arrayList0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) reverseListIterator0, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.size(orderedIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "um\">-");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("um\">-", "um\">-", 2, sQLFeatureNotSupportedException0);
      IteratorUtils.contains((Iterator<SQLDataException>) reverseListIterator0, (Object) sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer((-2732));
      IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      OrderedMapIterator<Closure<Object>, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Closure<Object>, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Closure<Object>>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Transformer<Object, SQLRecoverableException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
      IteratorUtils.isEmpty(mapIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.IfTransformer", "org.apache.commons.collections4.functors.IfTransformer", 0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.emptyIterator();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      int int0 = 0;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      IteratorUtils.arrayIterator(integerArray0, int0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator1, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[20];
      locale_CategoryArray0[1] = locale_CategoryArray0[0];
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      MapIterator<IIOMetadataNode, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) mapIterator0);
      EmptyMapIterator.emptyMapIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(";A");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode(";A");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode(";A");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OrderedMapIterator<SQLDataException, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, ComparatorPredicate.Criterion> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, ComparatorPredicate.Criterion>(orderedMapIterator0);
      MapIterator<SQLDataException, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, ComparatorPredicate.Criterion>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("R*R", ", ", 512);
      arrayDeque0.addLast(sQLTimeoutException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.size(listIterator0);
      IteratorUtils.toString((Iterator<PriorityQueue<SQLNonTransientException>>) null);
      IteratorUtils.emptyOrderedIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.IfTransformer");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator1, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      String string0 = "um\">-";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("um\">-");
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockThrowable.getDefaultStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("um\">-", "&v[gc00$");
      Spliterator<Throwable> spliterator0 = sQLIntegrityConstraintViolationException1.spliterator();
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationException1.printStackTrace();
      sQLFeatureNotSupportedException0.initCause(sQLIntegrityConstraintViolationException1);
      IteratorUtils.getIterator(spliterator0);
      MapIterator<IIOMetadataNode, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) mapIterator0);
      MapIterator<Integer, SQLClientInfoException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) mapIterator1, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("delimiter may not be null");
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransactionRollbackException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ListIterator<SQLTransientConnectionException> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<Locale.Category, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.Category, SQLClientInfoException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<Locale.Category>) mapIterator0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<SQLException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) null, (Predicate<? super SQLException>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) constantTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator2);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 2);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" IdH'");
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate.comparatorPredicate((Object) sQLIntegrityConstraintViolationException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, (-4665));
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLSyntaxErrorException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) andPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      predicateArray0[1] = predicate1;
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[2] = predicate2;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) allPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.IfTransformer");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator1, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (Throwable) null);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "", 100, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException((String) null, "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", (-1));
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      MockFile mockFile0 = new MockFile("Equator must not be null.");
      MockFile mockFile1 = new MockFile(mockFile0, "+:y$\"MFU");
      File file0 = MockFile.createTempFile("Entry does not exist: ", "L#@>7#c[; 9aDp@pz", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      sQLTransactionRollbackException3.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("#", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends Integer>) orderedMapIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1);
      IteratorUtils.unmodifiableListIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      String string0 = "MV/yK-;=P";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MV/yK-;=P");
      IteratorUtils.getIterator((Object) null);
      MapIterator<IIOMetadataNode, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) mapIterator0);
      MapIterator<Integer, SQLClientInfoException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) mapIterator1, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      MapIterator<DataTruncation, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLDataException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLDataException>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) mapIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.size(mapIterator0);
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) null, (-323));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -323
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, (-145));
      hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator1);
      IteratorUtils.size(mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Predicate<? super SQLTransactionRollbackException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, sQLTransientException0);
      sQLTransientException0.setNextException(sQLTransactionRollbackException0);
      SQLException sQLException0 = new SQLException("", "", 2133, sQLTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0, sQLException0);
      IteratorUtils.getIterator(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[20];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) treeSet0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qNAP_H#");
      SQLException sQLException0 = new SQLException("qNAP_H#", "qNAP_H#", 3196);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      treeSet0.retainAll(linkedHashSet0);
      nonePredicate0.evaluate(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<ArrayList<SQLTransactionRollbackException>, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<ArrayList<SQLTransactionRollbackException>>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "lM,\\uKi";
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.getElementsByTagNameNS("Transformer must not be null", string0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      String string0 = "";
      int int0 = (-4665);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, (-4665));
      hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object>(hashMap0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) iterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(")X02_P~UB1Zq,?Q/", (Equator<Object>) null);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicateArray0[0]);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      EmptyIterator.resettableEmptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate.comparatorPredicate((Object) onePredicate0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      ExceptionFactory.exceptionFactory();
      ExceptionClosure.exceptionClosure();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[0];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<Properties>) resettableIterator0;
      iteratorArray0[1] = (Iterator<Properties>) resettableIterator0;
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      iteratorArray0[2] = (Iterator<Properties>) listIterator0;
      OrderedMapIterator<Properties, StringTokenizer> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, StringTokenizer>(orderedMapIterator1);
      iteratorArray0[5] = (Iterator<Properties>) abstractOrderedMapIteratorDecorator0;
      iteratorArray0[4] = (Iterator<Properties>) resettableIterator0;
      iteratorArray0[5] = (Iterator<Properties>) resettableIterator0;
      iteratorArray0[6] = (Iterator<Properties>) resettableIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", (Equator<Object>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 6);
      MapIterator<IIOMetadataNode, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) mapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.size(listIterator0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>(")", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = new AbstractMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException>(mapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$VALUES");
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator0, (-914));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -914
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, (-4665));
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator2);
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" IdH'");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) " IdH'", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0, 1);
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(list0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) loopingListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      hashMap0.remove((Object) null, (Object) null);
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object>(hashMap0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) entrySetMapIterator0);
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) entrySetMapIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.size(listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 0);
      ResettableIterator<String> resettableIterator1 = new SingletonIterator<String>("");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("t x5{QknSWxH", (Class<?>[]) null, (Object[]) null);
      InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) singletonListIterator0, (Transformer<? super Locale.Category, String>) invokerTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 't x5{QknSWxH' on 'class java.util.Locale$Category' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("FilterListIterator.set(Object) is not supported.");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.contains((Iterator<ArrayDeque<Vector>>) zippingIterator0, (Object) zippingIterator0);
      String string0 = "'>8|kg^I9";
      int int0 = 388;
      HashMap<String, ClientInfoStatus> hashMap0 = null;
//      try {
        hashMap0 = new HashMap<String, ClientInfoStatus>(388, (-1138.9358F));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal load factor: -1138.9358
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[20];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      MapIterator<String, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) treeSet0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qNAP_H#");
      SQLException sQLException0 = new SQLException((String) null, (String) null, 3196);
      linkedHashSet0.contains(sQLException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<String>) mapIterator0, (Predicate<? super String>) nonePredicate0);
      treeSet0.retainAll(linkedHashSet0);
      int int0 = (-914);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) iterator0, (-914));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator2);
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 2);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>(" IdH'", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLDataException>) mapIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      String string0 = "bO;l";
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("bO;l");
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("");
      int int0 = 581;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 581);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[1] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      MapIterator<Locale.Category, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) mapIterator0, 2414L);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      IteratorUtils.getIterator(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "", sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("iwiO^Rs[H0!(Z~)~v", "iwiO^Rs[H0!(Z~)~v");
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException4;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException4;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException3;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException2;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) resettableIterator1, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends Integer>) orderedMapIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[1] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractHashedMap$KeySet");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractHashedMap$KeySet", "org.apache.commons.collections4.map.AbstractHashedMap$KeySet", 3597, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractHashedMap$KeySet", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      NotNullPredicate.notNullPredicate();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator2);
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "iMrF=}: ";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("iMrF=}: ");
      int int0 = 0;
      int int1 = (-1755);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator2, 0, (-1755));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) mapIterator1, (Iterator<? extends SQLException>) mapIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MV/yK-;=P");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate.comparatorPredicate((Object) zippingIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<SQLTransactionRollbackException> iterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      String string0 = "org.apache.commons.collections4.functors.EqualPredicate";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.EqualPredicate", ":,nB+H3._:%48t@'].");
      SQLDataException sQLDataException0 = new SQLDataException(":,nB+H3._:%48t@'].", "org.apache.commons.collections4.functors.EqualPredicate", (-1891), sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.EqualPredicate", sQLDataException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer("", ":,nB+H3._:%48t@'].", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("Y>\",q!P)d2*KV1snS", "");
      stringTokenizer1.hasMoreTokens();
      stringTokenizerArray0[1] = stringTokenizer1;
      int int0 = (-914);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, (-1891), (-914));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 843);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The predicate to call must not be null", "The predicate to call must not be null", (-4665));
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      ExceptionFactory.exceptionFactory();
      ExceptionClosure.exceptionClosure();
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.isEmpty(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MV/yK-;=P");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "MV/yK-;=P", 2624);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("MV/yK-;=P");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("MV/yK-;=P");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException3;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 2624);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MV/yK-;=P");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLIntegrityConstraintViolationException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.size(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator2);
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 2);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>(" IdH'", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLDataException>) mapIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      List<SQLDataException> list0 = new ArrayList<SQLDataException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 4);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", classArray0, iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) null, 383L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      IteratorUtils.getIterator(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "", sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("iwiO^Rs[H0!(Z~)~v", "iwiO^Rs[H0!(Z~)~v");
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException4;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException3;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException2;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) resettableIterator1, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends Integer>) orderedMapIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) listIteratorWrapper0, (Predicate<? super SQLWarning>) predicate0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator1);
      List<SQLDataException> list0 = new Stack<SQLDataException>();
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 2);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      Predicate<SQLWarning> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) predicate0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransactionRollbackException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) reverseListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) listIterator0, 1L);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      IteratorUtils.loopingListIterator(list0);
      sQLTransactionRollbackException0.printStackTrace();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Integer, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<Integer>) mapIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLIntegrityConstraintViolationException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      sQLTimeoutException0.setNextException(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("Collection must not be null", (String) null, sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-459));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator1;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0]);
      iteratorArray0[2] = iterator0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null", " ;Yg2xZ`", (-1653));
      ArrayIterator<SQLNonTransientConnectionException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLNonTransientConnectionException>(sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      int int0 = 0;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(resettableIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("iMrF=}: ");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) singletonIterator0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) list0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) singletonIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      String string0 = "org.apache.commons.collections4.functors.EqualPredicate";
      String string1 = ":,nB+H3._:%48t@']\\.";
      int int0 = (-1891);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.EqualPredicate", ":,nB+H3._:%48t@'].");
      SQLDataException sQLDataException0 = new SQLDataException(":,nB+H3._:%48t@'].", "org.apache.commons.collections4.functors.EqualPredicate", (-1891), sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.EqualPredicate", sQLDataException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-1891), (-1891));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      String string0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, (-4665));
      hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object>(hashMap0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) entrySetMapIterator0);
      IteratorUtils.toArray(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category.values();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) locale_Category0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) treeSet0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      SQLException sQLException0 = new SQLException((String) null, (String) null, 3159);
      linkedHashSet0.contains(sQLException0);
      treeSet0.retainAll(linkedHashSet0);
      int int0 = (-914);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) iterator0, (-914));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("QqW:?-OLf", "QqW:?-OLf", 482, sQLSyntaxErrorException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("!6K", "QqW:?-OLf");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableException1.setNextException(sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("!6K", "", 0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("QqW:?-OLf", "EO(hjhY:..>bZc9@G");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException((String) null, (String) null, 2366);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      sQLRecoverableException1.getStackTrace();
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("R<<^3[5Si@", "", 482, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.size(resettableIterator0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Transformer<SQLSyntaxErrorException, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      ArrayList<SQLIntegrityConstraintViolationException>[] arrayListArray0 = (ArrayList<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayList.class, 9);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList1 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList2 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[2] = arrayList2;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList3 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[3] = arrayList3;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList4 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[4] = arrayList4;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList5 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[5] = arrayList5;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList6 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[6] = arrayList6;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList7 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[7] = arrayList7;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList8 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[8] = arrayList8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(arrayListArray0, 2366, (-490));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("UGX9)-(cQj:~7eq-I", "UGX9)-(cQj:~7eq-I", 0, intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 2117, batchUpdateException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      Hashtable<Object, BatchUpdateException> hashtable0 = new Hashtable<Object, BatchUpdateException>();
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashtable0);
      Transformer<BatchUpdateException, BatchUpdateException> transformer1 = IfTransformer.ifTransformer((Predicate<? super BatchUpdateException>) predicate1, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object>(hashMap0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) entrySetMapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 125, sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(125, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertEquals(1, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertEquals(1, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(iterator0);
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(125, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("vIWh_lAN+E_#{", sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(125, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: vIWh_lAN+E_#{", sQLTimeoutException1.toString());
      assertEquals("vIWh_lAN+E_#{", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNotNull(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNull(sQLTimeoutException2.getMessage());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException2.toString());
      assertNotNull(sQLTimeoutException2);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("uuYe~wZ%", "vIWh_lAN+E_#{", sQLTimeoutException1);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(125, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: vIWh_lAN+E_#{", sQLTimeoutException1.toString());
      assertEquals("vIWh_lAN+E_#{", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: uuYe~wZ%", sQLTimeoutException3.toString());
      assertEquals("vIWh_lAN+E_#{", sQLTimeoutException3.getSQLState());
      assertEquals("uuYe~wZ%", sQLTimeoutException3.getMessage());
      assertNotNull(sQLTimeoutException3);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, "I", sQLWarning0);
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException4.toString());
      assertNull(sQLTimeoutException4.getMessage());
      assertEquals("I", sQLTimeoutException4.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLTimeoutException4);
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException((String) null, "I", 125, sQLTimeoutException4);
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException4.toString());
      assertNull(sQLTimeoutException4.getMessage());
      assertEquals("I", sQLTimeoutException4.getSQLState());
      assertEquals(125, sQLTimeoutException5.getErrorCode());
      assertEquals("I", sQLTimeoutException5.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException5.toString());
      assertNull(sQLTimeoutException5.getMessage());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLTimeoutException5);
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException4));
      
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("Array class must not be null", "PrototypeCloneFactory: The clone method must exist and be public ", sQLTimeoutException4);
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException4.toString());
      assertNull(sQLTimeoutException4.getMessage());
      assertEquals("I", sQLTimeoutException4.getSQLState());
      assertEquals("PrototypeCloneFactory: The clone method must exist and be public ", sQLTimeoutException6.getSQLState());
      assertEquals("Array class must not be null", sQLTimeoutException6.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Array class must not be null", sQLTimeoutException6.toString());
      assertEquals(0, sQLTimeoutException6.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLTimeoutException6);
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException5));
      
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("I");
      assertNull(sQLTimeoutException7.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: I", sQLTimeoutException7.toString());
      assertEquals(0, sQLTimeoutException7.getErrorCode());
      assertEquals("I", sQLTimeoutException7.getMessage());
      assertNotNull(sQLTimeoutException7);
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException6));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException2));
      
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException("", ".pV/||uWYxs3", sQLWarning0);
      assertEquals(0, sQLTimeoutException8.getErrorCode());
      assertEquals(".pV/||uWYxs3", sQLTimeoutException8.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException8.toString());
      assertEquals("", sQLTimeoutException8.getMessage());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLTimeoutException8);
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException7));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException6));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException5));
      
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(9, sQLTimeoutExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, (Iterator<? extends SQLTransientException>) resettableListIterator0, (Iterator<? extends SQLTransientException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(9, sQLTimeoutExceptionArray0.length);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(i5", "(i5", 1073741824, (int[]) null, sQLTransientConnectionException0);
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: (i5", batchUpdateException0.toString());
      assertEquals(1073741824, batchUpdateException0.getErrorCode());
      assertEquals("(i5", batchUpdateException0.getMessage());
      assertEquals("(i5", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      sQLExceptionArray0[0] = (SQLException) batchUpdateException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.TransformerPredicate", sQLExceptionArray0[0]);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.TransformerPredicate", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.TransformerPredicate", sQLSyntaxErrorException0.toString());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLExceptionArray0[1] = (SQLException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException0 = new SQLDataException("(i5", (String) null, 1073741824, sQLExceptionArray0[0]);
      assertEquals("java.sql.SQLDataException: (i5", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("(i5", sQLDataException0.getMessage());
      assertEquals(1073741824, sQLDataException0.getErrorCode());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(sQLDataException0);
      
      sQLExceptionArray0[2] = (SQLException) sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.TransformerPredicate", "~f4N", 1073741824, sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.TransformerPredicate", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.TransformerPredicate", sQLSyntaxErrorException0.toString());
      assertEquals(1073741824, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.TransformerPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals("~f4N", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.TransformerPredicate", sQLTransactionRollbackException0.toString());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLExceptionArray0[3] = (SQLException) sQLTransactionRollbackException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "R.,/W", 1073741824, batchUpdateException0);
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: (i5", batchUpdateException0.toString());
      assertEquals(1073741824, batchUpdateException0.getErrorCode());
      assertEquals("(i5", batchUpdateException0.getMessage());
      assertEquals("(i5", batchUpdateException0.getSQLState());
      assertEquals("R.,/W", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1073741824, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLExceptionArray0[4] = (SQLException) sQLFeatureNotSupportedException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (int[]) null, sQLExceptionArray0[1]);
      assertEquals("", batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      sQLExceptionArray0[5] = (SQLException) batchUpdateException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, sQLExceptionArray0[3]);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLExceptionArray0[6] = (SQLException) sQLFeatureNotSupportedException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Entry does not exist: ");
      assertEquals("Entry does not exist: ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Entry does not exist: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLExceptionArray0[7] = (SQLException) sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      
      ListIterator<SQLException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) objectArrayListIterator0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ResettableIterator<Vector<BatchUpdateException>> resettableIterator0 = IteratorUtils.singletonIterator((Vector<BatchUpdateException>) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(resettableIterator0);
      
      List<Vector<BatchUpdateException>> list0 = IteratorUtils.toList((Iterator<? extends Vector<BatchUpdateException>>) resettableIterator0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      String string0 = "Transformer must not be null";
      String string1 = ":Lgt{Y<j4p!j<)o!tU";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 9;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":Lgt{Y<j4p!j<)o!tU", ":Lgt{Y<j4p!j<)o!tU", 9);
      assertEquals(9, sQLRecoverableException0.getErrorCode());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.getMessage());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLRecoverableException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(9, sQLRecoverableException0.getErrorCode());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.getMessage());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      sQLClientInfoException0.setNextException(sQLRecoverableException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(9, sQLRecoverableException0.getErrorCode());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.getMessage());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformer must not be null", ":Lgt{Y<j4p!j<)o!tU", sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(9, sQLRecoverableException0.getErrorCode());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.getMessage());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLRecoverableException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLRecoverableException: :Lgt{Y<j4p!j<)o!tU", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals(":Lgt{Y<j4p!j<)o!tU", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Transformer must not be null", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getStackTrace();
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLFeatureNotSupportedException0.initCause(sQLIntegrityConstraintViolationException0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      MapIterator<IIOMetadataNode, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) mapIterator0);
      MapIterator<Integer, SQLClientInfoException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) mapIterator1, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[1] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) allPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "", 1434);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
